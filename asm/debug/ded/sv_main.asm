
./build/debug-linux-x86_64_-_obj/ded/sv_main.o:     file format elf64-x86-64


Disassembly of section .text:

0000000000000000 <SV_ExpandNewlines>:
SV_ExpandNewlines():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:81
SV_ExpandNewlines

Converts newlines to "\n" so a line prints nicer
===============
*/
static const char *SV_ExpandNewlines( const char *in ) {
       0:	55                   	push   rbp
       1:	48 89 e5             	mov    rbp,rsp
       4:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:85
	static char string[MAX_STRING_CHARS*2];
	int		l;

	l = 0;
       8:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:86
	while ( *in && l < sizeof(string) - 3 ) {
       f:	eb 5a                	jmp    6b <SV_ExpandNewlines+0x6b>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:87
		if ( *in == '\n' ) {
      11:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
      15:	0f b6 00             	movzx  eax,BYTE PTR [rax]
      18:	3c 0a                	cmp    al,0xa
      1a:	75 2e                	jne    4a <SV_ExpandNewlines+0x4a>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:88
			string[l++] = '\\';
      1c:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
      1f:	8d 50 01             	lea    edx,[rax+0x1]
      22:	89 55 fc             	mov    DWORD PTR [rbp-0x4],edx
      25:	48 98                	cdqe   
      27:	48 8d 15 00 00 00 00 	lea    rdx,[rip+0x0]        # 2e <SV_ExpandNewlines+0x2e>
      2e:	c6 04 10 5c          	mov    BYTE PTR [rax+rdx*1],0x5c
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:89
			string[l++] = 'n';
      32:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
      35:	8d 50 01             	lea    edx,[rax+0x1]
      38:	89 55 fc             	mov    DWORD PTR [rbp-0x4],edx
      3b:	48 98                	cdqe   
      3d:	48 8d 15 00 00 00 00 	lea    rdx,[rip+0x0]        # 44 <SV_ExpandNewlines+0x44>
      44:	c6 04 10 6e          	mov    BYTE PTR [rax+rdx*1],0x6e
      48:	eb 1c                	jmp    66 <SV_ExpandNewlines+0x66>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:91
		} else {
			string[l++] = *in;
      4a:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
      4d:	8d 50 01             	lea    edx,[rax+0x1]
      50:	89 55 fc             	mov    DWORD PTR [rbp-0x4],edx
      53:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
      57:	0f b6 12             	movzx  edx,BYTE PTR [rdx]
      5a:	48 98                	cdqe   
      5c:	48 8d 0d 00 00 00 00 	lea    rcx,[rip+0x0]        # 63 <SV_ExpandNewlines+0x63>
      63:	88 14 08             	mov    BYTE PTR [rax+rcx*1],dl
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:93
		}
		in++;
      66:	48 83 45 e8 01       	add    QWORD PTR [rbp-0x18],0x1
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:86
	while ( *in && l < sizeof(string) - 3 ) {
      6b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
      6f:	0f b6 00             	movzx  eax,BYTE PTR [rax]
      72:	84 c0                	test   al,al
      74:	74 0a                	je     80 <SV_ExpandNewlines+0x80>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:86 (discriminator 1)
      76:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
      79:	3d fc 07 00 00       	cmp    eax,0x7fc
      7e:	76 91                	jbe    11 <SV_ExpandNewlines+0x11>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:95
	}
	string[l] = '\0';
      80:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
      83:	48 98                	cdqe   
      85:	48 8d 15 00 00 00 00 	lea    rdx,[rip+0x0]        # 8c <SV_ExpandNewlines+0x8c>
      8c:	c6 04 10 00          	mov    BYTE PTR [rax+rdx*1],0x0
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:97

	return string;
      90:	48 8d 05 00 00 00 00 	lea    rax,[rip+0x0]        # 97 <SV_ExpandNewlines+0x97>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:98
}
      97:	5d                   	pop    rbp
      98:	c3                   	ret    

0000000000000099 <SV_AddServerCommand>:
SV_AddServerCommand():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:142

The given command will be transmitted to the client, and is guaranteed to
not have future snapshot_t executed before it is executed
======================
*/
void SV_AddServerCommand( client_t *client, const char *cmd ) {
      99:	55                   	push   rbp
      9a:	48 89 e5             	mov    rbp,rsp
      9d:	48 83 ec 20          	sub    rsp,0x20
      a1:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
      a5:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:152
//	if ( SV_ReplacePendingServerCommands( client, cmd ) ) {
//		return;
//	}

	// do not send commands until the gamestate has been sent
	if ( client->state < CS_PRIMED )
      a9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
      ad:	8b 00                	mov    eax,DWORD PTR [rax]
      af:	83 f8 02             	cmp    eax,0x2
      b2:	0f 86 32 01 00 00    	jbe    1ea <SV_AddServerCommand+0x151>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:155
		return;

	client->reliableSequence++;
      b8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
      bc:	8b 80 04 04 01 00    	mov    eax,DWORD PTR [rax+0x10404]
      c2:	8d 50 01             	lea    edx,[rax+0x1]
      c5:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
      c9:	89 90 04 04 01 00    	mov    DWORD PTR [rax+0x10404],edx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:160
	// if we would be losing an old command that hasn't been acknowledged,
	// we must drop the connection
	// we check == instead of >= so a broadcast print added by SV_DropClient()
	// doesn't cause a recursive drop client
	if ( client->reliableSequence - client->reliableAcknowledge == MAX_RELIABLE_COMMANDS + 1 ) {
      cf:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
      d3:	8b 90 04 04 01 00    	mov    edx,DWORD PTR [rax+0x10404]
      d9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
      dd:	8b 80 08 04 01 00    	mov    eax,DWORD PTR [rax+0x10408]
      e3:	29 c2                	sub    edx,eax
      e5:	89 d0                	mov    eax,edx
      e7:	83 f8 41             	cmp    eax,0x41
      ea:	0f 85 b9 00 00 00    	jne    1a9 <SV_AddServerCommand+0x110>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:161
		Com_Printf( "===== pending server commands =====\n" );
      f0:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # f7 <SV_AddServerCommand+0x5e>
      f7:	b8 00 00 00 00       	mov    eax,0x0
      fc:	e8 00 00 00 00       	call   101 <SV_AddServerCommand+0x68>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:162
		n = client->reliableSequence - client->reliableAcknowledge;
     101:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
     105:	8b 90 04 04 01 00    	mov    edx,DWORD PTR [rax+0x10404]
     10b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
     10f:	8b 80 08 04 01 00    	mov    eax,DWORD PTR [rax+0x10408]
     115:	29 c2                	sub    edx,eax
     117:	89 d0                	mov    eax,edx
     119:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:163
		for ( i = 0; i < n; i++ ) {
     11c:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
     123:	eb 4d                	jmp    172 <SV_AddServerCommand+0xd9>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:164 (discriminator 3)
			const int index = client->reliableAcknowledge + 1 + i;
     125:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
     129:	8b 80 08 04 01 00    	mov    eax,DWORD PTR [rax+0x10408]
     12f:	8d 50 01             	lea    edx,[rax+0x1]
     132:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
     135:	01 d0                	add    eax,edx
     137:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:165 (discriminator 3)
			Com_Printf( "cmd %5d: %s\n", i, client->reliableCommands[ index & ( MAX_RELIABLE_COMMANDS - 1 ) ] );
     13a:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
     13d:	83 e0 3f             	and    eax,0x3f
     140:	48 98                	cdqe   
     142:	48 83 c0 01          	add    rax,0x1
     146:	48 c1 e0 0a          	shl    rax,0xa
     14a:	48 89 c2             	mov    rdx,rax
     14d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
     151:	48 01 d0             	add    rax,rdx
     154:	48 8d 50 04          	lea    rdx,[rax+0x4]
     158:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
     15b:	89 c6                	mov    esi,eax
     15d:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 164 <SV_AddServerCommand+0xcb>
     164:	b8 00 00 00 00       	mov    eax,0x0
     169:	e8 00 00 00 00       	call   16e <SV_AddServerCommand+0xd5>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:163 (discriminator 3)
		for ( i = 0; i < n; i++ ) {
     16e:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:163 (discriminator 1)
     172:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
     175:	3b 45 f8             	cmp    eax,DWORD PTR [rbp-0x8]
     178:	7c ab                	jl     125 <SV_AddServerCommand+0x8c>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:167
		}
		Com_Printf( "cmd %5d: %s\n", i, cmd );
     17a:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
     17e:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
     181:	89 c6                	mov    esi,eax
     183:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 18a <SV_AddServerCommand+0xf1>
     18a:	b8 00 00 00 00       	mov    eax,0x0
     18f:	e8 00 00 00 00       	call   194 <SV_AddServerCommand+0xfb>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:168
		SV_DropClient( client, "Server command overflow" );
     194:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
     198:	48 8d 35 00 00 00 00 	lea    rsi,[rip+0x0]        # 19f <SV_AddServerCommand+0x106>
     19f:	48 89 c7             	mov    rdi,rax
     1a2:	e8 00 00 00 00       	call   1a7 <SV_AddServerCommand+0x10e>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:169
		return;
     1a7:	eb 42                	jmp    1eb <SV_AddServerCommand+0x152>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:171
	}
	index = client->reliableSequence & ( MAX_RELIABLE_COMMANDS - 1 );
     1a9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
     1ad:	8b 80 04 04 01 00    	mov    eax,DWORD PTR [rax+0x10404]
     1b3:	83 e0 3f             	and    eax,0x3f
     1b6:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:172
	Q_strncpyz( client->reliableCommands[ index ], cmd, sizeof( client->reliableCommands[ index ] ) );
     1b9:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
     1bc:	48 98                	cdqe   
     1be:	48 83 c0 01          	add    rax,0x1
     1c2:	48 c1 e0 0a          	shl    rax,0xa
     1c6:	48 89 c2             	mov    rdx,rax
     1c9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
     1cd:	48 01 d0             	add    rax,rdx
     1d0:	48 8d 48 04          	lea    rcx,[rax+0x4]
     1d4:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
     1d8:	ba 00 04 00 00       	mov    edx,0x400
     1dd:	48 89 c6             	mov    rsi,rax
     1e0:	48 89 cf             	mov    rdi,rcx
     1e3:	e8 00 00 00 00       	call   1e8 <SV_AddServerCommand+0x14f>
     1e8:	eb 01                	jmp    1eb <SV_AddServerCommand+0x152>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:153
		return;
     1ea:	90                   	nop
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:173
}
     1eb:	c9                   	leave  
     1ec:	c3                   	ret    

00000000000001ed <SV_SendServerCommand>:
SV_SendServerCommand():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:185
Sends a reliable command string to be interpreted by 
the client game module: "cp", "print", "chat", etc
A NULL client will broadcast to all clients
=================
*/
void QDECL SV_SendServerCommand( client_t *cl, const char *fmt, ... ) {
     1ed:	55                   	push   rbp
     1ee:	48 89 e5             	mov    rbp,rsp
     1f1:	48 81 ec 70 05 00 00 	sub    rsp,0x570
     1f8:	48 89 bd 98 fa ff ff 	mov    QWORD PTR [rbp-0x568],rdi
     1ff:	48 89 b5 90 fa ff ff 	mov    QWORD PTR [rbp-0x570],rsi
     206:	48 89 95 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rdx
     20d:	48 89 8d 68 ff ff ff 	mov    QWORD PTR [rbp-0x98],rcx
     214:	4c 89 85 70 ff ff ff 	mov    QWORD PTR [rbp-0x90],r8
     21b:	4c 89 8d 78 ff ff ff 	mov    QWORD PTR [rbp-0x88],r9
     222:	84 c0                	test   al,al
     224:	74 20                	je     246 <SV_SendServerCommand+0x59>
     226:	0f 29 45 80          	movaps XMMWORD PTR [rbp-0x80],xmm0
     22a:	0f 29 4d 90          	movaps XMMWORD PTR [rbp-0x70],xmm1
     22e:	0f 29 55 a0          	movaps XMMWORD PTR [rbp-0x60],xmm2
     232:	0f 29 5d b0          	movaps XMMWORD PTR [rbp-0x50],xmm3
     236:	0f 29 65 c0          	movaps XMMWORD PTR [rbp-0x40],xmm4
     23a:	0f 29 6d d0          	movaps XMMWORD PTR [rbp-0x30],xmm5
     23e:	0f 29 75 e0          	movaps XMMWORD PTR [rbp-0x20],xmm6
     242:	0f 29 7d f0          	movaps XMMWORD PTR [rbp-0x10],xmm7
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:191
	va_list		argptr;
	char		message[MAX_STRING_CHARS+128]; // slightly larger than allowed, to detect overflows
	client_t	*client;
	int			j, len;
	
	va_start( argptr, fmt );
     246:	c7 85 28 ff ff ff 10 	mov    DWORD PTR [rbp-0xd8],0x10
     24d:	00 00 00 
     250:	c7 85 2c ff ff ff 30 	mov    DWORD PTR [rbp-0xd4],0x30
     257:	00 00 00 
     25a:	48 8d 45 10          	lea    rax,[rbp+0x10]
     25e:	48 89 85 30 ff ff ff 	mov    QWORD PTR [rbp-0xd0],rax
     265:	48 8d 85 50 ff ff ff 	lea    rax,[rbp-0xb0]
     26c:	48 89 85 38 ff ff ff 	mov    QWORD PTR [rbp-0xc8],rax
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:192
	len = Q_vsnprintf( message, sizeof( message ), fmt, argptr );
     273:	48 8d 8d 28 ff ff ff 	lea    rcx,[rbp-0xd8]
     27a:	48 8b 95 90 fa ff ff 	mov    rdx,QWORD PTR [rbp-0x570]
     281:	48 8d 85 a0 fa ff ff 	lea    rax,[rbp-0x560]
     288:	be 80 04 00 00       	mov    esi,0x480
     28d:	48 89 c7             	mov    rdi,rax
     290:	e8 00 00 00 00       	call   295 <SV_SendServerCommand+0xa8>
     295:	89 85 40 ff ff ff    	mov    DWORD PTR [rbp-0xc0],eax
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:195
	va_end( argptr );

	if ( cl != NULL ) {
     29b:	48 83 bd 98 fa ff ff 	cmp    QWORD PTR [rbp-0x568],0x0
     2a2:	00 
     2a3:	74 3f                	je     2e4 <SV_SendServerCommand+0xf7>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:198
		// outdated clients can't properly decode 1023-chars-long strings
		// http://aluigi.altervista.org/adv/q3msgboom-adv.txt
		if ( len <= 1022 || cl->longstr ) {
     2a5:	81 bd 40 ff ff ff fe 	cmp    DWORD PTR [rbp-0xc0],0x3fe
     2ac:	03 00 00 
     2af:	7e 15                	jle    2c6 <SV_SendServerCommand+0xd9>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:198 (discriminator 1)
     2b1:	48 8b 85 98 fa ff ff 	mov    rax,QWORD PTR [rbp-0x568]
     2b8:	8b 80 c8 dd 02 00    	mov    eax,DWORD PTR [rax+0x2ddc8]
     2be:	85 c0                	test   eax,eax
     2c0:	0f 84 e4 00 00 00    	je     3aa <SV_SendServerCommand+0x1bd>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:199
			SV_AddServerCommand( cl, message );
     2c6:	48 8d 95 a0 fa ff ff 	lea    rdx,[rbp-0x560]
     2cd:	48 8b 85 98 fa ff ff 	mov    rax,QWORD PTR [rbp-0x568]
     2d4:	48 89 d6             	mov    rsi,rdx
     2d7:	48 89 c7             	mov    rdi,rax
     2da:	e8 00 00 00 00       	call   2df <SV_SendServerCommand+0xf2>
     2df:	e9 c7 00 00 00       	jmp    3ab <SV_SendServerCommand+0x1be>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:205
		}
		return;
	}

	// hack to echo broadcast prints to console
	if ( com_dedicated->integer && !strncmp( message, "print", 5 ) ) {
     2e4:	48 8b 05 00 00 00 00 	mov    rax,QWORD PTR [rip+0x0]        # 2eb <SV_SendServerCommand+0xfe>
     2eb:	8b 40 30             	mov    eax,DWORD PTR [rax+0x30]
     2ee:	85 c0                	test   eax,eax
     2f0:	74 42                	je     334 <SV_SendServerCommand+0x147>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:205 (discriminator 1)
     2f2:	48 8d 85 a0 fa ff ff 	lea    rax,[rbp-0x560]
     2f9:	ba 05 00 00 00       	mov    edx,0x5
     2fe:	48 8d 35 00 00 00 00 	lea    rsi,[rip+0x0]        # 305 <SV_SendServerCommand+0x118>
     305:	48 89 c7             	mov    rdi,rax
     308:	e8 00 00 00 00       	call   30d <SV_SendServerCommand+0x120>
     30d:	85 c0                	test   eax,eax
     30f:	75 23                	jne    334 <SV_SendServerCommand+0x147>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:206
		Com_Printf( "broadcast: %s\n", SV_ExpandNewlines( message ) );
     311:	48 8d 85 a0 fa ff ff 	lea    rax,[rbp-0x560]
     318:	48 89 c7             	mov    rdi,rax
     31b:	e8 e0 fc ff ff       	call   0 <SV_ExpandNewlines>
     320:	48 89 c6             	mov    rsi,rax
     323:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 32a <SV_SendServerCommand+0x13d>
     32a:	b8 00 00 00 00       	mov    eax,0x0
     32f:	e8 00 00 00 00       	call   334 <SV_SendServerCommand+0x147>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:210
	}

	// send the data to all relevant clients
	for ( j = 0, client = svs.clients; j < sv_maxclients->integer ; j++, client++ ) {
     334:	c7 85 44 ff ff ff 00 	mov    DWORD PTR [rbp-0xbc],0x0
     33b:	00 00 00 
     33e:	48 8b 05 00 00 00 00 	mov    rax,QWORD PTR [rip+0x0]        # 345 <SV_SendServerCommand+0x158>
     345:	48 89 85 48 ff ff ff 	mov    QWORD PTR [rbp-0xb8],rax
     34c:	eb 48                	jmp    396 <SV_SendServerCommand+0x1a9>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:211
		if ( len <= 1022 || client->longstr ) {
     34e:	81 bd 40 ff ff ff fe 	cmp    DWORD PTR [rbp-0xc0],0x3fe
     355:	03 00 00 
     358:	7e 11                	jle    36b <SV_SendServerCommand+0x17e>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:211 (discriminator 1)
     35a:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
     361:	8b 80 c8 dd 02 00    	mov    eax,DWORD PTR [rax+0x2ddc8]
     367:	85 c0                	test   eax,eax
     369:	74 19                	je     384 <SV_SendServerCommand+0x197>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:212
			SV_AddServerCommand( client, message );
     36b:	48 8d 95 a0 fa ff ff 	lea    rdx,[rbp-0x560]
     372:	48 8b 85 48 ff ff ff 	mov    rax,QWORD PTR [rbp-0xb8]
     379:	48 89 d6             	mov    rsi,rdx
     37c:	48 89 c7             	mov    rdi,rax
     37f:	e8 00 00 00 00       	call   384 <SV_SendServerCommand+0x197>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:210 (discriminator 2)
	for ( j = 0, client = svs.clients; j < sv_maxclients->integer ; j++, client++ ) {
     384:	83 85 44 ff ff ff 01 	add    DWORD PTR [rbp-0xbc],0x1
     38b:	48 81 85 48 ff ff ff 	add    QWORD PTR [rbp-0xb8],0x2dde0
     392:	e0 dd 02 00 
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:210 (discriminator 1)
     396:	48 8b 05 00 00 00 00 	mov    rax,QWORD PTR [rip+0x0]        # 39d <SV_SendServerCommand+0x1b0>
     39d:	8b 40 30             	mov    eax,DWORD PTR [rax+0x30]
     3a0:	39 85 44 ff ff ff    	cmp    DWORD PTR [rbp-0xbc],eax
     3a6:	7c a6                	jl     34e <SV_SendServerCommand+0x161>
     3a8:	eb 01                	jmp    3ab <SV_SendServerCommand+0x1be>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:201
		return;
     3aa:	90                   	nop
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:215
		}
	}
}
     3ab:	c9                   	leave  
     3ac:	c3                   	ret    

00000000000003ad <SV_MasterHeartbeat>:
SV_MasterHeartbeat():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:240
================
*/
#define	HEARTBEAT_MSEC	(300*1000)
#define	MASTERDNS_MSEC	(24*60*60*1000)
static void SV_MasterHeartbeat( const char *message )
{
     3ad:	55                   	push   rbp
     3ae:	48 89 e5             	mov    rbp,rsp
     3b1:	48 83 ec 20          	sub    rsp,0x20
     3b5:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:246
	static netadr_t	adr[MAX_MASTER_SERVERS][2]; // [2] for v4 and v6 address for the same address string.
	int			i;
	int			res;
	int			netenabled;

	netenabled = Cvar_VariableIntegerValue("net_enabled");
     3b9:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 3c0 <SV_MasterHeartbeat+0x13>
     3c0:	e8 00 00 00 00       	call   3c5 <SV_MasterHeartbeat+0x18>
     3c5:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:249

	// "dedicated 1" is for lan play, "dedicated 2" is for inet public play
	if (!com_dedicated || com_dedicated->integer != 2 || !(netenabled & (NET_ENABLEV4 | NET_ENABLEV6)))
     3c8:	48 8b 05 00 00 00 00 	mov    rax,QWORD PTR [rip+0x0]        # 3cf <SV_MasterHeartbeat+0x22>
     3cf:	48 85 c0             	test   rax,rax
     3d2:	0f 84 9e 04 00 00    	je     876 <SV_MasterHeartbeat+0x4c9>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:249 (discriminator 1)
     3d8:	48 8b 05 00 00 00 00 	mov    rax,QWORD PTR [rip+0x0]        # 3df <SV_MasterHeartbeat+0x32>
     3df:	8b 40 30             	mov    eax,DWORD PTR [rax+0x30]
     3e2:	83 f8 02             	cmp    eax,0x2
     3e5:	0f 85 8b 04 00 00    	jne    876 <SV_MasterHeartbeat+0x4c9>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:249 (discriminator 2)
     3eb:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
     3ee:	83 e0 03             	and    eax,0x3
     3f1:	85 c0                	test   eax,eax
     3f3:	0f 84 7d 04 00 00    	je     876 <SV_MasterHeartbeat+0x4c9>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:253
		return;		// only dedicated servers send heartbeats

	// if not time yet, don't send anything
	if ( svs.nextHeartbeatTime - svs.time > 0 )
     3f9:	8b 15 00 00 00 00    	mov    edx,DWORD PTR [rip+0x0]        # 3ff <SV_MasterHeartbeat+0x52>
     3ff:	8b 05 00 00 00 00    	mov    eax,DWORD PTR [rip+0x0]        # 405 <SV_MasterHeartbeat+0x58>
     405:	29 c2                	sub    edx,eax
     407:	89 d0                	mov    eax,edx
     409:	85 c0                	test   eax,eax
     40b:	0f 8f 68 04 00 00    	jg     879 <SV_MasterHeartbeat+0x4cc>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:256
		return;

	svs.nextHeartbeatTime = svs.time + HEARTBEAT_MSEC;
     411:	8b 05 00 00 00 00    	mov    eax,DWORD PTR [rip+0x0]        # 417 <SV_MasterHeartbeat+0x6a>
     417:	05 e0 93 04 00       	add    eax,0x493e0
     41c:	89 05 00 00 00 00    	mov    DWORD PTR [rip+0x0],eax        # 422 <SV_MasterHeartbeat+0x75>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:259

	// send to group masters
	for (i = 0; i < MAX_MASTER_SERVERS; i++)
     422:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
     429:	e9 3c 04 00 00       	jmp    86a <SV_MasterHeartbeat+0x4bd>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:261
	{
		if(!sv_master[i]->string[0])
     42e:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
     431:	48 98                	cdqe   
     433:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
     43a:	00 
     43b:	48 8d 05 00 00 00 00 	lea    rax,[rip+0x0]        # 442 <SV_MasterHeartbeat+0x95>
     442:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
     446:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
     44a:	0f b6 00             	movzx  eax,BYTE PTR [rax]
     44d:	84 c0                	test   al,al
     44f:	0f 84 0d 04 00 00    	je     862 <SV_MasterHeartbeat+0x4b5>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:266
			continue;

		// see if we haven't already resolved the name or if it's been over 24 hours
		// resolving usually causes hitches on win95, so only do it when needed
		if ( sv_master[i]->modified || svs.time - svs.masterResolveTime[i] > 0 )
     455:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
     458:	48 98                	cdqe   
     45a:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
     461:	00 
     462:	48 8d 05 00 00 00 00 	lea    rax,[rip+0x0]        # 469 <SV_MasterHeartbeat+0xbc>
     469:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
     46d:	8b 40 24             	mov    eax,DWORD PTR [rax+0x24]
     470:	85 c0                	test   eax,eax
     472:	75 2d                	jne    4a1 <SV_MasterHeartbeat+0xf4>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:266 (discriminator 1)
     474:	8b 15 00 00 00 00    	mov    edx,DWORD PTR [rip+0x0]        # 47a <SV_MasterHeartbeat+0xcd>
     47a:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
     47d:	48 98                	cdqe   
     47f:	48 83 c0 14          	add    rax,0x14
     483:	48 8d 0c 85 00 00 00 	lea    rcx,[rax*4+0x0]
     48a:	00 
     48b:	48 8d 05 00 00 00 00 	lea    rax,[rip+0x0]        # 492 <SV_MasterHeartbeat+0xe5>
     492:	8b 04 01             	mov    eax,DWORD PTR [rcx+rax*1]
     495:	29 c2                	sub    edx,eax
     497:	89 d0                	mov    eax,edx
     499:	85 c0                	test   eax,eax
     49b:	0f 8e ba 02 00 00    	jle    75b <SV_MasterHeartbeat+0x3ae>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:268
		{
			sv_master[i]->modified = qfalse;
     4a1:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
     4a4:	48 98                	cdqe   
     4a6:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
     4ad:	00 
     4ae:	48 8d 05 00 00 00 00 	lea    rax,[rip+0x0]        # 4b5 <SV_MasterHeartbeat+0x108>
     4b5:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
     4b9:	c7 40 24 00 00 00 00 	mov    DWORD PTR [rax+0x24],0x0
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:269
			svs.masterResolveTime[i] = svs.time + MASTERDNS_MSEC;
     4c0:	8b 05 00 00 00 00    	mov    eax,DWORD PTR [rip+0x0]        # 4c6 <SV_MasterHeartbeat+0x119>
     4c6:	8d 88 00 5c 26 05    	lea    ecx,[rax+0x5265c00]
     4cc:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
     4cf:	48 98                	cdqe   
     4d1:	48 83 c0 14          	add    rax,0x14
     4d5:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
     4dc:	00 
     4dd:	48 8d 05 00 00 00 00 	lea    rax,[rip+0x0]        # 4e4 <SV_MasterHeartbeat+0x137>
     4e4:	89 0c 02             	mov    DWORD PTR [rdx+rax*1],ecx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:271
			
			if(netenabled & NET_ENABLEV4)
     4e7:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
     4ea:	83 e0 01             	and    eax,0x1
     4ed:	85 c0                	test   eax,eax
     4ef:	0f 84 2b 01 00 00    	je     620 <SV_MasterHeartbeat+0x273>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:273
			{
				Com_Printf("Resolving %s (IPv4)\n", sv_master[i]->string);
     4f5:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
     4f8:	48 98                	cdqe   
     4fa:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
     501:	00 
     502:	48 8d 05 00 00 00 00 	lea    rax,[rip+0x0]        # 509 <SV_MasterHeartbeat+0x15c>
     509:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
     50d:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
     511:	48 89 c6             	mov    rsi,rax
     514:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 51b <SV_MasterHeartbeat+0x16e>
     51b:	b8 00 00 00 00       	mov    eax,0x0
     520:	e8 00 00 00 00       	call   525 <SV_MasterHeartbeat+0x178>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:274
				res = NET_StringToAdr(sv_master[i]->string, &adr[i][0], NA_IP);
     525:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
     528:	48 98                	cdqe   
     52a:	48 c1 e0 06          	shl    rax,0x6
     52e:	48 89 c2             	mov    rdx,rax
     531:	48 8d 05 00 00 00 00 	lea    rax,[rip+0x0]        # 538 <SV_MasterHeartbeat+0x18b>
     538:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
     53c:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
     53f:	48 98                	cdqe   
     541:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
     548:	00 
     549:	48 8d 05 00 00 00 00 	lea    rax,[rip+0x0]        # 550 <SV_MasterHeartbeat+0x1a3>
     550:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
     554:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
     558:	ba 04 00 00 00       	mov    edx,0x4
     55d:	48 89 ce             	mov    rsi,rcx
     560:	48 89 c7             	mov    rdi,rax
     563:	e8 00 00 00 00       	call   568 <SV_MasterHeartbeat+0x1bb>
     568:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:276

				if(res == 2)
     56b:	83 7d f4 02          	cmp    DWORD PTR [rbp-0xc],0x2
     56f:	75 23                	jne    594 <SV_MasterHeartbeat+0x1e7>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:279
				{
					// if no port was specified, use the default master port
					adr[i][0].port = BigShort(PORT_MASTER);
     571:	bf 2e 6d 00 00       	mov    edi,0x6d2e
     576:	e8 00 00 00 00       	call   57b <SV_MasterHeartbeat+0x1ce>
     57b:	89 c1                	mov    ecx,eax
     57d:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
     580:	48 98                	cdqe   
     582:	48 c1 e0 06          	shl    rax,0x6
     586:	48 89 c2             	mov    rdx,rax
     589:	48 8d 05 00 00 00 00 	lea    rax,[rip+0x0]        # 590 <SV_MasterHeartbeat+0x1e3>
     590:	66 89 0c 02          	mov    WORD PTR [rdx+rax*1],cx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:282
				}
				
				if(res)
     594:	83 7d f4 00          	cmp    DWORD PTR [rbp-0xc],0x0
     598:	74 56                	je     5f0 <SV_MasterHeartbeat+0x243>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:283
					Com_Printf( "%s resolved to %s\n", sv_master[i]->string, NET_AdrToStringwPort( &adr[i][0] ) );
     59a:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
     59d:	48 98                	cdqe   
     59f:	48 c1 e0 06          	shl    rax,0x6
     5a3:	48 89 c2             	mov    rdx,rax
     5a6:	48 8d 05 00 00 00 00 	lea    rax,[rip+0x0]        # 5ad <SV_MasterHeartbeat+0x200>
     5ad:	48 01 d0             	add    rax,rdx
     5b0:	48 89 c7             	mov    rdi,rax
     5b3:	e8 00 00 00 00       	call   5b8 <SV_MasterHeartbeat+0x20b>
     5b8:	48 89 c1             	mov    rcx,rax
     5bb:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
     5be:	48 98                	cdqe   
     5c0:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
     5c7:	00 
     5c8:	48 8d 05 00 00 00 00 	lea    rax,[rip+0x0]        # 5cf <SV_MasterHeartbeat+0x222>
     5cf:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
     5d3:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
     5d7:	48 89 ca             	mov    rdx,rcx
     5da:	48 89 c6             	mov    rsi,rax
     5dd:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 5e4 <SV_MasterHeartbeat+0x237>
     5e4:	b8 00 00 00 00       	mov    eax,0x0
     5e9:	e8 00 00 00 00       	call   5ee <SV_MasterHeartbeat+0x241>
     5ee:	eb 30                	jmp    620 <SV_MasterHeartbeat+0x273>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:285
				else
					Com_Printf( "%s has no IPv4 address.\n", sv_master[i]->string );
     5f0:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
     5f3:	48 98                	cdqe   
     5f5:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
     5fc:	00 
     5fd:	48 8d 05 00 00 00 00 	lea    rax,[rip+0x0]        # 604 <SV_MasterHeartbeat+0x257>
     604:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
     608:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
     60c:	48 89 c6             	mov    rsi,rax
     60f:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 616 <SV_MasterHeartbeat+0x269>
     616:	b8 00 00 00 00       	mov    eax,0x0
     61b:	e8 00 00 00 00       	call   620 <SV_MasterHeartbeat+0x273>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:288
			}
#ifdef USE_IPV6
			if(netenabled & NET_ENABLEV6)
     620:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
     623:	83 e0 02             	and    eax,0x2
     626:	85 c0                	test   eax,eax
     628:	0f 84 2d 01 00 00    	je     75b <SV_MasterHeartbeat+0x3ae>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:290
			{
				Com_Printf("Resolving %s (IPv6)\n", sv_master[i]->string);
     62e:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
     631:	48 98                	cdqe   
     633:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
     63a:	00 
     63b:	48 8d 05 00 00 00 00 	lea    rax,[rip+0x0]        # 642 <SV_MasterHeartbeat+0x295>
     642:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
     646:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
     64a:	48 89 c6             	mov    rsi,rax
     64d:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 654 <SV_MasterHeartbeat+0x2a7>
     654:	b8 00 00 00 00       	mov    eax,0x0
     659:	e8 00 00 00 00       	call   65e <SV_MasterHeartbeat+0x2b1>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:291
				res = NET_StringToAdr(sv_master[i]->string, &adr[i][1], NA_IP6);
     65e:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
     661:	48 98                	cdqe   
     663:	48 c1 e0 06          	shl    rax,0x6
     667:	48 8d 50 20          	lea    rdx,[rax+0x20]
     66b:	48 8d 05 00 00 00 00 	lea    rax,[rip+0x0]        # 672 <SV_MasterHeartbeat+0x2c5>
     672:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
     676:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
     679:	48 98                	cdqe   
     67b:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
     682:	00 
     683:	48 8d 05 00 00 00 00 	lea    rax,[rip+0x0]        # 68a <SV_MasterHeartbeat+0x2dd>
     68a:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
     68e:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
     692:	ba 05 00 00 00       	mov    edx,0x5
     697:	48 89 ce             	mov    rsi,rcx
     69a:	48 89 c7             	mov    rdi,rax
     69d:	e8 00 00 00 00       	call   6a2 <SV_MasterHeartbeat+0x2f5>
     6a2:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:293

				if(res == 2)
     6a5:	83 7d f4 02          	cmp    DWORD PTR [rbp-0xc],0x2
     6a9:	75 23                	jne    6ce <SV_MasterHeartbeat+0x321>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:296
				{
					// if no port was specified, use the default master port
					adr[i][1].port = BigShort(PORT_MASTER);
     6ab:	bf 2e 6d 00 00       	mov    edi,0x6d2e
     6b0:	e8 00 00 00 00       	call   6b5 <SV_MasterHeartbeat+0x308>
     6b5:	89 c1                	mov    ecx,eax
     6b7:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
     6ba:	48 98                	cdqe   
     6bc:	48 c1 e0 06          	shl    rax,0x6
     6c0:	48 89 c2             	mov    rdx,rax
     6c3:	48 8d 05 00 00 00 00 	lea    rax,[rip+0x0]        # 6ca <SV_MasterHeartbeat+0x31d>
     6ca:	66 89 0c 02          	mov    WORD PTR [rdx+rax*1],cx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:299
				}
				
				if(res)
     6ce:	83 7d f4 00          	cmp    DWORD PTR [rbp-0xc],0x0
     6d2:	74 57                	je     72b <SV_MasterHeartbeat+0x37e>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:300
					Com_Printf( "%s resolved to %s\n", sv_master[i]->string, NET_AdrToStringwPort( &adr[i][1] ) );
     6d4:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
     6d7:	48 98                	cdqe   
     6d9:	48 c1 e0 06          	shl    rax,0x6
     6dd:	48 8d 50 20          	lea    rdx,[rax+0x20]
     6e1:	48 8d 05 00 00 00 00 	lea    rax,[rip+0x0]        # 6e8 <SV_MasterHeartbeat+0x33b>
     6e8:	48 01 d0             	add    rax,rdx
     6eb:	48 89 c7             	mov    rdi,rax
     6ee:	e8 00 00 00 00       	call   6f3 <SV_MasterHeartbeat+0x346>
     6f3:	48 89 c1             	mov    rcx,rax
     6f6:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
     6f9:	48 98                	cdqe   
     6fb:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
     702:	00 
     703:	48 8d 05 00 00 00 00 	lea    rax,[rip+0x0]        # 70a <SV_MasterHeartbeat+0x35d>
     70a:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
     70e:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
     712:	48 89 ca             	mov    rdx,rcx
     715:	48 89 c6             	mov    rsi,rax
     718:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 71f <SV_MasterHeartbeat+0x372>
     71f:	b8 00 00 00 00       	mov    eax,0x0
     724:	e8 00 00 00 00       	call   729 <SV_MasterHeartbeat+0x37c>
     729:	eb 30                	jmp    75b <SV_MasterHeartbeat+0x3ae>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:302
				else
					Com_Printf( "%s has no IPv6 address.\n", sv_master[i]->string );
     72b:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
     72e:	48 98                	cdqe   
     730:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
     737:	00 
     738:	48 8d 05 00 00 00 00 	lea    rax,[rip+0x0]        # 73f <SV_MasterHeartbeat+0x392>
     73f:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
     743:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
     747:	48 89 c6             	mov    rsi,rax
     74a:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 751 <SV_MasterHeartbeat+0x3a4>
     751:	b8 00 00 00 00       	mov    eax,0x0
     756:	e8 00 00 00 00       	call   75b <SV_MasterHeartbeat+0x3ae>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:307
			}
#endif
		}

		if( adr[i][0].type == NA_BAD && adr[i][1].type == NA_BAD )
     75b:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
     75e:	48 98                	cdqe   
     760:	48 c1 e0 06          	shl    rax,0x6
     764:	48 89 c2             	mov    rdx,rax
     767:	48 8d 05 00 00 00 00 	lea    rax,[rip+0x0]        # 76e <SV_MasterHeartbeat+0x3c1>
     76e:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
     771:	85 c0                	test   eax,eax
     773:	75 1e                	jne    793 <SV_MasterHeartbeat+0x3e6>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:307 (discriminator 1)
     775:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
     778:	48 98                	cdqe   
     77a:	48 c1 e0 06          	shl    rax,0x6
     77e:	48 89 c2             	mov    rdx,rax
     781:	48 8d 05 00 00 00 00 	lea    rax,[rip+0x0]        # 788 <SV_MasterHeartbeat+0x3db>
     788:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
     78b:	85 c0                	test   eax,eax
     78d:	0f 84 d2 00 00 00    	je     865 <SV_MasterHeartbeat+0x4b8>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:313
		{
			continue;
		}


		Com_Printf ("Sending heartbeat to %s\n", sv_master[i]->string );
     793:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
     796:	48 98                	cdqe   
     798:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
     79f:	00 
     7a0:	48 8d 05 00 00 00 00 	lea    rax,[rip+0x0]        # 7a7 <SV_MasterHeartbeat+0x3fa>
     7a7:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
     7ab:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
     7af:	48 89 c6             	mov    rsi,rax
     7b2:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 7b9 <SV_MasterHeartbeat+0x40c>
     7b9:	b8 00 00 00 00       	mov    eax,0x0
     7be:	e8 00 00 00 00       	call   7c3 <SV_MasterHeartbeat+0x416>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:318

		// this command should be changed if the server info / status format
		// ever incompatably changes

		if(adr[i][0].type != NA_BAD)
     7c3:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
     7c6:	48 98                	cdqe   
     7c8:	48 c1 e0 06          	shl    rax,0x6
     7cc:	48 89 c2             	mov    rdx,rax
     7cf:	48 8d 05 00 00 00 00 	lea    rax,[rip+0x0]        # 7d6 <SV_MasterHeartbeat+0x429>
     7d6:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
     7d9:	85 c0                	test   eax,eax
     7db:	74 34                	je     811 <SV_MasterHeartbeat+0x464>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:319
			NET_OutOfBandPrint( NS_SERVER, &adr[i][0], "heartbeat %s\n", message);
     7dd:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
     7e0:	48 98                	cdqe   
     7e2:	48 c1 e0 06          	shl    rax,0x6
     7e6:	48 89 c2             	mov    rdx,rax
     7e9:	48 8d 05 00 00 00 00 	lea    rax,[rip+0x0]        # 7f0 <SV_MasterHeartbeat+0x443>
     7f0:	48 8d 34 02          	lea    rsi,[rdx+rax*1]
     7f4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
     7f8:	48 89 c1             	mov    rcx,rax
     7fb:	48 8d 15 00 00 00 00 	lea    rdx,[rip+0x0]        # 802 <SV_MasterHeartbeat+0x455>
     802:	bf 01 00 00 00       	mov    edi,0x1
     807:	b8 00 00 00 00       	mov    eax,0x0
     80c:	e8 00 00 00 00       	call   811 <SV_MasterHeartbeat+0x464>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:320
		if(adr[i][1].type != NA_BAD)
     811:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
     814:	48 98                	cdqe   
     816:	48 c1 e0 06          	shl    rax,0x6
     81a:	48 89 c2             	mov    rdx,rax
     81d:	48 8d 05 00 00 00 00 	lea    rax,[rip+0x0]        # 824 <SV_MasterHeartbeat+0x477>
     824:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
     827:	85 c0                	test   eax,eax
     829:	74 3b                	je     866 <SV_MasterHeartbeat+0x4b9>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:321
			NET_OutOfBandPrint( NS_SERVER, &adr[i][1], "heartbeat %s\n", message);
     82b:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
     82e:	48 98                	cdqe   
     830:	48 c1 e0 06          	shl    rax,0x6
     834:	48 8d 50 20          	lea    rdx,[rax+0x20]
     838:	48 8d 05 00 00 00 00 	lea    rax,[rip+0x0]        # 83f <SV_MasterHeartbeat+0x492>
     83f:	48 8d 34 02          	lea    rsi,[rdx+rax*1]
     843:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
     847:	48 89 c1             	mov    rcx,rax
     84a:	48 8d 15 00 00 00 00 	lea    rdx,[rip+0x0]        # 851 <SV_MasterHeartbeat+0x4a4>
     851:	bf 01 00 00 00       	mov    edi,0x1
     856:	b8 00 00 00 00       	mov    eax,0x0
     85b:	e8 00 00 00 00       	call   860 <SV_MasterHeartbeat+0x4b3>
     860:	eb 04                	jmp    866 <SV_MasterHeartbeat+0x4b9>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:262
			continue;
     862:	90                   	nop
     863:	eb 01                	jmp    866 <SV_MasterHeartbeat+0x4b9>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:309
			continue;
     865:	90                   	nop
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:259 (discriminator 2)
	for (i = 0; i < MAX_MASTER_SERVERS; i++)
     866:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:259 (discriminator 1)
     86a:	83 7d fc 04          	cmp    DWORD PTR [rbp-0x4],0x4
     86e:	0f 8e ba fb ff ff    	jle    42e <SV_MasterHeartbeat+0x81>
     874:	eb 04                	jmp    87a <SV_MasterHeartbeat+0x4cd>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:250
		return;		// only dedicated servers send heartbeats
     876:	90                   	nop
     877:	eb 01                	jmp    87a <SV_MasterHeartbeat+0x4cd>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:254
		return;
     879:	90                   	nop
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:323
	}
}
     87a:	c9                   	leave  
     87b:	c3                   	ret    

000000000000087c <SV_MasterShutdown>:
SV_MasterShutdown():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:334

Informs all masters that this server is going down
=================
*/
void SV_MasterShutdown( void )
{
     87c:	55                   	push   rbp
     87d:	48 89 e5             	mov    rbp,rsp
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:336
	// send a heartbeat right now
	svs.nextHeartbeatTime = svs.time;
     880:	8b 05 00 00 00 00    	mov    eax,DWORD PTR [rip+0x0]        # 886 <SV_MasterShutdown+0xa>
     886:	89 05 00 00 00 00    	mov    DWORD PTR [rip+0x0],eax        # 88c <SV_MasterShutdown+0x10>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:337
	SV_MasterHeartbeat(HEARTBEAT_FOR_MASTER);
     88c:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 893 <SV_MasterShutdown+0x17>
     893:	e8 15 fb ff ff       	call   3ad <SV_MasterHeartbeat>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:340

	// send it again to minimize chance of drops
	svs.nextHeartbeatTime = svs.time;
     898:	8b 05 00 00 00 00    	mov    eax,DWORD PTR [rip+0x0]        # 89e <SV_MasterShutdown+0x22>
     89e:	89 05 00 00 00 00    	mov    DWORD PTR [rip+0x0],eax        # 8a4 <SV_MasterShutdown+0x28>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:341
	SV_MasterHeartbeat(HEARTBEAT_FOR_MASTER);
     8a4:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 8ab <SV_MasterShutdown+0x2f>
     8ab:	e8 fd fa ff ff       	call   3ad <SV_MasterHeartbeat>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:345

	// when the master tries to poll the server, it won't respond, so
	// it will be removed from the list
}
     8b0:	90                   	nop
     8b1:	5d                   	pop    rbp
     8b2:	c3                   	ret    

00000000000008b3 <SVC_HashForAddress>:
SVC_HashForAddress():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:369
/*
================
SVC_HashForAddress
================
*/
static int SVC_HashForAddress( const netadr_t *address ) {
     8b3:	55                   	push   rbp
     8b4:	48 89 e5             	mov    rbp,rsp
     8b7:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:370
	const byte	*ip = NULL;
     8bb:	48 c7 45 f8 00 00 00 	mov    QWORD PTR [rbp-0x8],0x0
     8c2:	00 
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:371
	int			size = 0;
     8c3:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:372
	int			hash = 0;
     8ca:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [rbp-0x10],0x0
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:375
	int			i;

	switch ( address->type ) {
     8d1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
     8d5:	8b 00                	mov    eax,DWORD PTR [rax]
     8d7:	83 f8 04             	cmp    eax,0x4
     8da:	74 07                	je     8e3 <SVC_HashForAddress+0x30>
     8dc:	83 f8 05             	cmp    eax,0x5
     8df:	74 17                	je     8f8 <SVC_HashForAddress+0x45>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:380
		case NA_IP:  ip = address->ipv._4; size = 4;  break;
#ifdef USE_IPV6
		case NA_IP6: ip = address->ipv._6; size = 16; break;
#endif
		default: break;
     8e1:	eb 29                	jmp    90c <SVC_HashForAddress+0x59>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:376
		case NA_IP:  ip = address->ipv._4; size = 4;  break;
     8e3:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
     8e7:	48 83 c0 04          	add    rax,0x4
     8eb:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
     8ef:	c7 45 f4 04 00 00 00 	mov    DWORD PTR [rbp-0xc],0x4
     8f6:	eb 14                	jmp    90c <SVC_HashForAddress+0x59>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:378
		case NA_IP6: ip = address->ipv._6; size = 16; break;
     8f8:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
     8fc:	48 83 c0 04          	add    rax,0x4
     900:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
     904:	c7 45 f4 10 00 00 00 	mov    DWORD PTR [rbp-0xc],0x10
     90b:	90                   	nop
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:383
	}

	for ( i = 0; i < size; i++ ) {
     90c:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
     913:	eb 23                	jmp    938 <SVC_HashForAddress+0x85>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:384 (discriminator 3)
		hash += (int)( ip[ i ] ) * ( i + 119 );
     915:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
     918:	48 63 d0             	movsxd rdx,eax
     91b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
     91f:	48 01 d0             	add    rax,rdx
     922:	0f b6 00             	movzx  eax,BYTE PTR [rax]
     925:	0f b6 c0             	movzx  eax,al
     928:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
     92b:	83 c2 77             	add    edx,0x77
     92e:	0f af c2             	imul   eax,edx
     931:	01 45 f0             	add    DWORD PTR [rbp-0x10],eax
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:383 (discriminator 3)
	for ( i = 0; i < size; i++ ) {
     934:	83 45 ec 01          	add    DWORD PTR [rbp-0x14],0x1
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:383 (discriminator 1)
     938:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
     93b:	3b 45 f4             	cmp    eax,DWORD PTR [rbp-0xc]
     93e:	7c d5                	jl     915 <SVC_HashForAddress+0x62>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:387
	}

	hash = ( hash ^ ( hash >> 10 ) ^ ( hash >> 20 ) );
     940:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
     943:	c1 f8 0a             	sar    eax,0xa
     946:	33 45 f0             	xor    eax,DWORD PTR [rbp-0x10]
     949:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
     94c:	c1 fa 14             	sar    edx,0x14
     94f:	31 d0                	xor    eax,edx
     951:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:388
	hash &= ( MAX_HASHES - 1 );
     954:	81 65 f0 ff 03 00 00 	and    DWORD PTR [rbp-0x10],0x3ff
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:390

	return hash;
     95b:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:391
}
     95e:	5d                   	pop    rbp
     95f:	c3                   	ret    

0000000000000960 <SVC_RelinkToHead>:
SVC_RelinkToHead():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:399
/*
================
SVC_RelinkToHead
================
*/
static void SVC_RelinkToHead( leakyBucket_t *bucket, int hash ) {
     960:	55                   	push   rbp
     961:	48 89 e5             	mov    rbp,rsp
     964:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
     968:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:401

	if ( bucket->prev != NULL ) {
     96b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
     96f:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
     973:	48 85 c0             	test   rax,rax
     976:	0f 84 bc 00 00 00    	je     a38 <SVC_RelinkToHead+0xd8>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:402
		bucket->prev->next = bucket->next;
     97c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
     980:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
     984:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
     988:	48 8b 52 30          	mov    rdx,QWORD PTR [rdx+0x30]
     98c:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:407
	} else {
		return;
	}

	if ( bucket->next != NULL ) {
     990:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
     994:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
     998:	48 85 c0             	test   rax,rax
     99b:	74 14                	je     9b1 <SVC_RelinkToHead+0x51>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:408
		bucket->next->prev = bucket->prev;
     99d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
     9a1:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
     9a5:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
     9a9:	48 8b 52 28          	mov    rdx,QWORD PTR [rdx+0x28]
     9ad:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:411
	}

	bucket->next = bucketHashes[ hash ];
     9b1:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
     9b4:	48 98                	cdqe   
     9b6:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
     9bd:	00 
     9be:	48 8d 05 00 00 00 00 	lea    rax,[rip+0x0]        # 9c5 <SVC_RelinkToHead+0x65>
     9c5:	48 8b 14 02          	mov    rdx,QWORD PTR [rdx+rax*1]
     9c9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
     9cd:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:412
	if ( bucketHashes[ hash ] != NULL ) {
     9d1:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
     9d4:	48 98                	cdqe   
     9d6:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
     9dd:	00 
     9de:	48 8d 05 00 00 00 00 	lea    rax,[rip+0x0]        # 9e5 <SVC_RelinkToHead+0x85>
     9e5:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
     9e9:	48 85 c0             	test   rax,rax
     9ec:	74 20                	je     a0e <SVC_RelinkToHead+0xae>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:413
		bucketHashes[ hash ]->prev = bucket;
     9ee:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
     9f1:	48 98                	cdqe   
     9f3:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
     9fa:	00 
     9fb:	48 8d 05 00 00 00 00 	lea    rax,[rip+0x0]        # a02 <SVC_RelinkToHead+0xa2>
     a02:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
     a06:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
     a0a:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:416
	}

	bucket->prev = NULL;
     a0e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
     a12:	48 c7 40 28 00 00 00 	mov    QWORD PTR [rax+0x28],0x0
     a19:	00 
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:417
	bucketHashes[ hash ] = bucket;
     a1a:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
     a1d:	48 98                	cdqe   
     a1f:	48 8d 0c c5 00 00 00 	lea    rcx,[rax*8+0x0]
     a26:	00 
     a27:	48 8d 15 00 00 00 00 	lea    rdx,[rip+0x0]        # a2e <SVC_RelinkToHead+0xce>
     a2e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
     a32:	48 89 04 11          	mov    QWORD PTR [rcx+rdx*1],rax
     a36:	eb 01                	jmp    a39 <SVC_RelinkToHead+0xd9>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:404
		return;
     a38:	90                   	nop
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:418
}
     a39:	5d                   	pop    rbp
     a3a:	c3                   	ret    

0000000000000a3b <SVC_BucketForAddress>:
SVC_BucketForAddress():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:428
SVC_BucketForAddress

Find or allocate a bucket for an address
================
*/
static leakyBucket_t *SVC_BucketForAddress( const netadr_t *address, int burst, int period ) {
     a3b:	55                   	push   rbp
     a3c:	48 89 e5             	mov    rbp,rsp
     a3f:	48 83 ec 30          	sub    rsp,0x30
     a43:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
     a47:	89 75 d4             	mov    DWORD PTR [rbp-0x2c],esi
     a4a:	89 55 d0             	mov    DWORD PTR [rbp-0x30],edx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:431
	static leakyBucket_t dummy = { 0 };
	static int		start = 0;
	const int		hash = SVC_HashForAddress( address );
     a4d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
     a51:	48 89 c7             	mov    rdi,rax
     a54:	e8 5a fe ff ff       	call   8b3 <SVC_HashForAddress>
     a59:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:432
	const int		now = Sys_Milliseconds();
     a5c:	e8 00 00 00 00       	call   a61 <SVC_BucketForAddress+0x26>
     a61:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:436
	leakyBucket_t	*bucket;
	int				i, n;

	for ( bucket = bucketHashes[ hash ], n = 0; bucket; bucket = bucket->next, n++ ) {
     a64:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
     a67:	48 98                	cdqe   
     a69:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
     a70:	00 
     a71:	48 8d 05 00 00 00 00 	lea    rax,[rip+0x0]        # a78 <SVC_BucketForAddress+0x3d>
     a78:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
     a7c:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
     a80:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [rbp-0x10],0x0
     a87:	e9 bd 00 00 00       	jmp    b49 <SVC_BucketForAddress+0x10e>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:437
		switch ( bucket->type ) {
     a8c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
     a90:	8b 00                	mov    eax,DWORD PTR [rax]
     a92:	83 f8 04             	cmp    eax,0x4
     a95:	74 0a                	je     aa1 <SVC_BucketForAddress+0x66>
     a97:	83 f8 05             	cmp    eax,0x5
     a9a:	74 49                	je     ae5 <SVC_BucketForAddress+0xaa>
     a9c:	e9 88 00 00 00       	jmp    b29 <SVC_BucketForAddress+0xee>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:439
			case NA_IP:
				if ( memcmp( bucket->ipv._4, address->ipv._4, 4 ) == 0 ) {
     aa1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
     aa5:	48 8d 48 04          	lea    rcx,[rax+0x4]
     aa9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
     aad:	48 83 c0 04          	add    rax,0x4
     ab1:	ba 04 00 00 00       	mov    edx,0x4
     ab6:	48 89 ce             	mov    rsi,rcx
     ab9:	48 89 c7             	mov    rdi,rax
     abc:	e8 00 00 00 00       	call   ac1 <SVC_BucketForAddress+0x86>
     ac1:	85 c0                	test   eax,eax
     ac3:	75 70                	jne    b35 <SVC_BucketForAddress+0xfa>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:440
					if ( n > 8 ) {
     ac5:	83 7d f0 08          	cmp    DWORD PTR [rbp-0x10],0x8
     ac9:	7e 11                	jle    adc <SVC_BucketForAddress+0xa1>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:441
						SVC_RelinkToHead( bucket, hash );
     acb:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
     ace:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
     ad2:	89 d6                	mov    esi,edx
     ad4:	48 89 c7             	mov    rdi,rax
     ad7:	e8 84 fe ff ff       	call   960 <SVC_RelinkToHead>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:443
					}
					return bucket;
     adc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
     ae0:	e9 92 02 00 00       	jmp    d77 <SVC_BucketForAddress+0x33c>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:448
				}
				break;
#ifdef USE_IPV6
			case NA_IP6:
				if ( memcmp( bucket->ipv._6, address->ipv._6, 16 ) == 0 ) {
     ae5:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
     ae9:	48 8d 48 04          	lea    rcx,[rax+0x4]
     aed:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
     af1:	48 83 c0 04          	add    rax,0x4
     af5:	ba 10 00 00 00       	mov    edx,0x10
     afa:	48 89 ce             	mov    rsi,rcx
     afd:	48 89 c7             	mov    rdi,rax
     b00:	e8 00 00 00 00       	call   b05 <SVC_BucketForAddress+0xca>
     b05:	85 c0                	test   eax,eax
     b07:	75 2f                	jne    b38 <SVC_BucketForAddress+0xfd>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:449
					if ( n > 8 ) {
     b09:	83 7d f0 08          	cmp    DWORD PTR [rbp-0x10],0x8
     b0d:	7e 11                	jle    b20 <SVC_BucketForAddress+0xe5>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:450
						SVC_RelinkToHead( bucket, hash );
     b0f:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
     b12:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
     b16:	89 d6                	mov    esi,edx
     b18:	48 89 c7             	mov    rdi,rax
     b1b:	e8 40 fe ff ff       	call   960 <SVC_RelinkToHead>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:452
					}
					return bucket;
     b20:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
     b24:	e9 4e 02 00 00       	jmp    d77 <SVC_BucketForAddress+0x33c>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:457
				}
				break;
#endif
			default:
				return &dummy;
     b29:	48 8d 05 00 00 00 00 	lea    rax,[rip+0x0]        # b30 <SVC_BucketForAddress+0xf5>
     b30:	e9 42 02 00 00       	jmp    d77 <SVC_BucketForAddress+0x33c>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:445
				break;
     b35:	90                   	nop
     b36:	eb 01                	jmp    b39 <SVC_BucketForAddress+0xfe>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:454
				break;
     b38:	90                   	nop
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:436 (discriminator 2)
	for ( bucket = bucketHashes[ hash ], n = 0; bucket; bucket = bucket->next, n++ ) {
     b39:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
     b3d:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
     b41:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
     b45:	83 45 f0 01          	add    DWORD PTR [rbp-0x10],0x1
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:436 (discriminator 1)
     b49:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
     b4e:	0f 85 38 ff ff ff    	jne    a8c <SVC_BucketForAddress+0x51>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:461
		}
	}

	for ( i = 0; i < MAX_BUCKETS; i++ ) {
     b54:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
     b5b:	e9 05 02 00 00       	jmp    d65 <SVC_BucketForAddress+0x32a>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:464
		int interval;

		if ( start >= MAX_BUCKETS )
     b60:	8b 05 00 00 00 00    	mov    eax,DWORD PTR [rip+0x0]        # b66 <SVC_BucketForAddress+0x12b>
     b66:	3d ff 3f 00 00       	cmp    eax,0x3fff
     b6b:	7e 0a                	jle    b77 <SVC_BucketForAddress+0x13c>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:465
			start = 0;
     b6d:	c7 05 00 00 00 00 00 	mov    DWORD PTR [rip+0x0],0x0        # b77 <SVC_BucketForAddress+0x13c>
     b74:	00 00 00 
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:466
		bucket = &buckets[ start++ ];
     b77:	8b 05 00 00 00 00    	mov    eax,DWORD PTR [rip+0x0]        # b7d <SVC_BucketForAddress+0x142>
     b7d:	8d 50 01             	lea    edx,[rax+0x1]
     b80:	89 15 00 00 00 00    	mov    DWORD PTR [rip+0x0],edx        # b86 <SVC_BucketForAddress+0x14b>
     b86:	48 63 d0             	movsxd rdx,eax
     b89:	48 89 d0             	mov    rax,rdx
     b8c:	48 c1 e0 03          	shl    rax,0x3
     b90:	48 29 d0             	sub    rax,rdx
     b93:	48 c1 e0 03          	shl    rax,0x3
     b97:	48 8d 15 00 00 00 00 	lea    rdx,[rip+0x0]        # b9e <SVC_BucketForAddress+0x163>
     b9e:	48 01 d0             	add    rax,rdx
     ba1:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:467
		interval = now - bucket->rate.lastTime;
     ba5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
     ba9:	8b 40 14             	mov    eax,DWORD PTR [rax+0x14]
     bac:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
     baf:	29 c2                	sub    edx,eax
     bb1:	89 d0                	mov    eax,edx
     bb3:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:470

		// Reclaim expired buckets
		if ( bucket->type != NA_BAD && (unsigned)interval > ( bucket->rate.burst * period ) ) {
     bb6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
     bba:	8b 00                	mov    eax,DWORD PTR [rax]
     bbc:	85 c0                	test   eax,eax
     bbe:	0f 84 87 00 00 00    	je     c4b <SVC_BucketForAddress+0x210>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:470 (discriminator 1)
     bc4:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
     bc8:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
     bcb:	0f af 45 d0          	imul   eax,DWORD PTR [rbp-0x30]
     bcf:	89 c2                	mov    edx,eax
     bd1:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
     bd4:	39 c2                	cmp    edx,eax
     bd6:	73 73                	jae    c4b <SVC_BucketForAddress+0x210>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:471
			if ( bucket->prev != NULL ) {
     bd8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
     bdc:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
     be0:	48 85 c0             	test   rax,rax
     be3:	74 16                	je     bfb <SVC_BucketForAddress+0x1c0>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:472
				bucket->prev->next = bucket->next;
     be5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
     be9:	48 8b 40 28          	mov    rax,QWORD PTR [rax+0x28]
     bed:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
     bf1:	48 8b 52 30          	mov    rdx,QWORD PTR [rdx+0x30]
     bf5:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
     bf9:	eb 25                	jmp    c20 <SVC_BucketForAddress+0x1e5>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:474
			} else {
				bucketHashes[ bucket->hash ] = bucket->next;
     bfb:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
     bff:	8b 50 1c             	mov    edx,DWORD PTR [rax+0x1c]
     c02:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
     c06:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
     c0a:	48 63 d2             	movsxd rdx,edx
     c0d:	48 8d 0c d5 00 00 00 	lea    rcx,[rdx*8+0x0]
     c14:	00 
     c15:	48 8d 15 00 00 00 00 	lea    rdx,[rip+0x0]        # c1c <SVC_BucketForAddress+0x1e1>
     c1c:	48 89 04 11          	mov    QWORD PTR [rcx+rdx*1],rax
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:477
			}
			
			if ( bucket->next != NULL ) {
     c20:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
     c24:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
     c28:	48 85 c0             	test   rax,rax
     c2b:	74 14                	je     c41 <SVC_BucketForAddress+0x206>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:478
				bucket->next->prev = bucket->prev;
     c2d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
     c31:	48 8b 40 30          	mov    rax,QWORD PTR [rax+0x30]
     c35:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
     c39:	48 8b 52 28          	mov    rdx,QWORD PTR [rdx+0x28]
     c3d:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:481
			}

			bucket->type = NA_BAD;
     c41:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
     c45:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:484
		}

		if ( bucket->type == NA_BAD ) {
     c4b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
     c4f:	8b 00                	mov    eax,DWORD PTR [rax]
     c51:	85 c0                	test   eax,eax
     c53:	0f 85 08 01 00 00    	jne    d61 <SVC_BucketForAddress+0x326>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:485
			bucket->type = address->type;
     c59:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
     c5d:	8b 10                	mov    edx,DWORD PTR [rax]
     c5f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
     c63:	89 10                	mov    DWORD PTR [rax],edx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:486
			switch ( address->type ) {
     c65:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
     c69:	8b 00                	mov    eax,DWORD PTR [rax]
     c6b:	83 f8 04             	cmp    eax,0x4
     c6e:	74 07                	je     c77 <SVC_BucketForAddress+0x23c>
     c70:	83 f8 05             	cmp    eax,0x5
     c73:	74 18                	je     c8d <SVC_BucketForAddress+0x252>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:491
				case NA_IP:  Com_Memcpy( bucket->ipv._4, address->ipv._4, 4 );  break;
#ifdef USE_IPV6
				case NA_IP6: Com_Memcpy( bucket->ipv._6, address->ipv._6, 16 ); break;
#endif
				default: break;
     c75:	eb 35                	jmp    cac <SVC_BucketForAddress+0x271>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:487
				case NA_IP:  Com_Memcpy( bucket->ipv._4, address->ipv._4, 4 );  break;
     c77:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
     c7b:	48 83 c0 04          	add    rax,0x4
     c7f:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
     c83:	48 83 c2 04          	add    rdx,0x4
     c87:	8b 00                	mov    eax,DWORD PTR [rax]
     c89:	89 02                	mov    DWORD PTR [rdx],eax
     c8b:	eb 1f                	jmp    cac <SVC_BucketForAddress+0x271>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:489
				case NA_IP6: Com_Memcpy( bucket->ipv._6, address->ipv._6, 16 ); break;
     c8d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
     c91:	48 83 c0 04          	add    rax,0x4
     c95:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
     c99:	48 8d 4a 04          	lea    rcx,[rdx+0x4]
     c9d:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
     ca1:	48 8b 00             	mov    rax,QWORD PTR [rax]
     ca4:	48 89 01             	mov    QWORD PTR [rcx],rax
     ca7:	48 89 51 08          	mov    QWORD PTR [rcx+0x8],rdx
     cab:	90                   	nop
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:494
			}

			bucket->rate.lastTime = now;
     cac:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
     cb0:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
     cb3:	89 50 14             	mov    DWORD PTR [rax+0x14],edx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:495
			bucket->rate.burst = 0;
     cb6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
     cba:	c7 40 18 00 00 00 00 	mov    DWORD PTR [rax+0x18],0x0
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:496
			bucket->hash = hash;
     cc1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
     cc5:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
     cc8:	89 50 1c             	mov    DWORD PTR [rax+0x1c],edx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:497
			bucket->toxic = 0;
     ccb:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
     ccf:	c7 40 20 00 00 00 00 	mov    DWORD PTR [rax+0x20],0x0
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:500

			// Add to the head of the relevant hash chain
			bucket->next = bucketHashes[ hash ];
     cd6:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
     cd9:	48 98                	cdqe   
     cdb:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
     ce2:	00 
     ce3:	48 8d 05 00 00 00 00 	lea    rax,[rip+0x0]        # cea <SVC_BucketForAddress+0x2af>
     cea:	48 8b 14 02          	mov    rdx,QWORD PTR [rdx+rax*1]
     cee:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
     cf2:	48 89 50 30          	mov    QWORD PTR [rax+0x30],rdx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:501
			if ( bucketHashes[ hash ] != NULL ) {
     cf6:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
     cf9:	48 98                	cdqe   
     cfb:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
     d02:	00 
     d03:	48 8d 05 00 00 00 00 	lea    rax,[rip+0x0]        # d0a <SVC_BucketForAddress+0x2cf>
     d0a:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
     d0e:	48 85 c0             	test   rax,rax
     d11:	74 20                	je     d33 <SVC_BucketForAddress+0x2f8>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:502
				bucketHashes[ hash ]->prev = bucket;
     d13:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
     d16:	48 98                	cdqe   
     d18:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
     d1f:	00 
     d20:	48 8d 05 00 00 00 00 	lea    rax,[rip+0x0]        # d27 <SVC_BucketForAddress+0x2ec>
     d27:	48 8b 04 02          	mov    rax,QWORD PTR [rdx+rax*1]
     d2b:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
     d2f:	48 89 50 28          	mov    QWORD PTR [rax+0x28],rdx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:505
			}

			bucket->prev = NULL;
     d33:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
     d37:	48 c7 40 28 00 00 00 	mov    QWORD PTR [rax+0x28],0x0
     d3e:	00 
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:506
			bucketHashes[ hash ] = bucket;
     d3f:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
     d42:	48 98                	cdqe   
     d44:	48 8d 0c c5 00 00 00 	lea    rcx,[rax*8+0x0]
     d4b:	00 
     d4c:	48 8d 15 00 00 00 00 	lea    rdx,[rip+0x0]        # d53 <SVC_BucketForAddress+0x318>
     d53:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
     d57:	48 89 04 11          	mov    QWORD PTR [rcx+rdx*1],rax
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:508

			return bucket;
     d5b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
     d5f:	eb 16                	jmp    d77 <SVC_BucketForAddress+0x33c>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:461 (discriminator 2)
	for ( i = 0; i < MAX_BUCKETS; i++ ) {
     d61:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:461 (discriminator 1)
     d65:	81 7d f4 ff 3f 00 00 	cmp    DWORD PTR [rbp-0xc],0x3fff
     d6c:	0f 8e ee fd ff ff    	jle    b60 <SVC_BucketForAddress+0x125>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:513
		}
	}

	// Couldn't allocate a bucket for this address
	return NULL;
     d72:	b8 00 00 00 00       	mov    eax,0x0
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:514
}
     d77:	c9                   	leave  
     d78:	c3                   	ret    

0000000000000d79 <SVC_RateLimit>:
SVC_RateLimit():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:522
/*
================
SVC_RateLimit
================
*/
qboolean SVC_RateLimit( rateLimit_t *bucket, int burst, int period ) {
     d79:	55                   	push   rbp
     d7a:	48 89 e5             	mov    rbp,rsp
     d7d:	48 83 ec 20          	sub    rsp,0x20
     d81:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
     d85:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
     d88:	89 55 e0             	mov    DWORD PTR [rbp-0x20],edx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:523
	int now = Sys_Milliseconds();
     d8b:	e8 00 00 00 00       	call   d90 <SVC_RateLimit+0x17>
     d90:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:524
	int interval = now - bucket->lastTime;
     d93:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
     d97:	8b 00                	mov    eax,DWORD PTR [rax]
     d99:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
     d9c:	29 c2                	sub    edx,eax
     d9e:	89 d0                	mov    eax,edx
     da0:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:525
	int expired = interval / period;
     da3:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
     da6:	99                   	cdq    
     da7:	f7 7d e0             	idiv   DWORD PTR [rbp-0x20]
     daa:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:526
	int expiredRemainder = interval % period;
     dad:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
     db0:	99                   	cdq    
     db1:	f7 7d e0             	idiv   DWORD PTR [rbp-0x20]
     db4:	89 55 f0             	mov    DWORD PTR [rbp-0x10],edx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:528

	if ( expired > bucket->burst || interval < 0 ) {
     db7:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
     dbb:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
     dbe:	39 45 f4             	cmp    DWORD PTR [rbp-0xc],eax
     dc1:	7f 06                	jg     dc9 <SVC_RateLimit+0x50>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:528 (discriminator 1)
     dc3:	83 7d f8 00          	cmp    DWORD PTR [rbp-0x8],0x0
     dc7:	79 16                	jns    ddf <SVC_RateLimit+0x66>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:529
		bucket->burst = 0;
     dc9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
     dcd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [rax+0x4],0x0
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:530
		bucket->lastTime = now;
     dd4:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
     dd8:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
     ddb:	89 10                	mov    DWORD PTR [rax],edx
     ddd:	eb 21                	jmp    e00 <SVC_RateLimit+0x87>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:532
	} else {
		bucket->burst -= expired;
     ddf:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
     de3:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
     de6:	2b 45 f4             	sub    eax,DWORD PTR [rbp-0xc]
     de9:	89 c2                	mov    edx,eax
     deb:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
     def:	89 50 04             	mov    DWORD PTR [rax+0x4],edx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:533
		bucket->lastTime = now - expiredRemainder;
     df2:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
     df5:	2b 45 f0             	sub    eax,DWORD PTR [rbp-0x10]
     df8:	89 c2                	mov    edx,eax
     dfa:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
     dfe:	89 10                	mov    DWORD PTR [rax],edx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:536
	}

	if ( bucket->burst < burst ) {
     e00:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
     e04:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
     e07:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
     e0a:	7e 18                	jle    e24 <SVC_RateLimit+0xab>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:537
		bucket->burst++;
     e0c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
     e10:	8b 40 04             	mov    eax,DWORD PTR [rax+0x4]
     e13:	8d 50 01             	lea    edx,[rax+0x1]
     e16:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
     e1a:	89 50 04             	mov    DWORD PTR [rax+0x4],edx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:538
		return qfalse;
     e1d:	b8 00 00 00 00       	mov    eax,0x0
     e22:	eb 05                	jmp    e29 <SVC_RateLimit+0xb0>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:541
	}

	return qtrue;
     e24:	b8 01 00 00 00       	mov    eax,0x1
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:542
}
     e29:	c9                   	leave  
     e2a:	c3                   	ret    

0000000000000e2b <SVC_RateDrop>:
SVC_RateDrop():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:550
/*
================
SVC_RateDrop
================
*/
static void SVC_RateDrop( leakyBucket_t *bucket, int burst ) {
     e2b:	55                   	push   rbp
     e2c:	48 89 e5             	mov    rbp,rsp
     e2f:	48 83 ec 10          	sub    rsp,0x10
     e33:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
     e37:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:551
	if ( bucket != NULL ) {
     e3a:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
     e3f:	74 41                	je     e82 <SVC_RateDrop+0x57>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:552
		if ( bucket->toxic < 10000 )
     e41:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
     e45:	8b 40 20             	mov    eax,DWORD PTR [rax+0x20]
     e48:	3d 0f 27 00 00       	cmp    eax,0x270f
     e4d:	7f 11                	jg     e60 <SVC_RateDrop+0x35>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:553
			++bucket->toxic;
     e4f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
     e53:	8b 40 20             	mov    eax,DWORD PTR [rax+0x20]
     e56:	8d 50 01             	lea    edx,[rax+0x1]
     e59:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
     e5d:	89 50 20             	mov    DWORD PTR [rax+0x20],edx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:554
		bucket->rate.burst = burst * bucket->toxic;
     e60:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
     e64:	8b 40 20             	mov    eax,DWORD PTR [rax+0x20]
     e67:	0f af 45 f4          	imul   eax,DWORD PTR [rbp-0xc]
     e6b:	89 c2                	mov    edx,eax
     e6d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
     e71:	89 50 18             	mov    DWORD PTR [rax+0x18],edx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:555
		bucket->rate.lastTime = Sys_Milliseconds();
     e74:	e8 00 00 00 00       	call   e79 <SVC_RateDrop+0x4e>
     e79:	89 c2                	mov    edx,eax
     e7b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
     e7f:	89 50 14             	mov    DWORD PTR [rax+0x14],edx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:557
	}
}
     e82:	90                   	nop
     e83:	c9                   	leave  
     e84:	c3                   	ret    

0000000000000e85 <SVC_RateRestoreBurst>:
SVC_RateRestoreBurst():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:565
/*
================
SVC_RateRestoreBurst
================
*/
static void SVC_RateRestoreBurst( leakyBucket_t *bucket ) {
     e85:	55                   	push   rbp
     e86:	48 89 e5             	mov    rbp,rsp
     e89:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:566
	if ( bucket != NULL ) {
     e8d:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
     e92:	74 1c                	je     eb0 <SVC_RateRestoreBurst+0x2b>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:567
		if ( bucket->rate.burst > 0 ) {
     e94:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
     e98:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
     e9b:	85 c0                	test   eax,eax
     e9d:	7e 11                	jle    eb0 <SVC_RateRestoreBurst+0x2b>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:568
			bucket->rate.burst--;
     e9f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
     ea3:	8b 40 18             	mov    eax,DWORD PTR [rax+0x18]
     ea6:	8d 50 ff             	lea    edx,[rax-0x1]
     ea9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
     ead:	89 50 18             	mov    DWORD PTR [rax+0x18],edx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:571
		}
	}
}
     eb0:	90                   	nop
     eb1:	5d                   	pop    rbp
     eb2:	c3                   	ret    

0000000000000eb3 <SVC_RateRestoreToxic>:
SVC_RateRestoreToxic():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:579
/*
================
SVC_RateRestoreToxic
================
*/
static void SVC_RateRestoreToxic( leakyBucket_t *bucket ) {
     eb3:	55                   	push   rbp
     eb4:	48 89 e5             	mov    rbp,rsp
     eb7:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:580
	if ( bucket != NULL ) {
     ebb:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
     ec0:	74 1c                	je     ede <SVC_RateRestoreToxic+0x2b>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:581
		if ( bucket->toxic > 0 ) {
     ec2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
     ec6:	8b 40 20             	mov    eax,DWORD PTR [rax+0x20]
     ec9:	85 c0                	test   eax,eax
     ecb:	7e 11                	jle    ede <SVC_RateRestoreToxic+0x2b>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:582
			bucket->toxic--;
     ecd:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
     ed1:	8b 40 20             	mov    eax,DWORD PTR [rax+0x20]
     ed4:	8d 50 ff             	lea    edx,[rax-0x1]
     ed7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
     edb:	89 50 20             	mov    DWORD PTR [rax+0x20],edx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:585
		}
	}
}
     ede:	90                   	nop
     edf:	5d                   	pop    rbp
     ee0:	c3                   	ret    

0000000000000ee1 <SVC_RateLimitAddress>:
SVC_RateLimitAddress():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:595
SVC_RateLimitAddress

Rate limit for a particular address
================
*/
qboolean SVC_RateLimitAddress( const netadr_t *from, int burst, int period ) {
     ee1:	55                   	push   rbp
     ee2:	48 89 e5             	mov    rbp,rsp
     ee5:	48 83 ec 20          	sub    rsp,0x20
     ee9:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
     eed:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
     ef0:	89 55 e0             	mov    DWORD PTR [rbp-0x20],edx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:596
	leakyBucket_t *bucket = SVC_BucketForAddress( from, burst, period );
     ef3:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
     ef6:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
     ef9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
     efd:	89 ce                	mov    esi,ecx
     eff:	48 89 c7             	mov    rdi,rax
     f02:	e8 34 fb ff ff       	call   a3b <SVC_BucketForAddress>
     f07:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:598

	return bucket ? SVC_RateLimit( &bucket->rate, burst, period ) : qtrue;
     f0b:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
     f10:	74 1a                	je     f2c <SVC_RateLimitAddress+0x4b>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:598 (discriminator 1)
     f12:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
     f16:	48 8d 48 14          	lea    rcx,[rax+0x14]
     f1a:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
     f1d:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
     f20:	89 c6                	mov    esi,eax
     f22:	48 89 cf             	mov    rdi,rcx
     f25:	e8 00 00 00 00       	call   f2a <SVC_RateLimitAddress+0x49>
     f2a:	eb 05                	jmp    f31 <SVC_RateLimitAddress+0x50>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:598 (discriminator 2)
     f2c:	b8 01 00 00 00       	mov    eax,0x1
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:599 (discriminator 5)
}
     f31:	c9                   	leave  
     f32:	c3                   	ret    

0000000000000f33 <SVC_RateRestoreBurstAddress>:
SVC_RateRestoreBurstAddress():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:609
SVC_RateRestoreAddress

Decrease burst rate
================
*/
void SVC_RateRestoreBurstAddress( const netadr_t *from, int burst, int period ) {
     f33:	55                   	push   rbp
     f34:	48 89 e5             	mov    rbp,rsp
     f37:	48 83 ec 20          	sub    rsp,0x20
     f3b:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
     f3f:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
     f42:	89 55 e0             	mov    DWORD PTR [rbp-0x20],edx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:610
	leakyBucket_t *bucket = SVC_BucketForAddress( from, burst, period );
     f45:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
     f48:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
     f4b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
     f4f:	89 ce                	mov    esi,ecx
     f51:	48 89 c7             	mov    rdi,rax
     f54:	e8 e2 fa ff ff       	call   a3b <SVC_BucketForAddress>
     f59:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:612

	SVC_RateRestoreBurst( bucket );
     f5d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
     f61:	48 89 c7             	mov    rdi,rax
     f64:	e8 1c ff ff ff       	call   e85 <SVC_RateRestoreBurst>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:613
}
     f69:	90                   	nop
     f6a:	c9                   	leave  
     f6b:	c3                   	ret    

0000000000000f6c <SVC_RateRestoreToxicAddress>:
SVC_RateRestoreToxicAddress():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:623
SVC_RateRestoreToxicAddress

Decrease toxicity
================
*/
void SVC_RateRestoreToxicAddress( const netadr_t *from, int burst, int period ) {
     f6c:	55                   	push   rbp
     f6d:	48 89 e5             	mov    rbp,rsp
     f70:	48 83 ec 20          	sub    rsp,0x20
     f74:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
     f78:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
     f7b:	89 55 e0             	mov    DWORD PTR [rbp-0x20],edx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:624
	leakyBucket_t *bucket = SVC_BucketForAddress( from, burst, period );
     f7e:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
     f81:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
     f84:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
     f88:	89 ce                	mov    esi,ecx
     f8a:	48 89 c7             	mov    rdi,rax
     f8d:	e8 a9 fa ff ff       	call   a3b <SVC_BucketForAddress>
     f92:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:626

	SVC_RateRestoreToxic( bucket );
     f96:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
     f9a:	48 89 c7             	mov    rdi,rax
     f9d:	e8 11 ff ff ff       	call   eb3 <SVC_RateRestoreToxic>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:627
}
     fa2:	90                   	nop
     fa3:	c9                   	leave  
     fa4:	c3                   	ret    

0000000000000fa5 <SVC_RateDropAddress>:
SVC_RateDropAddress():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:635
/*
================
SVC_RateDropAddress
================
*/
void SVC_RateDropAddress( const netadr_t *from, int burst, int period ) {
     fa5:	55                   	push   rbp
     fa6:	48 89 e5             	mov    rbp,rsp
     fa9:	48 83 ec 20          	sub    rsp,0x20
     fad:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
     fb1:	89 75 e4             	mov    DWORD PTR [rbp-0x1c],esi
     fb4:	89 55 e0             	mov    DWORD PTR [rbp-0x20],edx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:636
	leakyBucket_t *bucket = SVC_BucketForAddress( from, burst, period );
     fb7:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
     fba:	8b 4d e4             	mov    ecx,DWORD PTR [rbp-0x1c]
     fbd:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
     fc1:	89 ce                	mov    esi,ecx
     fc3:	48 89 c7             	mov    rdi,rax
     fc6:	e8 70 fa ff ff       	call   a3b <SVC_BucketForAddress>
     fcb:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:638

	SVC_RateDrop( bucket, burst );
     fcf:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
     fd2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
     fd6:	89 d6                	mov    esi,edx
     fd8:	48 89 c7             	mov    rdi,rax
     fdb:	e8 4b fe ff ff       	call   e2b <SVC_RateDrop>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:639
}
     fe0:	90                   	nop
     fe1:	c9                   	leave  
     fe2:	c3                   	ret    

0000000000000fe3 <SVC_Status>:
SVC_Status():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:651
Responds with all the info that qplug or qspy can see about the server
and all connected players.  Used for getting detailed information after
the simple info query.
================
*/
static void SVC_Status( const netadr_t *from ) {
     fe3:	55                   	push   rbp
     fe4:	48 89 e5             	mov    rbp,rsp
     fe7:	48 81 ec a0 0a 00 00 	sub    rsp,0xaa0
     fee:	48 89 bd 68 f5 ff ff 	mov    QWORD PTR [rbp-0xa98],rdi
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:670
		return;
	}
#endif

	// Prevent using getstatus as an amplifier
	if ( SVC_RateLimitAddress( from, 10, 1000 ) ) {
     ff5:	48 8b 85 68 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xa98]
     ffc:	ba e8 03 00 00       	mov    edx,0x3e8
    1001:	be 0a 00 00 00       	mov    esi,0xa
    1006:	48 89 c7             	mov    rdi,rax
    1009:	e8 00 00 00 00       	call   100e <SVC_Status+0x2b>
    100e:	85 c0                	test   eax,eax
    1010:	74 3a                	je     104c <SVC_Status+0x69>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:671
		if ( com_developer->integer ) {
    1012:	48 8b 05 00 00 00 00 	mov    rax,QWORD PTR [rip+0x0]        # 1019 <SVC_Status+0x36>
    1019:	8b 40 30             	mov    eax,DWORD PTR [rax+0x30]
    101c:	85 c0                	test   eax,eax
    101e:	0f 84 f7 01 00 00    	je     121b <SVC_Status+0x238>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:672
			Com_Printf( "SVC_Status: rate limit from %s exceeded, dropping request\n",
    1024:	48 8b 85 68 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xa98]
    102b:	48 89 c7             	mov    rdi,rax
    102e:	e8 00 00 00 00       	call   1033 <SVC_Status+0x50>
    1033:	48 89 c6             	mov    rsi,rax
    1036:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 103d <SVC_Status+0x5a>
    103d:	b8 00 00 00 00       	mov    eax,0x0
    1042:	e8 00 00 00 00       	call   1047 <SVC_Status+0x64>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:675
				NET_AdrToString( from ) );
		}
		return;
    1047:	e9 cf 01 00 00       	jmp    121b <SVC_Status+0x238>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:680
	}

	// Allow getstatus to be DoSed relatively easily, but prevent
	// excess outbound bandwidth usage when being flooded inbound
	if ( SVC_RateLimit( &outboundRateLimit, 10, 100 ) ) {
    104c:	ba 64 00 00 00       	mov    edx,0x64
    1051:	be 0a 00 00 00       	mov    esi,0xa
    1056:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 105d <SVC_Status+0x7a>
    105d:	e8 00 00 00 00       	call   1062 <SVC_Status+0x7f>
    1062:	85 c0                	test   eax,eax
    1064:	74 16                	je     107c <SVC_Status+0x99>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:681
		Com_DPrintf( "SVC_Status: rate limit exceeded, dropping request\n" );
    1066:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 106d <SVC_Status+0x8a>
    106d:	b8 00 00 00 00       	mov    eax,0x0
    1072:	e8 00 00 00 00       	call   1077 <SVC_Status+0x94>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:682
		return;
    1077:	e9 a3 01 00 00       	jmp    121f <SVC_Status+0x23c>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:686
	}

	// A maximum challenge length of 128 should be more than plenty.
	if ( strlen( Cmd_Argv( 1 ) ) > 128 )
    107c:	bf 01 00 00 00       	mov    edi,0x1
    1081:	e8 00 00 00 00       	call   1086 <SVC_Status+0xa3>
    1086:	48 89 c7             	mov    rdi,rax
    1089:	e8 00 00 00 00       	call   108e <SVC_Status+0xab>
    108e:	48 3d 80 00 00 00    	cmp    rax,0x80
    1094:	0f 87 84 01 00 00    	ja     121e <SVC_Status+0x23b>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:689
		return;

	Q_strncpyz( infostring, Cvar_InfoString( CVAR_SERVERINFO, NULL ), sizeof( infostring ) );
    109a:	be 00 00 00 00       	mov    esi,0x0
    109f:	bf 04 00 00 00       	mov    edi,0x4
    10a4:	e8 00 00 00 00       	call   10a9 <SVC_Status+0xc6>
    10a9:	48 89 c1             	mov    rcx,rax
    10ac:	48 8d 85 70 f5 ff ff 	lea    rax,[rbp-0xa90]
    10b3:	ba a0 04 00 00       	mov    edx,0x4a0
    10b8:	48 89 ce             	mov    rsi,rcx
    10bb:	48 89 c7             	mov    rdi,rax
    10be:	e8 00 00 00 00       	call   10c3 <SVC_Status+0xe0>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:693

	// echo back the parameter to status. so master servers can use it as a challenge
	// to prevent timed spoofed reply packets that add ghost servers
	Info_SetValueForKey( infostring, "challenge", Cmd_Argv( 1 ) );
    10c3:	bf 01 00 00 00       	mov    edi,0x1
    10c8:	e8 00 00 00 00       	call   10cd <SVC_Status+0xea>
    10cd:	48 89 c2             	mov    rdx,rax
    10d0:	48 8d 85 70 f5 ff ff 	lea    rax,[rbp-0xa90]
    10d7:	48 89 d1             	mov    rcx,rdx
    10da:	48 8d 15 00 00 00 00 	lea    rdx,[rip+0x0]        # 10e1 <SVC_Status+0xfe>
    10e1:	be 00 04 00 00       	mov    esi,0x400
    10e6:	48 89 c7             	mov    rdi,rax
    10e9:	e8 00 00 00 00       	call   10ee <SVC_Status+0x10b>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:695

	s = status;
    10ee:	48 8d 85 10 fa ff ff 	lea    rax,[rbp-0x5f0]
    10f5:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:696
	status[0] = '\0';
    10f9:	c6 85 10 fa ff ff 00 	mov    BYTE PTR [rbp-0x5f0],0x0
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:697
	statusLength = strlen( infostring ) + 16; // strlen( "statusResponse\n\n" )
    1100:	48 8d 85 70 f5 ff ff 	lea    rax,[rbp-0xa90]
    1107:	48 89 c7             	mov    rdi,rax
    110a:	e8 00 00 00 00       	call   110f <SVC_Status+0x12c>
    110f:	83 c0 10             	add    eax,0x10
    1112:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:699

	for ( i = 0 ; i < sv_maxclients->integer ; i++ ) {
    1115:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
    111c:	e9 ae 00 00 00       	jmp    11cf <SVC_Status+0x1ec>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:700
		cl = &svs.clients[i];
    1121:	48 8b 15 00 00 00 00 	mov    rdx,QWORD PTR [rip+0x0]        # 1128 <SVC_Status+0x145>
    1128:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
    112b:	48 98                	cdqe   
    112d:	48 69 c0 e0 dd 02 00 	imul   rax,rax,0x2dde0
    1134:	48 01 d0             	add    rax,rdx
    1137:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:701
		if ( cl->state >= CS_CONNECTED ) {
    113b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    113f:	8b 00                	mov    eax,DWORD PTR [rax]
    1141:	83 f8 01             	cmp    eax,0x1
    1144:	0f 86 81 00 00 00    	jbe    11cb <SVC_Status+0x1e8>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:703

			ps = SV_GameClientNum( i );
    114a:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
    114d:	89 c7                	mov    edi,eax
    114f:	e8 00 00 00 00       	call   1154 <SVC_Status+0x171>
    1154:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:705
			playerLength = Com_sprintf( player, sizeof( player ), "%i %i \"%s\"\n", 
				ps->persistant[ PERS_SCORE ], cl->ping, cl->name );
    1158:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    115c:	48 8d b0 40 08 01 00 	lea    rsi,[rax+0x10840]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:704
			playerLength = Com_sprintf( player, sizeof( player ), "%i %i \"%s\"\n", 
    1163:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    1167:	8b 88 20 4d 02 00    	mov    ecx,DWORD PTR [rax+0x24d20]
    116d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    1171:	8b 90 f8 00 00 00    	mov    edx,DWORD PTR [rax+0xf8]
    1177:	48 8d 45 90          	lea    rax,[rbp-0x70]
    117b:	49 89 f1             	mov    r9,rsi
    117e:	41 89 c8             	mov    r8d,ecx
    1181:	89 d1                	mov    ecx,edx
    1183:	48 8d 15 00 00 00 00 	lea    rdx,[rip+0x0]        # 118a <SVC_Status+0x1a7>
    118a:	be 40 00 00 00       	mov    esi,0x40
    118f:	48 89 c7             	mov    rdi,rax
    1192:	b8 00 00 00 00       	mov    eax,0x0
    1197:	e8 00 00 00 00       	call   119c <SVC_Status+0x1b9>
    119c:	89 45 dc             	mov    DWORD PTR [rbp-0x24],eax
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:707
			
			if ( statusLength + playerLength >= MAX_PACKETLEN-4 )
    119f:	8b 55 f0             	mov    edx,DWORD PTR [rbp-0x10]
    11a2:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    11a5:	01 d0                	add    eax,edx
    11a7:	3d 73 05 00 00       	cmp    eax,0x573
    11ac:	7f 36                	jg     11e4 <SVC_Status+0x201>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:710
				break; // can't hold any more
			
			s = Q_stradd( s, player );
    11ae:	48 8d 55 90          	lea    rdx,[rbp-0x70]
    11b2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    11b6:	48 89 d6             	mov    rsi,rdx
    11b9:	48 89 c7             	mov    rdi,rax
    11bc:	e8 00 00 00 00       	call   11c1 <SVC_Status+0x1de>
    11c1:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:711
			statusLength += playerLength;
    11c5:	8b 45 dc             	mov    eax,DWORD PTR [rbp-0x24]
    11c8:	01 45 f0             	add    DWORD PTR [rbp-0x10],eax
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:699 (discriminator 2)
	for ( i = 0 ; i < sv_maxclients->integer ; i++ ) {
    11cb:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:699 (discriminator 1)
    11cf:	48 8b 05 00 00 00 00 	mov    rax,QWORD PTR [rip+0x0]        # 11d6 <SVC_Status+0x1f3>
    11d6:	8b 40 30             	mov    eax,DWORD PTR [rax+0x30]
    11d9:	39 45 f4             	cmp    DWORD PTR [rbp-0xc],eax
    11dc:	0f 8c 3f ff ff ff    	jl     1121 <SVC_Status+0x13e>
    11e2:	eb 01                	jmp    11e5 <SVC_Status+0x202>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:708
				break; // can't hold any more
    11e4:	90                   	nop
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:715 (discriminator 1)
		}
	}

	NET_OutOfBandPrint( NS_SERVER, from, "statusResponse\n%s\n%s", infostring, status );
    11e5:	48 8d 8d 10 fa ff ff 	lea    rcx,[rbp-0x5f0]
    11ec:	48 8d 95 70 f5 ff ff 	lea    rdx,[rbp-0xa90]
    11f3:	48 8b 85 68 f5 ff ff 	mov    rax,QWORD PTR [rbp-0xa98]
    11fa:	49 89 c8             	mov    r8,rcx
    11fd:	48 89 d1             	mov    rcx,rdx
    1200:	48 8d 15 00 00 00 00 	lea    rdx,[rip+0x0]        # 1207 <SVC_Status+0x224>
    1207:	48 89 c6             	mov    rsi,rax
    120a:	bf 01 00 00 00       	mov    edi,0x1
    120f:	b8 00 00 00 00       	mov    eax,0x0
    1214:	e8 00 00 00 00       	call   1219 <SVC_Status+0x236>
    1219:	eb 04                	jmp    121f <SVC_Status+0x23c>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:675
		return;
    121b:	90                   	nop
    121c:	eb 01                	jmp    121f <SVC_Status+0x23c>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:687
		return;
    121e:	90                   	nop
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:716
}
    121f:	c9                   	leave  
    1220:	c3                   	ret    

0000000000001221 <SVC_Info>:
SVC_Info():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:727

Responds with a short info message that should be enough to determine
if a user is interested in a server to do a full status
================
*/
static void SVC_Info( const netadr_t *from ) {
    1221:	55                   	push   rbp
    1222:	48 89 e5             	mov    rbp,rsp
    1225:	48 81 ec 30 04 00 00 	sub    rsp,0x430
    122c:	48 89 bd d8 fb ff ff 	mov    QWORD PTR [rbp-0x428],rdi
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:740
		return;
	}
#endif

	// Prevent using getinfo as an amplifier
	if ( SVC_RateLimitAddress( from, 10, 1000 ) ) {
    1233:	48 8b 85 d8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x428]
    123a:	ba e8 03 00 00       	mov    edx,0x3e8
    123f:	be 0a 00 00 00       	mov    esi,0xa
    1244:	48 89 c7             	mov    rdi,rax
    1247:	e8 00 00 00 00       	call   124c <SVC_Info+0x2b>
    124c:	85 c0                	test   eax,eax
    124e:	74 3a                	je     128a <SVC_Info+0x69>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:741
		if ( com_developer->integer ) {
    1250:	48 8b 05 00 00 00 00 	mov    rax,QWORD PTR [rip+0x0]        # 1257 <SVC_Info+0x36>
    1257:	8b 40 30             	mov    eax,DWORD PTR [rax+0x30]
    125a:	85 c0                	test   eax,eax
    125c:	0f 84 77 03 00 00    	je     15d9 <SVC_Info+0x3b8>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:742
			Com_Printf( "SVC_Info: rate limit from %s exceeded, dropping request\n",
    1262:	48 8b 85 d8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x428]
    1269:	48 89 c7             	mov    rdi,rax
    126c:	e8 00 00 00 00       	call   1271 <SVC_Info+0x50>
    1271:	48 89 c6             	mov    rsi,rax
    1274:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 127b <SVC_Info+0x5a>
    127b:	b8 00 00 00 00       	mov    eax,0x0
    1280:	e8 00 00 00 00       	call   1285 <SVC_Info+0x64>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:745
				NET_AdrToString( from ) );
		}
		return;
    1285:	e9 4f 03 00 00       	jmp    15d9 <SVC_Info+0x3b8>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:750
	}

	// Allow getinfo to be DoSed relatively easily, but prevent
	// excess outbound bandwidth usage when being flooded inbound
	if ( SVC_RateLimit( &outboundRateLimit, 10, 100 ) ) {
    128a:	ba 64 00 00 00       	mov    edx,0x64
    128f:	be 0a 00 00 00       	mov    esi,0xa
    1294:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 129b <SVC_Info+0x7a>
    129b:	e8 00 00 00 00       	call   12a0 <SVC_Info+0x7f>
    12a0:	85 c0                	test   eax,eax
    12a2:	74 16                	je     12ba <SVC_Info+0x99>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:751
		Com_DPrintf( "SVC_Info: rate limit exceeded, dropping request\n" );
    12a4:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 12ab <SVC_Info+0x8a>
    12ab:	b8 00 00 00 00       	mov    eax,0x0
    12b0:	e8 00 00 00 00       	call   12b5 <SVC_Info+0x94>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:752
		return;
    12b5:	e9 23 03 00 00       	jmp    15dd <SVC_Info+0x3bc>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:761
	 * Check whether Cmd_Argv(1) has a sane length. This was not done in the original Quake3 version which led
	 * to the Infostring bug discovered by Luigi Auriemma. See http://aluigi.altervista.org/ for the advisory.
	 */

	// A maximum challenge length of 128 should be more than plenty.
	if ( strlen( Cmd_Argv( 1 ) ) > 128 )
    12ba:	bf 01 00 00 00       	mov    edi,0x1
    12bf:	e8 00 00 00 00       	call   12c4 <SVC_Info+0xa3>
    12c4:	48 89 c7             	mov    rdi,rax
    12c7:	e8 00 00 00 00       	call   12cc <SVC_Info+0xab>
    12cc:	48 3d 80 00 00 00    	cmp    rax,0x80
    12d2:	0f 87 04 03 00 00    	ja     15dc <SVC_Info+0x3bb>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:765
		return;

	// don't count privateclients
	count = humans = 0;
    12d8:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
    12df:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
    12e2:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:766
	for ( i = sv_privateClients->integer ; i < sv_maxclients->integer ; i++ ) {
    12e5:	48 8b 05 00 00 00 00 	mov    rax,QWORD PTR [rip+0x0]        # 12ec <SVC_Info+0xcb>
    12ec:	8b 40 30             	mov    eax,DWORD PTR [rax+0x30]
    12ef:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
    12f2:	eb 4a                	jmp    133e <SVC_Info+0x11d>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:767
		if ( svs.clients[i].state >= CS_CONNECTED ) {
    12f4:	48 8b 15 00 00 00 00 	mov    rdx,QWORD PTR [rip+0x0]        # 12fb <SVC_Info+0xda>
    12fb:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    12fe:	48 98                	cdqe   
    1300:	48 69 c0 e0 dd 02 00 	imul   rax,rax,0x2dde0
    1307:	48 01 d0             	add    rax,rdx
    130a:	8b 00                	mov    eax,DWORD PTR [rax]
    130c:	83 f8 01             	cmp    eax,0x1
    130f:	76 29                	jbe    133a <SVC_Info+0x119>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:768
			count++;
    1311:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:769
			if (svs.clients[i].netchan.remoteAddress.type != NA_BOT) {
    1315:	48 8b 15 00 00 00 00 	mov    rdx,QWORD PTR [rip+0x0]        # 131c <SVC_Info+0xfb>
    131c:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    131f:	48 98                	cdqe   
    1321:	48 69 c0 e0 dd 02 00 	imul   rax,rax,0x2dde0
    1328:	48 01 d0             	add    rax,rdx
    132b:	8b 80 40 4d 02 00    	mov    eax,DWORD PTR [rax+0x24d40]
    1331:	83 f8 01             	cmp    eax,0x1
    1334:	74 04                	je     133a <SVC_Info+0x119>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:770
				humans++;
    1336:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:766 (discriminator 2)
	for ( i = sv_privateClients->integer ; i < sv_maxclients->integer ; i++ ) {
    133a:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:766 (discriminator 1)
    133e:	48 8b 05 00 00 00 00 	mov    rax,QWORD PTR [rip+0x0]        # 1345 <SVC_Info+0x124>
    1345:	8b 40 30             	mov    eax,DWORD PTR [rax+0x30]
    1348:	39 45 fc             	cmp    DWORD PTR [rbp-0x4],eax
    134b:	7c a7                	jl     12f4 <SVC_Info+0xd3>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:775
			}
		}
	}

	infostring[0] = '\0';
    134d:	c6 85 e0 fb ff ff 00 	mov    BYTE PTR [rbp-0x420],0x0
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:779

	// echo back the parameter to status. so servers can use it as a challenge
	// to prevent timed spoofed reply packets that add ghost servers
	Info_SetValueForKey( infostring, "challenge", Cmd_Argv(1) );
    1354:	bf 01 00 00 00       	mov    edi,0x1
    1359:	e8 00 00 00 00       	call   135e <SVC_Info+0x13d>
    135e:	48 89 c2             	mov    rdx,rax
    1361:	48 8d 85 e0 fb ff ff 	lea    rax,[rbp-0x420]
    1368:	48 89 d1             	mov    rcx,rdx
    136b:	48 8d 15 00 00 00 00 	lea    rdx,[rip+0x0]        # 1372 <SVC_Info+0x151>
    1372:	be 00 04 00 00       	mov    esi,0x400
    1377:	48 89 c7             	mov    rdi,rax
    137a:	e8 00 00 00 00       	call   137f <SVC_Info+0x15e>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:781

	Info_SetValueForKey( infostring, "protocol", com_protocol->string );
    137f:	48 8b 05 00 00 00 00 	mov    rax,QWORD PTR [rip+0x0]        # 1386 <SVC_Info+0x165>
    1386:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
    138a:	48 8d 85 e0 fb ff ff 	lea    rax,[rbp-0x420]
    1391:	48 89 d1             	mov    rcx,rdx
    1394:	48 8d 15 00 00 00 00 	lea    rdx,[rip+0x0]        # 139b <SVC_Info+0x17a>
    139b:	be 00 04 00 00       	mov    esi,0x400
    13a0:	48 89 c7             	mov    rdi,rax
    13a3:	e8 00 00 00 00       	call   13a8 <SVC_Info+0x187>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:782
	Info_SetValueForKey( infostring, "hostname", sv_hostname->string );
    13a8:	48 8b 05 00 00 00 00 	mov    rax,QWORD PTR [rip+0x0]        # 13af <SVC_Info+0x18e>
    13af:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
    13b3:	48 8d 85 e0 fb ff ff 	lea    rax,[rbp-0x420]
    13ba:	48 89 d1             	mov    rcx,rdx
    13bd:	48 8d 15 00 00 00 00 	lea    rdx,[rip+0x0]        # 13c4 <SVC_Info+0x1a3>
    13c4:	be 00 04 00 00       	mov    esi,0x400
    13c9:	48 89 c7             	mov    rdi,rax
    13cc:	e8 00 00 00 00       	call   13d1 <SVC_Info+0x1b0>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:783
	Info_SetValueForKey( infostring, "mapname", sv_mapname->string );
    13d1:	48 8b 05 00 00 00 00 	mov    rax,QWORD PTR [rip+0x0]        # 13d8 <SVC_Info+0x1b7>
    13d8:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
    13dc:	48 8d 85 e0 fb ff ff 	lea    rax,[rbp-0x420]
    13e3:	48 89 d1             	mov    rcx,rdx
    13e6:	48 8d 15 00 00 00 00 	lea    rdx,[rip+0x0]        # 13ed <SVC_Info+0x1cc>
    13ed:	be 00 04 00 00       	mov    esi,0x400
    13f2:	48 89 c7             	mov    rdi,rax
    13f5:	e8 00 00 00 00       	call   13fa <SVC_Info+0x1d9>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:784
	Info_SetValueForKey( infostring, "clients", va("%i", count) );
    13fa:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
    13fd:	89 c6                	mov    esi,eax
    13ff:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 1406 <SVC_Info+0x1e5>
    1406:	b8 00 00 00 00       	mov    eax,0x0
    140b:	e8 00 00 00 00       	call   1410 <SVC_Info+0x1ef>
    1410:	48 89 c2             	mov    rdx,rax
    1413:	48 8d 85 e0 fb ff ff 	lea    rax,[rbp-0x420]
    141a:	48 89 d1             	mov    rcx,rdx
    141d:	48 8d 15 00 00 00 00 	lea    rdx,[rip+0x0]        # 1424 <SVC_Info+0x203>
    1424:	be 00 04 00 00       	mov    esi,0x400
    1429:	48 89 c7             	mov    rdi,rax
    142c:	e8 00 00 00 00       	call   1431 <SVC_Info+0x210>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:785
	Info_SetValueForKey(infostring, "g_humanplayers", va("%i", humans));
    1431:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
    1434:	89 c6                	mov    esi,eax
    1436:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 143d <SVC_Info+0x21c>
    143d:	b8 00 00 00 00       	mov    eax,0x0
    1442:	e8 00 00 00 00       	call   1447 <SVC_Info+0x226>
    1447:	48 89 c2             	mov    rdx,rax
    144a:	48 8d 85 e0 fb ff ff 	lea    rax,[rbp-0x420]
    1451:	48 89 d1             	mov    rcx,rdx
    1454:	48 8d 15 00 00 00 00 	lea    rdx,[rip+0x0]        # 145b <SVC_Info+0x23a>
    145b:	be 00 04 00 00       	mov    esi,0x400
    1460:	48 89 c7             	mov    rdi,rax
    1463:	e8 00 00 00 00       	call   1468 <SVC_Info+0x247>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:786
	Info_SetValueForKey( infostring, "sv_maxclients", 
    1468:	48 8b 05 00 00 00 00 	mov    rax,QWORD PTR [rip+0x0]        # 146f <SVC_Info+0x24e>
    146f:	8b 50 30             	mov    edx,DWORD PTR [rax+0x30]
    1472:	48 8b 05 00 00 00 00 	mov    rax,QWORD PTR [rip+0x0]        # 1479 <SVC_Info+0x258>
    1479:	8b 40 30             	mov    eax,DWORD PTR [rax+0x30]
    147c:	29 c2                	sub    edx,eax
    147e:	89 d0                	mov    eax,edx
    1480:	89 c6                	mov    esi,eax
    1482:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 1489 <SVC_Info+0x268>
    1489:	b8 00 00 00 00       	mov    eax,0x0
    148e:	e8 00 00 00 00       	call   1493 <SVC_Info+0x272>
    1493:	48 89 c2             	mov    rdx,rax
    1496:	48 8d 85 e0 fb ff ff 	lea    rax,[rbp-0x420]
    149d:	48 89 d1             	mov    rcx,rdx
    14a0:	48 8d 15 00 00 00 00 	lea    rdx,[rip+0x0]        # 14a7 <SVC_Info+0x286>
    14a7:	be 00 04 00 00       	mov    esi,0x400
    14ac:	48 89 c7             	mov    rdi,rax
    14af:	e8 00 00 00 00       	call   14b4 <SVC_Info+0x293>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:788
		va("%i", sv_maxclients->integer - sv_privateClients->integer ) );
	Info_SetValueForKey( infostring, "gametype", va("%i", sv_gametype->integer ) );
    14b4:	48 8b 05 00 00 00 00 	mov    rax,QWORD PTR [rip+0x0]        # 14bb <SVC_Info+0x29a>
    14bb:	8b 40 30             	mov    eax,DWORD PTR [rax+0x30]
    14be:	89 c6                	mov    esi,eax
    14c0:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 14c7 <SVC_Info+0x2a6>
    14c7:	b8 00 00 00 00       	mov    eax,0x0
    14cc:	e8 00 00 00 00       	call   14d1 <SVC_Info+0x2b0>
    14d1:	48 89 c2             	mov    rdx,rax
    14d4:	48 8d 85 e0 fb ff ff 	lea    rax,[rbp-0x420]
    14db:	48 89 d1             	mov    rcx,rdx
    14de:	48 8d 15 00 00 00 00 	lea    rdx,[rip+0x0]        # 14e5 <SVC_Info+0x2c4>
    14e5:	be 00 04 00 00       	mov    esi,0x400
    14ea:	48 89 c7             	mov    rdi,rax
    14ed:	e8 00 00 00 00       	call   14f2 <SVC_Info+0x2d1>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:789
	Info_SetValueForKey( infostring, "pure", va("%i", sv_pure->integer ) );
    14f2:	48 8b 05 00 00 00 00 	mov    rax,QWORD PTR [rip+0x0]        # 14f9 <SVC_Info+0x2d8>
    14f9:	8b 40 30             	mov    eax,DWORD PTR [rax+0x30]
    14fc:	89 c6                	mov    esi,eax
    14fe:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 1505 <SVC_Info+0x2e4>
    1505:	b8 00 00 00 00       	mov    eax,0x0
    150a:	e8 00 00 00 00       	call   150f <SVC_Info+0x2ee>
    150f:	48 89 c2             	mov    rdx,rax
    1512:	48 8d 85 e0 fb ff ff 	lea    rax,[rbp-0x420]
    1519:	48 89 d1             	mov    rcx,rdx
    151c:	48 8d 15 00 00 00 00 	lea    rdx,[rip+0x0]        # 1523 <SVC_Info+0x302>
    1523:	be 00 04 00 00       	mov    esi,0x400
    1528:	48 89 c7             	mov    rdi,rax
    152b:	e8 00 00 00 00       	call   1530 <SVC_Info+0x30f>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:790
	Info_SetValueForKey(infostring, "g_needpass", va("%d", Cvar_VariableIntegerValue("g_needpass")));
    1530:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 1537 <SVC_Info+0x316>
    1537:	e8 00 00 00 00       	call   153c <SVC_Info+0x31b>
    153c:	89 c6                	mov    esi,eax
    153e:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 1545 <SVC_Info+0x324>
    1545:	b8 00 00 00 00       	mov    eax,0x0
    154a:	e8 00 00 00 00       	call   154f <SVC_Info+0x32e>
    154f:	48 89 c2             	mov    rdx,rax
    1552:	48 8d 85 e0 fb ff ff 	lea    rax,[rbp-0x420]
    1559:	48 89 d1             	mov    rcx,rdx
    155c:	48 8d 15 00 00 00 00 	lea    rdx,[rip+0x0]        # 1563 <SVC_Info+0x342>
    1563:	be 00 04 00 00       	mov    esi,0x400
    1568:	48 89 c7             	mov    rdi,rax
    156b:	e8 00 00 00 00       	call   1570 <SVC_Info+0x34f>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:791
	gamedir = Cvar_VariableString( "fs_game" );
    1570:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 1577 <SVC_Info+0x356>
    1577:	e8 00 00 00 00       	call   157c <SVC_Info+0x35b>
    157c:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:792
	if( *gamedir ) {
    1580:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    1584:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    1587:	84 c0                	test   al,al
    1589:	74 22                	je     15ad <SVC_Info+0x38c>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:793
		Info_SetValueForKey( infostring, "game", gamedir );
    158b:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
    158f:	48 8d 85 e0 fb ff ff 	lea    rax,[rbp-0x420]
    1596:	48 89 d1             	mov    rcx,rdx
    1599:	48 8d 15 00 00 00 00 	lea    rdx,[rip+0x0]        # 15a0 <SVC_Info+0x37f>
    15a0:	be 00 04 00 00       	mov    esi,0x400
    15a5:	48 89 c7             	mov    rdi,rax
    15a8:	e8 00 00 00 00       	call   15ad <SVC_Info+0x38c>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:796
	}

	NET_OutOfBandPrint( NS_SERVER, from, "infoResponse\n%s", infostring );
    15ad:	48 8d 95 e0 fb ff ff 	lea    rdx,[rbp-0x420]
    15b4:	48 8b 85 d8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x428]
    15bb:	48 89 d1             	mov    rcx,rdx
    15be:	48 8d 15 00 00 00 00 	lea    rdx,[rip+0x0]        # 15c5 <SVC_Info+0x3a4>
    15c5:	48 89 c6             	mov    rsi,rax
    15c8:	bf 01 00 00 00       	mov    edi,0x1
    15cd:	b8 00 00 00 00       	mov    eax,0x0
    15d2:	e8 00 00 00 00       	call   15d7 <SVC_Info+0x3b6>
    15d7:	eb 04                	jmp    15dd <SVC_Info+0x3bc>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:745
		return;
    15d9:	90                   	nop
    15da:	eb 01                	jmp    15dd <SVC_Info+0x3bc>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:762
		return;
    15dc:	90                   	nop
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:797
}
    15dd:	c9                   	leave  
    15de:	c3                   	ret    

00000000000015df <SV_FlushRedirect>:
SV_FlushRedirect():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:808
================
*/
static netadr_t redirectAddress; // for rcon return messages

static void SV_FlushRedirect( const char *outputbuf )
{
    15df:	55                   	push   rbp
    15e0:	48 89 e5             	mov    rbp,rsp
    15e3:	48 83 ec 10          	sub    rsp,0x10
    15e7:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:809
	if ( *outputbuf )
    15eb:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    15ef:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    15f2:	84 c0                	test   al,al
    15f4:	74 24                	je     161a <SV_FlushRedirect+0x3b>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:811
	{
		NET_OutOfBandPrint( NS_SERVER, &redirectAddress, "print\n%s", outputbuf );
    15f6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    15fa:	48 89 c1             	mov    rcx,rax
    15fd:	48 8d 15 00 00 00 00 	lea    rdx,[rip+0x0]        # 1604 <SV_FlushRedirect+0x25>
    1604:	48 8d 35 00 00 00 00 	lea    rsi,[rip+0x0]        # 160b <SV_FlushRedirect+0x2c>
    160b:	bf 01 00 00 00       	mov    edi,0x1
    1610:	b8 00 00 00 00       	mov    eax,0x0
    1615:	e8 00 00 00 00       	call   161a <SV_FlushRedirect+0x3b>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:813
	}
}
    161a:	90                   	nop
    161b:	c9                   	leave  
    161c:	c3                   	ret    

000000000000161d <SVC_RemoteCommand>:
SVC_RemoteCommand():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:825
An rcon packet arrived from the network.
Shift down the remaining args
Redirect all printfs
===============
*/
static void SVC_RemoteCommand( const netadr_t *from ) {
    161d:	55                   	push   rbp
    161e:	48 89 e5             	mov    rbp,rsp
    1621:	53                   	push   rbx
    1622:	48 81 ec 28 04 00 00 	sub    rsp,0x428
    1629:	48 89 bd d8 fb ff ff 	mov    QWORD PTR [rbp-0x428],rdi
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:834
	// (OOB messages are the bottleneck here)
	char		sv_outputbuf[1024 - 16];
	const char	*cmd_aux, *pw;

	// Prevent using rcon as an amplifier and make dictionary attacks impractical
	if ( SVC_RateLimitAddress( from, 10, 1000 ) ) {
    1630:	48 8b 85 d8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x428]
    1637:	ba e8 03 00 00       	mov    edx,0x3e8
    163c:	be 0a 00 00 00       	mov    esi,0xa
    1641:	48 89 c7             	mov    rdi,rax
    1644:	e8 00 00 00 00       	call   1649 <SVC_RemoteCommand+0x2c>
    1649:	85 c0                	test   eax,eax
    164b:	74 3a                	je     1687 <SVC_RemoteCommand+0x6a>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:835
		if ( com_developer->integer ) {
    164d:	48 8b 05 00 00 00 00 	mov    rax,QWORD PTR [rip+0x0]        # 1654 <SVC_RemoteCommand+0x37>
    1654:	8b 40 30             	mov    eax,DWORD PTR [rax+0x30]
    1657:	85 c0                	test   eax,eax
    1659:	0f 84 86 02 00 00    	je     18e5 <SVC_RemoteCommand+0x2c8>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:836
			Com_Printf( "SVC_RemoteCommand: rate limit from %s exceeded, dropping request\n",
    165f:	48 8b 85 d8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x428]
    1666:	48 89 c7             	mov    rdi,rax
    1669:	e8 00 00 00 00       	call   166e <SVC_RemoteCommand+0x51>
    166e:	48 89 c6             	mov    rsi,rax
    1671:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 1678 <SVC_RemoteCommand+0x5b>
    1678:	b8 00 00 00 00       	mov    eax,0x0
    167d:	e8 00 00 00 00       	call   1682 <SVC_RemoteCommand+0x65>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:839
				NET_AdrToString( from ) );
		}
		return;
    1682:	e9 5e 02 00 00       	jmp    18e5 <SVC_RemoteCommand+0x2c8>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:842
	}

	pw = Cmd_Argv( 1 );
    1687:	bf 01 00 00 00       	mov    edi,0x1
    168c:	e8 00 00 00 00       	call   1691 <SVC_RemoteCommand+0x74>
    1691:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:843
	if ( ( sv_rconPassword->string[0] && strcmp( pw, sv_rconPassword->string ) == 0 ) ||
    1695:	48 8b 05 00 00 00 00 	mov    rax,QWORD PTR [rip+0x0]        # 169c <SVC_RemoteCommand+0x7f>
    169c:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
    16a0:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    16a3:	84 c0                	test   al,al
    16a5:	74 1e                	je     16c5 <SVC_RemoteCommand+0xa8>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:843 (discriminator 1)
    16a7:	48 8b 05 00 00 00 00 	mov    rax,QWORD PTR [rip+0x0]        # 16ae <SVC_RemoteCommand+0x91>
    16ae:	48 8b 50 08          	mov    rdx,QWORD PTR [rax+0x8]
    16b2:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    16b6:	48 89 d6             	mov    rsi,rdx
    16b9:	48 89 c7             	mov    rdi,rax
    16bc:	e8 00 00 00 00       	call   16c1 <SVC_RemoteCommand+0xa4>
    16c1:	85 c0                	test   eax,eax
    16c3:	74 22                	je     16e7 <SVC_RemoteCommand+0xca>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:844 (discriminator 3)
		( rconPassword2[0] && strcmp( pw, rconPassword2 ) == 0 ) ) {
    16c5:	0f b6 05 00 00 00 00 	movzx  eax,BYTE PTR [rip+0x0]        # 16cc <SVC_RemoteCommand+0xaf>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:843 (discriminator 3)
	if ( ( sv_rconPassword->string[0] && strcmp( pw, sv_rconPassword->string ) == 0 ) ||
    16cc:	84 c0                	test   al,al
    16ce:	74 53                	je     1723 <SVC_RemoteCommand+0x106>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:844
		( rconPassword2[0] && strcmp( pw, rconPassword2 ) == 0 ) ) {
    16d0:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    16d4:	48 8d 35 00 00 00 00 	lea    rsi,[rip+0x0]        # 16db <SVC_RemoteCommand+0xbe>
    16db:	48 89 c7             	mov    rdi,rax
    16de:	e8 00 00 00 00       	call   16e3 <SVC_RemoteCommand+0xc6>
    16e3:	85 c0                	test   eax,eax
    16e5:	75 3c                	jne    1723 <SVC_RemoteCommand+0x106>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:845
		valid = qtrue;
    16e7:	c7 45 ec 01 00 00 00 	mov    DWORD PTR [rbp-0x14],0x1
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:846
		Com_Printf( "Rcon from %s: %s\n", NET_AdrToString( from ), Cmd_ArgsFrom( 2 ) );
    16ee:	bf 02 00 00 00       	mov    edi,0x2
    16f3:	e8 00 00 00 00       	call   16f8 <SVC_RemoteCommand+0xdb>
    16f8:	48 89 c3             	mov    rbx,rax
    16fb:	48 8b 85 d8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x428]
    1702:	48 89 c7             	mov    rdi,rax
    1705:	e8 00 00 00 00       	call   170a <SVC_RemoteCommand+0xed>
    170a:	48 89 da             	mov    rdx,rbx
    170d:	48 89 c6             	mov    rsi,rax
    1710:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 1717 <SVC_RemoteCommand+0xfa>
    1717:	b8 00 00 00 00       	mov    eax,0x0
    171c:	e8 00 00 00 00       	call   1721 <SVC_RemoteCommand+0x104>
    1721:	eb 6a                	jmp    178d <SVC_RemoteCommand+0x170>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:849
	} else {
		// Make DoS via rcon impractical
		if ( SVC_RateLimit( &bucket, 10, 1000 ) ) {
    1723:	ba e8 03 00 00       	mov    edx,0x3e8
    1728:	be 0a 00 00 00       	mov    esi,0xa
    172d:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 1734 <SVC_RemoteCommand+0x117>
    1734:	e8 00 00 00 00       	call   1739 <SVC_RemoteCommand+0x11c>
    1739:	85 c0                	test   eax,eax
    173b:	74 16                	je     1753 <SVC_RemoteCommand+0x136>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:850
			Com_DPrintf( "SVC_RemoteCommand: rate limit exceeded, dropping request\n" );
    173d:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 1744 <SVC_RemoteCommand+0x127>
    1744:	b8 00 00 00 00       	mov    eax,0x0
    1749:	e8 00 00 00 00       	call   174e <SVC_RemoteCommand+0x131>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:851
			return;
    174e:	e9 93 01 00 00       	jmp    18e6 <SVC_RemoteCommand+0x2c9>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:854
		}

		valid = qfalse;
    1753:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:855
		Com_Printf( "Bad rcon from %s: %s\n", NET_AdrToString( from ), Cmd_ArgsFrom( 2 ) );
    175a:	bf 02 00 00 00       	mov    edi,0x2
    175f:	e8 00 00 00 00       	call   1764 <SVC_RemoteCommand+0x147>
    1764:	48 89 c3             	mov    rbx,rax
    1767:	48 8b 85 d8 fb ff ff 	mov    rax,QWORD PTR [rbp-0x428]
    176e:	48 89 c7             	mov    rdi,rax
    1771:	e8 00 00 00 00       	call   1776 <SVC_RemoteCommand+0x159>
    1776:	48 89 da             	mov    rdx,rbx
    1779:	48 89 c6             	mov    rsi,rax
    177c:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 1783 <SVC_RemoteCommand+0x166>
    1783:	b8 00 00 00 00       	mov    eax,0x0
    1788:	e8 00 00 00 00       	call   178d <SVC_RemoteCommand+0x170>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:859
	}

	// start redirecting all print outputs to the packet
	redirectAddress = *from;
    178d:	48 8b 8d d8 fb ff ff 	mov    rcx,QWORD PTR [rbp-0x428]
    1794:	48 8b 01             	mov    rax,QWORD PTR [rcx]
    1797:	48 8b 51 08          	mov    rdx,QWORD PTR [rcx+0x8]
    179b:	48 89 05 00 00 00 00 	mov    QWORD PTR [rip+0x0],rax        # 17a2 <SVC_RemoteCommand+0x185>
    17a2:	48 89 15 00 00 00 00 	mov    QWORD PTR [rip+0x0],rdx        # 17a9 <SVC_RemoteCommand+0x18c>
    17a9:	48 8b 41 10          	mov    rax,QWORD PTR [rcx+0x10]
    17ad:	48 8b 51 18          	mov    rdx,QWORD PTR [rcx+0x18]
    17b1:	48 89 05 00 00 00 00 	mov    QWORD PTR [rip+0x0],rax        # 17b8 <SVC_RemoteCommand+0x19b>
    17b8:	48 89 15 00 00 00 00 	mov    QWORD PTR [rip+0x0],rdx        # 17bf <SVC_RemoteCommand+0x1a2>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:860
	Com_BeginRedirect( sv_outputbuf, sizeof( sv_outputbuf ), SV_FlushRedirect );
    17bf:	48 8d 85 e0 fb ff ff 	lea    rax,[rbp-0x420]
    17c6:	48 8d 15 12 fe ff ff 	lea    rdx,[rip+0xfffffffffffffe12]        # 15df <SV_FlushRedirect>
    17cd:	be f0 03 00 00       	mov    esi,0x3f0
    17d2:	48 89 c7             	mov    rdi,rax
    17d5:	e8 00 00 00 00       	call   17da <SVC_RemoteCommand+0x1bd>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:862

	if ( !sv_rconPassword->string[0] && !rconPassword2[0] ) {
    17da:	48 8b 05 00 00 00 00 	mov    rax,QWORD PTR [rip+0x0]        # 17e1 <SVC_RemoteCommand+0x1c4>
    17e1:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
    17e5:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    17e8:	84 c0                	test   al,al
    17ea:	75 21                	jne    180d <SVC_RemoteCommand+0x1f0>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:862 (discriminator 1)
    17ec:	0f b6 05 00 00 00 00 	movzx  eax,BYTE PTR [rip+0x0]        # 17f3 <SVC_RemoteCommand+0x1d6>
    17f3:	84 c0                	test   al,al
    17f5:	75 16                	jne    180d <SVC_RemoteCommand+0x1f0>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:863
		Com_Printf( "No rconpassword set on the server.\n" );
    17f7:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 17fe <SVC_RemoteCommand+0x1e1>
    17fe:	b8 00 00 00 00       	mov    eax,0x0
    1803:	e8 00 00 00 00       	call   1808 <SVC_RemoteCommand+0x1eb>
    1808:	e9 d1 00 00 00       	jmp    18de <SVC_RemoteCommand+0x2c1>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:864
	} else if ( !valid ) {
    180d:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
    1811:	75 16                	jne    1829 <SVC_RemoteCommand+0x20c>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:865
		Com_Printf( "Bad rconpassword.\n" );
    1813:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 181a <SVC_RemoteCommand+0x1fd>
    181a:	b8 00 00 00 00       	mov    eax,0x0
    181f:	e8 00 00 00 00       	call   1824 <SVC_RemoteCommand+0x207>
    1824:	e9 b5 00 00 00       	jmp    18de <SVC_RemoteCommand+0x2c1>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:871
	} else {
		// https://zerowing.idsoftware.com/bugzilla/show_bug.cgi?id=543
		// get the command directly, "rcon <pass> <command>" to avoid quoting issues
		// extract the command by walking
		// since the cmd formatting can fuckup (amount of spaces), using a dumb step by step parsing
		cmd_aux = Cmd_Cmd();
    1829:	e8 00 00 00 00       	call   182e <SVC_RemoteCommand+0x211>
    182e:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:872
		while ( *cmd_aux && *cmd_aux <= ' ' ) // skip whitespace
    1832:	eb 05                	jmp    1839 <SVC_RemoteCommand+0x21c>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:873
			cmd_aux++;
    1834:	48 83 45 e0 01       	add    QWORD PTR [rbp-0x20],0x1
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:872
		while ( *cmd_aux && *cmd_aux <= ' ' ) // skip whitespace
    1839:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    183d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    1840:	84 c0                	test   al,al
    1842:	74 0b                	je     184f <SVC_RemoteCommand+0x232>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:872 (discriminator 1)
    1844:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    1848:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    184b:	3c 20                	cmp    al,0x20
    184d:	7e e5                	jle    1834 <SVC_RemoteCommand+0x217>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:874
		cmd_aux += 4; // "rcon"
    184f:	48 83 45 e0 04       	add    QWORD PTR [rbp-0x20],0x4
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:875
		while ( *cmd_aux == ' ' )
    1854:	eb 05                	jmp    185b <SVC_RemoteCommand+0x23e>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:876
			cmd_aux++;
    1856:	48 83 45 e0 01       	add    QWORD PTR [rbp-0x20],0x1
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:875
		while ( *cmd_aux == ' ' )
    185b:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    185f:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    1862:	3c 20                	cmp    al,0x20
    1864:	74 f0                	je     1856 <SVC_RemoteCommand+0x239>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:877
		if ( *cmd_aux == '"' ) {
    1866:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    186a:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    186d:	3c 22                	cmp    al,0x22
    186f:	75 39                	jne    18aa <SVC_RemoteCommand+0x28d>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:878
			cmd_aux++;
    1871:	48 83 45 e0 01       	add    QWORD PTR [rbp-0x20],0x1
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:879
			while ( *cmd_aux && *cmd_aux != '"' ) // quoted password
    1876:	eb 05                	jmp    187d <SVC_RemoteCommand+0x260>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:880
				cmd_aux++;
    1878:	48 83 45 e0 01       	add    QWORD PTR [rbp-0x20],0x1
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:879
			while ( *cmd_aux && *cmd_aux != '"' ) // quoted password
    187d:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    1881:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    1884:	84 c0                	test   al,al
    1886:	74 0b                	je     1893 <SVC_RemoteCommand+0x276>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:879 (discriminator 1)
    1888:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    188c:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    188f:	3c 22                	cmp    al,0x22
    1891:	75 e5                	jne    1878 <SVC_RemoteCommand+0x25b>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:881
			if ( *cmd_aux == '"' )
    1893:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    1897:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    189a:	3c 22                	cmp    al,0x22
    189c:	75 29                	jne    18c7 <SVC_RemoteCommand+0x2aa>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:882
				cmd_aux++;
    189e:	48 83 45 e0 01       	add    QWORD PTR [rbp-0x20],0x1
    18a3:	eb 22                	jmp    18c7 <SVC_RemoteCommand+0x2aa>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:885
		} else {
			while ( *cmd_aux && *cmd_aux != ' ' ) // password
				cmd_aux++;
    18a5:	48 83 45 e0 01       	add    QWORD PTR [rbp-0x20],0x1
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:884
			while ( *cmd_aux && *cmd_aux != ' ' ) // password
    18aa:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    18ae:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    18b1:	84 c0                	test   al,al
    18b3:	74 12                	je     18c7 <SVC_RemoteCommand+0x2aa>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:884 (discriminator 1)
    18b5:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    18b9:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    18bc:	3c 20                	cmp    al,0x20
    18be:	75 e5                	jne    18a5 <SVC_RemoteCommand+0x288>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:887 (discriminator 1)
		}
		while ( *cmd_aux == ' ' )
    18c0:	eb 05                	jmp    18c7 <SVC_RemoteCommand+0x2aa>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:888
			cmd_aux++;
    18c2:	48 83 45 e0 01       	add    QWORD PTR [rbp-0x20],0x1
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:887
		while ( *cmd_aux == ' ' )
    18c7:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    18cb:	0f b6 00             	movzx  eax,BYTE PTR [rax]
    18ce:	3c 20                	cmp    al,0x20
    18d0:	74 f0                	je     18c2 <SVC_RemoteCommand+0x2a5>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:890

		Cmd_ExecuteString( cmd_aux );
    18d2:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    18d6:	48 89 c7             	mov    rdi,rax
    18d9:	e8 00 00 00 00       	call   18de <SVC_RemoteCommand+0x2c1>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:893
	}

	Com_EndRedirect();
    18de:	e8 00 00 00 00       	call   18e3 <SVC_RemoteCommand+0x2c6>
    18e3:	eb 01                	jmp    18e6 <SVC_RemoteCommand+0x2c9>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:839
		return;
    18e5:	90                   	nop
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:894
}
    18e6:	48 81 c4 28 04 00 00 	add    rsp,0x428
    18ed:	5b                   	pop    rbx
    18ee:	5d                   	pop    rbp
    18ef:	c3                   	ret    

00000000000018f0 <SV_ConnectionlessPacket>:
SV_ConnectionlessPacket():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:907
characters to distinguish it from a game channel.
Clients that are in the game can still send
connectionless packets.
=================
*/
static void SV_ConnectionlessPacket( const netadr_t *from, msg_t *msg ) {
    18f0:	55                   	push   rbp
    18f1:	48 89 e5             	mov    rbp,rsp
    18f4:	53                   	push   rbx
    18f5:	48 83 ec 28          	sub    rsp,0x28
    18f9:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
    18fd:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:911
	const char *s;
	const char *c;

	MSG_BeginReadingOOB( msg );
    1901:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
    1905:	48 89 c7             	mov    rdi,rax
    1908:	e8 00 00 00 00       	call   190d <SV_ConnectionlessPacket+0x1d>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:912
	MSG_ReadLong( msg );		// skip the -1 marker
    190d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
    1911:	48 89 c7             	mov    rdi,rax
    1914:	e8 00 00 00 00       	call   1919 <SV_ConnectionlessPacket+0x29>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:914

	if ( !memcmp( "connect ", msg->data + 4, 8 ) ) {
    1919:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
    191d:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
    1921:	48 83 c0 04          	add    rax,0x4
    1925:	ba 08 00 00 00       	mov    edx,0x8
    192a:	48 89 c6             	mov    rsi,rax
    192d:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 1934 <SV_ConnectionlessPacket+0x44>
    1934:	e8 00 00 00 00       	call   1939 <SV_ConnectionlessPacket+0x49>
    1939:	85 c0                	test   eax,eax
    193b:	75 5f                	jne    199c <SV_ConnectionlessPacket+0xac>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:915
		if ( msg->cursize > MAX_INFO_STRING*2 ) { // if we assume 200% compression ratio on userinfo
    193d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
    1941:	8b 40 20             	mov    eax,DWORD PTR [rax+0x20]
    1944:	3d 00 08 00 00       	cmp    eax,0x800
    1949:	7e 40                	jle    198b <SV_ConnectionlessPacket+0x9b>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:916
			if ( com_developer->integer ) {
    194b:	48 8b 05 00 00 00 00 	mov    rax,QWORD PTR [rip+0x0]        # 1952 <SV_ConnectionlessPacket+0x62>
    1952:	8b 40 30             	mov    eax,DWORD PTR [rax+0x30]
    1955:	85 c0                	test   eax,eax
    1957:	0f 84 e0 01 00 00    	je     1b3d <SV_ConnectionlessPacket+0x24d>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:917
				Com_Printf( "%s : connect packet is too long - %i\n", NET_AdrToString( from ), msg->cursize );
    195d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
    1961:	8b 58 20             	mov    ebx,DWORD PTR [rax+0x20]
    1964:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    1968:	48 89 c7             	mov    rdi,rax
    196b:	e8 00 00 00 00       	call   1970 <SV_ConnectionlessPacket+0x80>
    1970:	89 da                	mov    edx,ebx
    1972:	48 89 c6             	mov    rsi,rax
    1975:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 197c <SV_ConnectionlessPacket+0x8c>
    197c:	b8 00 00 00 00       	mov    eax,0x0
    1981:	e8 00 00 00 00       	call   1986 <SV_ConnectionlessPacket+0x96>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:919
			}
			return;
    1986:	e9 b2 01 00 00       	jmp    1b3d <SV_ConnectionlessPacket+0x24d>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:921
		}
		Huff_Decompress( msg, 12 );
    198b:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
    198f:	be 0c 00 00 00       	mov    esi,0xc
    1994:	48 89 c7             	mov    rdi,rax
    1997:	e8 00 00 00 00       	call   199c <SV_ConnectionlessPacket+0xac>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:924
	}

	s = MSG_ReadStringLine( msg );
    199c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
    19a0:	48 89 c7             	mov    rdi,rax
    19a3:	e8 00 00 00 00       	call   19a8 <SV_ConnectionlessPacket+0xb8>
    19a8:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:925
	Cmd_TokenizeString( s );
    19ac:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    19b0:	48 89 c7             	mov    rdi,rax
    19b3:	e8 00 00 00 00       	call   19b8 <SV_ConnectionlessPacket+0xc8>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:927

	c = Cmd_Argv(0);
    19b8:	bf 00 00 00 00       	mov    edi,0x0
    19bd:	e8 00 00 00 00       	call   19c2 <SV_ConnectionlessPacket+0xd2>
    19c2:	48 89 45 e0          	mov    QWORD PTR [rbp-0x20],rax
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:929

	if ( com_developer->integer ) {
    19c6:	48 8b 05 00 00 00 00 	mov    rax,QWORD PTR [rip+0x0]        # 19cd <SV_ConnectionlessPacket+0xdd>
    19cd:	8b 40 30             	mov    eax,DWORD PTR [rax+0x30]
    19d0:	85 c0                	test   eax,eax
    19d2:	74 2a                	je     19fe <SV_ConnectionlessPacket+0x10e>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:930
		Com_Printf( "SV packet %s : %s\n", NET_AdrToString( from ), c );
    19d4:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    19d8:	48 89 c7             	mov    rdi,rax
    19db:	e8 00 00 00 00       	call   19e0 <SV_ConnectionlessPacket+0xf0>
    19e0:	48 89 c1             	mov    rcx,rax
    19e3:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    19e7:	48 89 c2             	mov    rdx,rax
    19ea:	48 89 ce             	mov    rsi,rcx
    19ed:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 19f4 <SV_ConnectionlessPacket+0x104>
    19f4:	b8 00 00 00 00       	mov    eax,0x0
    19f9:	e8 00 00 00 00       	call   19fe <SV_ConnectionlessPacket+0x10e>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:933
	}

	if ( !Q_stricmp(c, "rcon") ) {
    19fe:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    1a02:	48 8d 35 00 00 00 00 	lea    rsi,[rip+0x0]        # 1a09 <SV_ConnectionlessPacket+0x119>
    1a09:	48 89 c7             	mov    rdi,rax
    1a0c:	e8 00 00 00 00       	call   1a11 <SV_ConnectionlessPacket+0x121>
    1a11:	85 c0                	test   eax,eax
    1a13:	75 11                	jne    1a26 <SV_ConnectionlessPacket+0x136>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:934
		SVC_RemoteCommand( from );
    1a15:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    1a19:	48 89 c7             	mov    rdi,rax
    1a1c:	e8 fc fb ff ff       	call   161d <SVC_RemoteCommand>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:935
		return;
    1a21:	e9 1b 01 00 00       	jmp    1b41 <SV_ConnectionlessPacket+0x251>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:938
	}

	if ( !com_sv_running->integer ) {
    1a26:	48 8b 05 00 00 00 00 	mov    rax,QWORD PTR [rip+0x0]        # 1a2d <SV_ConnectionlessPacket+0x13d>
    1a2d:	8b 40 30             	mov    eax,DWORD PTR [rax+0x30]
    1a30:	85 c0                	test   eax,eax
    1a32:	0f 84 08 01 00 00    	je     1b40 <SV_ConnectionlessPacket+0x250>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:942
		return;
	}

	if (!Q_stricmp(c, "getstatus")) {
    1a38:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    1a3c:	48 8d 35 00 00 00 00 	lea    rsi,[rip+0x0]        # 1a43 <SV_ConnectionlessPacket+0x153>
    1a43:	48 89 c7             	mov    rdi,rax
    1a46:	e8 00 00 00 00       	call   1a4b <SV_ConnectionlessPacket+0x15b>
    1a4b:	85 c0                	test   eax,eax
    1a4d:	75 11                	jne    1a60 <SV_ConnectionlessPacket+0x170>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:943
		SVC_Status( from );
    1a4f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    1a53:	48 89 c7             	mov    rdi,rax
    1a56:	e8 88 f5 ff ff       	call   fe3 <SVC_Status>
    1a5b:	e9 e1 00 00 00       	jmp    1b41 <SV_ConnectionlessPacket+0x251>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:944
	} else if (!Q_stricmp(c, "getinfo")) {
    1a60:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    1a64:	48 8d 35 00 00 00 00 	lea    rsi,[rip+0x0]        # 1a6b <SV_ConnectionlessPacket+0x17b>
    1a6b:	48 89 c7             	mov    rdi,rax
    1a6e:	e8 00 00 00 00       	call   1a73 <SV_ConnectionlessPacket+0x183>
    1a73:	85 c0                	test   eax,eax
    1a75:	75 11                	jne    1a88 <SV_ConnectionlessPacket+0x198>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:945
		SVC_Info( from );
    1a77:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    1a7b:	48 89 c7             	mov    rdi,rax
    1a7e:	e8 9e f7 ff ff       	call   1221 <SVC_Info>
    1a83:	e9 b9 00 00 00       	jmp    1b41 <SV_ConnectionlessPacket+0x251>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:946
	} else if (!Q_stricmp(c, "getchallenge")) {
    1a88:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    1a8c:	48 8d 35 00 00 00 00 	lea    rsi,[rip+0x0]        # 1a93 <SV_ConnectionlessPacket+0x1a3>
    1a93:	48 89 c7             	mov    rdi,rax
    1a96:	e8 00 00 00 00       	call   1a9b <SV_ConnectionlessPacket+0x1ab>
    1a9b:	85 c0                	test   eax,eax
    1a9d:	75 11                	jne    1ab0 <SV_ConnectionlessPacket+0x1c0>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:947
		SV_GetChallenge( from );
    1a9f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    1aa3:	48 89 c7             	mov    rdi,rax
    1aa6:	e8 00 00 00 00       	call   1aab <SV_ConnectionlessPacket+0x1bb>
    1aab:	e9 91 00 00 00       	jmp    1b41 <SV_ConnectionlessPacket+0x251>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:948
	} else if (!Q_stricmp(c, "connect")) {
    1ab0:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    1ab4:	48 8d 35 00 00 00 00 	lea    rsi,[rip+0x0]        # 1abb <SV_ConnectionlessPacket+0x1cb>
    1abb:	48 89 c7             	mov    rdi,rax
    1abe:	e8 00 00 00 00       	call   1ac3 <SV_ConnectionlessPacket+0x1d3>
    1ac3:	85 c0                	test   eax,eax
    1ac5:	75 0e                	jne    1ad5 <SV_ConnectionlessPacket+0x1e5>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:949
		SV_DirectConnect( from );
    1ac7:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    1acb:	48 89 c7             	mov    rdi,rax
    1ace:	e8 00 00 00 00       	call   1ad3 <SV_ConnectionlessPacket+0x1e3>
    1ad3:	eb 6c                	jmp    1b41 <SV_ConnectionlessPacket+0x251>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:951
#ifndef STANDALONE
	} else if (!Q_stricmp(c, "ipAuthorize")) {
    1ad5:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    1ad9:	48 8d 35 00 00 00 00 	lea    rsi,[rip+0x0]        # 1ae0 <SV_ConnectionlessPacket+0x1f0>
    1ae0:	48 89 c7             	mov    rdi,rax
    1ae3:	e8 00 00 00 00       	call   1ae8 <SV_ConnectionlessPacket+0x1f8>
    1ae8:	85 c0                	test   eax,eax
    1aea:	74 55                	je     1b41 <SV_ConnectionlessPacket+0x251>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:954
		// removed from codebase since stateless challenges
#endif
	} else if (!Q_stricmp(c, "disconnect")) {
    1aec:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    1af0:	48 8d 35 00 00 00 00 	lea    rsi,[rip+0x0]        # 1af7 <SV_ConnectionlessPacket+0x207>
    1af7:	48 89 c7             	mov    rdi,rax
    1afa:	e8 00 00 00 00       	call   1aff <SV_ConnectionlessPacket+0x20f>
    1aff:	85 c0                	test   eax,eax
    1b01:	74 3e                	je     1b41 <SV_ConnectionlessPacket+0x251>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:959
		// if a client starts up a local server, we may see some spurious
		// server disconnect messages when their new server sees our final
		// sequenced messages to the old client
	} else {
		if ( com_developer->integer ) {
    1b03:	48 8b 05 00 00 00 00 	mov    rax,QWORD PTR [rip+0x0]        # 1b0a <SV_ConnectionlessPacket+0x21a>
    1b0a:	8b 40 30             	mov    eax,DWORD PTR [rax+0x30]
    1b0d:	85 c0                	test   eax,eax
    1b0f:	74 30                	je     1b41 <SV_ConnectionlessPacket+0x251>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:960
			Com_Printf( "bad connectionless packet from %s:\n%s\n",
    1b11:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    1b15:	48 89 c7             	mov    rdi,rax
    1b18:	e8 00 00 00 00       	call   1b1d <SV_ConnectionlessPacket+0x22d>
    1b1d:	48 89 c1             	mov    rcx,rax
    1b20:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    1b24:	48 89 c2             	mov    rdx,rax
    1b27:	48 89 ce             	mov    rsi,rcx
    1b2a:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 1b31 <SV_ConnectionlessPacket+0x241>
    1b31:	b8 00 00 00 00       	mov    eax,0x0
    1b36:	e8 00 00 00 00       	call   1b3b <SV_ConnectionlessPacket+0x24b>
    1b3b:	eb 04                	jmp    1b41 <SV_ConnectionlessPacket+0x251>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:919
			return;
    1b3d:	90                   	nop
    1b3e:	eb 01                	jmp    1b41 <SV_ConnectionlessPacket+0x251>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:939
		return;
    1b40:	90                   	nop
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:964
				NET_AdrToString( from ), s );
		}
	}
}
    1b41:	48 83 c4 28          	add    rsp,0x28
    1b45:	5b                   	pop    rbx
    1b46:	5d                   	pop    rbp
    1b47:	c3                   	ret    

0000000000001b48 <SV_PacketEvent>:
SV_PacketEvent():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:973
/*
=================
SV_PacketEvent
=================
*/
void SV_PacketEvent( const netadr_t *from, msg_t *msg ) {
    1b48:	55                   	push   rbp
    1b49:	48 89 e5             	mov    rbp,rsp
    1b4c:	48 83 ec 30          	sub    rsp,0x30
    1b50:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
    1b54:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:978
	int			i;
	client_t	*cl;
	int			qport;

	if ( msg->cursize < 6 ) // too short for anything
    1b58:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
    1b5c:	8b 40 20             	mov    eax,DWORD PTR [rax+0x20]
    1b5f:	83 f8 05             	cmp    eax,0x5
    1b62:	0f 8e 66 01 00 00    	jle    1cce <SV_PacketEvent+0x186>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:982
		return;

	// check for connectionless packet (0xffffffff) first
	if ( *(int32_t *)msg->data == -1 ) {
    1b68:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
    1b6c:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
    1b70:	8b 00                	mov    eax,DWORD PTR [rax]
    1b72:	83 f8 ff             	cmp    eax,0xffffffff
    1b75:	75 18                	jne    1b8f <SV_PacketEvent+0x47>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:983
		SV_ConnectionlessPacket( from, msg );
    1b77:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
    1b7b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    1b7f:	48 89 d6             	mov    rsi,rdx
    1b82:	48 89 c7             	mov    rdi,rax
    1b85:	e8 66 fd ff ff       	call   18f0 <SV_ConnectionlessPacket>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:984
		return;
    1b8a:	e9 46 01 00 00       	jmp    1cd5 <SV_PacketEvent+0x18d>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:987
	}

	if ( sv.state == SS_DEAD ) {
    1b8f:	8b 05 00 00 00 00    	mov    eax,DWORD PTR [rip+0x0]        # 1b95 <SV_PacketEvent+0x4d>
    1b95:	85 c0                	test   eax,eax
    1b97:	0f 84 34 01 00 00    	je     1cd1 <SV_PacketEvent+0x189>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:993
		return;
	}

	// read the qport out of the message so we can fix up
	// stupid address translating routers
	MSG_BeginReadingOOB( msg );
    1b9d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
    1ba1:	48 89 c7             	mov    rdi,rax
    1ba4:	e8 00 00 00 00       	call   1ba9 <SV_PacketEvent+0x61>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:994
	MSG_ReadLong( msg ); // sequence number
    1ba9:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
    1bad:	48 89 c7             	mov    rdi,rax
    1bb0:	e8 00 00 00 00       	call   1bb5 <SV_PacketEvent+0x6d>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:995
	qport = MSG_ReadShort( msg ) & 0xffff;
    1bb5:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
    1bb9:	48 89 c7             	mov    rdi,rax
    1bbc:	e8 00 00 00 00       	call   1bc1 <SV_PacketEvent+0x79>
    1bc1:	25 ff ff 00 00       	and    eax,0xffff
    1bc6:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:998

	// find which client the message is from
	for (i=0, cl=svs.clients ; i < sv_maxclients->integer ; i++,cl++) {
    1bc9:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
    1bd0:	48 8b 05 00 00 00 00 	mov    rax,QWORD PTR [rip+0x0]        # 1bd7 <SV_PacketEvent+0x8f>
    1bd7:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
    1bdb:	e9 d9 00 00 00       	jmp    1cb9 <SV_PacketEvent+0x171>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:999
		if (cl->state == CS_FREE) {
    1be0:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    1be4:	8b 00                	mov    eax,DWORD PTR [rax]
    1be6:	85 c0                	test   eax,eax
    1be8:	0f 84 b8 00 00 00    	je     1ca6 <SV_PacketEvent+0x15e>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1002
			continue;
		}
		if ( !NET_CompareBaseAdr( from, &cl->netchan.remoteAddress ) ) {
    1bee:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    1bf2:	48 8d 90 40 4d 02 00 	lea    rdx,[rax+0x24d40]
    1bf9:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    1bfd:	48 89 d6             	mov    rsi,rdx
    1c00:	48 89 c7             	mov    rdi,rax
    1c03:	e8 00 00 00 00       	call   1c08 <SV_PacketEvent+0xc0>
    1c08:	85 c0                	test   eax,eax
    1c0a:	0f 84 99 00 00 00    	je     1ca9 <SV_PacketEvent+0x161>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1007
			continue;
		}
		// it is possible to have multiple clients from a single IP
		// address, so they are differentiated by the qport variable
		if (cl->netchan.qport != qport) {
    1c10:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    1c14:	8b 80 60 4d 02 00    	mov    eax,DWORD PTR [rax+0x24d60]
    1c1a:	39 45 ec             	cmp    DWORD PTR [rbp-0x14],eax
    1c1d:	0f 85 89 00 00 00    	jne    1cac <SV_PacketEvent+0x164>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1012
			continue;
		}

		// make sure it is a valid, in sequence packet
		if (SV_Netchan_Process(cl, msg)) {
    1c23:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
    1c27:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    1c2b:	48 89 d6             	mov    rsi,rdx
    1c2e:	48 89 c7             	mov    rdi,rax
    1c31:	e8 00 00 00 00       	call   1c36 <SV_PacketEvent+0xee>
    1c36:	85 c0                	test   eax,eax
    1c38:	74 73                	je     1cad <SV_PacketEvent+0x165>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1016
			// the IP port can't be used to differentiate clients, because
			// some address translating routers periodically change UDP
			// port assignments
			if (cl->netchan.remoteAddress.port != from->port) {
    1c3a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    1c3e:	0f b7 90 54 4d 02 00 	movzx  edx,WORD PTR [rax+0x24d54]
    1c45:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    1c49:	0f b7 40 14          	movzx  eax,WORD PTR [rax+0x14]
    1c4d:	66 39 c2             	cmp    dx,ax
    1c50:	74 24                	je     1c76 <SV_PacketEvent+0x12e>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1017
				Com_Printf( "SV_PacketEvent: fixing up a translated port\n" );
    1c52:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 1c59 <SV_PacketEvent+0x111>
    1c59:	b8 00 00 00 00       	mov    eax,0x0
    1c5e:	e8 00 00 00 00       	call   1c63 <SV_PacketEvent+0x11b>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1018
				cl->netchan.remoteAddress.port = from->port;
    1c63:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    1c67:	0f b7 50 14          	movzx  edx,WORD PTR [rax+0x14]
    1c6b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    1c6f:	66 89 90 54 4d 02 00 	mov    WORD PTR [rax+0x24d54],dx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1023
			}
			// zombie clients still need to do the Netchan_Process
			// to make sure they don't need to retransmit the final
			// reliable message, but they don't do any other processing
			if (cl->state != CS_ZOMBIE) {
    1c76:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    1c7a:	8b 00                	mov    eax,DWORD PTR [rax]
    1c7c:	83 f8 01             	cmp    eax,0x1
    1c7f:	74 53                	je     1cd4 <SV_PacketEvent+0x18c>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1024
				cl->lastPacketTime = svs.time;	// don't timeout
    1c81:	8b 15 00 00 00 00    	mov    edx,DWORD PTR [rip+0x0]        # 1c87 <SV_PacketEvent+0x13f>
    1c87:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    1c8b:	89 90 04 0b 01 00    	mov    DWORD PTR [rax+0x10b04],edx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1025
				SV_ExecuteClientMessage( cl, msg );
    1c91:	48 8b 55 d0          	mov    rdx,QWORD PTR [rbp-0x30]
    1c95:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    1c99:	48 89 d6             	mov    rsi,rdx
    1c9c:	48 89 c7             	mov    rdi,rax
    1c9f:	e8 00 00 00 00       	call   1ca4 <SV_PacketEvent+0x15c>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1027
			}
			return;
    1ca4:	eb 2e                	jmp    1cd4 <SV_PacketEvent+0x18c>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1000
			continue;
    1ca6:	90                   	nop
    1ca7:	eb 04                	jmp    1cad <SV_PacketEvent+0x165>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1003
			continue;
    1ca9:	90                   	nop
    1caa:	eb 01                	jmp    1cad <SV_PacketEvent+0x165>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1008
			continue;
    1cac:	90                   	nop
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:998 (discriminator 2)
	for (i=0, cl=svs.clients ; i < sv_maxclients->integer ; i++,cl++) {
    1cad:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
    1cb1:	48 81 45 f0 e0 dd 02 	add    QWORD PTR [rbp-0x10],0x2dde0
    1cb8:	00 
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:998 (discriminator 1)
    1cb9:	48 8b 05 00 00 00 00 	mov    rax,QWORD PTR [rip+0x0]        # 1cc0 <SV_PacketEvent+0x178>
    1cc0:	8b 40 30             	mov    eax,DWORD PTR [rax+0x30]
    1cc3:	39 45 fc             	cmp    DWORD PTR [rbp-0x4],eax
    1cc6:	0f 8c 14 ff ff ff    	jl     1be0 <SV_PacketEvent+0x98>
    1ccc:	eb 07                	jmp    1cd5 <SV_PacketEvent+0x18d>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:979
		return;
    1cce:	90                   	nop
    1ccf:	eb 04                	jmp    1cd5 <SV_PacketEvent+0x18d>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:988
		return;
    1cd1:	90                   	nop
    1cd2:	eb 01                	jmp    1cd5 <SV_PacketEvent+0x18d>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1027
			return;
    1cd4:	90                   	nop
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1030
		}
	}
}
    1cd5:	c9                   	leave  
    1cd6:	c3                   	ret    

0000000000001cd7 <SV_CalcPings>:
SV_CalcPings():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1040
SV_CalcPings

Updates the cl->ping variables
===================
*/
static void SV_CalcPings( void ) {
    1cd7:	55                   	push   rbp
    1cd8:	48 89 e5             	mov    rbp,rsp
    1cdb:	48 83 ec 30          	sub    rsp,0x30
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1047
	client_t	*cl;
	int			total, count;
	int			delta;
	playerState_t	*ps;

	for (i=0 ; i < sv_maxclients->integer ; i++) {
    1cdf:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
    1ce6:	e9 75 01 00 00       	jmp    1e60 <SV_CalcPings+0x189>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1048
		cl = &svs.clients[i];
    1ceb:	48 8b 15 00 00 00 00 	mov    rdx,QWORD PTR [rip+0x0]        # 1cf2 <SV_CalcPings+0x1b>
    1cf2:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    1cf5:	48 98                	cdqe   
    1cf7:	48 69 c0 e0 dd 02 00 	imul   rax,rax,0x2dde0
    1cfe:	48 01 d0             	add    rax,rdx
    1d01:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1049
		if ( cl->state != CS_ACTIVE ) {
    1d05:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    1d09:	8b 00                	mov    eax,DWORD PTR [rax]
    1d0b:	83 f8 04             	cmp    eax,0x4
    1d0e:	74 13                	je     1d23 <SV_CalcPings+0x4c>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1050
			cl->ping = 999;
    1d10:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    1d14:	c7 80 20 4d 02 00 e7 	mov    DWORD PTR [rax+0x24d20],0x3e7
    1d1b:	03 00 00 
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1051
			continue;
    1d1e:	e9 39 01 00 00       	jmp    1e5c <SV_CalcPings+0x185>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1053
		}
		if ( !cl->gentity ) {
    1d23:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    1d27:	48 8b 80 38 08 01 00 	mov    rax,QWORD PTR [rax+0x10838]
    1d2e:	48 85 c0             	test   rax,rax
    1d31:	75 13                	jne    1d46 <SV_CalcPings+0x6f>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1054
			cl->ping = 999;
    1d33:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    1d37:	c7 80 20 4d 02 00 e7 	mov    DWORD PTR [rax+0x24d20],0x3e7
    1d3e:	03 00 00 
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1055
			continue;
    1d41:	e9 16 01 00 00       	jmp    1e5c <SV_CalcPings+0x185>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1057
		}
		if ( cl->netchan.remoteAddress.type == NA_BOT ) {
    1d46:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    1d4a:	8b 80 40 4d 02 00    	mov    eax,DWORD PTR [rax+0x24d40]
    1d50:	83 f8 01             	cmp    eax,0x1
    1d53:	75 13                	jne    1d68 <SV_CalcPings+0x91>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1058
			cl->ping = 0;
    1d55:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    1d59:	c7 80 20 4d 02 00 00 	mov    DWORD PTR [rax+0x24d20],0x0
    1d60:	00 00 00 
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1059
			continue;
    1d63:	e9 f4 00 00 00       	jmp    1e5c <SV_CalcPings+0x185>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1062
		}

		total = 0;
    1d68:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1063
		count = 0;
    1d6f:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [rbp-0x10],0x0
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1064
		for ( j = 0 ; j < PACKET_BACKUP ; j++ ) {
    1d76:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
    1d7d:	eb 6d                	jmp    1dec <SV_CalcPings+0x115>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1065
			if ( cl->frames[j].messageAcked == 0 ) {
    1d7f:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
    1d83:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
    1d86:	48 98                	cdqe   
    1d88:	48 69 c0 10 0a 00 00 	imul   rax,rax,0xa10
    1d8f:	48 01 d0             	add    rax,rdx
    1d92:	48 05 20 0d 01 00    	add    rax,0x10d20
    1d98:	8b 00                	mov    eax,DWORD PTR [rax]
    1d9a:	85 c0                	test   eax,eax
    1d9c:	74 49                	je     1de7 <SV_CalcPings+0x110>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1068
				continue;
			}
			delta = cl->frames[j].messageAcked - cl->frames[j].messageSent;
    1d9e:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
    1da2:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
    1da5:	48 98                	cdqe   
    1da7:	48 69 c0 10 0a 00 00 	imul   rax,rax,0xa10
    1dae:	48 01 d0             	add    rax,rdx
    1db1:	48 05 20 0d 01 00    	add    rax,0x10d20
    1db7:	8b 10                	mov    edx,DWORD PTR [rax]
    1db9:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
    1dbd:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
    1dc0:	48 98                	cdqe   
    1dc2:	48 69 c0 10 0a 00 00 	imul   rax,rax,0xa10
    1dc9:	48 01 c8             	add    rax,rcx
    1dcc:	48 05 1c 0d 01 00    	add    rax,0x10d1c
    1dd2:	8b 00                	mov    eax,DWORD PTR [rax]
    1dd4:	29 c2                	sub    edx,eax
    1dd6:	89 d0                	mov    eax,edx
    1dd8:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1069
			count++;
    1ddb:	83 45 f0 01          	add    DWORD PTR [rbp-0x10],0x1
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1070
			total += delta;
    1ddf:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
    1de2:	01 45 f4             	add    DWORD PTR [rbp-0xc],eax
    1de5:	eb 01                	jmp    1de8 <SV_CalcPings+0x111>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1066
				continue;
    1de7:	90                   	nop
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1064 (discriminator 2)
		for ( j = 0 ; j < PACKET_BACKUP ; j++ ) {
    1de8:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1064 (discriminator 1)
    1dec:	83 7d f8 1f          	cmp    DWORD PTR [rbp-0x8],0x1f
    1df0:	7e 8d                	jle    1d7f <SV_CalcPings+0xa8>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1072
		}
		if (!count) {
    1df2:	83 7d f0 00          	cmp    DWORD PTR [rbp-0x10],0x0
    1df6:	75 10                	jne    1e08 <SV_CalcPings+0x131>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1073
			cl->ping = 999;
    1df8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    1dfc:	c7 80 20 4d 02 00 e7 	mov    DWORD PTR [rax+0x24d20],0x3e7
    1e03:	03 00 00 
    1e06:	eb 32                	jmp    1e3a <SV_CalcPings+0x163>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1075
		} else {
			cl->ping = total/count;
    1e08:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
    1e0b:	99                   	cdq    
    1e0c:	f7 7d f0             	idiv   DWORD PTR [rbp-0x10]
    1e0f:	89 c2                	mov    edx,eax
    1e11:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    1e15:	89 90 20 4d 02 00    	mov    DWORD PTR [rax+0x24d20],edx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1076
			if ( cl->ping > 999 ) {
    1e1b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    1e1f:	8b 80 20 4d 02 00    	mov    eax,DWORD PTR [rax+0x24d20]
    1e25:	3d e7 03 00 00       	cmp    eax,0x3e7
    1e2a:	7e 0e                	jle    1e3a <SV_CalcPings+0x163>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1077
				cl->ping = 999;
    1e2c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    1e30:	c7 80 20 4d 02 00 e7 	mov    DWORD PTR [rax+0x24d20],0x3e7
    1e37:	03 00 00 
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1082
			}
		}

		// let the game dll know about the ping
		ps = SV_GameClientNum( i );
    1e3a:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    1e3d:	89 c7                	mov    edi,eax
    1e3f:	e8 00 00 00 00       	call   1e44 <SV_CalcPings+0x16d>
    1e44:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1083
		ps->ping = cl->ping;
    1e48:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    1e4c:	8b 90 20 4d 02 00    	mov    edx,DWORD PTR [rax+0x24d20]
    1e52:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    1e56:	89 90 c4 01 00 00    	mov    DWORD PTR [rax+0x1c4],edx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1047 (discriminator 2)
	for (i=0 ; i < sv_maxclients->integer ; i++) {
    1e5c:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1047 (discriminator 1)
    1e60:	48 8b 05 00 00 00 00 	mov    rax,QWORD PTR [rip+0x0]        # 1e67 <SV_CalcPings+0x190>
    1e67:	8b 40 30             	mov    eax,DWORD PTR [rax+0x30]
    1e6a:	39 45 fc             	cmp    DWORD PTR [rbp-0x4],eax
    1e6d:	0f 8c 78 fe ff ff    	jl     1ceb <SV_CalcPings+0x14>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1085
	}
}
    1e73:	90                   	nop
    1e74:	c9                   	leave  
    1e75:	c3                   	ret    

0000000000001e76 <SV_CheckTimeouts>:
SV_CheckTimeouts():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1100
When a client is normally dropped, the client_t goes into a zombie state
for a few seconds to make sure any final reliable message gets resent
if necessary
==================
*/
static void SV_CheckTimeouts( void ) {
    1e76:	55                   	push   rbp
    1e77:	48 89 e5             	mov    rbp,rsp
    1e7a:	48 83 ec 20          	sub    rsp,0x20
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1106
	int		i;
	client_t	*cl;
	int			droppoint;
	int			zombiepoint;

	droppoint = svs.time - 1000 * sv_timeout->integer;
    1e7e:	8b 15 00 00 00 00    	mov    edx,DWORD PTR [rip+0x0]        # 1e84 <SV_CheckTimeouts+0xe>
    1e84:	48 8b 05 00 00 00 00 	mov    rax,QWORD PTR [rip+0x0]        # 1e8b <SV_CheckTimeouts+0x15>
    1e8b:	8b 40 30             	mov    eax,DWORD PTR [rax+0x30]
    1e8e:	69 c0 18 fc ff ff    	imul   eax,eax,0xfffffc18
    1e94:	01 d0                	add    eax,edx
    1e96:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1107
	zombiepoint = svs.time - 1000 * sv_zombietime->integer;
    1e99:	8b 15 00 00 00 00    	mov    edx,DWORD PTR [rip+0x0]        # 1e9f <SV_CheckTimeouts+0x29>
    1e9f:	48 8b 05 00 00 00 00 	mov    rax,QWORD PTR [rip+0x0]        # 1ea6 <SV_CheckTimeouts+0x30>
    1ea6:	8b 40 30             	mov    eax,DWORD PTR [rax+0x30]
    1ea9:	69 c0 18 fc ff ff    	imul   eax,eax,0xfffffc18
    1eaf:	01 d0                	add    eax,edx
    1eb1:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1109

	for ( i = 0, cl = svs.clients ; i < sv_maxclients->integer ; i++, cl++ ) {
    1eb4:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
    1ebb:	48 8b 05 00 00 00 00 	mov    rax,QWORD PTR [rip+0x0]        # 1ec2 <SV_CheckTimeouts+0x4c>
    1ec2:	48 89 45 f0          	mov    QWORD PTR [rbp-0x10],rax
    1ec6:	e9 57 01 00 00       	jmp    2022 <SV_CheckTimeouts+0x1ac>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1110
		if ( cl->state == CS_FREE ) {
    1ecb:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    1ecf:	8b 00                	mov    eax,DWORD PTR [rax]
    1ed1:	85 c0                	test   eax,eax
    1ed3:	0f 84 3c 01 00 00    	je     2015 <SV_CheckTimeouts+0x19f>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1114
			continue;
		}
		// message times may be wrong across a changelevel
		if ( cl->lastPacketTime - svs.time > 0 ) {
    1ed9:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    1edd:	8b 90 04 0b 01 00    	mov    edx,DWORD PTR [rax+0x10b04]
    1ee3:	8b 05 00 00 00 00    	mov    eax,DWORD PTR [rip+0x0]        # 1ee9 <SV_CheckTimeouts+0x73>
    1ee9:	29 c2                	sub    edx,eax
    1eeb:	89 d0                	mov    eax,edx
    1eed:	85 c0                	test   eax,eax
    1eef:	7e 10                	jle    1f01 <SV_CheckTimeouts+0x8b>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1115
			cl->lastPacketTime = svs.time;
    1ef1:	8b 15 00 00 00 00    	mov    edx,DWORD PTR [rip+0x0]        # 1ef7 <SV_CheckTimeouts+0x81>
    1ef7:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    1efb:	89 90 04 0b 01 00    	mov    DWORD PTR [rax+0x10b04],edx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1118
		}

		if ( cl->state == CS_ZOMBIE && cl->lastPacketTime - zombiepoint < 0 ) {
    1f01:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    1f05:	8b 00                	mov    eax,DWORD PTR [rax]
    1f07:	83 f8 01             	cmp    eax,0x1
    1f0a:	75 36                	jne    1f42 <SV_CheckTimeouts+0xcc>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1118 (discriminator 1)
    1f0c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    1f10:	8b 80 04 0b 01 00    	mov    eax,DWORD PTR [rax+0x10b04]
    1f16:	2b 45 e8             	sub    eax,DWORD PTR [rbp-0x18]
    1f19:	85 c0                	test   eax,eax
    1f1b:	79 25                	jns    1f42 <SV_CheckTimeouts+0xcc>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1120
			// using the client id cause the cl->name is empty at this point
			Com_DPrintf( "Going from CS_ZOMBIE to CS_FREE for client %d\n", i );
    1f1d:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    1f20:	89 c6                	mov    esi,eax
    1f22:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 1f29 <SV_CheckTimeouts+0xb3>
    1f29:	b8 00 00 00 00       	mov    eax,0x0
    1f2e:	e8 00 00 00 00       	call   1f33 <SV_CheckTimeouts+0xbd>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1121
			cl->state = CS_FREE;	// can now be reused
    1f33:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    1f37:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1122
			continue;
    1f3d:	e9 d4 00 00 00       	jmp    2016 <SV_CheckTimeouts+0x1a0>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1124
		}
		if ( cl->justConnected && svs.time - cl->lastPacketTime > 4000 ) {
    1f42:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    1f46:	8b 80 cc dd 02 00    	mov    eax,DWORD PTR [rax+0x2ddcc]
    1f4c:	85 c0                	test   eax,eax
    1f4e:	74 54                	je     1fa4 <SV_CheckTimeouts+0x12e>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1124 (discriminator 1)
    1f50:	8b 15 00 00 00 00    	mov    edx,DWORD PTR [rip+0x0]        # 1f56 <SV_CheckTimeouts+0xe0>
    1f56:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    1f5a:	8b 80 04 0b 01 00    	mov    eax,DWORD PTR [rax+0x10b04]
    1f60:	29 c2                	sub    edx,eax
    1f62:	89 d0                	mov    eax,edx
    1f64:	3d a0 0f 00 00       	cmp    eax,0xfa0
    1f69:	7e 39                	jle    1fa4 <SV_CheckTimeouts+0x12e>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1126
			// for real client 4 seconds is more than enough to respond
			SVC_RateDropAddress( &cl->netchan.remoteAddress, 10, 1000 ); // enforce burst with progressive multiplier
    1f6b:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    1f6f:	48 05 40 4d 02 00    	add    rax,0x24d40
    1f75:	ba e8 03 00 00       	mov    edx,0x3e8
    1f7a:	be 0a 00 00 00       	mov    esi,0xa
    1f7f:	48 89 c7             	mov    rdi,rax
    1f82:	e8 00 00 00 00       	call   1f87 <SV_CheckTimeouts+0x111>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1127
			SV_DropClient( cl, NULL ); // drop silently
    1f87:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    1f8b:	be 00 00 00 00       	mov    esi,0x0
    1f90:	48 89 c7             	mov    rdi,rax
    1f93:	e8 00 00 00 00       	call   1f98 <SV_CheckTimeouts+0x122>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1128
			cl->state = CS_FREE;
    1f98:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    1f9c:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1129
			continue;
    1fa2:	eb 72                	jmp    2016 <SV_CheckTimeouts+0x1a0>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1131
		}
		if ( cl->state >= CS_CONNECTED && cl->lastPacketTime - droppoint < 0 ) {
    1fa4:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    1fa8:	8b 00                	mov    eax,DWORD PTR [rax]
    1faa:	83 f8 01             	cmp    eax,0x1
    1fad:	76 56                	jbe    2005 <SV_CheckTimeouts+0x18f>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1131 (discriminator 1)
    1faf:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    1fb3:	8b 80 04 0b 01 00    	mov    eax,DWORD PTR [rax+0x10b04]
    1fb9:	2b 45 ec             	sub    eax,DWORD PTR [rbp-0x14]
    1fbc:	85 c0                	test   eax,eax
    1fbe:	79 45                	jns    2005 <SV_CheckTimeouts+0x18f>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1134
			// wait several frames so a debugger session doesn't
			// cause a timeout
			if ( ++cl->timeoutCount > 5 ) {
    1fc0:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    1fc4:	8b 80 18 0b 01 00    	mov    eax,DWORD PTR [rax+0x10b18]
    1fca:	8d 50 01             	lea    edx,[rax+0x1]
    1fcd:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    1fd1:	89 90 18 0b 01 00    	mov    DWORD PTR [rax+0x10b18],edx
    1fd7:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    1fdb:	8b 80 18 0b 01 00    	mov    eax,DWORD PTR [rax+0x10b18]
    1fe1:	83 f8 05             	cmp    eax,0x5
    1fe4:	7e 30                	jle    2016 <SV_CheckTimeouts+0x1a0>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1135
				SV_DropClient( cl, "timed out" );
    1fe6:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    1fea:	48 8d 35 00 00 00 00 	lea    rsi,[rip+0x0]        # 1ff1 <SV_CheckTimeouts+0x17b>
    1ff1:	48 89 c7             	mov    rdi,rax
    1ff4:	e8 00 00 00 00       	call   1ff9 <SV_CheckTimeouts+0x183>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1136
				cl->state = CS_FREE;	// don't bother with zombie state
    1ff9:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    1ffd:	c7 00 00 00 00 00    	mov    DWORD PTR [rax],0x0
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1134
			if ( ++cl->timeoutCount > 5 ) {
    2003:	eb 11                	jmp    2016 <SV_CheckTimeouts+0x1a0>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1139
			}
		} else {
			cl->timeoutCount = 0;
    2005:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    2009:	c7 80 18 0b 01 00 00 	mov    DWORD PTR [rax+0x10b18],0x0
    2010:	00 00 00 
    2013:	eb 01                	jmp    2016 <SV_CheckTimeouts+0x1a0>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1111
			continue;
    2015:	90                   	nop
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1109 (discriminator 2)
	for ( i = 0, cl = svs.clients ; i < sv_maxclients->integer ; i++, cl++ ) {
    2016:	83 45 fc 01          	add    DWORD PTR [rbp-0x4],0x1
    201a:	48 81 45 f0 e0 dd 02 	add    QWORD PTR [rbp-0x10],0x2dde0
    2021:	00 
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1109 (discriminator 1)
    2022:	48 8b 05 00 00 00 00 	mov    rax,QWORD PTR [rip+0x0]        # 2029 <SV_CheckTimeouts+0x1b3>
    2029:	8b 40 30             	mov    eax,DWORD PTR [rax+0x30]
    202c:	39 45 fc             	cmp    DWORD PTR [rbp-0x4],eax
    202f:	0f 8c 96 fe ff ff    	jl     1ecb <SV_CheckTimeouts+0x55>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1142
		}
	}
}
    2035:	90                   	nop
    2036:	c9                   	leave  
    2037:	c3                   	ret    

0000000000002038 <SV_CheckPaused>:
SV_CheckPaused():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1150
/*
==================
SV_CheckPaused
==================
*/
static qboolean SV_CheckPaused( void ) {
    2038:	55                   	push   rbp
    2039:	48 89 e5             	mov    rbp,rsp
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1154

#ifdef DEDICATED
	// can't pause on dedicated servers
	return qfalse;
    203c:	b8 00 00 00 00       	mov    eax,0x0
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1184
	if (!sv_paused->integer)
		Cvar_Set("sv_paused", "1");

	return qtrue;
#endif // !DEDICATED
}
    2041:	5d                   	pop    rbp
    2042:	c3                   	ret    

0000000000002043 <SV_FrameMsec>:
SV_FrameMsec():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1194
SV_FrameMsec
Return time in millseconds until processing of the next server frame.
==================
*/
int SV_FrameMsec( void )
{
    2043:	55                   	push   rbp
    2044:	48 89 e5             	mov    rbp,rsp
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1195
	if ( sv_fps )
    2047:	48 8b 05 00 00 00 00 	mov    rax,QWORD PTR [rip+0x0]        # 204e <SV_FrameMsec+0xb>
    204e:	48 85 c0             	test   rax,rax
    2051:	74 40                	je     2093 <SV_FrameMsec+0x50>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1199
	{
		int frameMsec;
		
		frameMsec = 1000.0f / sv_fps->value;
    2053:	48 8b 05 00 00 00 00 	mov    rax,QWORD PTR [rip+0x0]        # 205a <SV_FrameMsec+0x17>
    205a:	f3 0f 10 48 2c       	movss  xmm1,DWORD PTR [rax+0x2c]
    205f:	f3 0f 10 05 00 00 00 	movss  xmm0,DWORD PTR [rip+0x0]        # 2067 <SV_FrameMsec+0x24>
    2066:	00 
    2067:	f3 0f 5e c1          	divss  xmm0,xmm1
    206b:	f3 0f 2c c0          	cvttss2si eax,xmm0
    206f:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1201
		
		if ( frameMsec < sv.timeResidual )
    2072:	8b 05 00 00 00 00    	mov    eax,DWORD PTR [rip+0x0]        # 2078 <SV_FrameMsec+0x35>
    2078:	39 45 fc             	cmp    DWORD PTR [rbp-0x4],eax
    207b:	7d 07                	jge    2084 <SV_FrameMsec+0x41>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1202
			return 0;
    207d:	b8 00 00 00 00       	mov    eax,0x0
    2082:	eb 14                	jmp    2098 <SV_FrameMsec+0x55>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1204
		else
			return frameMsec - sv.timeResidual;
    2084:	8b 05 00 00 00 00    	mov    eax,DWORD PTR [rip+0x0]        # 208a <SV_FrameMsec+0x47>
    208a:	8b 55 fc             	mov    edx,DWORD PTR [rbp-0x4]
    208d:	29 c2                	sub    edx,eax
    208f:	89 d0                	mov    eax,edx
    2091:	eb 05                	jmp    2098 <SV_FrameMsec+0x55>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1207
	}
	else
		return 1;
    2093:	b8 01 00 00 00       	mov    eax,0x1
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1208
}
    2098:	5d                   	pop    rbp
    2099:	c3                   	ret    

000000000000209a <SV_TrackCvarChanges>:
SV_TrackCvarChanges():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1217
==================
SV_TrackCvarChanges
==================
*/
void SV_TrackCvarChanges( void )
{
    209a:	55                   	push   rbp
    209b:	48 89 e5             	mov    rbp,rsp
    209e:	48 83 ec 10          	sub    rsp,0x10
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1221
	client_t *cl;
	int i;

	if ( sv_maxRate->integer && sv_maxRate->integer < 1000 ) {
    20a2:	48 8b 05 00 00 00 00 	mov    rax,QWORD PTR [rip+0x0]        # 20a9 <SV_TrackCvarChanges+0xf>
    20a9:	8b 40 30             	mov    eax,DWORD PTR [rax+0x30]
    20ac:	85 c0                	test   eax,eax
    20ae:	74 35                	je     20e5 <SV_TrackCvarChanges+0x4b>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1221 (discriminator 1)
    20b0:	48 8b 05 00 00 00 00 	mov    rax,QWORD PTR [rip+0x0]        # 20b7 <SV_TrackCvarChanges+0x1d>
    20b7:	8b 40 30             	mov    eax,DWORD PTR [rax+0x30]
    20ba:	3d e7 03 00 00       	cmp    eax,0x3e7
    20bf:	7f 24                	jg     20e5 <SV_TrackCvarChanges+0x4b>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1222
		Cvar_Set( "sv_maxRate", "1000" );
    20c1:	48 8d 35 00 00 00 00 	lea    rsi,[rip+0x0]        # 20c8 <SV_TrackCvarChanges+0x2e>
    20c8:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 20cf <SV_TrackCvarChanges+0x35>
    20cf:	e8 00 00 00 00       	call   20d4 <SV_TrackCvarChanges+0x3a>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1223
		Com_DPrintf( "sv_maxRate adjusted to 1000\n" );
    20d4:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 20db <SV_TrackCvarChanges+0x41>
    20db:	b8 00 00 00 00       	mov    eax,0x0
    20e0:	e8 00 00 00 00       	call   20e5 <SV_TrackCvarChanges+0x4b>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1226
	}

	if ( sv_minRate->integer && sv_minRate->integer < 1000 ) {
    20e5:	48 8b 05 00 00 00 00 	mov    rax,QWORD PTR [rip+0x0]        # 20ec <SV_TrackCvarChanges+0x52>
    20ec:	8b 40 30             	mov    eax,DWORD PTR [rax+0x30]
    20ef:	85 c0                	test   eax,eax
    20f1:	74 35                	je     2128 <SV_TrackCvarChanges+0x8e>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1226 (discriminator 1)
    20f3:	48 8b 05 00 00 00 00 	mov    rax,QWORD PTR [rip+0x0]        # 20fa <SV_TrackCvarChanges+0x60>
    20fa:	8b 40 30             	mov    eax,DWORD PTR [rax+0x30]
    20fd:	3d e7 03 00 00       	cmp    eax,0x3e7
    2102:	7f 24                	jg     2128 <SV_TrackCvarChanges+0x8e>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1227
		Cvar_Set( "sv_minRate", "1000" );
    2104:	48 8d 35 00 00 00 00 	lea    rsi,[rip+0x0]        # 210b <SV_TrackCvarChanges+0x71>
    210b:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 2112 <SV_TrackCvarChanges+0x78>
    2112:	e8 00 00 00 00       	call   2117 <SV_TrackCvarChanges+0x7d>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1228
		Com_DPrintf( "sv_minRate adjusted to 1000\n" );
    2117:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 211e <SV_TrackCvarChanges+0x84>
    211e:	b8 00 00 00 00       	mov    eax,0x0
    2123:	e8 00 00 00 00       	call   2128 <SV_TrackCvarChanges+0x8e>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1231
	}

	Cvar_ResetGroup( CVG_SERVER, qfalse );
    2128:	be 00 00 00 00       	mov    esi,0x0
    212d:	bf 02 00 00 00       	mov    edi,0x2
    2132:	e8 00 00 00 00       	call   2137 <SV_TrackCvarChanges+0x9d>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1233

	if ( sv.state == SS_DEAD || !svs.clients )
    2137:	8b 05 00 00 00 00    	mov    eax,DWORD PTR [rip+0x0]        # 213d <SV_TrackCvarChanges+0xa3>
    213d:	85 c0                	test   eax,eax
    213f:	74 5e                	je     219f <SV_TrackCvarChanges+0x105>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1233 (discriminator 1)
    2141:	48 8b 05 00 00 00 00 	mov    rax,QWORD PTR [rip+0x0]        # 2148 <SV_TrackCvarChanges+0xae>
    2148:	48 85 c0             	test   rax,rax
    214b:	74 52                	je     219f <SV_TrackCvarChanges+0x105>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1236
		return;

	for ( i = 0, cl = svs.clients; i < sv_maxclients->integer; i++, cl++ ) {
    214d:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
    2154:	48 8b 05 00 00 00 00 	mov    rax,QWORD PTR [rip+0x0]        # 215b <SV_TrackCvarChanges+0xc1>
    215b:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    215f:	eb 2d                	jmp    218e <SV_TrackCvarChanges+0xf4>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1237
		if ( cl->state >= CS_CONNECTED ) {
    2161:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    2165:	8b 00                	mov    eax,DWORD PTR [rax]
    2167:	83 f8 01             	cmp    eax,0x1
    216a:	76 16                	jbe    2182 <SV_TrackCvarChanges+0xe8>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1238
			SV_UserinfoChanged( cl, qfalse, qfalse ); // do not update userinfo, do not run filter
    216c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    2170:	ba 00 00 00 00       	mov    edx,0x0
    2175:	be 00 00 00 00       	mov    esi,0x0
    217a:	48 89 c7             	mov    rdi,rax
    217d:	e8 00 00 00 00       	call   2182 <SV_TrackCvarChanges+0xe8>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1236 (discriminator 2)
	for ( i = 0, cl = svs.clients; i < sv_maxclients->integer; i++, cl++ ) {
    2182:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
    2186:	48 81 45 f8 e0 dd 02 	add    QWORD PTR [rbp-0x8],0x2dde0
    218d:	00 
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1236 (discriminator 1)
    218e:	48 8b 05 00 00 00 00 	mov    rax,QWORD PTR [rip+0x0]        # 2195 <SV_TrackCvarChanges+0xfb>
    2195:	8b 40 30             	mov    eax,DWORD PTR [rax+0x30]
    2198:	39 45 f4             	cmp    DWORD PTR [rbp-0xc],eax
    219b:	7c c4                	jl     2161 <SV_TrackCvarChanges+0xc7>
    219d:	eb 01                	jmp    21a0 <SV_TrackCvarChanges+0x106>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1234
		return;
    219f:	90                   	nop
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1241
		}
	}
}
    21a0:	c9                   	leave  
    21a1:	c3                   	ret    

00000000000021a2 <SV_Restart>:
SV_Restart():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1249
/*
==================
SV_Restart
==================
*/
static void SV_Restart( const char *reason ) {
    21a2:	55                   	push   rbp
    21a3:	48 89 e5             	mov    rbp,rsp
    21a6:	48 81 ec 20 01 00 00 	sub    rsp,0x120
    21ad:	48 89 bd e8 fe ff ff 	mov    QWORD PTR [rbp-0x118],rdi
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1250
	qboolean sv_shutdown = qfalse;
    21b4:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1254
	char mapName[ MAX_CVAR_VALUE_STRING ];
	int i;

	if ( svs.clients ) {
    21bb:	48 8b 05 00 00 00 00 	mov    rax,QWORD PTR [rip+0x0]        # 21c2 <SV_Restart+0x20>
    21c2:	48 85 c0             	test   rax,rax
    21c5:	74 42                	je     2209 <SV_Restart+0x67>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1256
		// check if we can reset map time without full server shutdown
		for ( i = 0; i < sv_maxclients->integer; i++ ) {
    21c7:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
    21ce:	eb 2a                	jmp    21fa <SV_Restart+0x58>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1257
			if ( svs.clients[i].state >= CS_CONNECTED ) {
    21d0:	48 8b 15 00 00 00 00 	mov    rdx,QWORD PTR [rip+0x0]        # 21d7 <SV_Restart+0x35>
    21d7:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
    21da:	48 98                	cdqe   
    21dc:	48 69 c0 e0 dd 02 00 	imul   rax,rax,0x2dde0
    21e3:	48 01 d0             	add    rax,rdx
    21e6:	8b 00                	mov    eax,DWORD PTR [rax]
    21e8:	83 f8 01             	cmp    eax,0x1
    21eb:	76 09                	jbe    21f6 <SV_Restart+0x54>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1258
				sv_shutdown = qtrue;
    21ed:	c7 45 fc 01 00 00 00 	mov    DWORD PTR [rbp-0x4],0x1
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1259
				break;
    21f4:	eb 13                	jmp    2209 <SV_Restart+0x67>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1256 (discriminator 2)
		for ( i = 0; i < sv_maxclients->integer; i++ ) {
    21f6:	83 45 f8 01          	add    DWORD PTR [rbp-0x8],0x1
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1256 (discriminator 1)
    21fa:	48 8b 05 00 00 00 00 	mov    rax,QWORD PTR [rip+0x0]        # 2201 <SV_Restart+0x5f>
    2201:	8b 40 30             	mov    eax,DWORD PTR [rax+0x30]
    2204:	39 45 f8             	cmp    DWORD PTR [rbp-0x8],eax
    2207:	7c c7                	jl     21d0 <SV_Restart+0x2e>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1264
			}
		}
	}

	sv.time = 0; // force level time reset
    2209:	c7 05 00 00 00 00 00 	mov    DWORD PTR [rip+0x0],0x0        # 2213 <SV_Restart+0x71>
    2210:	00 00 00 
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1265
	sv.restartTime = 0;
    2213:	c7 05 00 00 00 00 00 	mov    DWORD PTR [rip+0x0],0x0        # 221d <SV_Restart+0x7b>
    221a:	00 00 00 
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1267
	
	Cvar_VariableStringBuffer( "mapname", mapName, sizeof( mapName ) );
    221d:	48 8d 85 f0 fe ff ff 	lea    rax,[rbp-0x110]
    2224:	ba 00 01 00 00       	mov    edx,0x100
    2229:	48 89 c6             	mov    rsi,rax
    222c:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 2233 <SV_Restart+0x91>
    2233:	e8 00 00 00 00       	call   2238 <SV_Restart+0x96>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1269
	
	if ( sv_shutdown ) {
    2238:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
    223c:	74 0f                	je     224d <SV_Restart+0xab>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1270
		SV_Shutdown( reason );
    223e:	48 8b 85 e8 fe ff ff 	mov    rax,QWORD PTR [rbp-0x118]
    2245:	48 89 c7             	mov    rdi,rax
    2248:	e8 00 00 00 00       	call   224d <SV_Restart+0xab>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1273
	}

	Cbuf_AddText( va( "map %s\n", mapName ) );
    224d:	48 8d 85 f0 fe ff ff 	lea    rax,[rbp-0x110]
    2254:	48 89 c6             	mov    rsi,rax
    2257:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 225e <SV_Restart+0xbc>
    225e:	b8 00 00 00 00       	mov    eax,0x0
    2263:	e8 00 00 00 00       	call   2268 <SV_Restart+0xc6>
    2268:	48 89 c7             	mov    rdi,rax
    226b:	e8 00 00 00 00       	call   2270 <SV_Restart+0xce>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1274
}
    2270:	90                   	nop
    2271:	c9                   	leave  
    2272:	c3                   	ret    

0000000000002273 <SV_Frame>:
SV_Frame():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1285

Player movement occurs as a result of packet events, which
happen before SV_Frame is called
==================
*/
void SV_Frame( int msec ) {
    2273:	55                   	push   rbp
    2274:	48 89 e5             	mov    rbp,rsp
    2277:	48 83 ec 20          	sub    rsp,0x20
    227b:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1290
	int		frameMsec;
	int		startTime;
	int		i;

	if ( Cvar_CheckGroup( CVG_SERVER ) )
    227e:	bf 02 00 00 00       	mov    edi,0x2
    2283:	e8 00 00 00 00       	call   2288 <SV_Frame+0x15>
    2288:	85 c0                	test   eax,eax
    228a:	74 05                	je     2291 <SV_Frame+0x1e>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1291
		SV_TrackCvarChanges(); // update rate settings, etc.
    228c:	e8 00 00 00 00       	call   2291 <SV_Frame+0x1e>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1294

	// the menu kills the server with this cvar
	if ( sv_killserver->integer ) {
    2291:	48 8b 05 00 00 00 00 	mov    rax,QWORD PTR [rip+0x0]        # 2298 <SV_Frame+0x25>
    2298:	8b 40 30             	mov    eax,DWORD PTR [rax+0x30]
    229b:	85 c0                	test   eax,eax
    229d:	74 24                	je     22c3 <SV_Frame+0x50>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1295
		SV_Shutdown( "Server was killed" );
    229f:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 22a6 <SV_Frame+0x33>
    22a6:	e8 00 00 00 00       	call   22ab <SV_Frame+0x38>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1296
		Cvar_Set( "sv_killserver", "0" );
    22ab:	48 8d 35 00 00 00 00 	lea    rsi,[rip+0x0]        # 22b2 <SV_Frame+0x3f>
    22b2:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 22b9 <SV_Frame+0x46>
    22b9:	e8 00 00 00 00       	call   22be <SV_Frame+0x4b>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1297
		return;
    22be:	e9 66 03 00 00       	jmp    2629 <SV_Frame+0x3b6>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1300
	}

	if ( !com_sv_running->integer )
    22c3:	48 8b 05 00 00 00 00 	mov    rax,QWORD PTR [rip+0x0]        # 22ca <SV_Frame+0x57>
    22ca:	8b 40 30             	mov    eax,DWORD PTR [rax+0x30]
    22cd:	85 c0                	test   eax,eax
    22cf:	75 21                	jne    22f2 <SV_Frame+0x7f>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1302
	{
		if ( com_dedicated->integer )
    22d1:	48 8b 05 00 00 00 00 	mov    rax,QWORD PTR [rip+0x0]        # 22d8 <SV_Frame+0x65>
    22d8:	8b 40 30             	mov    eax,DWORD PTR [rax+0x30]
    22db:	85 c0                	test   eax,eax
    22dd:	0f 84 42 03 00 00    	je     2625 <SV_Frame+0x3b2>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1306
		{
			// Block indefinitely until something interesting happens
			// on STDIN.
			Sys_Sleep( -1 );
    22e3:	bf ff ff ff ff       	mov    edi,0xffffffff
    22e8:	e8 00 00 00 00       	call   22ed <SV_Frame+0x7a>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1308
		}
		return;
    22ed:	e9 33 03 00 00       	jmp    2625 <SV_Frame+0x3b2>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1312
	}

	// allow pause if only the local client is connected
	if ( SV_CheckPaused() ) {
    22f2:	e8 41 fd ff ff       	call   2038 <SV_CheckPaused>
    22f7:	85 c0                	test   eax,eax
    22f9:	0f 85 29 03 00 00    	jne    2628 <SV_Frame+0x3b5>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1318
		return;
	}

	// if it isn't time for the next frame, do nothing

	frameMsec = 1000 / sv_fps->integer * com_timescale->value;
    22ff:	48 8b 05 00 00 00 00 	mov    rax,QWORD PTR [rip+0x0]        # 2306 <SV_Frame+0x93>
    2306:	8b 48 30             	mov    ecx,DWORD PTR [rax+0x30]
    2309:	b8 e8 03 00 00       	mov    eax,0x3e8
    230e:	99                   	cdq    
    230f:	f7 f9                	idiv   ecx
    2311:	f3 0f 2a c8          	cvtsi2ss xmm1,eax
    2315:	48 8b 05 00 00 00 00 	mov    rax,QWORD PTR [rip+0x0]        # 231c <SV_Frame+0xa9>
    231c:	f3 0f 10 40 2c       	movss  xmm0,DWORD PTR [rax+0x2c]
    2321:	f3 0f 59 c1          	mulss  xmm0,xmm1
    2325:	f3 0f 2c c0          	cvttss2si eax,xmm0
    2329:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1320
	// don't let it scale below 1ms
	if(frameMsec < 1)
    232c:	83 7d fc 00          	cmp    DWORD PTR [rbp-0x4],0x0
    2330:	7f 64                	jg     2396 <SV_Frame+0x123>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1322
	{
		Cvar_Set( "timescale", va( "%f", sv_fps->value / 1000.0f ) );
    2332:	48 8b 05 00 00 00 00 	mov    rax,QWORD PTR [rip+0x0]        # 2339 <SV_Frame+0xc6>
    2339:	f3 0f 10 40 2c       	movss  xmm0,DWORD PTR [rax+0x2c]
    233e:	f3 0f 10 0d 00 00 00 	movss  xmm1,DWORD PTR [rip+0x0]        # 2346 <SV_Frame+0xd3>
    2345:	00 
    2346:	f3 0f 5e c1          	divss  xmm0,xmm1
    234a:	f3 0f 5a c0          	cvtss2sd xmm0,xmm0
    234e:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 2355 <SV_Frame+0xe2>
    2355:	b8 01 00 00 00       	mov    eax,0x1
    235a:	e8 00 00 00 00       	call   235f <SV_Frame+0xec>
    235f:	48 89 c6             	mov    rsi,rax
    2362:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 2369 <SV_Frame+0xf6>
    2369:	e8 00 00 00 00       	call   236e <SV_Frame+0xfb>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1323
		Com_DPrintf( "timescale adjusted to %f\n", com_timescale->value );
    236e:	48 8b 05 00 00 00 00 	mov    rax,QWORD PTR [rip+0x0]        # 2375 <SV_Frame+0x102>
    2375:	f3 0f 10 40 2c       	movss  xmm0,DWORD PTR [rax+0x2c]
    237a:	f3 0f 5a c0          	cvtss2sd xmm0,xmm0
    237e:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 2385 <SV_Frame+0x112>
    2385:	b8 01 00 00 00       	mov    eax,0x1
    238a:	e8 00 00 00 00       	call   238f <SV_Frame+0x11c>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1324
		frameMsec = 1;
    238f:	c7 45 fc 01 00 00 00 	mov    DWORD PTR [rbp-0x4],0x1
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1327
	}

	sv.timeResidual += msec;
    2396:	8b 15 00 00 00 00    	mov    edx,DWORD PTR [rip+0x0]        # 239c <SV_Frame+0x129>
    239c:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    239f:	01 d0                	add    eax,edx
    23a1:	89 05 00 00 00 00    	mov    DWORD PTR [rip+0x0],eax        # 23a7 <SV_Frame+0x134>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1329

	if ( !com_dedicated->integer )
    23a7:	48 8b 05 00 00 00 00 	mov    rax,QWORD PTR [rip+0x0]        # 23ae <SV_Frame+0x13b>
    23ae:	8b 40 30             	mov    eax,DWORD PTR [rax+0x30]
    23b1:	85 c0                	test   eax,eax
    23b3:	75 15                	jne    23ca <SV_Frame+0x157>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1330
		SV_BotFrame( sv.time + sv.timeResidual );
    23b5:	8b 15 00 00 00 00    	mov    edx,DWORD PTR [rip+0x0]        # 23bb <SV_Frame+0x148>
    23bb:	8b 05 00 00 00 00    	mov    eax,DWORD PTR [rip+0x0]        # 23c1 <SV_Frame+0x14e>
    23c1:	01 d0                	add    eax,edx
    23c3:	89 c7                	mov    edi,eax
    23c5:	e8 00 00 00 00       	call   23ca <SV_Frame+0x157>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1336

	// if time is about to hit the 32nd bit, kick all clients
	// and clear sv.time, rather
	// than checking for negative time wraparound everywhere.
	// 2giga-milliseconds = 23 days, so it won't be too often
	if ( sv.time > 0x78000000 ) {
    23ca:	8b 05 00 00 00 00    	mov    eax,DWORD PTR [rip+0x0]        # 23d0 <SV_Frame+0x15d>
    23d0:	3d 00 00 00 78       	cmp    eax,0x78000000
    23d5:	7e 11                	jle    23e8 <SV_Frame+0x175>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1337
		SV_Restart( "Restarting server due to time wrapping" );
    23d7:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 23de <SV_Frame+0x16b>
    23de:	e8 bf fd ff ff       	call   21a2 <SV_Restart>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1338
		return;
    23e3:	e9 41 02 00 00       	jmp    2629 <SV_Frame+0x3b6>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1342
	}

	// try to do silent restart earlier if possible
	if ( sv.time > (12*3600*1000) && ( sv_levelTimeReset->integer == 0 || sv.time > 0x40000000 ) ) {
    23e8:	8b 05 00 00 00 00    	mov    eax,DWORD PTR [rip+0x0]        # 23ee <SV_Frame+0x17b>
    23ee:	3d 00 2e 93 02       	cmp    eax,0x2932e00
    23f3:	0f 8e a7 00 00 00    	jle    24a0 <SV_Frame+0x22d>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1342 (discriminator 1)
    23f9:	48 8b 05 00 00 00 00 	mov    rax,QWORD PTR [rip+0x0]        # 2400 <SV_Frame+0x18d>
    2400:	8b 40 30             	mov    eax,DWORD PTR [rax+0x30]
    2403:	85 c0                	test   eax,eax
    2405:	74 11                	je     2418 <SV_Frame+0x1a5>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1342 (discriminator 2)
    2407:	8b 05 00 00 00 00    	mov    eax,DWORD PTR [rip+0x0]        # 240d <SV_Frame+0x19a>
    240d:	3d 00 00 00 40       	cmp    eax,0x40000000
    2412:	0f 8e 88 00 00 00    	jle    24a0 <SV_Frame+0x22d>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1343
		if ( svs.clients ) {
    2418:	48 8b 05 00 00 00 00 	mov    rax,QWORD PTR [rip+0x0]        # 241f <SV_Frame+0x1ac>
    241f:	48 85 c0             	test   rax,rax
    2422:	74 7c                	je     24a0 <SV_Frame+0x22d>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1344
			for ( i = 0; i < sv_maxclients->integer; i++ ) {
    2424:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
    242b:	eb 41                	jmp    246e <SV_Frame+0x1fb>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1346
				// FIXME: deal with bots (reconnect?)
				if ( svs.clients[i].state != CS_FREE && svs.clients[i].netchan.remoteAddress.type != NA_BOT ) {
    242d:	48 8b 15 00 00 00 00 	mov    rdx,QWORD PTR [rip+0x0]        # 2434 <SV_Frame+0x1c1>
    2434:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
    2437:	48 98                	cdqe   
    2439:	48 69 c0 e0 dd 02 00 	imul   rax,rax,0x2dde0
    2440:	48 01 d0             	add    rax,rdx
    2443:	8b 00                	mov    eax,DWORD PTR [rax]
    2445:	85 c0                	test   eax,eax
    2447:	74 21                	je     246a <SV_Frame+0x1f7>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1346 (discriminator 1)
    2449:	48 8b 15 00 00 00 00 	mov    rdx,QWORD PTR [rip+0x0]        # 2450 <SV_Frame+0x1dd>
    2450:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
    2453:	48 98                	cdqe   
    2455:	48 69 c0 e0 dd 02 00 	imul   rax,rax,0x2dde0
    245c:	48 01 d0             	add    rax,rdx
    245f:	8b 80 40 4d 02 00    	mov    eax,DWORD PTR [rax+0x24d40]
    2465:	83 f8 01             	cmp    eax,0x1
    2468:	75 15                	jne    247f <SV_Frame+0x20c>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1344 (discriminator 2)
			for ( i = 0; i < sv_maxclients->integer; i++ ) {
    246a:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1344 (discriminator 1)
    246e:	48 8b 05 00 00 00 00 	mov    rax,QWORD PTR [rip+0x0]        # 2475 <SV_Frame+0x202>
    2475:	8b 40 30             	mov    eax,DWORD PTR [rax+0x30]
    2478:	39 45 f4             	cmp    DWORD PTR [rbp-0xc],eax
    247b:	7c b0                	jl     242d <SV_Frame+0x1ba>
    247d:	eb 01                	jmp    2480 <SV_Frame+0x20d>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1347
					break;
    247f:	90                   	nop
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1350
				}
			}
			if ( i == sv_maxclients->integer ) {
    2480:	48 8b 05 00 00 00 00 	mov    rax,QWORD PTR [rip+0x0]        # 2487 <SV_Frame+0x214>
    2487:	8b 40 30             	mov    eax,DWORD PTR [rax+0x30]
    248a:	39 45 f4             	cmp    DWORD PTR [rbp-0xc],eax
    248d:	75 11                	jne    24a0 <SV_Frame+0x22d>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1351
				SV_Restart( "Restarting server" );
    248f:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 2496 <SV_Frame+0x223>
    2496:	e8 07 fd ff ff       	call   21a2 <SV_Restart>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1352
				return;
    249b:	e9 89 01 00 00       	jmp    2629 <SV_Frame+0x3b6>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1357
			}
		}
	}

	if ( sv.restartTime && sv.time - sv.restartTime >= 0 ) {
    24a0:	8b 05 00 00 00 00    	mov    eax,DWORD PTR [rip+0x0]        # 24a6 <SV_Frame+0x233>
    24a6:	85 c0                	test   eax,eax
    24a8:	74 2f                	je     24d9 <SV_Frame+0x266>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1357 (discriminator 1)
    24aa:	8b 15 00 00 00 00    	mov    edx,DWORD PTR [rip+0x0]        # 24b0 <SV_Frame+0x23d>
    24b0:	8b 05 00 00 00 00    	mov    eax,DWORD PTR [rip+0x0]        # 24b6 <SV_Frame+0x243>
    24b6:	29 c2                	sub    edx,eax
    24b8:	89 d0                	mov    eax,edx
    24ba:	85 c0                	test   eax,eax
    24bc:	78 1b                	js     24d9 <SV_Frame+0x266>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1358
		sv.restartTime = 0;
    24be:	c7 05 00 00 00 00 00 	mov    DWORD PTR [rip+0x0],0x0        # 24c8 <SV_Frame+0x255>
    24c5:	00 00 00 
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1359
		Cbuf_AddText( "map_restart 0\n" );
    24c8:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 24cf <SV_Frame+0x25c>
    24cf:	e8 00 00 00 00       	call   24d4 <SV_Frame+0x261>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1360
		return;
    24d4:	e9 50 01 00 00       	jmp    2629 <SV_Frame+0x3b6>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1364
	}

	// update infostrings if anything has been changed
	if ( cvar_modifiedFlags & CVAR_SERVERINFO ) {
    24d9:	8b 05 00 00 00 00    	mov    eax,DWORD PTR [rip+0x0]        # 24df <SV_Frame+0x26c>
    24df:	83 e0 04             	and    eax,0x4
    24e2:	85 c0                	test   eax,eax
    24e4:	74 2b                	je     2511 <SV_Frame+0x29e>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1365
		SV_SetConfigstring( CS_SERVERINFO, Cvar_InfoString( CVAR_SERVERINFO, NULL ) );
    24e6:	be 00 00 00 00       	mov    esi,0x0
    24eb:	bf 04 00 00 00       	mov    edi,0x4
    24f0:	e8 00 00 00 00       	call   24f5 <SV_Frame+0x282>
    24f5:	48 89 c6             	mov    rsi,rax
    24f8:	bf 00 00 00 00       	mov    edi,0x0
    24fd:	e8 00 00 00 00       	call   2502 <SV_Frame+0x28f>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1366
		cvar_modifiedFlags &= ~CVAR_SERVERINFO;
    2502:	8b 05 00 00 00 00    	mov    eax,DWORD PTR [rip+0x0]        # 2508 <SV_Frame+0x295>
    2508:	83 e0 fb             	and    eax,0xfffffffb
    250b:	89 05 00 00 00 00    	mov    DWORD PTR [rip+0x0],eax        # 2511 <SV_Frame+0x29e>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1368
	}
	if ( cvar_modifiedFlags & CVAR_SYSTEMINFO ) {
    2511:	8b 05 00 00 00 00    	mov    eax,DWORD PTR [rip+0x0]        # 2517 <SV_Frame+0x2a4>
    2517:	83 e0 08             	and    eax,0x8
    251a:	85 c0                	test   eax,eax
    251c:	74 2b                	je     2549 <SV_Frame+0x2d6>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1369
		SV_SetConfigstring( CS_SYSTEMINFO, Cvar_InfoString_Big( CVAR_SYSTEMINFO, NULL ) );
    251e:	be 00 00 00 00       	mov    esi,0x0
    2523:	bf 08 00 00 00       	mov    edi,0x8
    2528:	e8 00 00 00 00       	call   252d <SV_Frame+0x2ba>
    252d:	48 89 c6             	mov    rsi,rax
    2530:	bf 01 00 00 00       	mov    edi,0x1
    2535:	e8 00 00 00 00       	call   253a <SV_Frame+0x2c7>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1370
		cvar_modifiedFlags &= ~CVAR_SYSTEMINFO;
    253a:	8b 05 00 00 00 00    	mov    eax,DWORD PTR [rip+0x0]        # 2540 <SV_Frame+0x2cd>
    2540:	83 e0 f7             	and    eax,0xfffffff7
    2543:	89 05 00 00 00 00    	mov    DWORD PTR [rip+0x0],eax        # 2549 <SV_Frame+0x2d6>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1373
	}

	if ( com_speeds->integer ) {
    2549:	48 8b 05 00 00 00 00 	mov    rax,QWORD PTR [rip+0x0]        # 2550 <SV_Frame+0x2dd>
    2550:	8b 40 30             	mov    eax,DWORD PTR [rax+0x30]
    2553:	85 c0                	test   eax,eax
    2555:	74 0a                	je     2561 <SV_Frame+0x2ee>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1374
		startTime = Sys_Milliseconds();
    2557:	e8 00 00 00 00       	call   255c <SV_Frame+0x2e9>
    255c:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
    255f:	eb 07                	jmp    2568 <SV_Frame+0x2f5>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1376
	} else {
		startTime = 0;	// quite a compiler warning
    2561:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [rbp-0x8],0x0
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1380
	}

	// update ping based on the all received frames
	SV_CalcPings();
    2568:	e8 6a f7 ff ff       	call   1cd7 <SV_CalcPings>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1382

	if (com_dedicated->integer) SV_BotFrame (sv.time);
    256d:	48 8b 05 00 00 00 00 	mov    rax,QWORD PTR [rip+0x0]        # 2574 <SV_Frame+0x301>
    2574:	8b 40 30             	mov    eax,DWORD PTR [rax+0x30]
    2577:	85 c0                	test   eax,eax
    2579:	74 66                	je     25e1 <SV_Frame+0x36e>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1382 (discriminator 1)
    257b:	8b 05 00 00 00 00    	mov    eax,DWORD PTR [rip+0x0]        # 2581 <SV_Frame+0x30e>
    2581:	89 c7                	mov    edi,eax
    2583:	e8 00 00 00 00       	call   2588 <SV_Frame+0x315>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1385 (discriminator 1)

	// run the game simulation in chunks
	while ( sv.timeResidual >= frameMsec ) {
    2588:	eb 57                	jmp    25e1 <SV_Frame+0x36e>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1386
		sv.timeResidual -= frameMsec;
    258a:	8b 05 00 00 00 00    	mov    eax,DWORD PTR [rip+0x0]        # 2590 <SV_Frame+0x31d>
    2590:	2b 45 fc             	sub    eax,DWORD PTR [rbp-0x4]
    2593:	89 05 00 00 00 00    	mov    DWORD PTR [rip+0x0],eax        # 2599 <SV_Frame+0x326>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1387
		svs.time += frameMsec;
    2599:	8b 15 00 00 00 00    	mov    edx,DWORD PTR [rip+0x0]        # 259f <SV_Frame+0x32c>
    259f:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    25a2:	01 d0                	add    eax,edx
    25a4:	89 05 00 00 00 00    	mov    DWORD PTR [rip+0x0],eax        # 25aa <SV_Frame+0x337>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1388
		sv.time += frameMsec;
    25aa:	8b 15 00 00 00 00    	mov    edx,DWORD PTR [rip+0x0]        # 25b0 <SV_Frame+0x33d>
    25b0:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    25b3:	01 d0                	add    eax,edx
    25b5:	89 05 00 00 00 00    	mov    DWORD PTR [rip+0x0],eax        # 25bb <SV_Frame+0x348>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1391

		// let everything in the world think and move
		VM_Call( gvm, 1, GAME_RUN_FRAME, sv.time );
    25bb:	8b 15 00 00 00 00    	mov    edx,DWORD PTR [rip+0x0]        # 25c1 <SV_Frame+0x34e>
    25c1:	48 8b 05 00 00 00 00 	mov    rax,QWORD PTR [rip+0x0]        # 25c8 <SV_Frame+0x355>
    25c8:	89 d1                	mov    ecx,edx
    25ca:	ba 08 00 00 00       	mov    edx,0x8
    25cf:	be 01 00 00 00       	mov    esi,0x1
    25d4:	48 89 c7             	mov    rdi,rax
    25d7:	b8 00 00 00 00       	mov    eax,0x0
    25dc:	e8 00 00 00 00       	call   25e1 <SV_Frame+0x36e>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1385
	while ( sv.timeResidual >= frameMsec ) {
    25e1:	8b 05 00 00 00 00    	mov    eax,DWORD PTR [rip+0x0]        # 25e7 <SV_Frame+0x374>
    25e7:	39 45 fc             	cmp    DWORD PTR [rbp-0x4],eax
    25ea:	7e 9e                	jle    258a <SV_Frame+0x317>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1394
	}

	if ( com_speeds->integer ) {
    25ec:	48 8b 05 00 00 00 00 	mov    rax,QWORD PTR [rip+0x0]        # 25f3 <SV_Frame+0x380>
    25f3:	8b 40 30             	mov    eax,DWORD PTR [rax+0x30]
    25f6:	85 c0                	test   eax,eax
    25f8:	74 0e                	je     2608 <SV_Frame+0x395>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1395
		time_game = Sys_Milliseconds () - startTime;
    25fa:	e8 00 00 00 00       	call   25ff <SV_Frame+0x38c>
    25ff:	2b 45 f8             	sub    eax,DWORD PTR [rbp-0x8]
    2602:	89 05 00 00 00 00    	mov    DWORD PTR [rip+0x0],eax        # 2608 <SV_Frame+0x395>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1399
	}

	// check timeouts
	SV_CheckTimeouts();
    2608:	e8 69 f8 ff ff       	call   1e76 <SV_CheckTimeouts>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1402

	// reset current and build new snapshot on first query
	SV_IssueNewSnapshot();
    260d:	e8 00 00 00 00       	call   2612 <SV_Frame+0x39f>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1405

	// send messages back to the clients
	SV_SendClientMessages();
    2612:	e8 00 00 00 00       	call   2617 <SV_Frame+0x3a4>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1408

	// send a heartbeat to the master if needed
	SV_MasterHeartbeat(HEARTBEAT_FOR_MASTER);
    2617:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 261e <SV_Frame+0x3ab>
    261e:	e8 8a dd ff ff       	call   3ad <SV_MasterHeartbeat>
    2623:	eb 04                	jmp    2629 <SV_Frame+0x3b6>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1308
		return;
    2625:	90                   	nop
    2626:	eb 01                	jmp    2629 <SV_Frame+0x3b6>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1313
		return;
    2628:	90                   	nop
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1409
}
    2629:	c9                   	leave  
    262a:	c3                   	ret    

000000000000262b <SV_RateMsec>:
SV_RateMsec():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1425

#define UDPIP_HEADER_SIZE 28
#define UDPIP6_HEADER_SIZE 48

int SV_RateMsec( const client_t *client )
{
    262b:	55                   	push   rbp
    262c:	48 89 e5             	mov    rbp,rsp
    262f:	48 83 ec 20          	sub    rsp,0x20
    2633:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1429
	int rate, rateMsec;
	int messageSize;
	
	if ( !client->rate )
    2637:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    263b:	8b 80 24 4d 02 00    	mov    eax,DWORD PTR [rax+0x24d24]
    2641:	85 c0                	test   eax,eax
    2643:	75 0a                	jne    264f <SV_RateMsec+0x24>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1430
		return 0;
    2645:	b8 00 00 00 00       	mov    eax,0x0
    264a:	e9 84 00 00 00       	jmp    26d3 <SV_RateMsec+0xa8>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1432

	messageSize = client->netchan.lastSentSize;
    264f:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    2653:	8b 80 88 cd 02 00    	mov    eax,DWORD PTR [rax+0x2cd88]
    2659:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1435

#ifdef USE_IPV6
	if ( client->netchan.remoteAddress.type == NA_IP6 )
    265c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    2660:	8b 80 40 4d 02 00    	mov    eax,DWORD PTR [rax+0x24d40]
    2666:	83 f8 05             	cmp    eax,0x5
    2669:	75 06                	jne    2671 <SV_RateMsec+0x46>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1436
		messageSize += UDPIP6_HEADER_SIZE;
    266b:	83 45 fc 30          	add    DWORD PTR [rbp-0x4],0x30
    266f:	eb 04                	jmp    2675 <SV_RateMsec+0x4a>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1439
	else
#endif
		messageSize += UDPIP_HEADER_SIZE;
    2671:	83 45 fc 1c          	add    DWORD PTR [rbp-0x4],0x1c
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1441
		
	rateMsec = messageSize * 1000 / ((int) (client->rate * com_timescale->value));
    2675:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
    2678:	69 c0 e8 03 00 00    	imul   eax,eax,0x3e8
    267e:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
    2682:	8b 92 24 4d 02 00    	mov    edx,DWORD PTR [rdx+0x24d24]
    2688:	f3 0f 2a ca          	cvtsi2ss xmm1,edx
    268c:	48 8b 15 00 00 00 00 	mov    rdx,QWORD PTR [rip+0x0]        # 2693 <SV_RateMsec+0x68>
    2693:	f3 0f 10 42 2c       	movss  xmm0,DWORD PTR [rdx+0x2c]
    2698:	f3 0f 59 c1          	mulss  xmm0,xmm1
    269c:	f3 0f 2c c8          	cvttss2si ecx,xmm0
    26a0:	99                   	cdq    
    26a1:	f7 f9                	idiv   ecx
    26a3:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1442
	rate = Sys_Milliseconds() - client->netchan.lastSentTime;
    26a6:	e8 00 00 00 00       	call   26ab <SV_RateMsec+0x80>
    26ab:	89 c2                	mov    edx,eax
    26ad:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    26b1:	8b 80 84 cd 02 00    	mov    eax,DWORD PTR [rax+0x2cd84]
    26b7:	29 c2                	sub    edx,eax
    26b9:	89 d0                	mov    eax,edx
    26bb:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1444
	
	if ( rate > rateMsec )
    26be:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
    26c1:	3b 45 f8             	cmp    eax,DWORD PTR [rbp-0x8]
    26c4:	7e 07                	jle    26cd <SV_RateMsec+0xa2>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1445
		return 0;
    26c6:	b8 00 00 00 00       	mov    eax,0x0
    26cb:	eb 06                	jmp    26d3 <SV_RateMsec+0xa8>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1447
	else
		return rateMsec - rate;
    26cd:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
    26d0:	2b 45 f4             	sub    eax,DWORD PTR [rbp-0xc]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1448
}
    26d3:	c9                   	leave  
    26d4:	c3                   	ret    

00000000000026d5 <SV_SendQueuedPackets>:
SV_SendQueuedPackets():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1461
not computing a server frame or sending client snapshots.
Return the time in msec until we expect to be called next
====================
*/
int SV_SendQueuedPackets( void )
{
    26d5:	55                   	push   rbp
    26d6:	48 89 e5             	mov    rbp,rsp
    26d9:	48 83 ec 20          	sub    rsp,0x20
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1465
	int numBlocks;
	int dlStart, deltaT, delayT;
	static int dlNextRound = 0;
	int timeVal = INT_MAX;
    26dd:	c7 45 fc ff ff ff 7f 	mov    DWORD PTR [rbp-0x4],0x7fffffff
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1468

	// Send out fragmented packets now that we're idle
	delayT = SV_SendQueuedMessages();
    26e4:	e8 00 00 00 00       	call   26e9 <SV_SendQueuedPackets+0x14>
    26e9:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1469
	if(delayT >= 0)
    26ec:	83 7d f8 00          	cmp    DWORD PTR [rbp-0x8],0x0
    26f0:	78 06                	js     26f8 <SV_SendQueuedPackets+0x23>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1470
		timeVal = delayT;
    26f2:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
    26f5:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1472

	if(sv_dlRate->integer)
    26f8:	48 8b 05 00 00 00 00 	mov    rax,QWORD PTR [rip+0x0]        # 26ff <SV_SendQueuedPackets+0x2a>
    26ff:	8b 40 30             	mov    eax,DWORD PTR [rax+0x30]
    2702:	85 c0                	test   eax,eax
    2704:	0f 84 c4 00 00 00    	je     27ce <SV_SendQueuedPackets+0xf9>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1476
	{
		// Rate limiting. This is very imprecise for high
		// download rates due to millisecond timedelta resolution
		dlStart = Sys_Milliseconds();
    270a:	e8 00 00 00 00       	call   270f <SV_SendQueuedPackets+0x3a>
    270f:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1477
		deltaT = dlNextRound - dlStart;
    2712:	8b 05 00 00 00 00    	mov    eax,DWORD PTR [rip+0x0]        # 2718 <SV_SendQueuedPackets+0x43>
    2718:	2b 45 f4             	sub    eax,DWORD PTR [rbp-0xc]
    271b:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1479

		if(deltaT > 0)
    271e:	83 7d f0 00          	cmp    DWORD PTR [rbp-0x10],0x0
    2722:	7e 1a                	jle    273e <SV_SendQueuedPackets+0x69>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1481
		{
			if(deltaT < timeVal)
    2724:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
    2727:	3b 45 fc             	cmp    eax,DWORD PTR [rbp-0x4]
    272a:	0f 8d ae 00 00 00    	jge    27de <SV_SendQueuedPackets+0x109>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1482
				timeVal = deltaT + 1;
    2730:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
    2733:	83 c0 01             	add    eax,0x1
    2736:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
    2739:	e9 a0 00 00 00       	jmp    27de <SV_SendQueuedPackets+0x109>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1486
		}
		else
		{
			numBlocks = SV_SendDownloadMessages();
    273e:	e8 00 00 00 00       	call   2743 <SV_SendQueuedPackets+0x6e>
    2743:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1488

			if(numBlocks)
    2746:	83 7d ec 00          	cmp    DWORD PTR [rbp-0x14],0x0
    274a:	0f 84 8e 00 00 00    	je     27de <SV_SendQueuedPackets+0x109>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1491
			{
				// There are active downloads
				deltaT = Sys_Milliseconds() - dlStart;
    2750:	e8 00 00 00 00       	call   2755 <SV_SendQueuedPackets+0x80>
    2755:	2b 45 f4             	sub    eax,DWORD PTR [rbp-0xc]
    2758:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1493

				delayT = 1000 * numBlocks * MAX_DOWNLOAD_BLKSIZE;
    275b:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
    275e:	69 c0 00 a0 0f 00    	imul   eax,eax,0xfa000
    2764:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1494
				delayT /= sv_dlRate->integer * 1024;
    2767:	48 8b 05 00 00 00 00 	mov    rax,QWORD PTR [rip+0x0]        # 276e <SV_SendQueuedPackets+0x99>
    276e:	8b 40 30             	mov    eax,DWORD PTR [rax+0x30]
    2771:	c1 e0 0a             	shl    eax,0xa
    2774:	89 c1                	mov    ecx,eax
    2776:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
    2779:	99                   	cdq    
    277a:	f7 f9                	idiv   ecx
    277c:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1496

				if(delayT <= deltaT + 1)
    277f:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
    2782:	83 c0 01             	add    eax,0x1
    2785:	39 45 f8             	cmp    DWORD PTR [rbp-0x8],eax
    2788:	7f 20                	jg     27aa <SV_SendQueuedPackets+0xd5>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1505
					// next round, but always enforce a 1ms delay
					// between DL message rounds so we don't hog
					// all of the bandwidth. This will result in an
					// effective maximum rate of 1MB/s per user, but the
					// low download window size limits this anyways.
					if(timeVal > 2)
    278a:	83 7d fc 02          	cmp    DWORD PTR [rbp-0x4],0x2
    278e:	7e 07                	jle    2797 <SV_SendQueuedPackets+0xc2>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1506
						timeVal = 2;
    2790:	c7 45 fc 02 00 00 00 	mov    DWORD PTR [rbp-0x4],0x2
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1508

					dlNextRound = dlStart + deltaT + 1;
    2797:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
    279a:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
    279d:	01 d0                	add    eax,edx
    279f:	83 c0 01             	add    eax,0x1
    27a2:	89 05 00 00 00 00    	mov    DWORD PTR [rip+0x0],eax        # 27a8 <SV_SendQueuedPackets+0xd3>
    27a8:	eb 34                	jmp    27de <SV_SendQueuedPackets+0x109>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1512
				}
				else
				{
					dlNextRound = dlStart + delayT;
    27aa:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
    27ad:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
    27b0:	01 d0                	add    eax,edx
    27b2:	89 05 00 00 00 00    	mov    DWORD PTR [rip+0x0],eax        # 27b8 <SV_SendQueuedPackets+0xe3>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1513
					delayT -= deltaT;
    27b8:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
    27bb:	29 45 f8             	sub    DWORD PTR [rbp-0x8],eax
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1515

					if(delayT < timeVal)
    27be:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
    27c1:	3b 45 fc             	cmp    eax,DWORD PTR [rbp-0x4]
    27c4:	7d 18                	jge    27de <SV_SendQueuedPackets+0x109>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1516
						timeVal = delayT;
    27c6:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
    27c9:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
    27cc:	eb 10                	jmp    27de <SV_SendQueuedPackets+0x109>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1523
			}
		}
	}
	else
	{
		if(SV_SendDownloadMessages())
    27ce:	e8 00 00 00 00       	call   27d3 <SV_SendQueuedPackets+0xfe>
    27d3:	85 c0                	test   eax,eax
    27d5:	74 07                	je     27de <SV_SendQueuedPackets+0x109>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1524
			timeVal = 0;
    27d7:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [rbp-0x4],0x0
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1527
	}

	return timeVal;
    27de:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1528
}
    27e1:	c9                   	leave  
    27e2:	c3                   	ret    

Disassembly of section .bss:

0000000000000000 <gvm>:
	...

0000000000000020 <buckets>:
	...

00000000000e0020 <bucketHashes>:
	...

00000000000e2020 <outboundRateLimit>:
	...

00000000000e2040 <redirectAddress>:
	...

00000000000e2060 <string.7802>:
	...

00000000000e2860 <adr.7833>:
	...

00000000000e29a0 <dummy.7870>:
	...

00000000000e29d8 <start.7871>:
	...

00000000000e29e0 <bucket.7968>:
	...

00000000000e29e8 <dlNextRound.8083>:
   e29e8:	00 00                	add    BYTE PTR [rax],al
	...

Disassembly of section .rodata:

0000000000000000 <.rodata>:
   0:	3d 3d 3d 3d 3d       	cmp    eax,0x3d3d3d3d
   5:	20 70 65             	and    BYTE PTR [rax+0x65],dh
   8:	6e                   	outs   dx,BYTE PTR ds:[rsi]
   9:	64 69 6e 67 20 73 65 	imul   ebp,DWORD PTR fs:[rsi+0x67],0x72657320
  10:	72 
  11:	76 65                	jbe    78 <.rodata+0x78>
  13:	72 20                	jb     35 <.rodata+0x35>
  15:	63 6f 6d             	movsxd ebp,DWORD PTR [rdi+0x6d]
  18:	6d                   	ins    DWORD PTR es:[rdi],dx
  19:	61                   	(bad)  
  1a:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  1b:	64 73 20             	fs jae 3e <.rodata+0x3e>
  1e:	3d 3d 3d 3d 3d       	cmp    eax,0x3d3d3d3d
  23:	0a 00                	or     al,BYTE PTR [rax]
  25:	63 6d 64             	movsxd ebp,DWORD PTR [rbp+0x64]
  28:	20 25 35 64 3a 20    	and    BYTE PTR [rip+0x203a6435],ah        # 203a6463 <dlNextRound.8083+0x202c3a7b>
  2e:	25 73 0a 00 53       	and    eax,0x53000a73
  33:	65 72 76             	gs jb  ac <.rodata+0xac>
  36:	65 72 20             	gs jb  59 <.rodata+0x59>
  39:	63 6f 6d             	movsxd ebp,DWORD PTR [rdi+0x6d]
  3c:	6d                   	ins    DWORD PTR es:[rdi],dx
  3d:	61                   	(bad)  
  3e:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  3f:	64 20 6f 76          	and    BYTE PTR fs:[rdi+0x76],ch
  43:	65 72 66             	gs jb  ac <.rodata+0xac>
  46:	6c                   	ins    BYTE PTR es:[rdi],dx
  47:	6f                   	outs   dx,DWORD PTR ds:[rsi]
  48:	77 00                	ja     4a <.rodata+0x4a>
  4a:	70 72                	jo     be <.rodata+0xbe>
  4c:	69 6e 74 00 62 72 6f 	imul   ebp,DWORD PTR [rsi+0x74],0x6f726200
  53:	61                   	(bad)  
  54:	64 63 61 73          	movsxd esp,DWORD PTR fs:[rcx+0x73]
  58:	74 3a                	je     94 <.rodata+0x94>
  5a:	20 25 73 0a 00 6e    	and    BYTE PTR [rip+0x6e000a73],ah        # 6e000ad3 <dlNextRound.8083+0x6df1e0eb>
  60:	65 74 5f             	gs je  c2 <.rodata+0xc2>
  63:	65 6e                	outs   dx,BYTE PTR gs:[rsi]
  65:	61                   	(bad)  
  66:	62                   	(bad)  
  67:	6c                   	ins    BYTE PTR es:[rdi],dx
  68:	65 64 00 52 65       	gs add BYTE PTR fs:[rdx+0x65],dl
  6d:	73 6f                	jae    de <.rodata+0xde>
  6f:	6c                   	ins    BYTE PTR es:[rdi],dx
  70:	76 69                	jbe    db <.rodata+0xdb>
  72:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  73:	67 20 25 73 20 28 49 	and    BYTE PTR [eip+0x49282073],ah        # 492820ed <dlNextRound.8083+0x4919f705>
  7a:	50                   	push   rax
  7b:	76 34                	jbe    b1 <.rodata+0xb1>
  7d:	29 0a                	sub    DWORD PTR [rdx],ecx
  7f:	00 25 73 20 72 65    	add    BYTE PTR [rip+0x65722073],ah        # 657220f8 <dlNextRound.8083+0x6563f710>
  85:	73 6f                	jae    f6 <.rodata+0xf6>
  87:	6c                   	ins    BYTE PTR es:[rdi],dx
  88:	76 65                	jbe    ef <.rodata+0xef>
  8a:	64 20 74 6f 20       	and    BYTE PTR fs:[rdi+rbp*2+0x20],dh
  8f:	25 73 0a 00 25       	and    eax,0x25000a73
  94:	73 20                	jae    b6 <.rodata+0xb6>
  96:	68 61 73 20 6e       	push   0x6e207361
  9b:	6f                   	outs   dx,DWORD PTR ds:[rsi]
  9c:	20 49 50             	and    BYTE PTR [rcx+0x50],cl
  9f:	76 34                	jbe    d5 <.rodata+0xd5>
  a1:	20 61 64             	and    BYTE PTR [rcx+0x64],ah
  a4:	64 72 65             	fs jb  10c <.rodata+0x10c>
  a7:	73 73                	jae    11c <.rodata+0x11c>
  a9:	2e 0a 00             	or     al,BYTE PTR cs:[rax]
  ac:	52                   	push   rdx
  ad:	65 73 6f             	gs jae 11f <.rodata+0x11f>
  b0:	6c                   	ins    BYTE PTR es:[rdi],dx
  b1:	76 69                	jbe    11c <.rodata+0x11c>
  b3:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  b4:	67 20 25 73 20 28 49 	and    BYTE PTR [eip+0x49282073],ah        # 4928212e <dlNextRound.8083+0x4919f746>
  bb:	50                   	push   rax
  bc:	76 36                	jbe    f4 <.rodata+0xf4>
  be:	29 0a                	sub    DWORD PTR [rdx],ecx
  c0:	00 25 73 20 68 61    	add    BYTE PTR [rip+0x61682073],ah        # 61682139 <dlNextRound.8083+0x6159f751>
  c6:	73 20                	jae    e8 <.rodata+0xe8>
  c8:	6e                   	outs   dx,BYTE PTR ds:[rsi]
  c9:	6f                   	outs   dx,DWORD PTR ds:[rsi]
  ca:	20 49 50             	and    BYTE PTR [rcx+0x50],cl
  cd:	76 36                	jbe    105 <.rodata+0x105>
  cf:	20 61 64             	and    BYTE PTR [rcx+0x64],ah
  d2:	64 72 65             	fs jb  13a <.rodata+0x13a>
  d5:	73 73                	jae    14a <.rodata+0x14a>
  d7:	2e 0a 00             	or     al,BYTE PTR cs:[rax]
  da:	53                   	push   rbx
  db:	65 6e                	outs   dx,BYTE PTR gs:[rsi]
  dd:	64 69 6e 67 20 68 65 	imul   ebp,DWORD PTR fs:[rsi+0x67],0x61656820
  e4:	61 
  e5:	72 74                	jb     15b <.rodata+0x15b>
  e7:	62                   	(bad)  
  e8:	65 61                	gs (bad) 
  ea:	74 20                	je     10c <.rodata+0x10c>
  ec:	74 6f                	je     15d <.rodata+0x15d>
  ee:	20 25 73 0a 00 68    	and    BYTE PTR [rip+0x68000a73],ah        # 68000b67 <dlNextRound.8083+0x67f1e17f>
  f4:	65 61                	gs (bad) 
  f6:	72 74                	jb     16c <.rodata+0x16c>
  f8:	62                   	(bad)  
  f9:	65 61                	gs (bad) 
  fb:	74 20                	je     11d <.rodata+0x11d>
  fd:	25 73 0a 00 51       	and    eax,0x51000a73
 102:	75 61                	jne    165 <.rodata+0x165>
 104:	6b 65 41 72          	imul   esp,DWORD PTR [rbp+0x41],0x72
 108:	65 6e                	outs   dx,BYTE PTR gs:[rsi]
 10a:	61                   	(bad)  
 10b:	2d 31 00 00 00       	sub    eax,0x31
 110:	53                   	push   rbx
 111:	56                   	push   rsi
 112:	43 5f                	rex.XB pop r15
 114:	53                   	push   rbx
 115:	74 61                	je     178 <.rodata+0x178>
 117:	74 75                	je     18e <.rodata+0x18e>
 119:	73 3a                	jae    155 <.rodata+0x155>
 11b:	20 72 61             	and    BYTE PTR [rdx+0x61],dh
 11e:	74 65                	je     185 <.rodata+0x185>
 120:	20 6c 69 6d          	and    BYTE PTR [rcx+rbp*2+0x6d],ch
 124:	69 74 20 66 72 6f 6d 	imul   esi,DWORD PTR [rax+riz*1+0x66],0x206d6f72
 12b:	20 
 12c:	25 73 20 65 78       	and    eax,0x78652073
 131:	63 65 65             	movsxd esp,DWORD PTR [rbp+0x65]
 134:	64 65 64 2c 20       	fs gs fs sub al,0x20
 139:	64 72 6f             	fs jb  1ab <.rodata+0x1ab>
 13c:	70 70                	jo     1ae <.rodata+0x1ae>
 13e:	69 6e 67 20 72 65 71 	imul   ebp,DWORD PTR [rsi+0x67],0x71657220
 145:	75 65                	jne    1ac <.rodata+0x1ac>
 147:	73 74                	jae    1bd <.rodata+0x1bd>
 149:	0a 00                	or     al,BYTE PTR [rax]
 14b:	00 00                	add    BYTE PTR [rax],al
 14d:	00 00                	add    BYTE PTR [rax],al
 14f:	00 53 56             	add    BYTE PTR [rbx+0x56],dl
 152:	43 5f                	rex.XB pop r15
 154:	53                   	push   rbx
 155:	74 61                	je     1b8 <.rodata+0x1b8>
 157:	74 75                	je     1ce <.rodata+0x1ce>
 159:	73 3a                	jae    195 <.rodata+0x195>
 15b:	20 72 61             	and    BYTE PTR [rdx+0x61],dh
 15e:	74 65                	je     1c5 <.rodata+0x1c5>
 160:	20 6c 69 6d          	and    BYTE PTR [rcx+rbp*2+0x6d],ch
 164:	69 74 20 65 78 63 65 	imul   esi,DWORD PTR [rax+riz*1+0x65],0x65656378
 16b:	65 
 16c:	64 65 64 2c 20       	fs gs fs sub al,0x20
 171:	64 72 6f             	fs jb  1e3 <.rodata+0x1e3>
 174:	70 70                	jo     1e6 <.rodata+0x1e6>
 176:	69 6e 67 20 72 65 71 	imul   ebp,DWORD PTR [rsi+0x67],0x71657220
 17d:	75 65                	jne    1e4 <.rodata+0x1e4>
 17f:	73 74                	jae    1f5 <.rodata+0x1f5>
 181:	0a 00                	or     al,BYTE PTR [rax]
 183:	63 68 61             	movsxd ebp,DWORD PTR [rax+0x61]
 186:	6c                   	ins    BYTE PTR es:[rdi],dx
 187:	6c                   	ins    BYTE PTR es:[rdi],dx
 188:	65 6e                	outs   dx,BYTE PTR gs:[rsi]
 18a:	67 65 00 25 69 20 25 	add    BYTE PTR gs:[eip+0x69252069],ah        # 692521fb <dlNextRound.8083+0x6916f813>
 191:	69 
 192:	20 22                	and    BYTE PTR [rdx],ah
 194:	25 73 22 0a 00       	and    eax,0xa2273
 199:	73 74                	jae    20f <.rodata+0x20f>
 19b:	61                   	(bad)  
 19c:	74 75                	je     213 <.rodata+0x213>
 19e:	73 52                	jae    1f2 <.rodata+0x1f2>
 1a0:	65 73 70             	gs jae 213 <.rodata+0x213>
 1a3:	6f                   	outs   dx,DWORD PTR ds:[rsi]
 1a4:	6e                   	outs   dx,BYTE PTR ds:[rsi]
 1a5:	73 65                	jae    20c <.rodata+0x20c>
 1a7:	0a 25 73 0a 25 73    	or     ah,BYTE PTR [rip+0x73250a73]        # 73250c20 <dlNextRound.8083+0x7316e238>
 1ad:	00 00                	add    BYTE PTR [rax],al
 1af:	00 53 56             	add    BYTE PTR [rbx+0x56],dl
 1b2:	43 5f                	rex.XB pop r15
 1b4:	49 6e                	rex.WB outs dx,BYTE PTR ds:[rsi]
 1b6:	66 6f                	outs   dx,WORD PTR ds:[rsi]
 1b8:	3a 20                	cmp    ah,BYTE PTR [rax]
 1ba:	72 61                	jb     21d <.rodata+0x21d>
 1bc:	74 65                	je     223 <.rodata+0x223>
 1be:	20 6c 69 6d          	and    BYTE PTR [rcx+rbp*2+0x6d],ch
 1c2:	69 74 20 66 72 6f 6d 	imul   esi,DWORD PTR [rax+riz*1+0x66],0x206d6f72
 1c9:	20 
 1ca:	25 73 20 65 78       	and    eax,0x78652073
 1cf:	63 65 65             	movsxd esp,DWORD PTR [rbp+0x65]
 1d2:	64 65 64 2c 20       	fs gs fs sub al,0x20
 1d7:	64 72 6f             	fs jb  249 <.rodata+0x249>
 1da:	70 70                	jo     24c <.rodata+0x24c>
 1dc:	69 6e 67 20 72 65 71 	imul   ebp,DWORD PTR [rsi+0x67],0x71657220
 1e3:	75 65                	jne    24a <.rodata+0x24a>
 1e5:	73 74                	jae    25b <.rodata+0x25b>
 1e7:	0a 00                	or     al,BYTE PTR [rax]
 1e9:	00 00                	add    BYTE PTR [rax],al
 1eb:	00 00                	add    BYTE PTR [rax],al
 1ed:	00 00                	add    BYTE PTR [rax],al
 1ef:	00 53 56             	add    BYTE PTR [rbx+0x56],dl
 1f2:	43 5f                	rex.XB pop r15
 1f4:	49 6e                	rex.WB outs dx,BYTE PTR ds:[rsi]
 1f6:	66 6f                	outs   dx,WORD PTR ds:[rsi]
 1f8:	3a 20                	cmp    ah,BYTE PTR [rax]
 1fa:	72 61                	jb     25d <.rodata+0x25d>
 1fc:	74 65                	je     263 <.rodata+0x263>
 1fe:	20 6c 69 6d          	and    BYTE PTR [rcx+rbp*2+0x6d],ch
 202:	69 74 20 65 78 63 65 	imul   esi,DWORD PTR [rax+riz*1+0x65],0x65656378
 209:	65 
 20a:	64 65 64 2c 20       	fs gs fs sub al,0x20
 20f:	64 72 6f             	fs jb  281 <.rodata+0x281>
 212:	70 70                	jo     284 <.rodata+0x284>
 214:	69 6e 67 20 72 65 71 	imul   ebp,DWORD PTR [rsi+0x67],0x71657220
 21b:	75 65                	jne    282 <.rodata+0x282>
 21d:	73 74                	jae    293 <.rodata+0x293>
 21f:	0a 00                	or     al,BYTE PTR [rax]
 221:	70 72                	jo     295 <.rodata+0x295>
 223:	6f                   	outs   dx,DWORD PTR ds:[rsi]
 224:	74 6f                	je     295 <.rodata+0x295>
 226:	63 6f 6c             	movsxd ebp,DWORD PTR [rdi+0x6c]
 229:	00 68 6f             	add    BYTE PTR [rax+0x6f],ch
 22c:	73 74                	jae    2a2 <.rodata+0x2a2>
 22e:	6e                   	outs   dx,BYTE PTR ds:[rsi]
 22f:	61                   	(bad)  
 230:	6d                   	ins    DWORD PTR es:[rdi],dx
 231:	65 00 6d 61          	add    BYTE PTR gs:[rbp+0x61],ch
 235:	70 6e                	jo     2a5 <.rodata+0x2a5>
 237:	61                   	(bad)  
 238:	6d                   	ins    DWORD PTR es:[rdi],dx
 239:	65 00 25 69 00 63 6c 	add    BYTE PTR gs:[rip+0x6c630069],ah        # 6c6302a9 <dlNextRound.8083+0x6c54d8c1>
 240:	69 65 6e 74 73 00 67 	imul   esp,DWORD PTR [rbp+0x6e],0x67007374
 247:	5f                   	pop    rdi
 248:	68 75 6d 61 6e       	push   0x6e616d75
 24d:	70 6c                	jo     2bb <.rodata+0x2bb>
 24f:	61                   	(bad)  
 250:	79 65                	jns    2b7 <.rodata+0x2b7>
 252:	72 73                	jb     2c7 <.rodata+0x2c7>
 254:	00 73 76             	add    BYTE PTR [rbx+0x76],dh
 257:	5f                   	pop    rdi
 258:	6d                   	ins    DWORD PTR es:[rdi],dx
 259:	61                   	(bad)  
 25a:	78 63                	js     2bf <.rodata+0x2bf>
 25c:	6c                   	ins    BYTE PTR es:[rdi],dx
 25d:	69 65 6e 74 73 00 67 	imul   esp,DWORD PTR [rbp+0x6e],0x67007374
 264:	61                   	(bad)  
 265:	6d                   	ins    DWORD PTR es:[rdi],dx
 266:	65 74 79             	gs je  2e2 <.rodata+0x2e2>
 269:	70 65                	jo     2d0 <.rodata+0x2d0>
 26b:	00 70 75             	add    BYTE PTR [rax+0x75],dh
 26e:	72 65                	jb     2d5 <.rodata+0x2d5>
 270:	00 67 5f             	add    BYTE PTR [rdi+0x5f],ah
 273:	6e                   	outs   dx,BYTE PTR ds:[rsi]
 274:	65 65 64 70 61       	gs gs fs jo 2da <.rodata+0x2da>
 279:	73 73                	jae    2ee <.rodata+0x2ee>
 27b:	00 25 64 00 66 73    	add    BYTE PTR [rip+0x73660064],ah        # 736602e5 <dlNextRound.8083+0x7357d8fd>
 281:	5f                   	pop    rdi
 282:	67 61                	addr32 (bad) 
 284:	6d                   	ins    DWORD PTR es:[rdi],dx
 285:	65 00 67 61          	add    BYTE PTR gs:[rdi+0x61],ah
 289:	6d                   	ins    DWORD PTR es:[rdi],dx
 28a:	65 00 69 6e          	add    BYTE PTR gs:[rcx+0x6e],ch
 28e:	66 6f                	outs   dx,WORD PTR ds:[rsi]
 290:	52                   	push   rdx
 291:	65 73 70             	gs jae 304 <.rodata+0x304>
 294:	6f                   	outs   dx,DWORD PTR ds:[rsi]
 295:	6e                   	outs   dx,BYTE PTR ds:[rsi]
 296:	73 65                	jae    2fd <.rodata+0x2fd>
 298:	0a 25 73 00 70 72    	or     ah,BYTE PTR [rip+0x72700073]        # 72700311 <dlNextRound.8083+0x7261d929>
 29e:	69 6e 74 0a 25 73 00 	imul   ebp,DWORD PTR [rsi+0x74],0x73250a
 2a5:	00 00                	add    BYTE PTR [rax],al
 2a7:	00 53 56             	add    BYTE PTR [rbx+0x56],dl
 2aa:	43 5f                	rex.XB pop r15
 2ac:	52                   	push   rdx
 2ad:	65 6d                	gs ins DWORD PTR es:[rdi],dx
 2af:	6f                   	outs   dx,DWORD PTR ds:[rsi]
 2b0:	74 65                	je     317 <.rodata+0x317>
 2b2:	43 6f                	rex.XB outs dx,DWORD PTR ds:[rsi]
 2b4:	6d                   	ins    DWORD PTR es:[rdi],dx
 2b5:	6d                   	ins    DWORD PTR es:[rdi],dx
 2b6:	61                   	(bad)  
 2b7:	6e                   	outs   dx,BYTE PTR ds:[rsi]
 2b8:	64 3a 20             	cmp    ah,BYTE PTR fs:[rax]
 2bb:	72 61                	jb     31e <.rodata+0x31e>
 2bd:	74 65                	je     324 <.rodata+0x324>
 2bf:	20 6c 69 6d          	and    BYTE PTR [rcx+rbp*2+0x6d],ch
 2c3:	69 74 20 66 72 6f 6d 	imul   esi,DWORD PTR [rax+riz*1+0x66],0x206d6f72
 2ca:	20 
 2cb:	25 73 20 65 78       	and    eax,0x78652073
 2d0:	63 65 65             	movsxd esp,DWORD PTR [rbp+0x65]
 2d3:	64 65 64 2c 20       	fs gs fs sub al,0x20
 2d8:	64 72 6f             	fs jb  34a <.rodata+0x34a>
 2db:	70 70                	jo     34d <.rodata+0x34d>
 2dd:	69 6e 67 20 72 65 71 	imul   ebp,DWORD PTR [rsi+0x67],0x71657220
 2e4:	75 65                	jne    34b <.rodata+0x34b>
 2e6:	73 74                	jae    35c <.rodata+0x35c>
 2e8:	0a 00                	or     al,BYTE PTR [rax]
 2ea:	52                   	push   rdx
 2eb:	63 6f 6e             	movsxd ebp,DWORD PTR [rdi+0x6e]
 2ee:	20 66 72             	and    BYTE PTR [rsi+0x72],ah
 2f1:	6f                   	outs   dx,DWORD PTR ds:[rsi]
 2f2:	6d                   	ins    DWORD PTR es:[rdi],dx
 2f3:	20 25 73 3a 20 25    	and    BYTE PTR [rip+0x25203a73],ah        # 25203d6c <dlNextRound.8083+0x25121384>
 2f9:	73 0a                	jae    305 <.rodata+0x305>
 2fb:	00 00                	add    BYTE PTR [rax],al
 2fd:	00 00                	add    BYTE PTR [rax],al
 2ff:	00 53 56             	add    BYTE PTR [rbx+0x56],dl
 302:	43 5f                	rex.XB pop r15
 304:	52                   	push   rdx
 305:	65 6d                	gs ins DWORD PTR es:[rdi],dx
 307:	6f                   	outs   dx,DWORD PTR ds:[rsi]
 308:	74 65                	je     36f <.rodata+0x36f>
 30a:	43 6f                	rex.XB outs dx,DWORD PTR ds:[rsi]
 30c:	6d                   	ins    DWORD PTR es:[rdi],dx
 30d:	6d                   	ins    DWORD PTR es:[rdi],dx
 30e:	61                   	(bad)  
 30f:	6e                   	outs   dx,BYTE PTR ds:[rsi]
 310:	64 3a 20             	cmp    ah,BYTE PTR fs:[rax]
 313:	72 61                	jb     376 <.rodata+0x376>
 315:	74 65                	je     37c <.rodata+0x37c>
 317:	20 6c 69 6d          	and    BYTE PTR [rcx+rbp*2+0x6d],ch
 31b:	69 74 20 65 78 63 65 	imul   esi,DWORD PTR [rax+riz*1+0x65],0x65656378
 322:	65 
 323:	64 65 64 2c 20       	fs gs fs sub al,0x20
 328:	64 72 6f             	fs jb  39a <.rodata+0x39a>
 32b:	70 70                	jo     39d <.rodata+0x39d>
 32d:	69 6e 67 20 72 65 71 	imul   ebp,DWORD PTR [rsi+0x67],0x71657220
 334:	75 65                	jne    39b <.rodata+0x39b>
 336:	73 74                	jae    3ac <.rodata+0x3ac>
 338:	0a 00                	or     al,BYTE PTR [rax]
 33a:	42 61                	rex.X (bad) 
 33c:	64 20 72 63          	and    BYTE PTR fs:[rdx+0x63],dh
 340:	6f                   	outs   dx,DWORD PTR ds:[rsi]
 341:	6e                   	outs   dx,BYTE PTR ds:[rsi]
 342:	20 66 72             	and    BYTE PTR [rsi+0x72],ah
 345:	6f                   	outs   dx,DWORD PTR ds:[rsi]
 346:	6d                   	ins    DWORD PTR es:[rdi],dx
 347:	20 25 73 3a 20 25    	and    BYTE PTR [rip+0x25203a73],ah        # 25203dc0 <dlNextRound.8083+0x251213d8>
 34d:	73 0a                	jae    359 <.rodata+0x359>
 34f:	00 4e 6f             	add    BYTE PTR [rsi+0x6f],cl
 352:	20 72 63             	and    BYTE PTR [rdx+0x63],dh
 355:	6f                   	outs   dx,DWORD PTR ds:[rsi]
 356:	6e                   	outs   dx,BYTE PTR ds:[rsi]
 357:	70 61                	jo     3ba <.rodata+0x3ba>
 359:	73 73                	jae    3ce <.rodata+0x3ce>
 35b:	77 6f                	ja     3cc <.rodata+0x3cc>
 35d:	72 64                	jb     3c3 <.rodata+0x3c3>
 35f:	20 73 65             	and    BYTE PTR [rbx+0x65],dh
 362:	74 20                	je     384 <.rodata+0x384>
 364:	6f                   	outs   dx,DWORD PTR ds:[rsi]
 365:	6e                   	outs   dx,BYTE PTR ds:[rsi]
 366:	20 74 68 65          	and    BYTE PTR [rax+rbp*2+0x65],dh
 36a:	20 73 65             	and    BYTE PTR [rbx+0x65],dh
 36d:	72 76                	jb     3e5 <.rodata+0x3e5>
 36f:	65 72 2e             	gs jb  3a0 <.rodata+0x3a0>
 372:	0a 00                	or     al,BYTE PTR [rax]
 374:	42 61                	rex.X (bad) 
 376:	64 20 72 63          	and    BYTE PTR fs:[rdx+0x63],dh
 37a:	6f                   	outs   dx,DWORD PTR ds:[rsi]
 37b:	6e                   	outs   dx,BYTE PTR ds:[rsi]
 37c:	70 61                	jo     3df <.rodata+0x3df>
 37e:	73 73                	jae    3f3 <.rodata+0x3f3>
 380:	77 6f                	ja     3f1 <.rodata+0x3f1>
 382:	72 64                	jb     3e8 <.rodata+0x3e8>
 384:	2e 0a 00             	or     al,BYTE PTR cs:[rax]
 387:	63 6f 6e             	movsxd ebp,DWORD PTR [rdi+0x6e]
 38a:	6e                   	outs   dx,BYTE PTR ds:[rsi]
 38b:	65 63 74 20 00       	movsxd esi,DWORD PTR gs:[rax+riz*1+0x0]
 390:	25 73 20 3a 20       	and    eax,0x203a2073
 395:	63 6f 6e             	movsxd ebp,DWORD PTR [rdi+0x6e]
 398:	6e                   	outs   dx,BYTE PTR ds:[rsi]
 399:	65 63 74 20 70       	movsxd esi,DWORD PTR gs:[rax+riz*1+0x70]
 39e:	61                   	(bad)  
 39f:	63 6b 65             	movsxd ebp,DWORD PTR [rbx+0x65]
 3a2:	74 20                	je     3c4 <.rodata+0x3c4>
 3a4:	69 73 20 74 6f 6f 20 	imul   esi,DWORD PTR [rbx+0x20],0x206f6f74
 3ab:	6c                   	ins    BYTE PTR es:[rdi],dx
 3ac:	6f                   	outs   dx,DWORD PTR ds:[rsi]
 3ad:	6e                   	outs   dx,BYTE PTR ds:[rsi]
 3ae:	67 20 2d 20 25 69 0a 	and    BYTE PTR [eip+0xa692520],ch        # a6928d5 <dlNextRound.8083+0xa5afeed>
 3b5:	00 53 56             	add    BYTE PTR [rbx+0x56],dl
 3b8:	20 70 61             	and    BYTE PTR [rax+0x61],dh
 3bb:	63 6b 65             	movsxd ebp,DWORD PTR [rbx+0x65]
 3be:	74 20                	je     3e0 <.rodata+0x3e0>
 3c0:	25 73 20 3a 20       	and    eax,0x203a2073
 3c5:	25 73 0a 00 72       	and    eax,0x72000a73
 3ca:	63 6f 6e             	movsxd ebp,DWORD PTR [rdi+0x6e]
 3cd:	00 67 65             	add    BYTE PTR [rdi+0x65],ah
 3d0:	74 73                	je     445 <.rodata+0x445>
 3d2:	74 61                	je     435 <.rodata+0x435>
 3d4:	74 75                	je     44b <.rodata+0x44b>
 3d6:	73 00                	jae    3d8 <.rodata+0x3d8>
 3d8:	67 65 74 69          	addr32 gs je 445 <.rodata+0x445>
 3dc:	6e                   	outs   dx,BYTE PTR ds:[rsi]
 3dd:	66 6f                	outs   dx,WORD PTR ds:[rsi]
 3df:	00 67 65             	add    BYTE PTR [rdi+0x65],ah
 3e2:	74 63                	je     447 <.rodata+0x447>
 3e4:	68 61 6c 6c 65       	push   0x656c6c61
 3e9:	6e                   	outs   dx,BYTE PTR ds:[rsi]
 3ea:	67 65 00 63 6f       	add    BYTE PTR gs:[ebx+0x6f],ah
 3ef:	6e                   	outs   dx,BYTE PTR ds:[rsi]
 3f0:	6e                   	outs   dx,BYTE PTR ds:[rsi]
 3f1:	65 63 74 00 69       	movsxd esi,DWORD PTR gs:[rax+rax*1+0x69]
 3f6:	70 41                	jo     439 <.rodata+0x439>
 3f8:	75 74                	jne    46e <.rodata+0x46e>
 3fa:	68 6f 72 69 7a       	push   0x7a69726f
 3ff:	65 00 64 69 73       	add    BYTE PTR gs:[rcx+rbp*2+0x73],ah
 404:	63 6f 6e             	movsxd ebp,DWORD PTR [rdi+0x6e]
 407:	6e                   	outs   dx,BYTE PTR ds:[rsi]
 408:	65 63 74 00 00       	movsxd esi,DWORD PTR gs:[rax+rax*1+0x0]
 40d:	00 00                	add    BYTE PTR [rax],al
 40f:	00 62 61             	add    BYTE PTR [rdx+0x61],ah
 412:	64 20 63 6f          	and    BYTE PTR fs:[rbx+0x6f],ah
 416:	6e                   	outs   dx,BYTE PTR ds:[rsi]
 417:	6e                   	outs   dx,BYTE PTR ds:[rsi]
 418:	65 63 74 69 6f       	movsxd esi,DWORD PTR gs:[rcx+rbp*2+0x6f]
 41d:	6e                   	outs   dx,BYTE PTR ds:[rsi]
 41e:	6c                   	ins    BYTE PTR es:[rdi],dx
 41f:	65 73 73             	gs jae 495 <.rodata+0x495>
 422:	20 70 61             	and    BYTE PTR [rax+0x61],dh
 425:	63 6b 65             	movsxd ebp,DWORD PTR [rbx+0x65]
 428:	74 20                	je     44a <.rodata+0x44a>
 42a:	66 72 6f             	data16 jb 49c <.rodata+0x49c>
 42d:	6d                   	ins    DWORD PTR es:[rdi],dx
 42e:	20 25 73 3a 0a 25    	and    BYTE PTR [rip+0x250a3a73],ah        # 250a3ea7 <dlNextRound.8083+0x24fc14bf>
 434:	73 0a                	jae    440 <.rodata+0x440>
 436:	00 00                	add    BYTE PTR [rax],al
 438:	53                   	push   rbx
 439:	56                   	push   rsi
 43a:	5f                   	pop    rdi
 43b:	50                   	push   rax
 43c:	61                   	(bad)  
 43d:	63 6b 65             	movsxd ebp,DWORD PTR [rbx+0x65]
 440:	74 45                	je     487 <.rodata+0x487>
 442:	76 65                	jbe    4a9 <.rodata+0x4a9>
 444:	6e                   	outs   dx,BYTE PTR ds:[rsi]
 445:	74 3a                	je     481 <.rodata+0x481>
 447:	20 66 69             	and    BYTE PTR [rsi+0x69],ah
 44a:	78 69                	js     4b5 <.rodata+0x4b5>
 44c:	6e                   	outs   dx,BYTE PTR ds:[rsi]
 44d:	67 20 75 70          	and    BYTE PTR [ebp+0x70],dh
 451:	20 61 20             	and    BYTE PTR [rcx+0x20],ah
 454:	74 72                	je     4c8 <.rodata+0x4c8>
 456:	61                   	(bad)  
 457:	6e                   	outs   dx,BYTE PTR ds:[rsi]
 458:	73 6c                	jae    4c6 <.rodata+0x4c6>
 45a:	61                   	(bad)  
 45b:	74 65                	je     4c2 <.rodata+0x4c2>
 45d:	64 20 70 6f          	and    BYTE PTR fs:[rax+0x6f],dh
 461:	72 74                	jb     4d7 <.rodata+0x4d7>
 463:	0a 00                	or     al,BYTE PTR [rax]
 465:	00 00                	add    BYTE PTR [rax],al
 467:	00 47 6f             	add    BYTE PTR [rdi+0x6f],al
 46a:	69 6e 67 20 66 72 6f 	imul   ebp,DWORD PTR [rsi+0x67],0x6f726620
 471:	6d                   	ins    DWORD PTR es:[rdi],dx
 472:	20 43 53             	and    BYTE PTR [rbx+0x53],al
 475:	5f                   	pop    rdi
 476:	5a                   	pop    rdx
 477:	4f                   	rex.WRXB
 478:	4d                   	rex.WRB
 479:	42                   	rex.X
 47a:	49                   	rex.WB
 47b:	45 20 74 6f 20       	and    BYTE PTR [r15+rbp*2+0x20],r14b
 480:	43 53                	rex.XB push r11
 482:	5f                   	pop    rdi
 483:	46 52                	rex.RX push rdx
 485:	45                   	rex.RB
 486:	45 20 66 6f          	and    BYTE PTR [r14+0x6f],r12b
 48a:	72 20                	jb     4ac <.rodata+0x4ac>
 48c:	63 6c 69 65          	movsxd ebp,DWORD PTR [rcx+rbp*2+0x65]
 490:	6e                   	outs   dx,BYTE PTR ds:[rsi]
 491:	74 20                	je     4b3 <.rodata+0x4b3>
 493:	25 64 0a 00 74       	and    eax,0x74000a64
 498:	69 6d 65 64 20 6f 75 	imul   ebp,DWORD PTR [rbp+0x65],0x756f2064
 49f:	74 00                	je     4a1 <.rodata+0x4a1>
 4a1:	31 30                	xor    DWORD PTR [rax],esi
 4a3:	30 30                	xor    BYTE PTR [rax],dh
 4a5:	00 73 76             	add    BYTE PTR [rbx+0x76],dh
 4a8:	5f                   	pop    rdi
 4a9:	6d                   	ins    DWORD PTR es:[rdi],dx
 4aa:	61                   	(bad)  
 4ab:	78 52                	js     4ff <.rodata+0x4ff>
 4ad:	61                   	(bad)  
 4ae:	74 65                	je     515 <.rodata+0x515>
 4b0:	00 73 76             	add    BYTE PTR [rbx+0x76],dh
 4b3:	5f                   	pop    rdi
 4b4:	6d                   	ins    DWORD PTR es:[rdi],dx
 4b5:	61                   	(bad)  
 4b6:	78 52                	js     50a <.rodata+0x50a>
 4b8:	61                   	(bad)  
 4b9:	74 65                	je     520 <.rodata+0x520>
 4bb:	20 61 64             	and    BYTE PTR [rcx+0x64],ah
 4be:	6a 75                	push   0x75
 4c0:	73 74                	jae    536 <.rodata+0x536>
 4c2:	65 64 20 74 6f 20    	gs and BYTE PTR fs:[rdi+rbp*2+0x20],dh
 4c8:	31 30                	xor    DWORD PTR [rax],esi
 4ca:	30 30                	xor    BYTE PTR [rax],dh
 4cc:	0a 00                	or     al,BYTE PTR [rax]
 4ce:	73 76                	jae    546 <.rodata+0x546>
 4d0:	5f                   	pop    rdi
 4d1:	6d                   	ins    DWORD PTR es:[rdi],dx
 4d2:	69 6e 52 61 74 65 00 	imul   ebp,DWORD PTR [rsi+0x52],0x657461
 4d9:	73 76                	jae    551 <.rodata+0x551>
 4db:	5f                   	pop    rdi
 4dc:	6d                   	ins    DWORD PTR es:[rdi],dx
 4dd:	69 6e 52 61 74 65 20 	imul   ebp,DWORD PTR [rsi+0x52],0x20657461
 4e4:	61                   	(bad)  
 4e5:	64 6a 75             	fs push 0x75
 4e8:	73 74                	jae    55e <.rodata+0x55e>
 4ea:	65 64 20 74 6f 20    	gs and BYTE PTR fs:[rdi+rbp*2+0x20],dh
 4f0:	31 30                	xor    DWORD PTR [rax],esi
 4f2:	30 30                	xor    BYTE PTR [rax],dh
 4f4:	0a 00                	or     al,BYTE PTR [rax]
 4f6:	6d                   	ins    DWORD PTR es:[rdi],dx
 4f7:	61                   	(bad)  
 4f8:	70 20                	jo     51a <.rodata+0x51a>
 4fa:	25 73 0a 00 53       	and    eax,0x53000a73
 4ff:	65 72 76             	gs jb  578 <.rodata+0x578>
 502:	65 72 20             	gs jb  525 <.rodata+0x525>
 505:	77 61                	ja     568 <.rodata+0x568>
 507:	73 20                	jae    529 <.rodata+0x529>
 509:	6b 69 6c 6c          	imul   ebp,DWORD PTR [rcx+0x6c],0x6c
 50d:	65 64 00 30          	gs add BYTE PTR fs:[rax],dh
 511:	00 73 76             	add    BYTE PTR [rbx+0x76],dh
 514:	5f                   	pop    rdi
 515:	6b 69 6c 6c          	imul   ebp,DWORD PTR [rcx+0x6c],0x6c
 519:	73 65                	jae    580 <.rodata+0x580>
 51b:	72 76                	jb     593 <.rodata+0x593>
 51d:	65 72 00             	gs jb  520 <.rodata+0x520>
 520:	25 66 00 74 69       	and    eax,0x69740066
 525:	6d                   	ins    DWORD PTR es:[rdi],dx
 526:	65 73 63             	gs jae 58c <.rodata+0x58c>
 529:	61                   	(bad)  
 52a:	6c                   	ins    BYTE PTR es:[rdi],dx
 52b:	65 00 74 69 6d       	add    BYTE PTR gs:[rcx+rbp*2+0x6d],dh
 530:	65 73 63             	gs jae 596 <SV_MasterHeartbeat+0x1e9>
 533:	61                   	(bad)  
 534:	6c                   	ins    BYTE PTR es:[rdi],dx
 535:	65 20 61 64          	and    BYTE PTR gs:[rcx+0x64],ah
 539:	6a 75                	push   0x75
 53b:	73 74                	jae    5b1 <SV_MasterHeartbeat+0x204>
 53d:	65 64 20 74 6f 20    	gs and BYTE PTR fs:[rdi+rbp*2+0x20],dh
 543:	25 66 0a 00 00       	and    eax,0xa66
 548:	52                   	push   rdx
 549:	65 73 74             	gs jae 5c0 <SV_MasterHeartbeat+0x213>
 54c:	61                   	(bad)  
 54d:	72 74                	jb     5c3 <SV_MasterHeartbeat+0x216>
 54f:	69 6e 67 20 73 65 72 	imul   ebp,DWORD PTR [rsi+0x67],0x72657320
 556:	76 65                	jbe    5bd <SV_MasterHeartbeat+0x210>
 558:	72 20                	jb     57a <.rodata+0x57a>
 55a:	64 75 65             	fs jne 5c2 <SV_MasterHeartbeat+0x215>
 55d:	20 74 6f 20          	and    BYTE PTR [rdi+rbp*2+0x20],dh
 561:	74 69                	je     5cc <SV_MasterHeartbeat+0x21f>
 563:	6d                   	ins    DWORD PTR es:[rdi],dx
 564:	65 20 77 72          	and    BYTE PTR gs:[rdi+0x72],dh
 568:	61                   	(bad)  
 569:	70 70                	jo     5db <SV_MasterHeartbeat+0x22e>
 56b:	69 6e 67 00 52 65 73 	imul   ebp,DWORD PTR [rsi+0x67],0x73655200
 572:	74 61                	je     5d5 <SV_MasterHeartbeat+0x228>
 574:	72 74                	jb     5ea <SV_MasterHeartbeat+0x23d>
 576:	69 6e 67 20 73 65 72 	imul   ebp,DWORD PTR [rsi+0x67],0x72657320
 57d:	76 65                	jbe    5e4 <SV_MasterHeartbeat+0x237>
 57f:	72 00                	jb     581 <.rodata+0x581>
 581:	6d                   	ins    DWORD PTR es:[rdi],dx
 582:	61                   	(bad)  
 583:	70 5f                	jo     5e4 <SV_MasterHeartbeat+0x237>
 585:	72 65                	jb     5ec <SV_MasterHeartbeat+0x23f>
 587:	73 74                	jae    5fd <SV_MasterHeartbeat+0x250>
 589:	61                   	(bad)  
 58a:	72 74                	jb     600 <SV_MasterHeartbeat+0x253>
 58c:	20 30                	and    BYTE PTR [rax],dh
 58e:	0a 00                	or     al,BYTE PTR [rax]
 590:	00 00                	add    BYTE PTR [rax],al
 592:	7a 44                	jp     5d8 <SV_MasterHeartbeat+0x22b>

Disassembly of section .debug_info:

0000000000000000 <.debug_info>:
SV_ExpandNewlines():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:81
static const char *SV_ExpandNewlines( const char *in ) {
       0:	38 34 00             	cmp    BYTE PTR [rax+rax*1],dh
       3:	00 04 00             	add    BYTE PTR [rax+rax*1],al
       6:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:85
	l = 0;
       8:	00 00                	add    BYTE PTR [rax],al
       a:	08 01                	or     BYTE PTR [rcx],al
       c:	00 00                	add    BYTE PTR [rax],al
       e:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:86
	while ( *in && l < sizeof(string) - 3 ) {
      10:	0c 00                	or     al,0x0
	...
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:88
			string[l++] = '\\';
      1e:	00 00                	add    BYTE PTR [rax],al
      20:	00 e3                	add    bl,ah
      22:	27                   	(bad)  
	...
      2b:	00 00                	add    BYTE PTR [rax],al
      2d:	02 01                	add    al,BYTE PTR [rcx]
      2f:	08 00                	or     BYTE PTR [rax],al
      31:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:89
			string[l++] = 'n';
      33:	00 02                	add    BYTE PTR [rdx],al
      35:	02 07                	add    al,BYTE PTR [rdi]
      37:	00 00                	add    BYTE PTR [rax],al
      39:	00 00                	add    BYTE PTR [rax],al
      3b:	02 04 07             	add    al,BYTE PTR [rdi+rax*1]
      3e:	00 00                	add    BYTE PTR [rax],al
      40:	00 00                	add    BYTE PTR [rax],al
      42:	02 08                	add    cl,BYTE PTR [rax]
      44:	07                   	(bad)  
      45:	00 00                	add    BYTE PTR [rax],al
      47:	00 00                	add    BYTE PTR [rax],al
      49:	02 01                	add    al,BYTE PTR [rcx]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:91
			string[l++] = *in;
      4b:	06                   	(bad)  
      4c:	00 00                	add    BYTE PTR [rax],al
      4e:	00 00                	add    BYTE PTR [rax],al
      50:	02 02                	add    al,BYTE PTR [rdx]
      52:	05 00 00 00 00       	add    eax,0x0
      57:	03 00                	add    eax,DWORD PTR [rax]
      59:	00 00                	add    BYTE PTR [rax],al
      5b:	00 02                	add    BYTE PTR [rdx],al
      5d:	27                   	(bad)  
      5e:	1c 34                	sbb    al,0x34
      60:	00 00                	add    BYTE PTR [rax],al
      62:	00 03                	add    BYTE PTR [rbx],al
      64:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:93
		in++;
      66:	00 00                	add    BYTE PTR [rax],al
      68:	02 28                	add    ch,BYTE PTR [rax]
      6a:	14 6f                	adc    al,0x6f
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:86
	while ( *in && l < sizeof(string) - 3 ) {
      6c:	00 00                	add    BYTE PTR [rax],al
      6e:	00 04 04             	add    BYTE PTR [rsp+rax*1],al
      71:	05 69 6e 74 00       	add    eax,0x746e69
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:86 (discriminator 1)
      76:	05 6f 00 00 00       	add    eax,0x6f
      7b:	03 00                	add    eax,DWORD PTR [rax]
      7d:	00 00                	add    BYTE PTR [rax],al
      7f:	00 02                	add    BYTE PTR [rdx],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:95
	string[l] = '\0';
      81:	29 16                	sub    DWORD PTR [rsi],edx
      83:	3b 00                	cmp    eax,DWORD PTR [rax]
      85:	00 00                	add    BYTE PTR [rax],al
      87:	02 08                	add    cl,BYTE PTR [rax]
      89:	05 00 00 00 00       	add    eax,0x0
      8e:	03 00                	add    eax,DWORD PTR [rax]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:97
	return string;
      90:	00 00                	add    BYTE PTR [rax],al
      92:	00 02                	add    BYTE PTR [rdx],al
      94:	96                   	xchg   esi,eax
      95:	19 87 00 00 00 03    	sbb    DWORD PTR [rdi+0x3000000],eax
SV_AddServerCommand():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:142
void SV_AddServerCommand( client_t *client, const char *cmd ) {
      9b:	00 00                	add    BYTE PTR [rax],al
      9d:	00 00                	add    BYTE PTR [rax],al
      9f:	02 97 1b 87 00 00    	add    dl,BYTE PTR [rdi+0x871b]
      a5:	00 06                	add    BYTE PTR [rsi],al
      a7:	6f                   	outs   dx,DWORD PTR ds:[rsi]
      a8:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:152
	if ( client->state < CS_PRIMED )
      aa:	00 b6 00 00 00 07    	add    BYTE PTR [rsi+0x7000000],dh
      b0:	42 00 00             	rex.X add BYTE PTR [rax],al
      b3:	00 01                	add    BYTE PTR [rcx],al
      b5:	00 08                	add    BYTE PTR [rax],cl
      b7:	08 09                	or     BYTE PTR [rcx],cl
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:155
	client->reliableSequence++;
      b9:	08 be 00 00 00 02    	or     BYTE PTR [rsi+0x2000000],bh
      bf:	01 06                	add    DWORD PTR [rsi],eax
      c1:	00 00                	add    BYTE PTR [rax],al
      c3:	00 00                	add    BYTE PTR [rax],al
      c5:	05 be 00 00 00       	add    eax,0xbe
      ca:	02 04 04             	add    al,BYTE PTR [rsp+rax*1]
      cd:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:160
	if ( client->reliableSequence - client->reliableAcknowledge == MAX_RELIABLE_COMMANDS + 1 ) {
      cf:	00 00                	add    BYTE PTR [rax],al
      d1:	02 08                	add    cl,BYTE PTR [rax]
      d3:	04 00                	add    al,0x0
      d5:	00 00                	add    BYTE PTR [rax],al
      d7:	00 0a                	add    BYTE PTR [rdx],cl
      d9:	00 00                	add    BYTE PTR [rax],al
      db:	00 00                	add    BYTE PTR [rax],al
      dd:	09 05 03 0c 6f 00    	or     DWORD PTR [rip+0x6f0c03],eax        # 6f0ce6 <dlNextRound.8083+0x60e2fe>
      e3:	00 00                	add    BYTE PTR [rax],al
      e5:	03 00                	add    eax,DWORD PTR [rax]
      e7:	00 00                	add    BYTE PTR [rax],al
      e9:	00 03                	add    BYTE PTR [rbx],al
      eb:	d8 17                	fcom   DWORD PTR [rdi]
      ed:	42 00 00             	rex.X add BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:161
		Com_Printf( "===== pending server commands =====\n" );
      f0:	00 03                	add    BYTE PTR [rbx],al
      f2:	00 00                	add    BYTE PTR [rax],al
      f4:	00 00                	add    BYTE PTR [rax],al
      f6:	04 28                	add    al,0x28
      f8:	1b fd                	sbb    edi,ebp
      fa:	00 00                	add    BYTE PTR [rax],al
      fc:	00 0b                	add    BYTE PTR [rbx],cl
      fe:	00 00                	add    BYTE PTR [rax],al
     100:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:162
		n = client->reliableSequence - client->reliableAcknowledge;
     102:	06                   	(bad)  
     103:	01 00                	add    DWORD PTR [rax],eax
     105:	00 06                	add    BYTE PTR [rsi],al
     107:	16                   	(bad)  
     108:	01 00                	add    DWORD PTR [rax],eax
     10a:	00 16                	add    BYTE PTR [rsi],dl
     10c:	01 00                	add    DWORD PTR [rax],eax
     10e:	00 07                	add    BYTE PTR [rdi],al
     110:	42 00 00             	rex.X add BYTE PTR [rax],al
     113:	00 00                	add    BYTE PTR [rax],al
     115:	00 0c 00             	add    BYTE PTR [rax+rax*1],cl
     118:	00 00                	add    BYTE PTR [rax],al
     11a:	00 18                	add    BYTE PTR [rax],bl
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:163
		for ( i = 0; i < n; i++ ) {
     11c:	05 00 53 01 00       	add    eax,0x15300
     121:	00 0d 00 00 00 00    	add    BYTE PTR [rip+0x0],cl        # 127 <.debug_info+0x127>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:164 (discriminator 3)
			const int index = client->reliableAcknowledge + 1 + i;
     127:	05 00 3b 00 00       	add    eax,0x3b00
     12c:	00 00                	add    BYTE PTR [rax],al
     12e:	0d 00 00 00 00       	or     eax,0x0
     133:	05 00 3b 00 00       	add    eax,0x3b00
     138:	00 04 0d 00 00 00 00 	add    BYTE PTR [rcx*1+0x0],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:165 (discriminator 3)
			Com_Printf( "cmd %5d: %s\n", i, client->reliableCommands[ index & ( MAX_RELIABLE_COMMANDS - 1 ) ] );
     13f:	05 00 b6 00 00       	add    eax,0xb600
     144:	00 08                	add    BYTE PTR [rax],cl
     146:	0d 00 00 00 00       	or     eax,0x0
     14b:	05 00 b6 00 00       	add    eax,0xb600
     150:	00 10                	add    BYTE PTR [rax],dl
     152:	00 0e                	add    BYTE PTR [rsi],cl
     154:	00 00                	add    BYTE PTR [rax],al
     156:	00 00                	add    BYTE PTR [rax],al
     158:	d8 06                	fadd   DWORD PTR [rsi]
     15a:	31 08                	xor    DWORD PTR [rax],ecx
     15c:	da 02                	fiadd  DWORD PTR [rdx]
     15e:	00 00                	add    BYTE PTR [rax],al
     160:	0f 00 00             	sldt   WORD PTR [rax]
     163:	00 00                	add    BYTE PTR [rax],al
     165:	06                   	(bad)  
     166:	33 07                	xor    eax,DWORD PTR [rdi]
     168:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     169:	00 00                	add    BYTE PTR [rax],al
     16b:	00 00                	add    BYTE PTR [rax],al
     16d:	0f 00 00             	sldt   WORD PTR [rax]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:163 (discriminator 3)
		for ( i = 0; i < n; i++ ) {
     170:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:163 (discriminator 1)
     172:	06                   	(bad)  
     173:	36 09 b8 00 00 00 08 	or     DWORD PTR ss:[rax+0x8000000],edi
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:167
		Com_Printf( "cmd %5d: %s\n", i, cmd );
     17a:	0f 00 00             	sldt   WORD PTR [rax]
     17d:	00 00                	add    BYTE PTR [rax],al
     17f:	06                   	(bad)  
     180:	37                   	(bad)  
     181:	09 b8 00 00 00 10    	or     DWORD PTR [rax+0x10000000],edi
     187:	0f 00 00             	sldt   WORD PTR [rax]
     18a:	00 00                	add    BYTE PTR [rax],al
     18c:	06                   	(bad)  
     18d:	38 09                	cmp    BYTE PTR [rcx],cl
     18f:	b8 00 00 00 18       	mov    eax,0x18000000
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:168
		SV_DropClient( client, "Server command overflow" );
     194:	0f 00 00             	sldt   WORD PTR [rax]
     197:	00 00                	add    BYTE PTR [rax],al
     199:	06                   	(bad)  
     19a:	39 09                	cmp    DWORD PTR [rcx],ecx
     19c:	b8 00 00 00 20       	mov    eax,0x20000000
     1a1:	0f 00 00             	sldt   WORD PTR [rax]
     1a4:	00 00                	add    BYTE PTR [rax],al
     1a6:	06                   	(bad)  
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:169
		return;
     1a7:	3a 09                	cmp    cl,BYTE PTR [rcx]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:171
	index = client->reliableSequence & ( MAX_RELIABLE_COMMANDS - 1 );
     1a9:	b8 00 00 00 28       	mov    eax,0x28000000
     1ae:	0f 00 00             	sldt   WORD PTR [rax]
     1b1:	00 00                	add    BYTE PTR [rax],al
     1b3:	06                   	(bad)  
     1b4:	3b 09                	cmp    ecx,DWORD PTR [rcx]
     1b6:	b8 00 00 00 30       	mov    eax,0x30000000
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:172
	Q_strncpyz( client->reliableCommands[ index ], cmd, sizeof( client->reliableCommands[ index ] ) );
     1bb:	0f 00 00             	sldt   WORD PTR [rax]
     1be:	00 00                	add    BYTE PTR [rax],al
     1c0:	06                   	(bad)  
     1c1:	3c 09                	cmp    al,0x9
     1c3:	b8 00 00 00 38       	mov    eax,0x38000000
     1c8:	0f 00 00             	sldt   WORD PTR [rax]
     1cb:	00 00                	add    BYTE PTR [rax],al
     1cd:	06                   	(bad)  
     1ce:	3d 09 b8 00 00       	cmp    eax,0xb809
     1d3:	00 40 0f             	add    BYTE PTR [rax+0xf],al
     1d6:	00 00                	add    BYTE PTR [rax],al
     1d8:	00 00                	add    BYTE PTR [rax],al
     1da:	06                   	(bad)  
     1db:	40 09 b8 00 00 00 48 	rex or DWORD PTR [rax+0x48000000],edi
     1e2:	0f 00 00             	sldt   WORD PTR [rax]
     1e5:	00 00                	add    BYTE PTR [rax],al
     1e7:	06                   	(bad)  
     1e8:	41 09 b8 00 00 00 50 	or     DWORD PTR [r8+0x50000000],edi
SV_SendServerCommand():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:185
void QDECL SV_SendServerCommand( client_t *cl, const char *fmt, ... ) {
     1ef:	0f 00 00             	sldt   WORD PTR [rax]
     1f2:	00 00                	add    BYTE PTR [rax],al
     1f4:	06                   	(bad)  
     1f5:	42 09 b8 00 00 00 58 	rex.X or DWORD PTR [rax+0x58000000],edi
     1fc:	0f 00 00             	sldt   WORD PTR [rax]
     1ff:	00 00                	add    BYTE PTR [rax],al
     201:	06                   	(bad)  
     202:	44 16                	rex.R (bad) 
     204:	f3 02 00             	repz add al,BYTE PTR [rax]
     207:	00 60 0f             	add    BYTE PTR [rax+0xf],ah
     20a:	00 00                	add    BYTE PTR [rax],al
     20c:	00 00                	add    BYTE PTR [rax],al
     20e:	06                   	(bad)  
     20f:	46 14 f9             	rex.RX adc al,0xf9
     212:	02 00                	add    al,BYTE PTR [rax]
     214:	00 68 0f             	add    BYTE PTR [rax+0xf],ch
     217:	00 00                	add    BYTE PTR [rax],al
     219:	00 00                	add    BYTE PTR [rax],al
     21b:	06                   	(bad)  
     21c:	48 07                	rex.W (bad) 
     21e:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     21f:	00 00                	add    BYTE PTR [rax],al
     221:	00 70 0f             	add    BYTE PTR [rax+0xf],dh
     224:	00 00                	add    BYTE PTR [rax],al
     226:	00 00                	add    BYTE PTR [rax],al
     228:	06                   	(bad)  
     229:	49 07                	rex.WB (bad) 
     22b:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     22c:	00 00                	add    BYTE PTR [rax],al
     22e:	00 74 0f 00          	add    BYTE PTR [rdi+rcx*1+0x0],dh
     232:	00 00                	add    BYTE PTR [rax],al
     234:	00 06                	add    BYTE PTR [rsi],al
     236:	4a 0b 8e 00 00 00 78 	rex.WX or rcx,QWORD PTR [rsi+0x78000000]
     23d:	0f 00 00             	sldt   WORD PTR [rax]
     240:	00 00                	add    BYTE PTR [rax],al
     242:	06                   	(bad)  
     243:	4d 12 34 00          	rex.WRB adc r14b,BYTE PTR [r8+rax*1]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:191
	va_start( argptr, fmt );
     247:	00 00                	add    BYTE PTR [rax],al
     249:	80 0f 00             	or     BYTE PTR [rdi],0x0
     24c:	00 00                	add    BYTE PTR [rax],al
     24e:	00 06                	add    BYTE PTR [rsi],al
     250:	4e 0f 49 00          	rex.WRX cmovns r8,QWORD PTR [rax]
     254:	00 00                	add    BYTE PTR [rax],al
     256:	82                   	(bad)  
     257:	0f 00 00             	sldt   WORD PTR [rax]
     25a:	00 00                	add    BYTE PTR [rax],al
     25c:	06                   	(bad)  
     25d:	4f 08 ff             	rex.WRXB or r15b,r15b
     260:	02 00                	add    al,BYTE PTR [rax]
     262:	00 83 0f 00 00 00    	add    BYTE PTR [rbx+0xf],al
     268:	00 06                	add    BYTE PTR [rsi],al
     26a:	51                   	push   rcx
     26b:	0f                   	(bad)  
     26c:	0f 03 00             	lsl    eax,WORD PTR [rax]
     26f:	00 88 0f 00 00 00    	add    BYTE PTR [rax+0xf],cl
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:192
	len = Q_vsnprintf( message, sizeof( message ), fmt, argptr );
     275:	00 06                	add    BYTE PTR [rsi],al
     277:	59                   	pop    rcx
     278:	0d 9a 00 00 00       	or     eax,0x9a
     27d:	90                   	nop
     27e:	0f 00 00             	sldt   WORD PTR [rax]
     281:	00 00                	add    BYTE PTR [rax],al
     283:	06                   	(bad)  
     284:	5b                   	pop    rbx
     285:	17                   	(bad)  
     286:	1a 03                	sbb    al,BYTE PTR [rbx]
     288:	00 00                	add    BYTE PTR [rax],al
     28a:	98                   	cwde   
     28b:	0f 00 00             	sldt   WORD PTR [rax]
     28e:	00 00                	add    BYTE PTR [rax],al
     290:	06                   	(bad)  
     291:	5c                   	pop    rsp
     292:	19 25 03 00 00 a0    	sbb    DWORD PTR [rip+0xffffffffa0000003],esp        # ffffffffa000029b <dlNextRound.8083+0xffffffff9ff1d8b3>
     298:	0f 00 00             	sldt   WORD PTR [rax]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:195
	if ( cl != NULL ) {
     29b:	00 00                	add    BYTE PTR [rax],al
     29d:	06                   	(bad)  
     29e:	5d                   	pop    rbp
     29f:	14 f9                	adc    al,0xf9
     2a1:	02 00                	add    al,BYTE PTR [rax]
     2a3:	00 a8 0f 00 00 00    	add    BYTE PTR [rax+0xf],ch
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:198
		if ( len <= 1022 || cl->longstr ) {
     2a9:	00 06                	add    BYTE PTR [rsi],al
     2ab:	5e                   	pop    rsi
     2ac:	09 b6 00 00 00 b0    	or     DWORD PTR [rsi-0x50000000],esi
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:198 (discriminator 1)
     2b2:	0f 00 00             	sldt   WORD PTR [rax]
     2b5:	00 00                	add    BYTE PTR [rax],al
     2b7:	06                   	(bad)  
     2b8:	5f                   	pop    rdi
     2b9:	0a e5                	or     ah,ch
     2bb:	00 00                	add    BYTE PTR [rax],al
     2bd:	00 b8 0f 00 00 00    	add    BYTE PTR [rax+0xf],bh
     2c3:	00 06                	add    BYTE PTR [rsi],al
     2c5:	60                   	(bad)  
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:199
			SV_AddServerCommand( cl, message );
     2c6:	07                   	(bad)  
     2c7:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     2c8:	00 00                	add    BYTE PTR [rax],al
     2ca:	00 c0                	add    al,al
     2cc:	0f 00 00             	sldt   WORD PTR [rax]
     2cf:	00 00                	add    BYTE PTR [rax],al
     2d1:	06                   	(bad)  
     2d2:	62                   	(bad)  
     2d3:	08 2b                	or     BYTE PTR [rbx],ch
     2d5:	03 00                	add    eax,DWORD PTR [rax]
     2d7:	00 c4                	add    ah,al
     2d9:	00 03                	add    BYTE PTR [rbx],al
     2db:	00 00                	add    BYTE PTR [rax],al
     2dd:	00 00                	add    BYTE PTR [rax],al
     2df:	07                   	(bad)  
     2e0:	07                   	(bad)  
     2e1:	19 53 01             	sbb    DWORD PTR [rbx+0x1],edx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:205
	if ( com_dedicated->integer && !strncmp( message, "print", 5 ) ) {
     2e4:	00 00                	add    BYTE PTR [rax],al
     2e6:	10 00                	adc    BYTE PTR [rax],al
     2e8:	00 00                	add    BYTE PTR [rax],al
     2ea:	00 06                	add    BYTE PTR [rsi],al
     2ec:	2b 0e                	sub    ecx,DWORD PTR [rsi]
     2ee:	11 00                	adc    DWORD PTR [rax],eax
     2f0:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:205 (discriminator 1)
     2f2:	00 09                	add    BYTE PTR [rcx],cl
     2f4:	08 ee                	or     dh,ch
     2f6:	02 00                	add    al,BYTE PTR [rax]
     2f8:	00 09                	add    BYTE PTR [rcx],cl
     2fa:	08 53 01             	or     BYTE PTR [rbx+0x1],dl
     2fd:	00 00                	add    BYTE PTR [rax],al
     2ff:	06                   	(bad)  
     300:	be 00 00 00 0f       	mov    esi,0xf000000
     305:	03 00                	add    eax,DWORD PTR [rax]
     307:	00 07                	add    BYTE PTR [rdi],al
     309:	42 00 00             	rex.X add BYTE PTR [rax],al
     30c:	00 00                	add    BYTE PTR [rax],al
     30e:	00 09                	add    BYTE PTR [rcx],cl
     310:	08 e6                	or     dh,ah
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:206
		Com_Printf( "broadcast: %s\n", SV_ExpandNewlines( message ) );
     312:	02 00                	add    al,BYTE PTR [rax]
     314:	00 11                	add    BYTE PTR [rcx],dl
     316:	00 00                	add    BYTE PTR [rax],al
     318:	00 00                	add    BYTE PTR [rax],al
     31a:	09 08                	or     DWORD PTR [rax],ecx
     31c:	15 03 00 00 11       	adc    eax,0x11000003
     321:	00 00                	add    BYTE PTR [rax],al
     323:	00 00                	add    BYTE PTR [rax],al
     325:	09 08                	or     DWORD PTR [rax],ecx
     327:	20 03                	and    BYTE PTR [rbx],al
     329:	00 00                	add    BYTE PTR [rax],al
     32b:	06                   	(bad)  
     32c:	be 00 00 00 3b       	mov    esi,0x3b000000
     331:	03 00                	add    eax,DWORD PTR [rax]
     333:	00 07                	add    BYTE PTR [rdi],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:210
	for ( j = 0, client = svs.clients; j < sv_maxclients->integer ; j++, client++ ) {
     335:	42 00 00             	rex.X add BYTE PTR [rax],al
     338:	00 13                	add    BYTE PTR [rbx],dl
     33a:	00 03                	add    BYTE PTR [rbx],al
     33c:	00 00                	add    BYTE PTR [rax],al
     33e:	00 00                	add    BYTE PTR [rax],al
     340:	08 34 18             	or     BYTE PTR [rax+rbx*1],dh
     343:	f1                   	icebp  
     344:	00 00                	add    BYTE PTR [rax],al
     346:	00 12                	add    BYTE PTR [rdx],dl
     348:	00 00                	add    BYTE PTR [rax],al
     34a:	00 00                	add    BYTE PTR [rax],al
     34c:	08 89 0e 53 03 00    	or     BYTE PTR [rcx+0x3530e],cl
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:211
		if ( len <= 1022 || client->longstr ) {
     352:	00 09                	add    BYTE PTR [rcx],cl
     354:	08 da                	or     dl,bl
     356:	02 00                	add    al,BYTE PTR [rax]
     358:	00 12                	add    BYTE PTR [rdx],dl
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:211 (discriminator 1)
     35a:	00 00                	add    BYTE PTR [rax],al
     35c:	00 00                	add    BYTE PTR [rax],al
     35e:	08 8a 0e 53 03 00    	or     BYTE PTR [rdx+0x3530e],cl
     364:	00 12                	add    BYTE PTR [rdx],dl
     366:	00 00                	add    BYTE PTR [rax],al
     368:	00 00                	add    BYTE PTR [rax],al
     36a:	08 8b 0e 53 03 00    	or     BYTE PTR [rbx+0x3530e],cl
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:212
			SV_AddServerCommand( client, message );
     370:	00 12                	add    BYTE PTR [rdx],dl
     372:	00 00                	add    BYTE PTR [rax],al
     374:	00 00                	add    BYTE PTR [rax],al
     376:	0a 1a                	or     bl,BYTE PTR [rdx]
     378:	0c 6f                	or     al,0x6f
     37a:	00 00                	add    BYTE PTR [rax],al
     37c:	00 06                	add    BYTE PTR [rsi],al
     37e:	93                   	xchg   ebx,eax
     37f:	03 00                	add    eax,DWORD PTR [rax]
     381:	00 88 03 00 00 13    	add    BYTE PTR [rax+0x13000003],cl
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:210 (discriminator 2)
	for ( j = 0, client = svs.clients; j < sv_maxclients->integer ; j++, client++ ) {
     387:	00 05 7d 03 00 00    	add    BYTE PTR [rip+0x37d],al        # 70a <.debug_info+0x70a>
     38d:	09 08                	or     DWORD PTR [rax],ecx
     38f:	c5 00 00             	(bad)  
     392:	00 05 8d 03 00 00    	add    BYTE PTR [rip+0x38d],al        # 725 <.debug_info+0x725>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:210 (discriminator 1)
     398:	12 00                	adc    al,BYTE PTR [rax]
     39a:	00 00                	add    BYTE PTR [rax],al
     39c:	00 0a                	add    BYTE PTR [rdx],cl
     39e:	1b 1a                	sbb    ebx,DWORD PTR [rdx]
     3a0:	88 03                	mov    BYTE PTR [rbx],al
     3a2:	00 00                	add    BYTE PTR [rax],al
     3a4:	02 08                	add    cl,BYTE PTR [rax]
     3a6:	05 00 00 00 00       	add    eax,0x0
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:215
}
     3ab:	03 00                	add    eax,DWORD PTR [rax]
SV_MasterHeartbeat():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:240
{
     3ad:	00 00                	add    BYTE PTR [rax],al
     3af:	00 0b                	add    BYTE PTR [rbx],cl
     3b1:	1a 13                	sbb    dl,BYTE PTR [rbx]
     3b3:	63 00                	movsxd eax,DWORD PTR [rax]
     3b5:	00 00                	add    BYTE PTR [rax],al
     3b7:	02 08                	add    cl,BYTE PTR [rax]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:246
	netenabled = Cvar_VariableIntegerValue("net_enabled");
     3b9:	07                   	(bad)  
     3ba:	00 00                	add    BYTE PTR [rax],al
     3bc:	00 00                	add    BYTE PTR [rax],al
     3be:	06                   	(bad)  
     3bf:	be 00 00 00 ce       	mov    esi,0xce000000
     3c4:	03 00                	add    eax,DWORD PTR [rax]
     3c6:	00 07                	add    BYTE PTR [rdi],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:249
	if (!com_dedicated || com_dedicated->integer != 2 || !(netenabled & (NET_ENABLEV4 | NET_ENABLEV6)))
     3c8:	42 00 00             	rex.X add BYTE PTR [rax],al
     3cb:	00 1f                	add    BYTE PTR [rdi],bl
     3cd:	00 09                	add    BYTE PTR [rcx],cl
     3cf:	08 ab 03 00 00 02    	or     BYTE PTR [rbx+0x2000003],ch
     3d5:	10 04 00             	adc    BYTE PTR [rax+rax*1],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:249 (discriminator 1)
     3d8:	00 00                	add    BYTE PTR [rax],al
     3da:	00 06                	add    BYTE PTR [rsi],al
     3dc:	b8 00 00 00 eb       	mov    eax,0xeb000000
     3e1:	03 00                	add    eax,DWORD PTR [rax]
     3e3:	00 07                	add    BYTE PTR [rdi],al
     3e5:	42 00 00             	rex.X add BYTE PTR [rax],al
     3e8:	00 01                	add    BYTE PTR [rcx],al
     3ea:	00 12                	add    BYTE PTR [rdx],dl
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:249 (discriminator 2)
     3ec:	00 00                	add    BYTE PTR [rax],al
     3ee:	00 00                	add    BYTE PTR [rax],al
     3f0:	0c 9f                	or     al,0x9f
     3f2:	0e                   	(bad)  
     3f3:	db 03                	fild   DWORD PTR [rbx]
     3f5:	00 00                	add    BYTE PTR [rax],al
     3f7:	12 00                	adc    al,BYTE PTR [rax]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:253
	if ( svs.nextHeartbeatTime - svs.time > 0 )
     3f9:	00 00                	add    BYTE PTR [rax],al
     3fb:	00 0c a0             	add    BYTE PTR [rax+riz*4],cl
     3fe:	0c 6f                	or     al,0x6f
     400:	00 00                	add    BYTE PTR [rax],al
     402:	00 12                	add    BYTE PTR [rdx],dl
     404:	00 00                	add    BYTE PTR [rax],al
     406:	00 00                	add    BYTE PTR [rax],al
     408:	0c a1                	or     al,0xa1
     40a:	11 87 00 00 00 12    	adc    DWORD PTR [rdi+0x12000000],eax
     410:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:256
	svs.nextHeartbeatTime = svs.time + HEARTBEAT_MSEC;
     412:	00 00                	add    BYTE PTR [rax],al
     414:	0c a6                	or     al,0xa6
     416:	0e                   	(bad)  
     417:	db 03                	fild   DWORD PTR [rbx]
     419:	00 00                	add    BYTE PTR [rax],al
     41b:	12 00                	adc    al,BYTE PTR [rax]
     41d:	00 00                	add    BYTE PTR [rax],al
     41f:	00 0c ae             	add    BYTE PTR [rsi+rbp*4],cl
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:259
	for (i = 0; i < MAX_MASTER_SERVERS; i++)
     422:	0c 6f                	or     al,0x6f
     424:	00 00                	add    BYTE PTR [rax],al
     426:	00 12                	add    BYTE PTR [rdx],dl
     428:	00 00                	add    BYTE PTR [rax],al
     42a:	00 00                	add    BYTE PTR [rax],al
     42c:	0c af                	or     al,0xaf
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:261
		if(!sv_master[i]->string[0])
     42e:	11 87 00 00 00 03    	adc    DWORD PTR [rdi+0x3000000],eax
     434:	00 00                	add    BYTE PTR [rax],al
     436:	00 00                	add    BYTE PTR [rax],al
     438:	0d 19 14 57 00       	or     eax,0x571419
     43d:	00 00                	add    BYTE PTR [rax],al
     43f:	03 00                	add    eax,DWORD PTR [rax]
     441:	00 00                	add    BYTE PTR [rax],al
     443:	00 0d 1a 14 7b 00    	add    BYTE PTR [rip+0x7b141a],cl        # 7b1863 <dlNextRound.8083+0x6cee7b>
     449:	00 00                	add    BYTE PTR [rax],al
     44b:	03 00                	add    eax,DWORD PTR [rax]
     44d:	00 00                	add    BYTE PTR [rax],al
     44f:	00 0e                	add    BYTE PTR [rsi],cl
     451:	57                   	push   rdi
     452:	13 87 00 00 00 03    	adc    eax,DWORD PTR [rdi+0x3000000]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:266
		if ( sv_master[i]->modified || svs.time - svs.masterResolveTime[i] > 0 )
     458:	00 00                	add    BYTE PTR [rax],al
     45a:	00 00                	add    BYTE PTR [rax],al
     45c:	0f b9 17             	ud1    edx,DWORD PTR [rdi]
     45f:	2d 00 00 00 05       	sub    eax,0x5000000
     464:	57                   	push   rdi
     465:	04 00                	add    al,0x0
     467:	00 14 07             	add    BYTE PTR [rdi+rax*1],dl
     46a:	04 3b                	add    al,0x3b
     46c:	00 00                	add    BYTE PTR [rax],al
     46e:	00 0f                	add    BYTE PTR [rdi],cl
     470:	bb 0e 83 04 00       	mov    ebx,0x4830e
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:266 (discriminator 1)
     475:	00 15 00 00 00 00    	add    BYTE PTR [rip+0x0],dl        # 47b <.debug_info+0x47b>
     47b:	00 15 00 00 00 00    	add    BYTE PTR [rip+0x0],dl        # 481 <.debug_info+0x481>
     481:	01 00                	add    DWORD PTR [rax],eax
     483:	03 00                	add    eax,DWORD PTR [rax]
     485:	00 00                	add    BYTE PTR [rax],al
     487:	00 0f                	add    BYTE PTR [rdi],cl
     489:	bb 24 68 04 00       	mov    ebx,0x46824
     48e:	00 06                	add    BYTE PTR [rsi],al
     490:	57                   	push   rdi
     491:	04 00                	add    al,0x0
     493:	00 9f 04 00 00 07    	add    BYTE PTR [rdi+0x7000004],bl
     499:	42 00 00             	rex.X add BYTE PTR [rax],al
     49c:	00 03                	add    BYTE PTR [rbx],al
     49e:	00 03                	add    BYTE PTR [rbx],al
     4a0:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:268
			sv_master[i]->modified = qfalse;
     4a2:	00 00                	add    BYTE PTR [rax],al
     4a4:	0f ce                	bswap  esi
     4a6:	0e                   	(bad)  
     4a7:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     4a8:	00 00                	add    BYTE PTR [rax],al
     4aa:	00 16                	add    BYTE PTR [rsi],dl
     4ac:	00 00                	add    BYTE PTR [rax],al
     4ae:	00 00                	add    BYTE PTR [rax],al
     4b0:	0f 70 01 0f          	pshufw mm0,QWORD PTR [rcx],0xf
     4b4:	ca 00 00             	retf   0x0
     4b7:	00 05 ab 04 00 00    	add    BYTE PTR [rip+0x4ab],al        # 968 <.debug_info+0x968>
     4bd:	16                   	(bad)  
     4be:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:269
			svs.masterResolveTime[i] = svs.time + MASTERDNS_MSEC;
     4c0:	00 00                	add    BYTE PTR [rax],al
     4c2:	0f 72                	(bad)  
     4c4:	01 0f                	add    DWORD PTR [rdi],ecx
     4c6:	ca 04 00             	retf   0x4
     4c9:	00 06                	add    BYTE PTR [rsi],al
     4cb:	ab                   	stos   DWORD PTR es:[rdi],eax
     4cc:	04 00                	add    al,0x0
     4ce:	00 da                	add    dl,bl
     4d0:	04 00                	add    al,0x0
     4d2:	00 07                	add    BYTE PTR [rdi],al
     4d4:	42 00 00             	rex.X add BYTE PTR [rax],al
     4d7:	00 02                	add    BYTE PTR [rdx],al
     4d9:	00 16                	add    BYTE PTR [rsi],dl
     4db:	00 00                	add    BYTE PTR [rax],al
     4dd:	00 00                	add    BYTE PTR [rax],al
     4df:	0f 73                	(bad)  
     4e1:	01 0f                	add    DWORD PTR [rdi],ecx
     4e3:	e7 04                	out    0x4,eax
     4e5:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:271
			if(netenabled & NET_ENABLEV4)
     4e7:	06                   	(bad)  
     4e8:	ab                   	stos   DWORD PTR es:[rdi],eax
     4e9:	04 00                	add    al,0x0
     4eb:	00 f7                	add    bh,dh
     4ed:	04 00                	add    al,0x0
     4ef:	00 07                	add    BYTE PTR [rdi],al
     4f1:	42 00 00             	rex.X add BYTE PTR [rax],al
     4f4:	00 03                	add    BYTE PTR [rbx],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:273
				Com_Printf("Resolving %s (IPv4)\n", sv_master[i]->string);
     4f6:	00 06                	add    BYTE PTR [rsi],al
     4f8:	ab                   	stos   DWORD PTR es:[rdi],eax
     4f9:	04 00                	add    al,0x0
     4fb:	00 0d 05 00 00 07    	add    BYTE PTR [rip+0x7000005],cl        # 7000506 <dlNextRound.8083+0x6f1db1e>
     501:	42 00 00             	rex.X add BYTE PTR [rax],al
     504:	00 a1 07 42 00 00    	add    BYTE PTR [rcx+0x4207],ah
     50a:	00 02                	add    BYTE PTR [rdx],al
     50c:	00 0a                	add    BYTE PTR [rdx],cl
     50e:	00 00                	add    BYTE PTR [rax],al
     510:	00 00                	add    BYTE PTR [rax],al
     512:	0f 91 01             	setno  BYTE PTR [rcx]
     515:	0f                   	maskmovq mm0,(bad)
     516:	f7 04 00 00 0a 00 00 	test   DWORD PTR [rax+rax*1],0xa00
     51d:	00 00                	add    BYTE PTR [rax],al
     51f:	0f a4 01 10          	shld   DWORD PTR [rcx],eax,0x10
     523:	da 04 00             	fiadd  DWORD PTR [rax+rax*1]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:274
				res = NET_StringToAdr(sv_master[i]->string, &adr[i][0], NA_IP);
     526:	00 0a                	add    BYTE PTR [rdx],cl
     528:	00 00                	add    BYTE PTR [rax],al
     52a:	00 00                	add    BYTE PTR [rax],al
     52c:	0f a5 01             	shld   DWORD PTR [rcx],eax,cl
     52f:	10 da                	adc    dl,bl
     531:	04 00                	add    al,0x0
     533:	00 0a                	add    BYTE PTR [rdx],cl
     535:	00 00                	add    BYTE PTR [rax],al
     537:	00 00                	add    BYTE PTR [rax],al
     539:	0f                   	montmul (bad)
     53a:	a6                   	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
     53b:	01 10                	add    DWORD PTR [rax],edx
     53d:	da 04 00             	fiadd  DWORD PTR [rax+rax*1]
     540:	00 0a                	add    BYTE PTR [rdx],cl
     542:	00 00                	add    BYTE PTR [rax],al
     544:	00 00                	add    BYTE PTR [rax],al
     546:	0f                   	xstore-rng (bad)
     547:	a7                   	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
     548:	01 10                	add    DWORD PTR [rax],edx
     54a:	da 04 00             	fiadd  DWORD PTR [rax+rax*1]
     54d:	00 0a                	add    BYTE PTR [rdx],cl
     54f:	00 00                	add    BYTE PTR [rax],al
     551:	00 00                	add    BYTE PTR [rax],al
     553:	0f a8                	push   gs
     555:	01 10                	add    DWORD PTR [rax],edx
     557:	da 04 00             	fiadd  DWORD PTR [rax+rax*1]
     55a:	00 0a                	add    BYTE PTR [rdx],cl
     55c:	00 00                	add    BYTE PTR [rax],al
     55e:	00 00                	add    BYTE PTR [rax],al
     560:	0f a9                	pop    gs
     562:	01 10                	add    DWORD PTR [rax],edx
     564:	da 04 00             	fiadd  DWORD PTR [rax+rax*1]
     567:	00 0a                	add    BYTE PTR [rdx],cl
     569:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:276
				if(res == 2)
     56b:	00 00                	add    BYTE PTR [rax],al
     56d:	0f aa                	rsm    
     56f:	01 10                	add    DWORD PTR [rax],edx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:279
					adr[i][0].port = BigShort(PORT_MASTER);
     571:	da 04 00             	fiadd  DWORD PTR [rax+rax*1]
     574:	00 0a                	add    BYTE PTR [rdx],cl
     576:	00 00                	add    BYTE PTR [rax],al
     578:	00 00                	add    BYTE PTR [rax],al
     57a:	0f ab 01             	bts    DWORD PTR [rcx],eax
     57d:	10 da                	adc    dl,bl
     57f:	04 00                	add    al,0x0
     581:	00 0a                	add    BYTE PTR [rdx],cl
     583:	00 00                	add    BYTE PTR [rax],al
     585:	00 00                	add    BYTE PTR [rax],al
     587:	0f ac 01 10          	shrd   DWORD PTR [rcx],eax,0x10
     58b:	da 04 00             	fiadd  DWORD PTR [rax+rax*1]
     58e:	00 0a                	add    BYTE PTR [rdx],cl
     590:	00 00                	add    BYTE PTR [rax],al
     592:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:282
				if(res)
     594:	0f ad 01             	shrd   DWORD PTR [rcx],eax,cl
     597:	10 da                	adc    dl,bl
     599:	04 00                	add    al,0x0
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:283
					Com_Printf( "%s resolved to %s\n", sv_master[i]->string, NET_AdrToStringwPort( &adr[i][0] ) );
     59b:	00 0a                	add    BYTE PTR [rdx],cl
     59d:	00 00                	add    BYTE PTR [rax],al
     59f:	00 00                	add    BYTE PTR [rax],al
     5a1:	0f ae 01             	fxsave [rcx]
     5a4:	10 da                	adc    dl,bl
     5a6:	04 00                	add    al,0x0
     5a8:	00 06                	add    BYTE PTR [rsi],al
     5aa:	b8 04 00 00 bf       	mov    eax,0xbf000004
     5af:	05 00 00 07 42       	add    eax,0x42070000
     5b4:	00 00                	add    BYTE PTR [rax],al
     5b6:	00 3f                	add    BYTE PTR [rdi],bh
     5b8:	07                   	(bad)  
     5b9:	42 00 00             	rex.X add BYTE PTR [rax],al
     5bc:	00 03                	add    BYTE PTR [rbx],al
     5be:	00 05 a9 05 00 00    	add    BYTE PTR [rip+0x5a9],al        # b6d <.debug_info+0xb6d>
     5c4:	0a 00                	or     al,BYTE PTR [rax]
     5c6:	00 00                	add    BYTE PTR [rax],al
     5c8:	00 0f                	add    BYTE PTR [rdi],cl
     5ca:	c6 01 15             	mov    BYTE PTR [rcx],0x15
     5cd:	bf 05 00 00 0a       	mov    edi,0xa000005
     5d2:	00 00                	add    BYTE PTR [rax],al
     5d4:	00 00                	add    BYTE PTR [rax],al
     5d6:	0f d1 01             	psrlw  mm0,QWORD PTR [rcx]
     5d9:	0f bd 04 00          	bsr    eax,DWORD PTR [rax+rax*1]
     5dd:	00 06                	add    BYTE PTR [rsi],al
     5df:	ab                   	stos   DWORD PTR es:[rdi],eax
     5e0:	04 00                	add    al,0x0
     5e2:	00 f4                	add    ah,dh
     5e4:	05 00 00 07 42       	add    eax,0x42070000
     5e9:	00 00                	add    BYTE PTR [rax],al
     5eb:	00 02                	add    BYTE PTR [rdx],al
     5ed:	07                   	(bad)  
     5ee:	42 00 00             	rex.X add BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:285
					Com_Printf( "%s has no IPv4 address.\n", sv_master[i]->string );
     5f1:	00 02                	add    BYTE PTR [rdx],al
     5f3:	00 0a                	add    BYTE PTR [rdx],cl
     5f5:	00 00                	add    BYTE PTR [rax],al
     5f7:	00 00                	add    BYTE PTR [rax],al
     5f9:	0f d2 01             	psrld  mm0,QWORD PTR [rcx]
     5fc:	0f de 05 00 00 17 07 	pmaxub mm0,QWORD PTR [rip+0x7170000]        # 7170603 <dlNextRound.8083+0x708dc1b>
     603:	04 3b                	add    al,0x3b
     605:	00 00                	add    BYTE PTR [rax],al
     607:	00 0f                	add    BYTE PTR [rdi],cl
     609:	ca 02 0e             	retf   0xe02
     60c:	71 06                	jno    614 <.debug_info+0x614>
     60e:	00 00                	add    BYTE PTR [rax],al
     610:	15 00 00 00 00       	adc    eax,0x0
     615:	00 15 00 00 00 00    	add    BYTE PTR [rip+0x0],dl        # 61b <.debug_info+0x61b>
     61b:	01 15 00 00 00 00    	add    DWORD PTR [rip+0x0],edx        # 621 <.debug_info+0x621>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:288
			if(netenabled & NET_ENABLEV6)
     621:	02 15 00 00 00 00    	add    dl,BYTE PTR [rip+0x0]        # 627 <.debug_info+0x627>
     627:	03 15 00 00 00 00    	add    edx,DWORD PTR [rip+0x0]        # 62d <.debug_info+0x62d>
     62d:	04 15                	add    al,0x15
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:290
				Com_Printf("Resolving %s (IPv6)\n", sv_master[i]->string);
     62f:	00 00                	add    BYTE PTR [rax],al
     631:	00 00                	add    BYTE PTR [rax],al
     633:	05 15 00 00 00       	add    eax,0x15
     638:	00 06                	add    BYTE PTR [rsi],al
     63a:	15 00 00 00 00       	adc    eax,0x0
     63f:	07                   	(bad)  
     640:	15 00 00 00 00       	adc    eax,0x0
     645:	08 15 00 00 00 00    	or     BYTE PTR [rip+0x0],dl        # 64b <.debug_info+0x64b>
     64b:	09 15 00 00 00 00    	or     DWORD PTR [rip+0x0],edx        # 651 <.debug_info+0x651>
     651:	0a 15 00 00 00 00    	or     dl,BYTE PTR [rip+0x0]        # 657 <.debug_info+0x657>
     657:	0b 15 00 00 00 00    	or     edx,DWORD PTR [rip+0x0]        # 65d <.debug_info+0x65d>
     65d:	0c 15                	or     al,0x15
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:291
				res = NET_StringToAdr(sv_master[i]->string, &adr[i][1], NA_IP6);
     65f:	00 00                	add    BYTE PTR [rax],al
     661:	00 00                	add    BYTE PTR [rax],al
     663:	0d 15 00 00 00       	or     eax,0x15
     668:	00 0e                	add    BYTE PTR [rsi],cl
     66a:	15 00 00 00 00       	adc    eax,0x0
     66f:	0f 00 16             	lldt   WORD PTR [rsi]
     672:	00 00                	add    BYTE PTR [rax],al
     674:	00 00                	add    BYTE PTR [rax],al
     676:	0f db 02             	pand   mm0,QWORD PTR [rdx]
     679:	03 01                	add    eax,DWORD PTR [rcx]
     67b:	06                   	(bad)  
     67c:	00 00                	add    BYTE PTR [rax],al
     67e:	0a 00                	or     al,BYTE PTR [rax]
     680:	00 00                	add    BYTE PTR [rax],al
     682:	00 0f                	add    BYTE PTR [rdi],cl
     684:	dd 02                	fld    QWORD PTR [rdx]
     686:	14 71                	adc    al,0x71
     688:	06                   	(bad)  
     689:	00 00                	add    BYTE PTR [rax],al
     68b:	06                   	(bad)  
     68c:	be 00 00 00 9c       	mov    esi,0x9c000000
     691:	06                   	(bad)  
     692:	00 00                	add    BYTE PTR [rax],al
     694:	18 42 00             	sbb    BYTE PTR [rdx+0x0],al
     697:	00 00                	add    BYTE PTR [rax],al
     699:	ff 03                	inc    DWORD PTR [rbx]
     69b:	00 06                	add    BYTE PTR [rsi],al
     69d:	63 04 00             	movsxd eax,DWORD PTR [rax+rax*1]
     6a0:	00 ac 06 00 00 07 42 	add    BYTE PTR [rsi+rax*1+0x42070000],ch
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:293
				if(res == 2)
     6a7:	00 00                	add    BYTE PTR [rax],al
     6a9:	00 ff                	add    bh,bh
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:296
					adr[i][1].port = BigShort(PORT_MASTER);
     6ab:	00 05 9c 06 00 00    	add    BYTE PTR [rip+0x69c],al        # d4d <.debug_info+0xd4d>
     6b1:	0a 00                	or     al,BYTE PTR [rax]
     6b3:	00 00                	add    BYTE PTR [rax],al
     6b5:	00 0f                	add    BYTE PTR [rdi],cl
     6b7:	17                   	(bad)  
     6b8:	03 13                	add    edx,DWORD PTR [rbx]
     6ba:	ac                   	lods   al,BYTE PTR ds:[rsi]
     6bb:	06                   	(bad)  
     6bc:	00 00                	add    BYTE PTR [rax],al
     6be:	16                   	(bad)  
     6bf:	00 00                	add    BYTE PTR [rax],al
     6c1:	00 00                	add    BYTE PTR [rax],al
     6c3:	0f 4a 03             	cmovp  eax,DWORD PTR [rbx]
     6c6:	14 cb                	adc    al,0xcb
     6c8:	06                   	(bad)  
     6c9:	00 00                	add    BYTE PTR [rax],al
     6cb:	09 08                	or     DWORD PTR [rax],ecx
     6cd:	d1 06                	rol    DWORD PTR [rsi],1
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:299
				if(res)
     6cf:	00 00                	add    BYTE PTR [rax],al
     6d1:	19 4b 04             	sbb    DWORD PTR [rbx+0x4],ecx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:300
					Com_Printf( "%s resolved to %s\n", sv_master[i]->string, NET_AdrToStringwPort( &adr[i][1] ) );
     6d4:	00 00                	add    BYTE PTR [rax],al
     6d6:	e0 06                	loopne 6de <.debug_info+0x6de>
     6d8:	00 00                	add    BYTE PTR [rax],al
     6da:	1a e0                	sbb    ah,al
     6dc:	06                   	(bad)  
     6dd:	00 00                	add    BYTE PTR [rax],al
     6df:	00 09                	add    BYTE PTR [rcx],cl
     6e1:	08 4b 04             	or     BYTE PTR [rbx+0x4],cl
     6e4:	00 00                	add    BYTE PTR [rax],al
     6e6:	16                   	(bad)  
     6e7:	00 00                	add    BYTE PTR [rax],al
     6e9:	00 00                	add    BYTE PTR [rax],al
     6eb:	0f 4b 03             	cmovnp eax,DWORD PTR [rbx]
     6ee:	1a f3                	sbb    dh,bl
     6f0:	06                   	(bad)  
     6f1:	00 00                	add    BYTE PTR [rax],al
     6f3:	09 08                	or     DWORD PTR [rax],ecx
     6f5:	f9                   	stc    
     6f6:	06                   	(bad)  
     6f7:	00 00                	add    BYTE PTR [rax],al
     6f9:	19 4b 04             	sbb    DWORD PTR [rbx+0x4],ecx
     6fc:	00 00                	add    BYTE PTR [rax],al
     6fe:	09 07                	or     DWORD PTR [rdi],eax
     700:	00 00                	add    BYTE PTR [rax],al
     702:	1a 4b 04             	sbb    cl,BYTE PTR [rbx+0x4]
     705:	00 00                	add    BYTE PTR [rax],al
     707:	1b 00                	sbb    eax,DWORD PTR [rax]
     709:	17                   	(bad)  
     70a:	07                   	(bad)  
     70b:	04 3b                	add    al,0x3b
     70d:	00 00                	add    BYTE PTR [rax],al
     70f:	00 0f                	add    BYTE PTR [rdi],cl
     711:	a3 03 0e 37 07 00 00 	movabs ds:0x15000007370e03,eax
     718:	15 00 
     71a:	00 00                	add    BYTE PTR [rax],al
     71c:	00 00                	add    BYTE PTR [rax],al
     71e:	15 00 00 00 00       	adc    eax,0x0
     723:	01 15 00 00 00 00    	add    DWORD PTR [rip+0x0],edx        # 729 <.debug_info+0x729>
     729:	02 15 00 00 00 00    	add    dl,BYTE PTR [rip+0x0]        # 72f <.debug_info+0x72f>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:302
					Com_Printf( "%s has no IPv6 address.\n", sv_master[i]->string );
     72f:	03 15 00 00 00 00    	add    edx,DWORD PTR [rip+0x0]        # 735 <.debug_info+0x735>
     735:	04 00                	add    al,0x0
     737:	16                   	(bad)  
     738:	00 00                	add    BYTE PTR [rax],al
     73a:	00 00                	add    BYTE PTR [rax],al
     73c:	0f a9                	pop    gs
     73e:	03 03                	add    eax,DWORD PTR [rbx]
     740:	09 07                	or     DWORD PTR [rdi],eax
     742:	00 00                	add    BYTE PTR [rax],al
     744:	17                   	(bad)  
     745:	07                   	(bad)  
     746:	04 3b                	add    al,0x3b
     748:	00 00                	add    BYTE PTR [rax],al
     74a:	00 0f                	add    BYTE PTR [rdi],cl
     74c:	ab                   	stos   DWORD PTR es:[rdi],eax
     74d:	03 0e                	add    ecx,DWORD PTR [rsi]
     74f:	6c                   	ins    BYTE PTR es:[rdi],dx
     750:	07                   	(bad)  
     751:	00 00                	add    BYTE PTR [rax],al
     753:	15 00 00 00 00       	adc    eax,0x0
     758:	00 15 00 00 00 00    	add    BYTE PTR [rip+0x0],dl        # 75e <.debug_info+0x75e>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:307
		if( adr[i][0].type == NA_BAD && adr[i][1].type == NA_BAD )
     75e:	01 15 00 00 00 00    	add    DWORD PTR [rip+0x0],edx        # 764 <.debug_info+0x764>
     764:	02 15 00 00 00 00    	add    dl,BYTE PTR [rip+0x0]        # 76a <.debug_info+0x76a>
     76a:	03 00                	add    eax,DWORD PTR [rax]
     76c:	16                   	(bad)  
     76d:	00 00                	add    BYTE PTR [rax],al
     76f:	00 00                	add    BYTE PTR [rax],al
     771:	0f b0 03             	cmpxchg BYTE PTR [rbx],al
     774:	03 44 07 00          	add    eax,DWORD PTR [rdi+rax*1+0x0]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:307 (discriminator 1)
     778:	00 16                	add    BYTE PTR [rsi],dl
     77a:	00 00                	add    BYTE PTR [rax],al
     77c:	00 00                	add    BYTE PTR [rax],al
     77e:	0f b3 03             	btr    DWORD PTR [rbx],eax
     781:	17                   	(bad)  
     782:	86 07                	xchg   BYTE PTR [rdi],al
     784:	00 00                	add    BYTE PTR [rax],al
     786:	1c 00                	sbb    al,0x0
     788:	00 00                	add    BYTE PTR [rax],al
     78a:	00 78 0f             	add    BYTE PTR [rax+0xf],bh
     78d:	b5 03                	mov    ch,0x3
     78f:	08 9f 08 00 00 1d    	or     BYTE PTR [rdi+0x1d000008],bl
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:313
		Com_Printf ("Sending heartbeat to %s\n", sv_master[i]->string );
     795:	00 00                	add    BYTE PTR [rax],al
     797:	00 00                	add    BYTE PTR [rax],al
     799:	0f b6 03             	movzx  eax,BYTE PTR [rbx]
     79c:	09 b8 00 00 00 00    	or     DWORD PTR [rax+0x0],edi
     7a2:	1d 00 00 00 00       	sbb    eax,0x0
     7a7:	0f b7 03             	movzx  eax,WORD PTR [rbx]
     7aa:	09 b8 00 00 00 08    	or     DWORD PTR [rax+0x8000000],edi
     7b0:	1d 00 00 00 00       	sbb    eax,0x0
     7b5:	0f b8                	(bad)  
     7b7:	03 09                	add    ecx,DWORD PTR [rcx]
     7b9:	b8 00 00 00 10       	mov    eax,0x10000000
     7be:	1d 00 00 00 00       	sbb    eax,0x0
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:318
		if(adr[i][0].type != NA_BAD)
     7c3:	0f b9 03             	ud1    eax,DWORD PTR [rbx]
     7c6:	09 b8 00 00 00 18    	or     DWORD PTR [rax+0x18000000],edi
     7cc:	1d 00 00 00 00       	sbb    eax,0x0
     7d1:	0f ba                	(bad)  
     7d3:	03 08                	add    ecx,DWORD PTR [rax]
     7d5:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     7d6:	00 00                	add    BYTE PTR [rax],al
     7d8:	00 20                	add    BYTE PTR [rax],ah
     7da:	1d 00 00 00 00       	sbb    eax,0x0
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:319
			NET_OutOfBandPrint( NS_SERVER, &adr[i][0], "heartbeat %s\n", message);
     7df:	0f bb 03             	btc    DWORD PTR [rbx],eax
     7e2:	0b 83 04 00 00 24    	or     eax,DWORD PTR [rbx+0x24000004]
     7e8:	1d 00 00 00 00       	sbb    eax,0x0
     7ed:	0f bc 03             	bsf    eax,DWORD PTR [rbx]
     7f0:	08 6f 00             	or     BYTE PTR [rdi+0x0],ch
     7f3:	00 00                	add    BYTE PTR [rax],al
     7f5:	28 1d 00 00 00 00    	sub    BYTE PTR [rip+0x0],bl        # 7fb <.debug_info+0x7fb>
     7fb:	0f bd 03             	bsr    eax,DWORD PTR [rbx]
     7fe:	09 ca                	or     edx,ecx
     800:	00 00                	add    BYTE PTR [rax],al
     802:	00 2c 1d 00 00 00 00 	add    BYTE PTR [rbx*1+0x0],ch
     809:	0f be 03             	movsx  eax,BYTE PTR [rbx]
     80c:	08 6f 00             	or     BYTE PTR [rdi+0x0],ch
     80f:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:320
		if(adr[i][1].type != NA_BAD)
     811:	30 1d 00 00 00 00    	xor    BYTE PTR [rip+0x0],bl        # 817 <.debug_info+0x817>
     817:	0f bf 03             	movsx  eax,WORD PTR [rbx]
     81a:	12 37                	adc    dh,BYTE PTR [rdi]
     81c:	07                   	(bad)  
     81d:	00 00                	add    BYTE PTR [rax],al
     81f:	34 1d                	xor    al,0x1d
     821:	00 00                	add    BYTE PTR [rax],al
     823:	00 00                	add    BYTE PTR [rax],al
     825:	0f c0 03             	xadd   BYTE PTR [rbx],al
     828:	09 b8 00 00 00 38    	or     DWORD PTR [rax+0x38000000],edi
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:321
			NET_OutOfBandPrint( NS_SERVER, &adr[i][1], "heartbeat %s\n", message);
     82e:	1d 00 00 00 00       	sbb    eax,0x0
     833:	0f c1 03             	xadd   DWORD PTR [rbx],eax
     836:	09 b8 00 00 00 40    	or     DWORD PTR [rax+0x40000000],edi
     83c:	1d 00 00 00 00       	sbb    eax,0x0
     841:	0f c2 03 09          	cmpps  xmm0,XMMWORD PTR [rbx],0x9
     845:	b8 00 00 00 48       	mov    eax,0x48000000
     84a:	1d 00 00 00 00       	sbb    eax,0x0
     84f:	0f c4 03 0b          	pinsrw mm0,WORD PTR [rbx],0xb
     853:	9f                   	lahf   
     854:	08 00                	or     BYTE PTR [rax],al
     856:	00 50 1d             	add    BYTE PTR [rax+0x1d],dl
     859:	00 00                	add    BYTE PTR [rax],al
     85b:	00 00                	add    BYTE PTR [rax],al
     85d:	0f c5                	pextrw eax,(bad),0xc5
     85f:	03 0b                	add    ecx,DWORD PTR [rbx]
     861:	9f                   	lahf   
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:262
			continue;
     862:	08 00                	or     BYTE PTR [rax],al
     864:	00 58 1d             	add    BYTE PTR [rax+0x1d],bl
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:259 (discriminator 2)
	for (i = 0; i < MAX_MASTER_SERVERS; i++)
     867:	00 00                	add    BYTE PTR [rax],al
     869:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:259 (discriminator 1)
     86b:	0f c6 03 0b          	shufps xmm0,XMMWORD PTR [rbx],0xb
     86f:	9f                   	lahf   
     870:	08 00                	or     BYTE PTR [rax],al
     872:	00 60 1d             	add    BYTE PTR [rax+0x1d],ah
     875:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:250
		return;		// only dedicated servers send heartbeats
     877:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:254
		return;
     879:	0f c7                	(bad)  
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:323
}
     87b:	03 0b                	add    ecx,DWORD PTR [rbx]
SV_MasterShutdown():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:334
{
     87d:	9f                   	lahf   
     87e:	08 00                	or     BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:336
	svs.nextHeartbeatTime = svs.time;
     880:	00 68 1d             	add    BYTE PTR [rax+0x1d],ch
     883:	00 00                	add    BYTE PTR [rax],al
     885:	00 00                	add    BYTE PTR [rax],al
     887:	0f c8                	bswap  eax
     889:	03 08                	add    ecx,DWORD PTR [rax]
     88b:	6f                   	outs   dx,DWORD PTR ds:[rsi]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:337
	SV_MasterHeartbeat(HEARTBEAT_FOR_MASTER);
     88c:	00 00                	add    BYTE PTR [rax],al
     88e:	00 70 1d             	add    BYTE PTR [rax+0x1d],dh
     891:	00 00                	add    BYTE PTR [rax],al
     893:	00 00                	add    BYTE PTR [rax],al
     895:	0f c9                	bswap  ecx
     897:	03 0e                	add    ecx,DWORD PTR [rsi]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:340
	svs.nextHeartbeatTime = svs.time;
     899:	6c                   	ins    BYTE PTR es:[rdi],dx
     89a:	07                   	(bad)  
     89b:	00 00                	add    BYTE PTR [rax],al
     89d:	74 00                	je     89f <.debug_info+0x89f>
     89f:	09 08                	or     DWORD PTR [rax],ecx
     8a1:	79 07                	jns    8aa <.debug_info+0x8aa>
     8a3:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:341
	SV_MasterHeartbeat(HEARTBEAT_FOR_MASTER);
     8a5:	06                   	(bad)  
     8a6:	be 00 00 00 b5       	mov    esi,0xb5000000
     8ab:	08 00                	or     BYTE PTR [rax],al
     8ad:	00 07                	add    BYTE PTR [rdi],al
     8af:	42 00 00             	rex.X add BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:345
}
     8b2:	00 ff                	add    bh,bh
SVC_HashForAddress():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:369
static int SVC_HashForAddress( const netadr_t *address ) {
     8b4:	00 1e                	add    BYTE PTR [rsi],bl
     8b6:	00 00                	add    BYTE PTR [rax],al
     8b8:	00 00                	add    BYTE PTR [rax],al
     8ba:	d4                   	(bad)  
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:370
	const byte	*ip = NULL;
     8bb:	01 0f                	add    DWORD PTR [rdi],ecx
     8bd:	80 04 10 44          	add    BYTE PTR [rax+rdx*1],0x44
     8c1:	0b 00                	or     eax,DWORD PTR [rax]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:371
	int			size = 0;
     8c3:	00 1d 00 00 00 00    	add    BYTE PTR [rip+0x0],bl        # 8c9 <.debug_info+0x8c9>
     8c9:	0f 81 04 08 6f 00    	jno    6f10d3 <dlNextRound.8083+0x60e6eb>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:372
	int			hash = 0;
     8cf:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:375
	switch ( address->type ) {
     8d1:	00 1d 00 00 00 00    	add    BYTE PTR [rip+0x0],bl        # 8d7 <.debug_info+0x8d7>
     8d7:	0f 82 04 08 6f 00    	jb     6f10e1 <dlNextRound.8083+0x60e6f9>
     8dd:	00 00                	add    BYTE PTR [rax],al
     8df:	04 1d                	add    al,0x1d
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:380
		default: break;
     8e1:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:376
		case NA_IP:  ip = address->ipv._4; size = 4;  break;
     8e3:	00 00                	add    BYTE PTR [rax],al
     8e5:	0f 83 04 08 6f 00    	jae    6f10ef <dlNextRound.8083+0x60e707>
     8eb:	00 00                	add    BYTE PTR [rax],al
     8ed:	08 1d 00 00 00 00    	or     BYTE PTR [rip+0x0],bl        # 8f3 <.debug_info+0x8f3>
     8f3:	0f 84 04 08 6f 00    	je     6f10fd <dlNextRound.8083+0x60e715>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:378
		case NA_IP6: ip = address->ipv._6; size = 16; break;
     8f9:	00 00                	add    BYTE PTR [rax],al
     8fb:	0c 1d                	or     al,0x1d
     8fd:	00 00                	add    BYTE PTR [rax],al
     8ff:	00 00                	add    BYTE PTR [rax],al
     901:	0f 85 04 08 6f 00    	jne    6f110b <dlNextRound.8083+0x60e723>
     907:	00 00                	add    BYTE PTR [rax],al
     909:	10 1d 00 00 00 00    	adc    BYTE PTR [rip+0x0],bl        # 90f <.debug_info+0x90f>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:383
	for ( i = 0; i < size; i++ ) {
     90f:	0f 87 04 0a bd 04    	ja     4bd1319 <dlNextRound.8083+0x4aee931>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:384 (discriminator 3)
		hash += (int)( ip[ i ] ) * ( i + 119 );
     915:	00 00                	add    BYTE PTR [rax],al
     917:	14 1d                	adc    al,0x1d
     919:	00 00                	add    BYTE PTR [rax],al
     91b:	00 00                	add    BYTE PTR [rax],al
     91d:	0f 88 04 0a bd 04    	js     4bd1327 <dlNextRound.8083+0x4aee93f>
     923:	00 00                	add    BYTE PTR [rax],al
     925:	20 1d 00 00 00 00    	and    BYTE PTR [rip+0x0],bl        # 92b <.debug_info+0x92b>
     92b:	0f 89 04 08 6f 00    	jns    6f1135 <dlNextRound.8083+0x60e74d>
     931:	00 00                	add    BYTE PTR [rax],al
     933:	2c 1d                	sub    al,0x1d
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:383 (discriminator 3)
	for ( i = 0; i < size; i++ ) {
     935:	00 00                	add    BYTE PTR [rax],al
     937:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:383 (discriminator 1)
     939:	0f 8a 04 08 6f 00    	jp     6f1143 <dlNextRound.8083+0x60e75b>
     93f:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:387
	hash = ( hash ^ ( hash >> 10 ) ^ ( hash >> 20 ) );
     941:	30 1d 00 00 00 00    	xor    BYTE PTR [rip+0x0],bl        # 947 <.debug_info+0x947>
     947:	0f 8b 04 08 6f 00    	jnp    6f1151 <dlNextRound.8083+0x60e769>
     94d:	00 00                	add    BYTE PTR [rax],al
     94f:	34 1d                	xor    al,0x1d
     951:	00 00                	add    BYTE PTR [rax],al
     953:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:388
	hash &= ( MAX_HASHES - 1 );
     955:	0f 8c 04 08 44 0b    	jl     b44115f <dlNextRound.8083+0xb35e777>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:390
	return hash;
     95b:	00 00                	add    BYTE PTR [rax],al
     95d:	38 1d 00 00 00 00    	cmp    BYTE PTR [rip+0x0],bl        # 963 <.debug_info+0x963>
SVC_RelinkToHead():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:399
static void SVC_RelinkToHead( leakyBucket_t *bucket, int hash ) {
     963:	0f 8f 04 08 6f 00    	jg     6f116d <dlNextRound.8083+0x60e785>
     969:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:401
	if ( bucket->prev != NULL ) {
     96b:	44 1d 00 00 00 00    	rex.R sbb eax,0x0
     971:	0f 91 04 08          	setno  BYTE PTR [rax+rcx*1]
     975:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     976:	00 00                	add    BYTE PTR [rax],al
     978:	00 48 1d             	add    BYTE PTR [rax+0x1d],cl
     97b:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:402
		bucket->prev->next = bucket->next;
     97d:	00 00                	add    BYTE PTR [rax],al
     97f:	0f 92 04 08          	setb   BYTE PTR [rax+rcx*1]
     983:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     984:	00 00                	add    BYTE PTR [rax],al
     986:	00 4c 1d 00          	add    BYTE PTR [rbp+rbx*1+0x0],cl
     98a:	00 00                	add    BYTE PTR [rax],al
     98c:	00 0f                	add    BYTE PTR [rdi],cl
     98e:	94                   	xchg   esp,eax
     98f:	04 08                	add    al,0x8
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:407
	if ( bucket->next != NULL ) {
     991:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     992:	00 00                	add    BYTE PTR [rax],al
     994:	00 50 1d             	add    BYTE PTR [rax+0x1d],dl
     997:	00 00                	add    BYTE PTR [rax],al
     999:	00 00                	add    BYTE PTR [rax],al
     99b:	0f 95 04 08          	setne  BYTE PTR [rax+rcx*1]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:408
		bucket->next->prev = bucket->prev;
     99f:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     9a0:	00 00                	add    BYTE PTR [rax],al
     9a2:	00 54 1d 00          	add    BYTE PTR [rbp+rbx*1+0x0],dl
     9a6:	00 00                	add    BYTE PTR [rax],al
     9a8:	00 0f                	add    BYTE PTR [rdi],cl
     9aa:	97                   	xchg   edi,eax
     9ab:	04 08                	add    al,0x8
     9ad:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     9ae:	00 00                	add    BYTE PTR [rax],al
     9b0:	00 58 1d             	add    BYTE PTR [rax+0x1d],bl
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:411
	bucket->next = bucketHashes[ hash ];
     9b3:	00 00                	add    BYTE PTR [rax],al
     9b5:	00 00                	add    BYTE PTR [rax],al
     9b7:	0f 9c 04 0a          	setl   BYTE PTR [rdx+rcx*1]
     9bb:	bd 04 00 00 5c       	mov    ebp,0x5c000004
     9c0:	1d 00 00 00 00       	sbb    eax,0x0
     9c5:	0f 9e 04 08          	setle  BYTE PTR [rax+rcx*1]
     9c9:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     9ca:	00 00                	add    BYTE PTR [rax],al
     9cc:	00 68 1d             	add    BYTE PTR [rax+0x1d],ch
     9cf:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:412
	if ( bucketHashes[ hash ] != NULL ) {
     9d1:	00 00                	add    BYTE PTR [rax],al
     9d3:	0f a0                	push   fs
     9d5:	04 08                	add    al,0x8
     9d7:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     9d8:	00 00                	add    BYTE PTR [rax],al
     9da:	00 6c 1d 00          	add    BYTE PTR [rbp+rbx*1+0x0],ch
     9de:	00 00                	add    BYTE PTR [rax],al
     9e0:	00 0f                	add    BYTE PTR [rdi],cl
     9e2:	a1 04 08 a6 00 00 00 	movabs eax,ds:0x1d70000000a60804
     9e9:	70 1d 
     9eb:	00 00                	add    BYTE PTR [rax],al
     9ed:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:413
		bucketHashes[ hash ]->prev = bucket;
     9ef:	0f a2                	cpuid  
     9f1:	04 08                	add    al,0x8
     9f3:	a6                   	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
     9f4:	00 00                	add    BYTE PTR [rax],al
     9f6:	00 78 1d             	add    BYTE PTR [rax+0x1d],bh
     9f9:	00 00                	add    BYTE PTR [rax],al
     9fb:	00 00                	add    BYTE PTR [rax],al
     9fd:	0f a4 04 08 6f       	shld   DWORD PTR [rax+rcx*1],eax,0x6f
     a02:	00 00                	add    BYTE PTR [rax],al
     a04:	00 80 1d 00 00 00    	add    BYTE PTR [rax+0x1d],al
     a0a:	00 0f                	add    BYTE PTR [rdi],cl
     a0c:	a5                   	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
     a0d:	04 08                	add    al,0x8
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:416
	bucket->prev = NULL;
     a0f:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     a10:	00 00                	add    BYTE PTR [rax],al
     a12:	00 84 1d 00 00 00 00 	add    BYTE PTR [rbp+rbx*1+0x0],al
     a19:	0f                   	montmul (bad)
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:417
	bucketHashes[ hash ] = bucket;
     a1a:	a6                   	cmps   BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
     a1b:	04 08                	add    al,0x8
     a1d:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     a1e:	00 00                	add    BYTE PTR [rax],al
     a20:	00 88 1d 00 00 00    	add    BYTE PTR [rax+0x1d],cl
     a26:	00 0f                	add    BYTE PTR [rdi],cl
     a28:	a8 04                	test   al,0x4
     a2a:	08 6f 00             	or     BYTE PTR [rdi+0x0],ch
     a2d:	00 00                	add    BYTE PTR [rax],al
     a2f:	8c 1d 00 00 00 00    	mov    WORD PTR [rip+0x0],ds        # a35 <.debug_info+0xa35>
     a35:	0f a9                	pop    gs
     a37:	04 08                	add    al,0x8
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:418
}
     a39:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     a3a:	00 00                	add    BYTE PTR [rax],al
SVC_BucketForAddress():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:428
static leakyBucket_t *SVC_BucketForAddress( const netadr_t *address, int burst, int period ) {
     a3c:	00 90 1d 00 00 00    	add    BYTE PTR [rax+0x1d],dl
     a42:	00 0f                	add    BYTE PTR [rdi],cl
     a44:	aa                   	stos   BYTE PTR es:[rdi],al
     a45:	04 08                	add    al,0x8
     a47:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     a48:	00 00                	add    BYTE PTR [rax],al
     a4a:	00 94 1d 00 00 00 00 	add    BYTE PTR [rbp+rbx*1+0x0],dl
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:431
	const int		hash = SVC_HashForAddress( address );
     a51:	0f ac 04 0a bd       	shrd   DWORD PTR [rdx+rcx*1],eax,0xbd
     a56:	04 00                	add    al,0x0
     a58:	00 98 1d 00 00 00    	add    BYTE PTR [rax+0x1d],bl
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:432
	const int		now = Sys_Milliseconds();
     a5e:	00 0f                	add    BYTE PTR [rdi],cl
     a60:	ad                   	lods   eax,DWORD PTR ds:[rsi]
     a61:	04 08                	add    al,0x8
     a63:	6f                   	outs   dx,DWORD PTR ds:[rsi]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:436
	for ( bucket = bucketHashes[ hash ], n = 0; bucket; bucket = bucket->next, n++ ) {
     a64:	00 00                	add    BYTE PTR [rax],al
     a66:	00 a4 1d 00 00 00 00 	add    BYTE PTR [rbp+rbx*1+0x0],ah
     a6d:	0f b0 04 08          	cmpxchg BYTE PTR [rax+rcx*1],al
     a71:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     a72:	00 00                	add    BYTE PTR [rax],al
     a74:	00 a8 1d 00 00 00    	add    BYTE PTR [rax+0x1d],ch
     a7a:	00 0f                	add    BYTE PTR [rdi],cl
     a7c:	b1 04                	mov    cl,0x4
     a7e:	08 6f 00             	or     BYTE PTR [rdi+0x0],ch
     a81:	00 00                	add    BYTE PTR [rax],al
     a83:	ac                   	lods   al,BYTE PTR ds:[rsi]
     a84:	1d 00 00 00 00       	sbb    eax,0x0
     a89:	0f b2 04 08          	lss    eax,FWORD PTR [rax+rcx*1]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:437
		switch ( bucket->type ) {
     a8d:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     a8e:	00 00                	add    BYTE PTR [rax],al
     a90:	00 b0 1d 00 00 00    	add    BYTE PTR [rax+0x1d],dh
     a96:	00 0f                	add    BYTE PTR [rdi],cl
     a98:	b3 04                	mov    bl,0x4
     a9a:	08 6f 00             	or     BYTE PTR [rdi+0x0],ch
     a9d:	00 00                	add    BYTE PTR [rax],al
     a9f:	b4 1d                	mov    ah,0x1d
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:439
				if ( memcmp( bucket->ipv._4, address->ipv._4, 4 ) == 0 ) {
     aa1:	00 00                	add    BYTE PTR [rax],al
     aa3:	00 00                	add    BYTE PTR [rax],al
     aa5:	0f b5 04 08          	lgs    eax,FWORD PTR [rax+rcx*1]
     aa9:	54                   	push   rsp
     aaa:	0b 00                	or     eax,DWORD PTR [rax]
     aac:	00 b8 1d 00 00 00    	add    BYTE PTR [rax+0x1d],bh
     ab2:	00 0f                	add    BYTE PTR [rdi],cl
     ab4:	b6 04                	mov    dh,0x4
     ab6:	08 54 0b 00          	or     BYTE PTR [rbx+rcx*1+0x0],dl
     aba:	00 f8                	add    al,bh
     abc:	1f                   	(bad)  
     abd:	00 00                	add    BYTE PTR [rax],al
     abf:	00 00                	add    BYTE PTR [rax],al
     ac1:	0f b7 04 08          	movzx  eax,WORD PTR [rax+rcx*1]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:440
					if ( n > 8 ) {
     ac5:	54                   	push   rsp
     ac6:	0b 00                	or     eax,DWORD PTR [rax]
     ac8:	00 38                	add    BYTE PTR [rax],bh
     aca:	01 1f                	add    DWORD PTR [rdi],ebx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:441
						SVC_RelinkToHead( bucket, hash );
     acc:	00 00                	add    BYTE PTR [rax],al
     ace:	00 00                	add    BYTE PTR [rax],al
     ad0:	0f b8                	(bad)  
     ad2:	04 08                	add    al,0x8
     ad4:	54                   	push   rsp
     ad5:	0b 00                	or     eax,DWORD PTR [rax]
     ad7:	00 78 01             	add    BYTE PTR [rax+0x1],bh
     ada:	1f                   	(bad)  
     adb:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:443
					return bucket;
     add:	00 00                	add    BYTE PTR [rax],al
     adf:	0f ba                	(bad)  
     ae1:	04 08                	add    al,0x8
     ae3:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     ae4:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:448
				if ( memcmp( bucket->ipv._6, address->ipv._6, 16 ) == 0 ) {
     ae6:	00 b8 01 1f 00 00    	add    BYTE PTR [rax+0x1f01],bh
     aec:	00 00                	add    BYTE PTR [rax],al
     aee:	0f bb 04 08          	btc    DWORD PTR [rax+rcx*1],eax
     af2:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     af3:	00 00                	add    BYTE PTR [rax],al
     af5:	00 bc 01 1f 00 00 00 	add    BYTE PTR [rcx+rax*1+0x1f],bh
     afc:	00 0f                	add    BYTE PTR [rdi],cl
     afe:	bc 04 08 6f 00       	mov    esp,0x6f0804
     b03:	00 00                	add    BYTE PTR [rax],al
     b05:	c0 01 1f             	rol    BYTE PTR [rcx],0x1f
     b08:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:449
					if ( n > 8 ) {
     b0a:	00 00                	add    BYTE PTR [rax],al
     b0c:	0f bf 04 08          	movsx  eax,WORD PTR [rax+rcx*1]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:450
						SVC_RelinkToHead( bucket, hash );
     b10:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     b11:	00 00                	add    BYTE PTR [rax],al
     b13:	00 c4                	add    ah,al
     b15:	01 1f                	add    DWORD PTR [rdi],ebx
     b17:	00 00                	add    BYTE PTR [rax],al
     b19:	00 00                	add    BYTE PTR [rax],al
     b1b:	0f c0 04 08          	xadd   BYTE PTR [rax+rcx*1],al
     b1f:	6f                   	outs   dx,DWORD PTR ds:[rsi]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:452
					return bucket;
     b20:	00 00                	add    BYTE PTR [rax],al
     b22:	00 c8                	add    al,cl
     b24:	01 1f                	add    DWORD PTR [rdi],ebx
     b26:	00 00                	add    BYTE PTR [rax],al
     b28:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:457
				return &dummy;
     b2a:	0f c1 04 08          	xadd   DWORD PTR [rax+rcx*1],eax
     b2e:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     b2f:	00 00                	add    BYTE PTR [rax],al
     b31:	00 cc                	add    ah,cl
     b33:	01 1f                	add    DWORD PTR [rdi],ebx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:445
				break;
     b35:	00 00                	add    BYTE PTR [rax],al
     b37:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:436 (discriminator 2)
	for ( bucket = bucketHashes[ hash ], n = 0; bucket; bucket = bucket->next, n++ ) {
     b39:	0f c2 04 08 6f       	cmpps  xmm0,XMMWORD PTR [rax+rcx*1],0x6f
     b3e:	00 00                	add    BYTE PTR [rax],al
     b40:	00 d0                	add    al,dl
     b42:	01 00                	add    DWORD PTR [rax],eax
     b44:	06                   	(bad)  
     b45:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     b46:	00 00                	add    BYTE PTR [rax],al
     b48:	00 54 0b 00          	add    BYTE PTR [rbx+rcx*1+0x0],dl
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:436 (discriminator 1)
     b4c:	00 07                	add    BYTE PTR [rdi],al
     b4e:	42 00 00             	rex.X add BYTE PTR [rax],al
     b51:	00 02                	add    BYTE PTR [rdx],al
     b53:	00 06                	add    BYTE PTR [rsi],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:461
	for ( i = 0; i < MAX_BUCKETS; i++ ) {
     b55:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     b56:	00 00                	add    BYTE PTR [rax],al
     b58:	00 64 0b 00          	add    BYTE PTR [rbx+rcx*1+0x0],ah
     b5c:	00 07                	add    BYTE PTR [rdi],al
     b5e:	42 00 00             	rex.X add BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:464
		if ( start >= MAX_BUCKETS )
     b61:	00 0f                	add    BYTE PTR [rdi],cl
     b63:	00 16                	add    BYTE PTR [rsi],dl
     b65:	00 00                	add    BYTE PTR [rax],al
     b67:	00 00                	add    BYTE PTR [rax],al
     b69:	0f c3 04 03          	movnti DWORD PTR [rbx+rax*1],eax
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:465
			start = 0;
     b6d:	b5 08                	mov    ch,0x8
     b6f:	00 00                	add    BYTE PTR [rax],al
     b71:	1c 00                	sbb    al,0x0
     b73:	00 00                	add    BYTE PTR [rax],al
     b75:	00 18                	add    BYTE PTR [rax],bl
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:466
		bucket = &buckets[ start++ ];
     b77:	0f e4 04 10          	pmulhuw mm0,QWORD PTR [rax+rdx*1]
     b7b:	e2 0b                	loop   b88 <.debug_info+0xb88>
     b7d:	00 00                	add    BYTE PTR [rax],al
     b7f:	1d 00 00 00 00       	sbb    eax,0x0
     b84:	0f e5 04 09          	pmulhw mm0,QWORD PTR [rcx+rcx*1]
     b88:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     b89:	00 00                	add    BYTE PTR [rax],al
     b8b:	00 00                	add    BYTE PTR [rax],al
     b8d:	1d 00 00 00 00       	sbb    eax,0x0
     b92:	0f e6                	(bad)  
     b94:	04 09                	add    al,0x9
     b96:	44 0b 00             	or     r8d,DWORD PTR [rax]
     b99:	00 04 1d 00 00 00 00 	add    BYTE PTR [rbx*1+0x0],al
     ba0:	0f e7 04 09          	movntq QWORD PTR [rcx+rcx*1],mm0
     ba4:	6f                   	outs   dx,DWORD PTR ds:[rsi]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:467
		interval = now - bucket->rate.lastTime;
     ba5:	00 00                	add    BYTE PTR [rax],al
     ba7:	00 10                	add    BYTE PTR [rax],dl
     ba9:	1d 00 00 00 00       	sbb    eax,0x0
     bae:	0f e8 04 09          	psubsb mm0,QWORD PTR [rcx+rcx*1]
     bb2:	57                   	push   rdi
     bb3:	04 00                	add    al,0x0
     bb5:	00 14 1d 00 00 00 00 	add    BYTE PTR [rbx*1+0x0],dl
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:470
		if ( bucket->type != NA_BAD && (unsigned)interval > ( bucket->rate.burst * period ) ) {
     bbc:	0f e9 04 0e          	psubsw mm0,QWORD PTR [rsi+rcx*1]
     bc0:	49 00 00             	rex.WB add BYTE PTR [r8],al
     bc3:	00 15 1d 00 00 00    	add    BYTE PTR [rip+0x1d],dl        # be6 <.debug_info+0xbe6>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:470 (discriminator 1)
     bc9:	00 0f                	add    BYTE PTR [rdi],cl
     bcb:	e9 04 1b 49 00       	jmp    4926d4 <dlNextRound.8083+0x3afcec>
     bd0:	00 00                	add    BYTE PTR [rax],al
     bd2:	16                   	(bad)  
     bd3:	1d 00 00 00 00       	sbb    eax,0x0
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:471
			if ( bucket->prev != NULL ) {
     bd8:	0f e9 04 26          	psubsw mm0,QWORD PTR [rsi+riz*1]
     bdc:	49 00 00             	rex.WB add BYTE PTR [r8],al
     bdf:	00 17                	add    BYTE PTR [rdi],dl
     be1:	00 16                	add    BYTE PTR [rsi],dl
     be3:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:472
				bucket->prev->next = bucket->next;
     be5:	00 00                	add    BYTE PTR [rax],al
     be7:	0f ea 04 03          	pminsw mm0,QWORD PTR [rbx+rax*1]
     beb:	71 0b                	jno    bf8 <.debug_info+0xbf8>
     bed:	00 00                	add    BYTE PTR [rax],al
     bef:	17                   	(bad)  
     bf0:	07                   	(bad)  
     bf1:	04 3b                	add    al,0x3b
     bf3:	00 00                	add    BYTE PTR [rax],al
     bf5:	00 0f                	add    BYTE PTR [rdi],cl
     bf7:	f1                   	icebp  
     bf8:	04 0e                	add    al,0xe
     bfa:	23 0c 00             	and    ecx,DWORD PTR [rax+rax*1]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:474
				bucketHashes[ bucket->hash ] = bucket->next;
     bfd:	00 15 00 00 00 00    	add    BYTE PTR [rip+0x0],dl        # c03 <.debug_info+0xc03>
     c03:	00 15 00 00 00 00    	add    BYTE PTR [rip+0x0],dl        # c09 <.debug_info+0xc09>
     c09:	01 15 00 00 00 00    	add    DWORD PTR [rip+0x0],edx        # c0f <.debug_info+0xc0f>
     c0f:	02 15 00 00 00 00    	add    dl,BYTE PTR [rip+0x0]        # c15 <.debug_info+0xc15>
     c15:	03 15 00 00 00 00    	add    edx,DWORD PTR [rip+0x0]        # c1b <.debug_info+0xc1b>
     c1b:	04 15                	add    al,0x15
     c1d:	00 00                	add    BYTE PTR [rax],al
     c1f:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:477
			if ( bucket->next != NULL ) {
     c21:	05 00 16 00 00       	add    eax,0x1600
     c26:	00 00                	add    BYTE PTR [rax],al
     c28:	0f f8 04 03          	psubb  mm0,QWORD PTR [rbx+rax*1]
     c2c:	ef                   	out    dx,eax
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:478
				bucket->next->prev = bucket->prev;
     c2d:	0b 00                	or     eax,DWORD PTR [rax]
     c2f:	00 20                	add    BYTE PTR [rax],ah
     c31:	24 0f                	and    al,0xf
     c33:	fa                   	cli    
     c34:	04 09                	add    al,0x9
     c36:	81 0c 00 00 1d 00 00 	or     DWORD PTR [rax+rax*1],0x1d00
     c3d:	00 00                	add    BYTE PTR [rax],al
     c3f:	0f fb 04 0b          	psubq  mm0,QWORD PTR [rbx+rcx*1]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:481
			bucket->type = NA_BAD;
     c43:	23 0c 00             	and    ecx,DWORD PTR [rax+rax*1]
     c46:	00 00                	add    BYTE PTR [rax],al
     c48:	1d 00 00 00 00       	sbb    eax,0x0
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:484
		if ( bucket->type == NA_BAD ) {
     c4d:	0f fc 04 07          	paddb  mm0,QWORD PTR [rdi+rax*1]
     c51:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     c52:	00 00                	add    BYTE PTR [rax],al
     c54:	00 04 1d 00 00 00 00 	add    BYTE PTR [rbx*1+0x0],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:485
			bucket->type = address->type;
     c5b:	0f fd 04 07          	paddw  mm0,QWORD PTR [rdi+rax*1]
     c5f:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     c60:	00 00                	add    BYTE PTR [rax],al
     c62:	00 08                	add    BYTE PTR [rax],cl
     c64:	1d 00 00 00 00       	sbb    eax,0x0
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:486
			switch ( address->type ) {
     c69:	0f fe 04 09          	paddd  mm0,QWORD PTR [rcx+rcx*1]
     c6d:	bd 04 00 00 0c       	mov    ebp,0xc000004
     c72:	1d 00 00 00 00       	sbb    eax,0x0
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:487
				case NA_IP:  Com_Memcpy( bucket->ipv._4, address->ipv._4, 4 );  break;
     c77:	0f ff 04 09          	ud0    eax,DWORD PTR [rcx+rcx*1]
     c7b:	bd 04 00 00 18       	mov    ebp,0x18000004
     c80:	00 16                	add    BYTE PTR [rsi],dl
     c82:	00 00                	add    BYTE PTR [rax],al
     c84:	00 00                	add    BYTE PTR [rax],al
     c86:	0f 00 05 03 30 0c 00 	sldt   WORD PTR [rip+0xc3003]        # c3c90 <SV_SendQueuedPackets+0xc15bb>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:489
				case NA_IP6: Com_Memcpy( bucket->ipv._6, address->ipv._6, 16 ); break;
     c8d:	00 1c 00             	add    BYTE PTR [rax+rax*1],bl
     c90:	00 00                	add    BYTE PTR [rax],al
     c92:	00 d0                	add    al,dl
     c94:	0f 09                	wbinvd 
     c96:	05 10 25 0e 00       	add    eax,0xe2510
     c9b:	00 1d 00 00 00 00    	add    BYTE PTR [rip+0x0],bl        # ca1 <.debug_info+0xca1>
     ca1:	0f 0a                	(bad)  
     ca3:	05 07 6f 00 00       	add    eax,0x6f07
     ca8:	00 00                	add    BYTE PTR [rax],al
     caa:	1d 00 00 00 00       	sbb    eax,0x0
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:494
			bucket->rate.lastTime = now;
     caf:	0f 0b                	ud2    
     cb1:	05 07 6f 00 00       	add    eax,0x6f07
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:495
			bucket->rate.burst = 0;
     cb6:	00 04 1d 00 00 00 00 	add    BYTE PTR [rbx*1+0x0],al
     cbd:	0f 0c                	(bad)  
     cbf:	05 07 6f 00 00       	add    eax,0x6f07
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:496
			bucket->hash = hash;
     cc4:	00 08                	add    BYTE PTR [rax],cl
     cc6:	21 70 6f             	and    DWORD PTR [rax+0x6f],esi
     cc9:	73 00                	jae    ccb <.debug_info+0xccb>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:497
			bucket->toxic = 0;
     ccb:	0f 0e                	femms  
     ccd:	05 0f 81 0c 00       	add    eax,0xc810f
     cd2:	00 0c 1d 00 00 00 00 	add    BYTE PTR [rbx*1+0x0],cl
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:500
			bucket->next = bucketHashes[ hash ];
     cd9:	0f                   	(bad)          # c8de9 <SV_SendQueuedPackets+0xc6714>
     cda:	0f 05                	syscall 
     cdc:	0f 81 0c 00 00 30    	jno    30000cee <dlNextRound.8083+0x2ff1e306>
     ce2:	1d 00 00 00 00       	sbb    eax,0x0
     ce7:	0f 11 05 07 6f 00 00 	movups XMMWORD PTR [rip+0x6f07],xmm0        # 7bf5 <SV_SendQueuedPackets+0x5520>
     cee:	00 54 1d 00          	add    BYTE PTR [rbp+rbx*1+0x0],dl
     cf2:	00 00                	add    BYTE PTR [rax],al
     cf4:	00 0f                	add    BYTE PTR [rdi],cl
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:501
			if ( bucketHashes[ hash ] != NULL ) {
     cf6:	12 05 07 6f 00 00    	adc    al,BYTE PTR [rip+0x6f07]        # 7c03 <SV_SendQueuedPackets+0x552e>
     cfc:	00 58 1d             	add    BYTE PTR [rax+0x1d],bl
     cff:	00 00                	add    BYTE PTR [rax],al
     d01:	00 00                	add    BYTE PTR [rax],al
     d03:	0f 14 05 09 bd 04 00 	unpcklps xmm0,XMMWORD PTR [rip+0x4bd09]        # 4ca13 <SV_SendQueuedPackets+0x4a33e>
     d0a:	00 5c 1d 00          	add    BYTE PTR [rbp+rbx*1+0x0],bl
     d0e:	00 00                	add    BYTE PTR [rax],al
     d10:	00 0f                	add    BYTE PTR [rdi],cl
     d12:	15 05 09 bd 04       	adc    eax,0x4bd0905
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:502
				bucketHashes[ hash ]->prev = bucket;
     d17:	00 00                	add    BYTE PTR [rax],al
     d19:	68 1d 00 00 00       	push   0x1d
     d1e:	00 0f                	add    BYTE PTR [rdi],cl
     d20:	17                   	(bad)  
     d21:	05 09 bd 04 00       	add    eax,0x4bd09
     d26:	00 74 1d 00          	add    BYTE PTR [rbp+rbx*1+0x0],dh
     d2a:	00 00                	add    BYTE PTR [rax],al
     d2c:	00 0f                	add    BYTE PTR [rdi],cl
     d2e:	18 05 09 bd 04 00    	sbb    BYTE PTR [rip+0x4bd09],al        # 4ca3d <SV_SendQueuedPackets+0x4a368>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:505
			bucket->prev = NULL;
     d34:	00 80 1d 00 00 00    	add    BYTE PTR [rax+0x1d],al
     d3a:	00 0f                	add    BYTE PTR [rdi],cl
     d3c:	1a 05 07 6f 00 00    	sbb    al,BYTE PTR [rip+0x6f07]        # 7c49 <SV_SendQueuedPackets+0x5574>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:506
			bucketHashes[ hash ] = bucket;
     d42:	00 8c 1d 00 00 00 00 	add    BYTE PTR [rbp+rbx*1+0x0],cl
     d49:	0f 1b 05 07 6f 00 00 	bndstx [rip+0x6f07],bnd0        # 7c57 <SV_SendQueuedPackets+0x5582>
     d50:	00 90 1d 00 00 00    	add    BYTE PTR [rax+0x1d],dl
     d56:	00 0f                	add    BYTE PTR [rdi],cl
     d58:	1d 05 07 6f 00       	sbb    eax,0x6f0705
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:508
			return bucket;
     d5d:	00 00                	add    BYTE PTR [rax],al
     d5f:	94                   	xchg   esp,eax
     d60:	1d 00 00 00 00       	sbb    eax,0x0
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:461 (discriminator 1)
	for ( i = 0; i < MAX_BUCKETS; i++ ) {
     d65:	0f 1f 05 07 6f 00 00 	nop    DWORD PTR [rip+0x6f07]        # 7c73 <SV_SendQueuedPackets+0x559e>
     d6c:	00 98 1d 00 00 00    	add    BYTE PTR [rax+0x1d],bl
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:513
	return NULL;
     d72:	00 0f                	add    BYTE PTR [rdi],cl
     d74:	20 05 07 6f 00 00    	and    BYTE PTR [rip+0x6f07],al        # 7c81 <SV_SendQueuedPackets+0x55ac>
SVC_RateLimit():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:522
qboolean SVC_RateLimit( rateLimit_t *bucket, int burst, int period ) {
     d7a:	00 9c 1d 00 00 00 00 	add    BYTE PTR [rbp+rbx*1+0x0],bl
     d81:	0f 22 05             	mov    cr0,rbp
     d84:	07                   	(bad)  
     d85:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     d86:	00 00                	add    BYTE PTR [rax],al
     d88:	00 a0 1d 00 00 00    	add    BYTE PTR [rax+0x1d],ah
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:523
	int now = Sys_Milliseconds();
     d8e:	00 0f                	add    BYTE PTR [rdi],cl
     d90:	23 05 07 6f 00 00    	and    eax,DWORD PTR [rip+0x6f07]        # 7c9d <SV_SendQueuedPackets+0x55c8>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:524
	int interval = now - bucket->lastTime;
     d96:	00 a4 1d 00 00 00 00 	add    BYTE PTR [rbp+rbx*1+0x0],ah
     d9d:	0f 24                	(bad)  
     d9f:	05 07 6f 00 00       	add    eax,0x6f07
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:525
	int expired = interval / period;
     da4:	00 a8 1d 00 00 00    	add    BYTE PTR [rax+0x1d],ch
     daa:	00 0f                	add    BYTE PTR [rdi],cl
     dac:	25 05 07 6f 00       	and    eax,0x6f0705
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:526
	int expiredRemainder = interval % period;
     db1:	00 00                	add    BYTE PTR [rax],al
     db3:	ac                   	lods   al,BYTE PTR ds:[rsi]
     db4:	1d 00 00 00 00       	sbb    eax,0x0
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:528
	if ( expired > bucket->burst || interval < 0 ) {
     db9:	0f 27                	(bad)  
     dbb:	05 07 6f 00 00       	add    eax,0x6f07
     dc0:	00 b0 1d 00 00 00    	add    BYTE PTR [rax+0x1d],dh
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:528 (discriminator 1)
     dc6:	00 0f                	add    BYTE PTR [rdi],cl
     dc8:	29 05 07 6f 00 00    	sub    DWORD PTR [rip+0x6f07],eax        # 7cd5 <SV_SendQueuedPackets+0x5600>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:529
		bucket->burst = 0;
     dce:	00 b4 1d 00 00 00 00 	add    BYTE PTR [rbp+rbx*1+0x0],dh
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:530
		bucket->lastTime = now;
     dd5:	0f 2a 05 07 6f 00 00 	cvtpi2ps xmm0,QWORD PTR [rip+0x6f07]        # 7ce3 <SV_SendQueuedPackets+0x560e>
     ddc:	00 b8 1d 00 00 00    	add    BYTE PTR [rax+0x1d],bh
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:532
		bucket->burst -= expired;
     de2:	00 0f                	add    BYTE PTR [rdi],cl
     de4:	2d 05 07 6f 00       	sub    eax,0x6f0705
     de9:	00 00                	add    BYTE PTR [rax],al
     deb:	bc 1d 00 00 00       	mov    esp,0x1d
     df0:	00 0f                	add    BYTE PTR [rdi],cl
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:533
		bucket->lastTime = now - expiredRemainder;
     df2:	2e 05 07 6f 00 00    	cs add eax,0x6f07
     df8:	00 c0                	add    al,al
     dfa:	1d 00 00 00 00       	sbb    eax,0x0
     dff:	0f 2f 05 07 6f 00 00 	comiss xmm0,DWORD PTR [rip+0x6f07]        # 7d0d <SV_SendQueuedPackets+0x5638>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:536
	if ( bucket->burst < burst ) {
     e06:	00 c4                	add    ah,al
     e08:	1d 00 00 00 00       	sbb    eax,0x0
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:537
		bucket->burst++;
     e0d:	0f 30                	wrmsr  
     e0f:	05 07 6f 00 00       	add    eax,0x6f07
     e14:	00 c8                	add    al,cl
     e16:	1d 00 00 00 00       	sbb    eax,0x0
     e1b:	0f 32                	rdmsr  
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:538
		return qfalse;
     e1d:	05 07 6f 00 00       	add    eax,0x6f07
     e22:	00 cc                	add    ah,cl
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:541
	return qtrue;
     e24:	00 16                	add    BYTE PTR [rsi],dl
     e26:	00 00                	add    BYTE PTR [rax],al
     e28:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:542
}
     e2a:	0f 33                	rdpmc  
SVC_RateDrop():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:550
static void SVC_RateDrop( leakyBucket_t *bucket, int burst ) {
     e2c:	05 03 8e 0c 00       	add    eax,0xc8e03
     e31:	00 06                	add    BYTE PTR [rsi],al
     e33:	be 00 00 00 42       	mov    esi,0x42000000
     e38:	0e                   	(bad)  
     e39:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:551
	if ( bucket != NULL ) {
     e3b:	07                   	(bad)  
     e3c:	42 00 00             	rex.X add BYTE PTR [rax],al
     e3f:	00 3f                	add    BYTE PTR [rdi],bh
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:552
		if ( bucket->toxic < 10000 )
     e41:	00 22                	add    BYTE PTR [rdx],ah
     e43:	30 10                	xor    BYTE PTR [rax],dl
     e45:	3d 09 c1 0e 00       	cmp    eax,0xec109
     e4a:	00 0f                	add    BYTE PTR [rdi],cl
     e4c:	00 00                	add    BYTE PTR [rax],al
     e4e:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:553
			++bucket->toxic;
     e50:	10 3e                	adc    BYTE PTR [rsi],bh
     e52:	0b 83 04 00 00 00    	or     eax,DWORD PTR [rbx+0x4]
     e58:	0f 00 00             	sldt   WORD PTR [rax]
     e5b:	00 00                	add    BYTE PTR [rax],al
     e5d:	10 3f                	adc    BYTE PTR [rdi],bh
     e5f:	0b 83 04 00 00 04    	or     eax,DWORD PTR [rbx+0x4000004]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:554
		bucket->rate.burst = burst * bucket->toxic;
     e65:	23 6f 6f             	and    ebp,DWORD PTR [rdi+0x6f]
     e68:	62                   	(bad)  
     e69:	00 10                	add    BYTE PTR [rax],dl
     e6b:	40 0b 83 04 00 00 08 	rex or eax,DWORD PTR [rbx+0x8000004]
     e72:	0f 00 00             	sldt   WORD PTR [rax]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:555
		bucket->rate.lastTime = Sys_Milliseconds();
     e75:	00 00                	add    BYTE PTR [rax],al
     e77:	10 41 08             	adc    BYTE PTR [rcx+0x8],al
     e7a:	c1 0e 00             	ror    DWORD PTR [rsi],0x0
     e7d:	00 10                	add    BYTE PTR [rax],dl
     e7f:	0f 00 00             	sldt   WORD PTR [rax]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:557
}
     e82:	00 00                	add    BYTE PTR [rax],al
     e84:	10 42 07             	adc    BYTE PTR [rdx+0x7],al
SVC_RateRestoreBurst():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:565
static void SVC_RateRestoreBurst( leakyBucket_t *bucket ) {
     e87:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     e88:	00 00                	add    BYTE PTR [rax],al
     e8a:	00 18                	add    BYTE PTR [rax],bl
     e8c:	0f 00 00             	sldt   WORD PTR [rax]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:566
	if ( bucket != NULL ) {
     e8f:	00 00                	add    BYTE PTR [rax],al
     e91:	10 43 07             	adc    BYTE PTR [rbx+0x7],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:567
		if ( bucket->rate.burst > 0 ) {
     e94:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     e95:	00 00                	add    BYTE PTR [rax],al
     e97:	00 1c 0f             	add    BYTE PTR [rdi+rcx*1],bl
     e9a:	00 00                	add    BYTE PTR [rax],al
     e9c:	00 00                	add    BYTE PTR [rax],al
     e9e:	10 44 07 6f          	adc    BYTE PTR [rdi+rax*1+0x6f],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:568
			bucket->rate.burst--;
     ea2:	00 00                	add    BYTE PTR [rax],al
     ea4:	00 20                	add    BYTE PTR [rax],ah
     ea6:	0f 00 00             	sldt   WORD PTR [rax]
     ea9:	00 00                	add    BYTE PTR [rax],al
     eab:	10 45 07             	adc    BYTE PTR [rbp+0x7],al
     eae:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     eaf:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:571
}
     eb1:	00 24 23             	add    BYTE PTR [rbx+riz*1],ah
SVC_RateRestoreToxic():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:579
static void SVC_RateRestoreToxic( leakyBucket_t *bucket ) {
     eb4:	62                   	(bad)  
     eb5:	69 74 00 10 46 07 6f 	imul   esi,DWORD PTR [rax+rax*1+0x10],0x6f0746
     ebc:	00 
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:580
	if ( bucket != NULL ) {
     ebd:	00 00                	add    BYTE PTR [rax],al
     ebf:	28 00                	sub    BYTE PTR [rax],al
     ec1:	09 08                	or     DWORD PTR [rax],ecx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:581
		if ( bucket->toxic > 0 ) {
     ec3:	57                   	push   rdi
     ec4:	04 00                	add    al,0x0
     ec6:	00 03                	add    BYTE PTR [rbx],al
     ec8:	00 00                	add    BYTE PTR [rax],al
     eca:	00 00                	add    BYTE PTR [rax],al
     ecc:	10 47 03             	adc    BYTE PTR [rdi+0x3],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:582
			bucket->toxic--;
     ecf:	42 0e                	rex.X (bad) 
     ed1:	00 00                	add    BYTE PTR [rax],al
     ed3:	14 07                	adc    al,0x7
     ed5:	04 3b                	add    al,0x3b
     ed7:	00 00                	add    BYTE PTR [rax],al
     ed9:	00 10                	add    BYTE PTR [rax],dl
     edb:	9f                   	lahf   
     edc:	0e                   	(bad)  
     edd:	12 0f                	adc    cl,BYTE PTR [rdi]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:585
}
     edf:	00 00                	add    BYTE PTR [rax],al
SVC_RateLimitAddress():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:595
qboolean SVC_RateLimitAddress( const netadr_t *from, int burst, int period ) {
     ee1:	15 00 00 00 00       	adc    eax,0x0
     ee6:	00 15 00 00 00 00    	add    BYTE PTR [rip+0x0],dl        # eec <.debug_info+0xeec>
     eec:	01 15 00 00 00 00    	add    DWORD PTR [rip+0x0],edx        # ef2 <.debug_info+0xef2>
     ef2:	02 15 00 00 00 00    	add    dl,BYTE PTR [rip+0x0]        # ef8 <.debug_info+0xef8>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:596
	leakyBucket_t *bucket = SVC_BucketForAddress( from, burst, period );
     ef8:	03 15 00 00 00 00    	add    edx,DWORD PTR [rip+0x0]        # efe <.debug_info+0xefe>
     efe:	04 15                	add    al,0x15
     f00:	00 00                	add    BYTE PTR [rax],al
     f02:	00 00                	add    BYTE PTR [rax],al
     f04:	05 15 00 00 00       	add    eax,0x15
     f09:	00 06                	add    BYTE PTR [rsi],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:598
	return bucket ? SVC_RateLimit( &bucket->rate, burst, period ) : qtrue;
     f0b:	15 00 00 00 00       	adc    eax,0x0
     f10:	07                   	(bad)  
     f11:	00 03                	add    BYTE PTR [rbx],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:598 (discriminator 1)
     f13:	00 00                	add    BYTE PTR [rax],al
     f15:	00 00                	add    BYTE PTR [rax],al
     f17:	10 aa 03 d3 0e 00    	adc    BYTE PTR [rdx+0xed303],ch
     f1d:	00 14 07             	add    BYTE PTR [rdi+rax*1],dl
     f20:	04 3b                	add    al,0x3b
     f22:	00 00                	add    BYTE PTR [rax],al
     f24:	00 10                	add    BYTE PTR [rax],dl
     f26:	ad                   	lods   eax,DWORD PTR ds:[rsi]
     f27:	0e                   	(bad)  
     f28:	39 0f                	cmp    DWORD PTR [rdi],ecx
     f2a:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:598 (discriminator 2)
     f2c:	15 00 00 00 00       	adc    eax,0x0
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:599 (discriminator 5)
}
     f31:	00 15 00 00 00 00    	add    BYTE PTR [rip+0x0],dl        # f37 <.debug_info+0xf37>
SVC_RateRestoreBurstAddress():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:609
void SVC_RateRestoreBurstAddress( const netadr_t *from, int burst, int period ) {
     f37:	01 00                	add    DWORD PTR [rax],eax
     f39:	03 00                	add    eax,DWORD PTR [rax]
     f3b:	00 00                	add    BYTE PTR [rax],al
     f3d:	00 10                	add    BYTE PTR [rax],dl
     f3f:	b0 03                	mov    al,0x3
     f41:	1e                   	(bad)  
     f42:	0f 00 00             	sldt   WORD PTR [rax]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:610
	leakyBucket_t *bucket = SVC_BucketForAddress( from, burst, period );
     f45:	24 10                	and    al,0x10
     f47:	10 b7 02 65 0f 00    	adc    BYTE PTR [rdi+0xf6502],dh
     f4d:	00 25 5f 34 00 10    	add    BYTE PTR [rip+0x1000345f],ah        # 100043b2 <dlNextRound.8083+0xff219ca>
     f53:	b8 08 8f 04 00       	mov    eax,0x48f08
     f58:	00 25 5f 36 00 10    	add    BYTE PTR [rip+0x1000365f],ah        # 100045bd <dlNextRound.8083+0xff21bd5>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:612
	SVC_RateRestoreBurst( bucket );
     f5e:	ba 08 65 0f 00       	mov    edx,0xf6508
     f63:	00 00                	add    BYTE PTR [rax],al
     f65:	06                   	(bad)  
     f66:	57                   	push   rdi
     f67:	04 00                	add    al,0x0
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:613
}
     f69:	00 75 0f             	add    BYTE PTR [rbp+0xf],dh
SVC_RateRestoreToxicAddress():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:623
void SVC_RateRestoreToxicAddress( const netadr_t *from, int burst, int period ) {
     f6c:	00 00                	add    BYTE PTR [rax],al
     f6e:	07                   	(bad)  
     f6f:	42 00 00             	rex.X add BYTE PTR [rax],al
     f72:	00 0f                	add    BYTE PTR [rdi],cl
     f74:	00 22                	add    BYTE PTR [rdx],ah
     f76:	20 10                	and    BYTE PTR [rax],dl
     f78:	b5 09                	mov    ch,0x9
     f7a:	b3 0f                	mov    bl,0xf
     f7c:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:624
	leakyBucket_t *bucket = SVC_BucketForAddress( from, burst, period );
     f7e:	0f 00 00             	sldt   WORD PTR [rax]
     f81:	00 00                	add    BYTE PTR [rax],al
     f83:	10 b6 0f 12 0f 00    	adc    BYTE PTR [rsi+0xf120f],dh
     f89:	00 00                	add    BYTE PTR [rax],al
     f8b:	23 69 70             	and    ebp,DWORD PTR [rcx+0x70]
     f8e:	76 00                	jbe    f90 <.debug_info+0xf90>
     f90:	10 bc 04 45 0f 00 00 	adc    BYTE PTR [rsp+rax*1+0xf45],bh
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:626
	SVC_RateRestoreToxic( bucket );
     f97:	04 0f                	add    al,0xf
     f99:	00 00                	add    BYTE PTR [rax],al
     f9b:	00 00                	add    BYTE PTR [rax],al
     f9d:	10 bd 0b 33 04 00    	adc    BYTE PTR [rbp+0x4330b],bh
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:627
}
     fa3:	00 14 0f             	add    BYTE PTR [rdi+rcx*1],dl
SVC_RateDropAddress():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:635
void SVC_RateDropAddress( const netadr_t *from, int burst, int period ) {
     fa6:	00 00                	add    BYTE PTR [rax],al
     fa8:	00 00                	add    BYTE PTR [rax],al
     faa:	10 bf 10 42 00 00    	adc    BYTE PTR [rdi+0x4210],bh
     fb0:	00 18                	add    BYTE PTR [rax],bl
     fb2:	00 03                	add    BYTE PTR [rbx],al
     fb4:	00 00                	add    BYTE PTR [rax],al
     fb6:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:636
	leakyBucket_t *bucket = SVC_BucketForAddress( from, burst, period );
     fb8:	10 c1                	adc    cl,al
     fba:	03 75 0f             	add    esi,DWORD PTR [rbp+0xf]
     fbd:	00 00                	add    BYTE PTR [rax],al
     fbf:	05 b3 0f 00 00       	add    eax,0xfb3
     fc4:	26 60                	es (bad) 
     fc6:	80 10 ea             	adc    BYTE PTR [rax],0xea
     fc9:	09 c8                	or     eax,ecx
     fcb:	10 00                	adc    BYTE PTR [rax],al
     fcd:	00 0f                	add    BYTE PTR [rdi],cl
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:638
	SVC_RateDrop( bucket, burst );
     fcf:	00 00                	add    BYTE PTR [rax],al
     fd1:	00 00                	add    BYTE PTR [rax],al
     fd3:	10 eb                	adc    bl,ch
     fd5:	0b 39                	or     edi,DWORD PTR [rcx]
     fd7:	0f 00 00             	sldt   WORD PTR [rax]
     fda:	00 0f                	add    BYTE PTR [rdi],cl
     fdc:	00 00                	add    BYTE PTR [rax],al
     fde:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:639
}
     fe0:	10 ed                	adc    ch,ch
     fe2:	08 6f 00             	or     BYTE PTR [rdi+0x0],ch
SVC_Status():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:651
static void SVC_Status( const netadr_t *from ) {
     fe5:	00 00                	add    BYTE PTR [rax],al
     fe7:	04 0f                	add    al,0xf
     fe9:	00 00                	add    BYTE PTR [rax],al
     feb:	00 00                	add    BYTE PTR [rax],al
     fed:	10 ef                	adc    bh,ch
     fef:	0b b3 0f 00 00 08    	or     esi,DWORD PTR [rbx+0x800000f]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:670
	if ( SVC_RateLimitAddress( from, 10, 1000 ) ) {
     ff5:	0f 00 00             	sldt   WORD PTR [rax]
     ff8:	00 00                	add    BYTE PTR [rax],al
     ffa:	10 f0                	adc    al,dh
     ffc:	08 6f 00             	or     BYTE PTR [rdi+0x0],ch
     fff:	00 00                	add    BYTE PTR [rax],al
    1001:	28 0f                	sub    BYTE PTR [rdi],cl
    1003:	00 00                	add    BYTE PTR [rax],al
    1005:	00 00                	add    BYTE PTR [rax],al
    1007:	10 f3                	adc    bl,dh
    1009:	08 6f 00             	or     BYTE PTR [rdi+0x0],ch
    100c:	00 00                	add    BYTE PTR [rax],al
    100e:	2c 0f                	sub    al,0xf
    1010:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:671
		if ( com_developer->integer ) {
    1012:	00 00                	add    BYTE PTR [rax],al
    1014:	10 f4                	adc    ah,dh
    1016:	08 6f 00             	or     BYTE PTR [rdi+0x0],ch
    1019:	00 00                	add    BYTE PTR [rax],al
    101b:	30 0f                	xor    BYTE PTR [rdi],cl
    101d:	00 00                	add    BYTE PTR [rax],al
    101f:	00 00                	add    BYTE PTR [rax],al
    1021:	10 f7                	adc    bh,dh
    1023:	08 6f 00             	or     BYTE PTR [rdi+0x0],ch
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:672
			Com_Printf( "SVC_Status: rate limit from %s exceeded, dropping request\n",
    1026:	00 00                	add    BYTE PTR [rax],al
    1028:	34 0f                	xor    al,0xf
    102a:	00 00                	add    BYTE PTR [rax],al
    102c:	00 00                	add    BYTE PTR [rax],al
    102e:	10 f8                	adc    al,bh
    1030:	08 6f 00             	or     BYTE PTR [rdi+0x0],ch
    1033:	00 00                	add    BYTE PTR [rax],al
    1035:	38 0f                	cmp    BYTE PTR [rdi],cl
    1037:	00 00                	add    BYTE PTR [rax],al
    1039:	00 00                	add    BYTE PTR [rax],al
    103b:	10 f9                	adc    cl,bh
    103d:	08 c8                	or     al,cl
    103f:	10 00                	adc    BYTE PTR [rax],al
    1041:	00 3c 27             	add    BYTE PTR [rdi+riz*1],bh
    1044:	00 00                	add    BYTE PTR [rax],al
    1046:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:675
		return;
    1048:	10 fd                	adc    ch,bh
    104a:	0b 83 04 00 00 3c    	or     eax,DWORD PTR [rbx+0x3c000004]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:680
	if ( SVC_RateLimit( &outboundRateLimit, 10, 100 ) ) {
    1050:	40 27                	rex (bad) 
    1052:	00 00                	add    BYTE PTR [rax],al
    1054:	00 00                	add    BYTE PTR [rax],al
    1056:	10 fe                	adc    dh,bh
    1058:	08 6f 00             	or     BYTE PTR [rdi+0x0],ch
    105b:	00 00                	add    BYTE PTR [rax],al
    105d:	40                   	rex
    105e:	40 27                	rex (bad) 
    1060:	00 00                	add    BYTE PTR [rax],al
    1062:	00 00                	add    BYTE PTR [rax],al
    1064:	10 ff                	adc    bh,bh
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:681
		Com_DPrintf( "SVC_Status: rate limit exceeded, dropping request\n" );
    1066:	08 6f 00             	or     BYTE PTR [rdi+0x0],ch
    1069:	00 00                	add    BYTE PTR [rax],al
    106b:	44                   	rex.R
    106c:	40 1f                	rex (bad) 
    106e:	00 00                	add    BYTE PTR [rax],al
    1070:	00 00                	add    BYTE PTR [rax],al
    1072:	10 00                	adc    BYTE PTR [rax],al
    1074:	01 08                	add    DWORD PTR [rax],ecx
    1076:	c8 10 00 00          	enter  0x10,0x0
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:682
		return;
    107a:	48                   	rex.W
    107b:	40 1f                	rex (bad) 
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:686
	if ( strlen( Cmd_Argv( 1 ) ) > 128 )
    107d:	00 00                	add    BYTE PTR [rax],al
    107f:	00 00                	add    BYTE PTR [rax],al
    1081:	10 02                	adc    BYTE PTR [rdx],al
    1083:	01 08                	add    DWORD PTR [rax],ecx
    1085:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    1086:	00 00                	add    BYTE PTR [rax],al
    1088:	00 48 80             	add    BYTE PTR [rax-0x80],cl
    108b:	1f                   	(bad)  
    108c:	00 00                	add    BYTE PTR [rax],al
    108e:	00 00                	add    BYTE PTR [rax],al
    1090:	10 03                	adc    BYTE PTR [rbx],al
    1092:	01 08                	add    DWORD PTR [rax],ecx
    1094:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    1095:	00 00                	add    BYTE PTR [rax],al
    1097:	00 4c 80 1f          	add    BYTE PTR [rax+rax*4+0x1f],cl
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:689
	Q_strncpyz( infostring, Cvar_InfoString( CVAR_SERVERINFO, NULL ), sizeof( infostring ) );
    109b:	00 00                	add    BYTE PTR [rax],al
    109d:	00 00                	add    BYTE PTR [rax],al
    109f:	10 04 01             	adc    BYTE PTR [rcx+rax*1],al
    10a2:	08 6f 00             	or     BYTE PTR [rdi+0x0],ch
    10a5:	00 00                	add    BYTE PTR [rax],al
    10a7:	50                   	push   rax
    10a8:	80 1f 00             	sbb    BYTE PTR [rdi],0x0
    10ab:	00 00                	add    BYTE PTR [rax],al
    10ad:	00 10                	add    BYTE PTR [rax],dl
    10af:	06                   	(bad)  
    10b0:	01 0b                	add    DWORD PTR [rbx],ecx
    10b2:	83 04 00 00          	add    DWORD PTR [rax+rax*1],0x0
    10b6:	54                   	push   rsp
    10b7:	80 1f 00             	sbb    BYTE PTR [rdi],0x0
    10ba:	00 00                	add    BYTE PTR [rax],al
    10bc:	00 10                	add    BYTE PTR [rax],dl
    10be:	07                   	(bad)  
    10bf:	01 0b                	add    DWORD PTR [rbx],ecx
    10c1:	83 04 00 00          	add    DWORD PTR [rax+rax*1],0x0
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:693
	Info_SetValueForKey( infostring, "challenge", Cmd_Argv( 1 ) );
    10c5:	58                   	pop    rax
    10c6:	80 00 06             	add    BYTE PTR [rax],0x6
    10c9:	57                   	push   rdi
    10ca:	04 00                	add    al,0x0
    10cc:	00 d9                	add    cl,bl
    10ce:	10 00                	adc    BYTE PTR [rax],al
    10d0:	00 18                	add    BYTE PTR [rax],bl
    10d2:	42 00 00             	rex.X add BYTE PTR [rax],al
    10d5:	00 ff                	add    bh,bh
    10d7:	3f                   	(bad)  
    10d8:	00 16                	add    BYTE PTR [rsi],dl
    10da:	00 00                	add    BYTE PTR [rax],al
    10dc:	00 00                	add    BYTE PTR [rax],al
    10de:	10 09                	adc    BYTE PTR [rcx],cl
    10e0:	01 03                	add    DWORD PTR [rbx],eax
    10e2:	c4                   	(bad)  
    10e3:	0f 00 00             	sldt   WORD PTR [rax]
    10e6:	06                   	(bad)  
    10e7:	76 00                	jbe    10e9 <.debug_info+0x10e9>
    10e9:	00 00                	add    BYTE PTR [rax],al
    10eb:	f1                   	icebp  
    10ec:	10 00                	adc    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:695
	s = status;
    10ee:	00 13                	add    BYTE PTR [rbx],dl
    10f0:	00 05 e6 10 00 00    	add    BYTE PTR [rip+0x10e6],al        # 21dc <.debug_info+0x21dc>
    10f6:	0a 00                	or     al,BYTE PTR [rax]
    10f8:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:696
	status[0] = '\0';
    10fa:	00 10                	add    BYTE PTR [rax],dl
    10fc:	24 01                	and    al,0x1
    10fe:	12 f1                	adc    dh,cl
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:697
	statusLength = strlen( infostring ) + 16; // strlen( "statusResponse\n\n" )
    1100:	10 00                	adc    BYTE PTR [rax],al
    1102:	00 16                	add    BYTE PTR [rsi],dl
    1104:	00 00                	add    BYTE PTR [rax],al
    1106:	00 00                	add    BYTE PTR [rax],al
    1108:	10 66 01             	adc    BYTE PTR [rsi+0x1],ah
    110b:	15 10 11 00 00       	adc    eax,0x1110
    1110:	0e                   	(bad)  
    1111:	00 00                	add    BYTE PTR [rax],al
    1113:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:699
	for ( i = 0 ; i < sv_maxclients->integer ; i++ ) {
    1115:	c8 11 ac 08          	enter  0xac11,0x8
    1119:	be 12 00 00 0f       	mov    esi,0xf000012
    111e:	00 00                	add    BYTE PTR [rax],al
    1120:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:700
		cl = &svs.clients[i];
    1122:	11 ae 0c be 06 00    	adc    DWORD PTR [rsi+0x6be0c],ebp
    1128:	00 00                	add    BYTE PTR [rax],al
    112a:	0f 00 00             	sldt   WORD PTR [rax]
    112d:	00 00                	add    BYTE PTR [rax],al
    112f:	11 af 09 c1 0e 00    	adc    DWORD PTR [rdi+0xec109],ebp
    1135:	00 08                	add    BYTE PTR [rax],cl
    1137:	0f 00 00             	sldt   WORD PTR [rax]
    113a:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:701
		if ( cl->state >= CS_CONNECTED ) {
    113c:	11 b0 0c ce 03 00    	adc    DWORD PTR [rax+0x3ce0c],esi
    1142:	00 10                	add    BYTE PTR [rax],dl
    1144:	0f 00 00             	sldt   WORD PTR [rax]
    1147:	00 00                	add    BYTE PTR [rax],al
    1149:	11 b1 0c ce 03 00    	adc    DWORD PTR [rcx+0x3ce0c],esi
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:703
			ps = SV_GameClientNum( i );
    114f:	00 18                	add    BYTE PTR [rax],bl
    1151:	0f 00 00             	sldt   WORD PTR [rax]
    1154:	00 00                	add    BYTE PTR [rax],al
    1156:	11 b3 08 6f 00 00    	adc    DWORD PTR [rbx+0x6f08],esi
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:705
				ps->persistant[ PERS_SCORE ], cl->ping, cl->name );
    115c:	00 20                	add    BYTE PTR [rax],ah
    115e:	0f 00 00             	sldt   WORD PTR [rax]
    1161:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:704
			playerLength = Com_sprintf( player, sizeof( player ), "%i %i \"%s\"\n", 
    1163:	11 b4 08 6f 00 00 00 	adc    DWORD PTR [rax+rcx*1+0x6f],esi
    116a:	24 0f                	and    al,0xf
    116c:	00 00                	add    BYTE PTR [rax],al
    116e:	00 00                	add    BYTE PTR [rax],al
    1170:	11 b8 0e 8d 03 00    	adc    DWORD PTR [rax+0x38d0e],edi
    1176:	00 28                	add    BYTE PTR [rax],ch
    1178:	0f 00 00             	sldt   WORD PTR [rax]
    117b:	00 00                	add    BYTE PTR [rax],al
    117d:	11 b9 0c ec 12 00    	adc    DWORD PTR [rcx+0x12ec0c],edi
    1183:	00 30                	add    BYTE PTR [rax],dh
    1185:	0f 00 00             	sldt   WORD PTR [rax]
    1188:	00 00                	add    BYTE PTR [rax],al
    118a:	11 bc 09 b6 00 00 00 	adc    DWORD PTR [rcx+rcx*1+0xb6],edi
    1191:	38 0f                	cmp    BYTE PTR [rdi],cl
    1193:	00 00                	add    BYTE PTR [rax],al
    1195:	00 00                	add    BYTE PTR [rax],al
    1197:	11 bd 0f e6 06 00    	adc    DWORD PTR [rbp+0x6e60f],edi
    119d:	00 40 0f             	add    BYTE PTR [rax+0xf],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:707
			if ( statusLength + playerLength >= MAX_PACKETLEN-4 )
    11a0:	00 00                	add    BYTE PTR [rax],al
    11a2:	00 00                	add    BYTE PTR [rax],al
    11a4:	11 be 0f e6 06 00    	adc    DWORD PTR [rsi+0x6e60f],edi
    11aa:	00 48 0f             	add    BYTE PTR [rax+0xf],cl
    11ad:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:710
			s = Q_stradd( s, player );
    11af:	00 00                	add    BYTE PTR [rax],al
    11b1:	11 bf 09 9d 16 00    	adc    DWORD PTR [rdi+0x169d09],edi
    11b7:	00 50 0f             	add    BYTE PTR [rax+0xf],dl
    11ba:	00 00                	add    BYTE PTR [rax],al
    11bc:	00 00                	add    BYTE PTR [rax],al
    11be:	11 c4                	adc    esp,eax
    11c0:	0b 83 04 00 00 58    	or     eax,DWORD PTR [rbx+0x58000004]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:711
			statusLength += playerLength;
    11c6:	0f 00 00             	sldt   WORD PTR [rax]
    11c9:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:699 (discriminator 2)
	for ( i = 0 ; i < sv_maxclients->integer ; i++ ) {
    11cb:	11 c6                	adc    esi,eax
    11cd:	0b 80 16 00 00 60    	or     eax,DWORD PTR [rax+0x60000016]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:699 (discriminator 1)
    11d3:	0f 00 00             	sldt   WORD PTR [rax]
    11d6:	00 00                	add    BYTE PTR [rax],al
    11d8:	11 c7                	adc    edi,eax
    11da:	0f 3b                	(bad)  
    11dc:	00 00                	add    BYTE PTR [rax],al
    11de:	00 68 0f             	add    BYTE PTR [rax+0xf],ch
    11e1:	00 00                	add    BYTE PTR [rax],al
    11e3:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:715 (discriminator 1)
	NET_OutOfBandPrint( NS_SERVER, from, "statusResponse\n%s\n%s", infostring, status );
    11e5:	11 c8                	adc    eax,ecx
    11e7:	0f 3b                	(bad)  
    11e9:	00 00                	add    BYTE PTR [rax],al
    11eb:	00 6c 0f 00          	add    BYTE PTR [rdi+rcx*1+0x0],ch
    11ef:	00 00                	add    BYTE PTR [rax],al
    11f1:	00 11                	add    BYTE PTR [rcx],dl
    11f3:	ca 08 6f             	retf   0x6f08
    11f6:	00 00                	add    BYTE PTR [rax],al
    11f8:	00 70 0f             	add    BYTE PTR [rax+0xf],dh
    11fb:	00 00                	add    BYTE PTR [rax],al
    11fd:	00 00                	add    BYTE PTR [rax],al
    11ff:	11 cb                	adc    ebx,ecx
    1201:	0c e0                	or     al,0xe0
    1203:	06                   	(bad)  
    1204:	00 00                	add    BYTE PTR [rax],al
    1206:	78 0f                	js     1217 <.debug_info+0x1217>
    1208:	00 00                	add    BYTE PTR [rax],al
    120a:	00 00                	add    BYTE PTR [rax],al
    120c:	11 cd                	adc    ebp,ecx
    120e:	0f 3b                	(bad)  
    1210:	00 00                	add    BYTE PTR [rax],al
    1212:	00 80 0f 00 00 00    	add    BYTE PTR [rax+0xf],al
    1218:	00 11                	add    BYTE PTR [rcx],dl
    121a:	ce                   	(bad)  
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:675
		return;
    121b:	0f 3b                	(bad)  
    121d:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:716
}
    121f:	00 84 0f 00 00 00 00 	add    BYTE PTR [rdi+rcx*1+0x0],al
SVC_Info():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:727
static void SVC_Info( const netadr_t *from ) {
    1226:	11 cf                	adc    edi,ecx
    1228:	0f 3b                	(bad)  
    122a:	00 00                	add    BYTE PTR [rax],al
    122c:	00 88 0f 00 00 00    	add    BYTE PTR [rax+0xf],cl
    1232:	00 11                	add    BYTE PTR [rcx],dl
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:740
	if ( SVC_RateLimitAddress( from, 10, 1000 ) ) {
    1234:	d0 0f                	ror    BYTE PTR [rdi],1
    1236:	3b 00                	cmp    eax,DWORD PTR [rax]
    1238:	00 00                	add    BYTE PTR [rax],al
    123a:	8c 0f                	mov    WORD PTR [rdi],cs
    123c:	00 00                	add    BYTE PTR [rax],al
    123e:	00 00                	add    BYTE PTR [rax],al
    1240:	11 d2                	adc    edx,edx
    1242:	08 6f 00             	or     BYTE PTR [rdi+0x0],ch
    1245:	00 00                	add    BYTE PTR [rax],al
    1247:	90                   	nop
    1248:	0f 00 00             	sldt   WORD PTR [rax]
    124b:	00 00                	add    BYTE PTR [rax],al
    124d:	11 d3                	adc    ebx,edx
    124f:	0e                   	(bad)  
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:741
		if ( com_developer->integer ) {
    1250:	a3 16 00 00 98 0f 00 	movabs ds:0xf98000016,eax
    1257:	00 00 
    1259:	00 11                	add    BYTE PTR [rcx],dl
    125b:	d5                   	(bad)  
    125c:	08 6f 00             	or     BYTE PTR [rdi+0x0],ch
    125f:	00 00                	add    BYTE PTR [rax],al
    1261:	a0 0f 00 00 00 00 11 	movabs al,ds:0x8d611000000000f
    1268:	d6 08 
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:742
			Com_Printf( "SVC_Info: rate limit from %s exceeded, dropping request\n",
    126a:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    126b:	00 00                	add    BYTE PTR [rax],al
    126d:	00 a4 0f 00 00 00 00 	add    BYTE PTR [rdi+rcx*1+0x0],ah
    1274:	11 d7                	adc    edi,edx
    1276:	08 6f 00             	or     BYTE PTR [rdi+0x0],ch
    1279:	00 00                	add    BYTE PTR [rax],al
    127b:	a8 0f                	test   al,0xf
    127d:	00 00                	add    BYTE PTR [rax],al
    127f:	00 00                	add    BYTE PTR [rax],al
    1281:	11 d9                	adc    ecx,ebx
    1283:	0c ce                	or     al,0xce
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:745
		return;
    1285:	03 00                	add    eax,DWORD PTR [rax]
    1287:	00 b0 0f 00 00 00    	add    BYTE PTR [rax+0xf],dh
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:750
	if ( SVC_RateLimit( &outboundRateLimit, 10, 100 ) ) {
    128d:	00 11                	add    BYTE PTR [rcx],dl
    128f:	da 08                	fimul  DWORD PTR [rax]
    1291:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    1292:	00 00                	add    BYTE PTR [rax],al
    1294:	00 b8 0f 00 00 00    	add    BYTE PTR [rax+0xf],bh
    129a:	00 11                	add    BYTE PTR [rcx],dl
    129c:	dc 0b                	fmul   QWORD PTR [rbx]
    129e:	3f                   	(bad)  
    129f:	04 00                	add    al,0x0
    12a1:	00 bc 0f 00 00 00 00 	add    BYTE PTR [rdi+rcx*1+0x0],bh
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:751
		Com_DPrintf( "SVC_Info: rate limit exceeded, dropping request\n" );
    12a8:	11 de                	adc    esi,ebx
    12aa:	0b 83 04 00 00 c0    	or     eax,DWORD PTR [rbx-0x3ffffffc]
    12b0:	0f 00 00             	sldt   WORD PTR [rax]
    12b3:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:752
		return;
    12b5:	11 e0                	adc    eax,esp
    12b7:	08 6f 00             	or     BYTE PTR [rdi+0x0],ch
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:761
	if ( strlen( Cmd_Argv( 1 ) ) > 128 )
    12ba:	00 00                	add    BYTE PTR [rax],al
    12bc:	c4                   	(bad)  
    12bd:	00 17                	add    BYTE PTR [rdi],dl
    12bf:	05 04 6f 00 00       	add    eax,0x6f04
    12c4:	00 10                	add    BYTE PTR [rax],dl
    12c6:	78 01                	js     12c9 <.debug_info+0x12c9>
    12c8:	0e                   	(bad)  
    12c9:	ec                   	in     al,dx
    12ca:	12 00                	adc    al,BYTE PTR [rax]
    12cc:	00 28                	add    BYTE PTR [rax],ch
    12ce:	00 00                	add    BYTE PTR [rax],al
    12d0:	00 00                	add    BYTE PTR [rax],al
    12d2:	7f 15                	jg     12e9 <.debug_info+0x12e9>
    12d4:	00 00                	add    BYTE PTR [rax],al
    12d6:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:765
	count = humans = 0;
    12d8:	00 15 00 00 00 00    	add    BYTE PTR [rip+0x0],dl        # 12de <.debug_info+0x12de>
    12de:	01 15 00 00 00 00    	add    DWORD PTR [rip+0x0],edx        # 12e4 <.debug_info+0x12e4>
    12e4:	02 15 00 00 00 00    	add    dl,BYTE PTR [rip+0x0]        # 12ea <.debug_info+0x12ea>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:766
	for ( i = sv_privateClients->integer ; i < sv_maxclients->integer ; i++ ) {
    12ea:	03 00                	add    eax,DWORD PTR [rax]
    12ec:	16                   	(bad)  
    12ed:	00 00                	add    BYTE PTR [rax],al
    12ef:	00 00                	add    BYTE PTR [rax],al
    12f1:	10 80 01 03 be 12    	adc    BYTE PTR [rax+0x12be0301],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:767
		if ( svs.clients[i].state >= CS_CONNECTED ) {
    12f7:	00 00                	add    BYTE PTR [rax],al
    12f9:	09 08                	or     DWORD PTR [rax],ecx
    12fb:	ff 12                	call   QWORD PTR [rdx]
    12fd:	00 00                	add    BYTE PTR [rax],al
    12ff:	29 0a                	sub    DWORD PTR [rdx],ecx
    1301:	00 00                	add    BYTE PTR [rax],al
    1303:	00 00                	add    BYTE PTR [rax],al
    1305:	10 6c 02 0e          	adc    BYTE PTR [rdx+rax*1+0xe],ch
    1309:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    130a:	00 00                	add    BYTE PTR [rax],al
    130c:	00 0a                	add    BYTE PTR [rdx],cl
    130e:	00 00                	add    BYTE PTR [rax],al
    1310:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:768
			count++;
    1312:	10 e7                	adc    bh,ah
    1314:	02 0c 6f             	add    cl,BYTE PTR [rdi+rbp*2]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:769
			if (svs.clients[i].netchan.remoteAddress.type != NA_BOT) {
    1317:	00 00                	add    BYTE PTR [rax],al
    1319:	00 0a                	add    BYTE PTR [rdx],cl
    131b:	00 00                	add    BYTE PTR [rax],al
    131d:	00 00                	add    BYTE PTR [rax],al
    131f:	10 e9                	adc    cl,ch
    1321:	02 11                	add    dl,BYTE PTR [rcx]
    1323:	83 04 00 00          	add    DWORD PTR [rax+rax*1],0x0
    1327:	06                   	(bad)  
    1328:	be 00 00 00 37       	mov    esi,0x37000000
    132d:	13 00                	adc    eax,DWORD PTR [rax]
    132f:	00 07                	add    BYTE PTR [rdi],al
    1331:	42 00 00             	rex.X add BYTE PTR [rax],al
    1334:	00 21                	add    BYTE PTR [rcx],ah
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:770
				humans++;
    1336:	00 0a                	add    BYTE PTR [rdx],cl
    1338:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:766 (discriminator 2)
	for ( i = sv_privateClients->integer ; i < sv_maxclients->integer ; i++ ) {
    133a:	00 00                	add    BYTE PTR [rax],al
    133c:	10 85 03 0d 27 13    	adc    BYTE PTR [rbp+0x13270d03],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:766 (discriminator 1)
    1342:	00 00                	add    BYTE PTR [rax],al
    1344:	0a 00                	or     al,BYTE PTR [rax]
    1346:	00 00                	add    BYTE PTR [rax],al
    1348:	00 10                	add    BYTE PTR [rax],dl
    134a:	88 03                	mov    BYTE PTR [rbx],al
    134c:	0d a5 08 00 00       	or     eax,0x8a5
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:775
	infostring[0] = '\0';
    1351:	0a 00                	or     al,BYTE PTR [rax]
    1353:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:779
	Info_SetValueForKey( infostring, "challenge", Cmd_Argv(1) );
    1355:	00 10                	add    BYTE PTR [rax],dl
    1357:	8a 03                	mov    al,BYTE PTR [rbx]
    1359:	0c 6f                	or     al,0x6f
    135b:	00 00                	add    BYTE PTR [rax],al
    135d:	00 0a                	add    BYTE PTR [rdx],cl
    135f:	00 00                	add    BYTE PTR [rax],al
    1361:	00 00                	add    BYTE PTR [rax],al
    1363:	10 dd                	adc    ch,bl
    1365:	03 10                	add    edx,DWORD PTR [rax]
    1367:	9f                   	lahf   
    1368:	08 00                	or     BYTE PTR [rax],al
    136a:	00 0a                	add    BYTE PTR [rdx],cl
    136c:	00 00                	add    BYTE PTR [rax],al
    136e:	00 00                	add    BYTE PTR [rax],al
    1370:	10 de                	adc    dh,bl
    1372:	03 10                	add    edx,DWORD PTR [rax]
    1374:	9f                   	lahf   
    1375:	08 00                	or     BYTE PTR [rax],al
    1377:	00 0a                	add    BYTE PTR [rdx],cl
    1379:	00 00                	add    BYTE PTR [rax],al
    137b:	00 00                	add    BYTE PTR [rax],al
    137d:	10 df                	adc    bh,bl
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:781
	Info_SetValueForKey( infostring, "protocol", com_protocol->string );
    137f:	03 10                	add    edx,DWORD PTR [rax]
    1381:	9f                   	lahf   
    1382:	08 00                	or     BYTE PTR [rax],al
    1384:	00 0a                	add    BYTE PTR [rdx],cl
    1386:	00 00                	add    BYTE PTR [rax],al
    1388:	00 00                	add    BYTE PTR [rax],al
    138a:	10 e0                	adc    al,ah
    138c:	03 10                	add    edx,DWORD PTR [rax]
    138e:	9f                   	lahf   
    138f:	08 00                	or     BYTE PTR [rax],al
    1391:	00 0a                	add    BYTE PTR [rdx],cl
    1393:	00 00                	add    BYTE PTR [rax],al
    1395:	00 00                	add    BYTE PTR [rax],al
    1397:	10 e1                	adc    cl,ah
    1399:	03 10                	add    edx,DWORD PTR [rax]
    139b:	9f                   	lahf   
    139c:	08 00                	or     BYTE PTR [rax],al
    139e:	00 0a                	add    BYTE PTR [rdx],cl
    13a0:	00 00                	add    BYTE PTR [rax],al
    13a2:	00 00                	add    BYTE PTR [rax],al
    13a4:	10 e2                	adc    dl,ah
    13a6:	03 10                	add    edx,DWORD PTR [rax]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:782
	Info_SetValueForKey( infostring, "hostname", sv_hostname->string );
    13a8:	9f                   	lahf   
    13a9:	08 00                	or     BYTE PTR [rax],al
    13ab:	00 0a                	add    BYTE PTR [rdx],cl
    13ad:	00 00                	add    BYTE PTR [rax],al
    13af:	00 00                	add    BYTE PTR [rax],al
    13b1:	10 e3                	adc    bl,ah
    13b3:	03 10                	add    edx,DWORD PTR [rax]
    13b5:	9f                   	lahf   
    13b6:	08 00                	or     BYTE PTR [rax],al
    13b8:	00 0a                	add    BYTE PTR [rdx],cl
    13ba:	00 00                	add    BYTE PTR [rax],al
    13bc:	00 00                	add    BYTE PTR [rax],al
    13be:	10 e4                	adc    ah,ah
    13c0:	03 10                	add    edx,DWORD PTR [rax]
    13c2:	9f                   	lahf   
    13c3:	08 00                	or     BYTE PTR [rax],al
    13c5:	00 0a                	add    BYTE PTR [rdx],cl
    13c7:	00 00                	add    BYTE PTR [rax],al
    13c9:	00 00                	add    BYTE PTR [rax],al
    13cb:	10 e5                	adc    ch,ah
    13cd:	03 10                	add    edx,DWORD PTR [rax]
    13cf:	9f                   	lahf   
    13d0:	08 00                	or     BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:783
	Info_SetValueForKey( infostring, "mapname", sv_mapname->string );
    13d2:	00 0a                	add    BYTE PTR [rdx],cl
    13d4:	00 00                	add    BYTE PTR [rax],al
    13d6:	00 00                	add    BYTE PTR [rax],al
    13d8:	10 e6                	adc    dh,ah
    13da:	03 10                	add    edx,DWORD PTR [rax]
    13dc:	9f                   	lahf   
    13dd:	08 00                	or     BYTE PTR [rax],al
    13df:	00 0a                	add    BYTE PTR [rdx],cl
    13e1:	00 00                	add    BYTE PTR [rax],al
    13e3:	00 00                	add    BYTE PTR [rax],al
    13e5:	10 e7                	adc    bh,ah
    13e7:	03 10                	add    edx,DWORD PTR [rax]
    13e9:	9f                   	lahf   
    13ea:	08 00                	or     BYTE PTR [rax],al
    13ec:	00 0a                	add    BYTE PTR [rdx],cl
    13ee:	00 00                	add    BYTE PTR [rax],al
    13f0:	00 00                	add    BYTE PTR [rax],al
    13f2:	10 ea                	adc    dl,ch
    13f4:	03 10                	add    edx,DWORD PTR [rax]
    13f6:	9f                   	lahf   
    13f7:	08 00                	or     BYTE PTR [rax],al
    13f9:	00 0a                	add    BYTE PTR [rdx],cl
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:784
	Info_SetValueForKey( infostring, "clients", va("%i", count) );
    13fb:	00 00                	add    BYTE PTR [rax],al
    13fd:	00 00                	add    BYTE PTR [rax],al
    13ff:	10 eb                	adc    bl,ch
    1401:	03 10                	add    edx,DWORD PTR [rax]
    1403:	9f                   	lahf   
    1404:	08 00                	or     BYTE PTR [rax],al
    1406:	00 0a                	add    BYTE PTR [rdx],cl
    1408:	00 00                	add    BYTE PTR [rax],al
    140a:	00 00                	add    BYTE PTR [rax],al
    140c:	10 ec                	adc    ah,ch
    140e:	03 10                	add    edx,DWORD PTR [rax]
    1410:	9f                   	lahf   
    1411:	08 00                	or     BYTE PTR [rax],al
    1413:	00 0a                	add    BYTE PTR [rdx],cl
    1415:	00 00                	add    BYTE PTR [rax],al
    1417:	00 00                	add    BYTE PTR [rax],al
    1419:	10 f5                	adc    ch,dh
    141b:	03 10                	add    edx,DWORD PTR [rax]
    141d:	9f                   	lahf   
    141e:	08 00                	or     BYTE PTR [rax],al
    1420:	00 0a                	add    BYTE PTR [rdx],cl
    1422:	00 00                	add    BYTE PTR [rax],al
    1424:	00 00                	add    BYTE PTR [rax],al
    1426:	10 f7                	adc    bh,dh
    1428:	03 10                	add    edx,DWORD PTR [rax]
    142a:	9f                   	lahf   
    142b:	08 00                	or     BYTE PTR [rax],al
    142d:	00 0a                	add    BYTE PTR [rdx],cl
    142f:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:785
	Info_SetValueForKey(infostring, "g_humanplayers", va("%i", humans));
    1431:	00 00                	add    BYTE PTR [rax],al
    1433:	10 fb                	adc    bl,bh
    1435:	03 0d 6f 00 00 00    	add    ecx,DWORD PTR [rip+0x6f]        # 14aa <.debug_info+0x14aa>
    143b:	0a 00                	or     al,BYTE PTR [rax]
    143d:	00 00                	add    BYTE PTR [rax],al
    143f:	00 10                	add    BYTE PTR [rax],dl
    1441:	fc                   	cld    
    1442:	03 0d 6f 00 00 00    	add    ecx,DWORD PTR [rip+0x6f]        # 14b7 <.debug_info+0x14b7>
    1448:	0a 00                	or     al,BYTE PTR [rax]
    144a:	00 00                	add    BYTE PTR [rax],al
    144c:	00 10                	add    BYTE PTR [rax],dl
    144e:	fd                   	std    
    144f:	03 0d 6f 00 00 00    	add    ecx,DWORD PTR [rip+0x6f]        # 14c4 <.debug_info+0x14c4>
    1455:	0a 00                	or     al,BYTE PTR [rax]
    1457:	00 00                	add    BYTE PTR [rax],al
    1459:	00 10                	add    BYTE PTR [rax],dl
    145b:	ff 03                	inc    DWORD PTR [rbx]
    145d:	0d 6f 00 00 00       	or     eax,0x6f
    1462:	0a 00                	or     al,BYTE PTR [rax]
    1464:	00 00                	add    BYTE PTR [rax],al
    1466:	00 10                	add    BYTE PTR [rax],dl
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:786
	Info_SetValueForKey( infostring, "sv_maxclients", 
    1468:	06                   	(bad)  
    1469:	04 11                	add    al,0x11
    146b:	83 04 00 00          	add    DWORD PTR [rax+rax*1],0x0
    146f:	0a 00                	or     al,BYTE PTR [rax]
    1471:	00 00                	add    BYTE PTR [rax],al
    1473:	00 10                	add    BYTE PTR [rax],dl
    1475:	08 04 15 9f 04 00 00 	or     BYTE PTR [rdx*1+0x49f],al
    147c:	0a 00                	or     al,BYTE PTR [rax]
    147e:	00 00                	add    BYTE PTR [rax],al
    1480:	00 10                	add    BYTE PTR [rax],dl
    1482:	0a 04 0d a5 08 00 00 	or     al,BYTE PTR [rcx*1+0x8a5]
    1489:	14 07                	adc    al,0x7
    148b:	04 3b                	add    al,0x3b
    148d:	00 00                	add    BYTE PTR [rax],al
    148f:	00 11                	add    BYTE PTR [rcx],dl
    1491:	39 0e                	cmp    DWORD PTR [rsi],ecx
    1493:	06                   	(bad)  
    1494:	16                   	(bad)  
    1495:	00 00                	add    BYTE PTR [rax],al
    1497:	15 00 00 00 00       	adc    eax,0x0
    149c:	00 15 00 00 00 00    	add    BYTE PTR [rip+0x0],dl        # 14a2 <.debug_info+0x14a2>
    14a2:	01 15 00 00 00 00    	add    DWORD PTR [rip+0x0],edx        # 14a8 <.debug_info+0x14a8>
    14a8:	02 15 00 00 00 00    	add    dl,BYTE PTR [rip+0x0]        # 14ae <.debug_info+0x14ae>
    14ae:	03 15 00 00 00 00    	add    edx,DWORD PTR [rip+0x0]        # 14b4 <.debug_info+0x14b4>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:788
	Info_SetValueForKey( infostring, "gametype", va("%i", sv_gametype->integer ) );
    14b4:	04 15                	add    al,0x15
    14b6:	00 00                	add    BYTE PTR [rax],al
    14b8:	00 00                	add    BYTE PTR [rax],al
    14ba:	05 15 00 00 00       	add    eax,0x15
    14bf:	00 06                	add    BYTE PTR [rsi],al
    14c1:	15 00 00 00 00       	adc    eax,0x0
    14c6:	07                   	(bad)  
    14c7:	15 00 00 00 00       	adc    eax,0x0
    14cc:	08 15 00 00 00 00    	or     BYTE PTR [rip+0x0],dl        # 14d2 <.debug_info+0x14d2>
    14d2:	09 15 00 00 00 00    	or     DWORD PTR [rip+0x0],edx        # 14d8 <.debug_info+0x14d8>
    14d8:	0a 15 00 00 00 00    	or     dl,BYTE PTR [rip+0x0]        # 14de <.debug_info+0x14de>
    14de:	0b 15 00 00 00 00    	or     edx,DWORD PTR [rip+0x0]        # 14e4 <.debug_info+0x14e4>
    14e4:	0c 15                	or     al,0x15
    14e6:	00 00                	add    BYTE PTR [rax],al
    14e8:	00 00                	add    BYTE PTR [rax],al
    14ea:	0d 15 00 00 00       	or     eax,0x15
    14ef:	00 0e                	add    BYTE PTR [rsi],cl
    14f1:	15 00 00 00 00       	adc    eax,0x0
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:789
	Info_SetValueForKey( infostring, "pure", va("%i", sv_pure->integer ) );
    14f6:	0f 15 00             	unpckhps xmm0,XMMWORD PTR [rax]
    14f9:	00 00                	add    BYTE PTR [rax],al
    14fb:	00 10                	add    BYTE PTR [rax],dl
    14fd:	15 00 00 00 00       	adc    eax,0x0
    1502:	11 15 00 00 00 00    	adc    DWORD PTR [rip+0x0],edx        # 1508 <.debug_info+0x1508>
    1508:	12 15 00 00 00 00    	adc    dl,BYTE PTR [rip+0x0]        # 150e <.debug_info+0x150e>
    150e:	13 15 00 00 00 00    	adc    edx,DWORD PTR [rip+0x0]        # 1514 <.debug_info+0x1514>
    1514:	14 15                	adc    al,0x15
    1516:	00 00                	add    BYTE PTR [rax],al
    1518:	00 00                	add    BYTE PTR [rax],al
    151a:	15 15 00 00 00       	adc    eax,0x15
    151f:	00 16                	add    BYTE PTR [rsi],dl
    1521:	15 00 00 00 00       	adc    eax,0x0
    1526:	17                   	(bad)  
    1527:	15 00 00 00 00       	adc    eax,0x0
    152c:	18 15 00 00 00 00    	sbb    BYTE PTR [rip+0x0],dl        # 1532 <.debug_info+0x1532>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:790
	Info_SetValueForKey(infostring, "g_needpass", va("%d", Cvar_VariableIntegerValue("g_needpass")));
    1532:	19 15 00 00 00 00    	sbb    DWORD PTR [rip+0x0],edx        # 1538 <.debug_info+0x1538>
    1538:	1a 15 00 00 00 00    	sbb    dl,BYTE PTR [rip+0x0]        # 153e <.debug_info+0x153e>
    153e:	1b 15 00 00 00 00    	sbb    edx,DWORD PTR [rip+0x0]        # 1544 <.debug_info+0x1544>
    1544:	1c 15                	sbb    al,0x15
    1546:	00 00                	add    BYTE PTR [rax],al
    1548:	00 00                	add    BYTE PTR [rax],al
    154a:	1d 15 00 00 00       	sbb    eax,0x15
    154f:	00 1e                	add    BYTE PTR [rsi],bl
    1551:	15 00 00 00 00       	adc    eax,0x0
    1556:	1f                   	(bad)  
    1557:	15 00 00 00 00       	adc    eax,0x0
    155c:	20 15 00 00 00 00    	and    BYTE PTR [rip+0x0],dl        # 1562 <.debug_info+0x1562>
    1562:	21 15 00 00 00 00    	and    DWORD PTR [rip+0x0],edx        # 1568 <.debug_info+0x1568>
    1568:	22 15 00 00 00 00    	and    dl,BYTE PTR [rip+0x0]        # 156e <.debug_info+0x156e>
    156e:	23 15 00 00 00 00    	and    edx,DWORD PTR [rip+0x0]        # 1574 <.debug_info+0x1574>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:791
	gamedir = Cvar_VariableString( "fs_game" );
    1574:	24 15                	and    al,0x15
    1576:	00 00                	add    BYTE PTR [rax],al
    1578:	00 00                	add    BYTE PTR [rax],al
    157a:	25 15 00 00 00       	and    eax,0x15
    157f:	00 26                	add    BYTE PTR [rsi],ah
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:792
	if( *gamedir ) {
    1581:	15 00 00 00 00       	adc    eax,0x0
    1586:	27                   	(bad)  
    1587:	15 00 00 00 00       	adc    eax,0x0
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:793
		Info_SetValueForKey( infostring, "game", gamedir );
    158c:	28 15 00 00 00 00    	sub    BYTE PTR [rip+0x0],dl        # 1592 <.debug_info+0x1592>
    1592:	29 15 00 00 00 00    	sub    DWORD PTR [rip+0x0],edx        # 1598 <.debug_info+0x1598>
    1598:	2a 15 00 00 00 00    	sub    dl,BYTE PTR [rip+0x0]        # 159e <.debug_info+0x159e>
    159e:	2b 15 00 00 00 00    	sub    edx,DWORD PTR [rip+0x0]        # 15a4 <.debug_info+0x15a4>
    15a4:	2c 15                	sub    al,0x15
    15a6:	00 00                	add    BYTE PTR [rax],al
    15a8:	00 00                	add    BYTE PTR [rax],al
    15aa:	2d 15 00 00 00       	sub    eax,0x15
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:796
	NET_OutOfBandPrint( NS_SERVER, from, "infoResponse\n%s", infostring );
    15af:	00 2e                	add    BYTE PTR [rsi],ch
    15b1:	15 00 00 00 00       	adc    eax,0x0
    15b6:	2f                   	(bad)  
    15b7:	15 00 00 00 00       	adc    eax,0x0
    15bc:	30 15 00 00 00 00    	xor    BYTE PTR [rip+0x0],dl        # 15c2 <.debug_info+0x15c2>
    15c2:	31 15 00 00 00 00    	xor    DWORD PTR [rip+0x0],edx        # 15c8 <.debug_info+0x15c8>
    15c8:	32 15 00 00 00 00    	xor    dl,BYTE PTR [rip+0x0]        # 15ce <.debug_info+0x15ce>
    15ce:	33 15 00 00 00 00    	xor    edx,DWORD PTR [rip+0x0]        # 15d4 <.debug_info+0x15d4>
    15d4:	34 15                	xor    al,0x15
    15d6:	00 00                	add    BYTE PTR [rax],al
    15d8:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:745
		return;
    15da:	35 15 00 00 00       	xor    eax,0x15
SV_FlushRedirect():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:808
{
    15df:	00 36                	add    BYTE PTR [rsi],dh
    15e1:	15 00 00 00 00       	adc    eax,0x0
    15e6:	37                   	(bad)  
    15e7:	15 00 00 00 00       	adc    eax,0x0
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:809
	if ( *outputbuf )
    15ec:	38 15 00 00 00 00    	cmp    BYTE PTR [rip+0x0],dl        # 15f2 <.debug_info+0x15f2>
    15f2:	39 15 00 00 00 00    	cmp    DWORD PTR [rip+0x0],edx        # 15f8 <.debug_info+0x15f8>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:811
		NET_OutOfBandPrint( NS_SERVER, &redirectAddress, "print\n%s", outputbuf );
    15f8:	3a 15 00 00 00 00    	cmp    dl,BYTE PTR [rip+0x0]        # 15fe <.debug_info+0x15fe>
    15fe:	3b 15 00 00 00 00    	cmp    edx,DWORD PTR [rip+0x0]        # 1604 <.debug_info+0x1604>
    1604:	3c 00                	cmp    al,0x0
    1606:	0e                   	(bad)  
    1607:	00 00                	add    BYTE PTR [rax],al
    1609:	00 00                	add    BYTE PTR [rax],al
    160b:	18 11                	sbb    BYTE PTR [rcx],dl
    160d:	9e                   	sahf   
    160e:	10 48 16             	adc    BYTE PTR [rax+0x16],cl
    1611:	00 00                	add    BYTE PTR [rax],al
    1613:	0f 00 00             	sldt   WORD PTR [rax]
    1616:	00 00                	add    BYTE PTR [rax],al
    1618:	11 9f 15 48 16 00    	adc    DWORD PTR [rdi+0x164815],ebx
SVC_RemoteCommand():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:825
static void SVC_RemoteCommand( const netadr_t *from ) {
    161e:	00 00                	add    BYTE PTR [rax],al
    1620:	0f 00 00             	sldt   WORD PTR [rax]
    1623:	00 00                	add    BYTE PTR [rax],al
    1625:	11 a0 07 6f 00 00    	adc    DWORD PTR [rax+0x6f07],esp
    162b:	00 08                	add    BYTE PTR [rax],cl
    162d:	0f 00 00             	sldt   WORD PTR [rax]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:834
	if ( SVC_RateLimitAddress( from, 10, 1000 ) ) {
    1630:	00 00                	add    BYTE PTR [rax],al
    1632:	11 a1 07 6f 00 00    	adc    DWORD PTR [rcx+0x6f07],esp
    1638:	00 0c 0f             	add    BYTE PTR [rdi+rcx*1],cl
    163b:	00 00                	add    BYTE PTR [rax],al
    163d:	00 00                	add    BYTE PTR [rax],al
    163f:	11 a2 07 ff 02 00    	adc    DWORD PTR [rdx+0x2ff07],esp
    1645:	00 10                	add    BYTE PTR [rax],dl
    1647:	00 09                	add    BYTE PTR [rcx],cl
    1649:	08 06                	or     BYTE PTR [rsi],al
    164b:	16                   	(bad)  
    164c:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:835
		if ( com_developer->integer ) {
    164e:	03 00                	add    eax,DWORD PTR [rax]
    1650:	00 00                	add    BYTE PTR [rax],al
    1652:	00 11                	add    BYTE PTR [rcx],dl
    1654:	a3 03 06 16 00 00 2a 	movabs ds:0x2a0000160603,eax
    165b:	00 00 
    165d:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:836
			Com_Printf( "SVC_RemoteCommand: rate limit from %s exceeded, dropping request\n",
    165f:	08 11                	or     BYTE PTR [rcx],dl
    1661:	a7                   	cmps   DWORD PTR ds:[rsi],DWORD PTR es:[rdi]
    1662:	0f 80 16 00 00 25    	jo     2500167e <dlNextRound.8083+0x24f1ec96>
    1668:	70 74                	jo     16de <.debug_info+0x16de>
    166a:	72 00                	jb     166c <.debug_info+0x166c>
    166c:	11 a8 09 c1 0e 00    	adc    DWORD PTR [rax+0xec109],ebp
    1672:	00 2b                	add    BYTE PTR [rbx],ch
    1674:	00 00                	add    BYTE PTR [rax],al
    1676:	00 00                	add    BYTE PTR [rax],al
    1678:	11 a9 09 f9 12 00    	adc    DWORD PTR [rcx+0x12f909],ebp
    167e:	00 00                	add    BYTE PTR [rax],al
    1680:	03 00                	add    eax,DWORD PTR [rax]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:839
		return;
    1682:	00 00                	add    BYTE PTR [rax],al
    1684:	00 11                	add    BYTE PTR [rcx],dl
    1686:	aa                   	stos   BYTE PTR es:[rdi],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:842
	pw = Cmd_Argv( 1 );
    1687:	03 5a 16             	add    ebx,DWORD PTR [rdx+0x16]
    168a:	00 00                	add    BYTE PTR [rax],al
    168c:	2c 97                	sub    al,0x97
    168e:	16                   	(bad)  
    168f:	00 00                	add    BYTE PTR [rax],al
    1691:	1a 97 16 00 00 00    	sbb    dl,BYTE PTR [rdi+0x16]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:843
	if ( ( sv_rconPassword->string[0] && strcmp( pw, sv_rconPassword->string ) == 0 ) ||
    1697:	09 08                	or     DWORD PTR [rax],ecx
    1699:	03 11                	add    edx,DWORD PTR [rcx]
    169b:	00 00                	add    BYTE PTR [rax],al
    169d:	09 08                	or     DWORD PTR [rax],ecx
    169f:	8c 16                	mov    WORD PTR [rsi],ss
    16a1:	00 00                	add    BYTE PTR [rax],al
    16a3:	09 08                	or     DWORD PTR [rax],ecx
    16a5:	4e 16                	rex.WRX (bad) 
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:843 (discriminator 1)
    16a7:	00 00                	add    BYTE PTR [rax],al
    16a9:	0e                   	(bad)  
    16aa:	00 00                	add    BYTE PTR [rax],al
    16ac:	00 00                	add    BYTE PTR [rax],al
    16ae:	10 11                	adc    BYTE PTR [rcx],dl
    16b0:	f9                   	stc    
    16b1:	10 eb                	adc    bl,ch
    16b3:	16                   	(bad)  
    16b4:	00 00                	add    BYTE PTR [rax],al
    16b6:	0f 00 00             	sldt   WORD PTR [rax]
    16b9:	00 00                	add    BYTE PTR [rax],al
    16bb:	11 fb                	adc    ebx,edi
    16bd:	06                   	(bad)  
    16be:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    16bf:	00 00                	add    BYTE PTR [rax],al
    16c1:	00 00                	add    BYTE PTR [rax],al
    16c3:	0f 00 00             	sldt   WORD PTR [rax]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:844 (discriminator 3)
		( rconPassword2[0] && strcmp( pw, rconPassword2 ) == 0 ) ) {
    16c6:	00 00                	add    BYTE PTR [rax],al
    16c8:	11 fc                	adc    esp,edi
    16ca:	06                   	(bad)  
    16cb:	6f                   	outs   dx,DWORD PTR ds:[rsi]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:843 (discriminator 3)
	if ( ( sv_rconPassword->string[0] && strcmp( pw, sv_rconPassword->string ) == 0 ) ||
    16cc:	00 00                	add    BYTE PTR [rax],al
    16ce:	00 04 0f             	add    BYTE PTR [rdi+rcx*1],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:844
		( rconPassword2[0] && strcmp( pw, rconPassword2 ) == 0 ) ) {
    16d1:	00 00                	add    BYTE PTR [rax],al
    16d3:	00 00                	add    BYTE PTR [rax],al
    16d5:	11 fd                	adc    ebp,edi
    16d7:	06                   	(bad)  
    16d8:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    16d9:	00 00                	add    BYTE PTR [rax],al
    16db:	00 08                	add    BYTE PTR [rax],cl
    16dd:	0f 00 00             	sldt   WORD PTR [rax]
    16e0:	00 00                	add    BYTE PTR [rax],al
    16e2:	11 fe                	adc    esi,edi
    16e4:	06                   	(bad)  
    16e5:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    16e6:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:845
		valid = qtrue;
    16e8:	00 0c 00             	add    BYTE PTR [rax+rax*1],cl
    16eb:	03 00                	add    eax,DWORD PTR [rax]
    16ed:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:846
		Com_Printf( "Rcon from %s: %s\n", NET_AdrToString( from ), Cmd_ArgsFrom( 2 ) );
    16ef:	00 11                	add    BYTE PTR [rcx],dl
    16f1:	ff 03                	inc    DWORD PTR [rbx]
    16f3:	a9 16 00 00 06       	test   eax,0x6000016
    16f8:	eb 16                	jmp    1710 <.debug_info+0x1710>
    16fa:	00 00                	add    BYTE PTR [rax],al
    16fc:	07                   	(bad)  
    16fd:	17                   	(bad)  
    16fe:	00 00                	add    BYTE PTR [rax],al
    1700:	07                   	(bad)  
    1701:	42 00 00             	rex.X add BYTE PTR [rax],al
    1704:	00 3b                	add    BYTE PTR [rbx],bh
    1706:	00 2d 6f 70 73 00    	add    BYTE PTR [rip+0x73706f],ch        # 73877b <dlNextRound.8083+0x655d93>
    170c:	11 01                	adc    DWORD PTR [rcx],eax
    170e:	01 16                	add    DWORD PTR [rsi],edx
    1710:	f7 16                	not    DWORD PTR [rsi]
    1712:	00 00                	add    BYTE PTR [rax],al
    1714:	26 34 01             	es xor al,0x1
    1717:	12 38                	adc    bh,BYTE PTR [rax]
    1719:	09 d8                	or     eax,ebx
    171b:	17                   	(bad)  
    171c:	00 00                	add    BYTE PTR [rax],al
    171e:	23 73 00             	and    esi,DWORD PTR [rbx+0x0]
    1721:	12 39                	adc    bh,BYTE PTR [rcx]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:849
		if ( SVC_RateLimit( &bucket, 10, 1000 ) ) {
    1723:	10 25 0e 00 00 00    	adc    BYTE PTR [rip+0xe],ah        # 1737 <.debug_info+0x1737>
    1729:	0f 00 00             	sldt   WORD PTR [rax]
    172c:	00 00                	add    BYTE PTR [rax],al
    172e:	12 3b                	adc    bh,BYTE PTR [rbx]
    1730:	0b 83 04 00 00 d0    	or     eax,DWORD PTR [rbx-0x2ffffffc]
    1736:	0f 00 00             	sldt   WORD PTR [rax]
    1739:	00 00                	add    BYTE PTR [rax],al
    173b:	12 3c 08             	adc    bh,BYTE PTR [rax+rcx*1]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:850
			Com_DPrintf( "SVC_RemoteCommand: rate limit exceeded, dropping request\n" );
    173e:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    173f:	00 00                	add    BYTE PTR [rax],al
    1741:	00 d4                	add    ah,dl
    1743:	0f 00 00             	sldt   WORD PTR [rax]
    1746:	00 00                	add    BYTE PTR [rax],al
    1748:	12 3e                	adc    bh,BYTE PTR [rsi]
    174a:	08 6f 00             	or     BYTE PTR [rdi+0x0],ch
    174d:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:851
			return;
    174f:	d8 0f                	fmul   DWORD PTR [rdi]
    1751:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:854
		valid = qfalse;
    1753:	00 00                	add    BYTE PTR [rax],al
    1755:	12 42 08             	adc    al,BYTE PTR [rdx+0x8]
    1758:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    1759:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:855
		Com_Printf( "Bad rcon from %s: %s\n", NET_AdrToString( from ), Cmd_ArgsFrom( 2 ) );
    175b:	00 dc                	add    ah,bl
    175d:	0f 00 00             	sldt   WORD PTR [rax]
    1760:	00 00                	add    BYTE PTR [rax],al
    1762:	12 44 0b 83          	adc    al,BYTE PTR [rbx+rcx*1-0x7d]
    1766:	04 00                	add    al,0x0
    1768:	00 e0                	add    al,ah
    176a:	0f 00 00             	sldt   WORD PTR [rax]
    176d:	00 00                	add    BYTE PTR [rax],al
    176f:	12 46 0a             	adc    al,BYTE PTR [rsi+0xa]
    1772:	bd 04 00 00 e4       	mov    ebp,0xe4000004
    1777:	0f 00 00             	sldt   WORD PTR [rax]
    177a:	00 00                	add    BYTE PTR [rax],al
    177c:	12 46 10             	adc    al,BYTE PTR [rsi+0x10]
    177f:	bd 04 00 00 f0       	mov    ebp,0xf0000004
    1784:	0f 00 00             	sldt   WORD PTR [rax]
    1787:	00 00                	add    BYTE PTR [rax],al
    1789:	12 47 08             	adc    al,BYTE PTR [rdi+0x8]
    178c:	6f                   	outs   dx,DWORD PTR ds:[rsi]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:859
	redirectAddress = *from;
    178d:	00 00                	add    BYTE PTR [rax],al
    178f:	00 fc                	add    ah,bh
    1791:	27                   	(bad)  
    1792:	00 00                	add    BYTE PTR [rax],al
    1794:	00 00                	add    BYTE PTR [rax],al
    1796:	12 4a 0a             	adc    cl,BYTE PTR [rdx+0xa]
    1799:	bd 04 00 00 00       	mov    ebp,0x4
    179e:	01 27                	add    DWORD PTR [rdi],esp
    17a0:	00 00                	add    BYTE PTR [rax],al
    17a2:	00 00                	add    BYTE PTR [rax],al
    17a4:	12 4a 12             	adc    cl,BYTE PTR [rdx+0x12]
    17a7:	bd 04 00 00 0c       	mov    ebp,0xc000004
    17ac:	01 27                	add    DWORD PTR [rdi],esp
    17ae:	00 00                	add    BYTE PTR [rax],al
    17b0:	00 00                	add    BYTE PTR [rax],al
    17b2:	12 50 0a             	adc    dl,BYTE PTR [rax+0xa]
    17b5:	bd 04 00 00 18       	mov    ebp,0x18000004
    17ba:	01 27                	add    DWORD PTR [rdi],esp
    17bc:	00 00                	add    BYTE PTR [rax],al
    17be:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:860
	Com_BeginRedirect( sv_outputbuf, sizeof( sv_outputbuf ), SV_FlushRedirect );
    17c0:	12 51 0a             	adc    dl,BYTE PTR [rcx+0xa]
    17c3:	bd 04 00 00 24       	mov    ebp,0x24000004
    17c8:	01 27                	add    DWORD PTR [rdi],esp
    17ca:	00 00                	add    BYTE PTR [rax],al
    17cc:	00 00                	add    BYTE PTR [rax],al
    17ce:	12 58 08             	adc    bl,BYTE PTR [rax+0x8]
    17d1:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    17d2:	00 00                	add    BYTE PTR [rax],al
    17d4:	00 30                	add    BYTE PTR [rax],dh
    17d6:	01 00                	add    DWORD PTR [rax],eax
    17d8:	03 00                	add    eax,DWORD PTR [rax]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:862
	if ( !sv_rconPassword->string[0] && !rconPassword2[0] ) {
    17da:	00 00                	add    BYTE PTR [rax],al
    17dc:	00 12                	add    BYTE PTR [rdx],dl
    17de:	59                   	pop    rcx
    17df:	03 14 17             	add    edx,DWORD PTR [rdi+rdx*1]
    17e2:	00 00                	add    BYTE PTR [rax],al
    17e4:	26 04 02             	es add al,0x2
    17e7:	12 5e 09             	adc    bl,BYTE PTR [rsi+0x9]
    17ea:	05 18 00 00 23       	add    eax,0x23000018
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:862 (discriminator 1)
    17ef:	73 00                	jae    17f1 <.debug_info+0x17f1>
    17f1:	12 5f 10             	adc    bl,BYTE PTR [rdi+0x10]
    17f4:	25 0e 00 00 00       	and    eax,0xe
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:863
		Com_Printf( "No rconpassword set on the server.\n" );
    17f9:	23 72 00             	and    esi,DWORD PTR [rdx+0x0]
    17fc:	12 60 11             	adc    ah,BYTE PTR [rax+0x11]
    17ff:	d8 17                	fcom   DWORD PTR [rdi]
    1801:	00 00                	add    BYTE PTR [rax],al
    1803:	d0 00                	rol    BYTE PTR [rax],1
    1805:	03 00                	add    eax,DWORD PTR [rax]
    1807:	00 00                	add    BYTE PTR [rax],al
    1809:	00 12                	add    BYTE PTR [rdx],dl
    180b:	61                   	(bad)  
    180c:	03 e4                	add    esp,esp
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:864
	} else if ( !valid ) {
    180e:	17                   	(bad)  
    180f:	00 00                	add    BYTE PTR [rax],al
    1811:	17                   	(bad)  
    1812:	07                   	(bad)  
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:865
		Com_Printf( "Bad rconpassword.\n" );
    1813:	04 3b                	add    al,0x3b
    1815:	00 00                	add    BYTE PTR [rax],al
    1817:	00 12                	add    BYTE PTR [rdx],dl
    1819:	98                   	cwde   
    181a:	01 0e                	add    DWORD PTR [rsi],ecx
    181c:	69 18 00 00 15 00    	imul   ebx,DWORD PTR [rax],0x150000
    1822:	00 00                	add    BYTE PTR [rax],al
    1824:	00 00                	add    BYTE PTR [rax],al
    1826:	15 00 00 00 00       	adc    eax,0x0
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:871
		cmd_aux = Cmd_Cmd();
    182b:	01 15 00 00 00 00    	add    DWORD PTR [rip+0x0],edx        # 1831 <.debug_info+0x1831>
    1831:	02 15 00 00 00 00    	add    dl,BYTE PTR [rip+0x0]        # 1837 <.debug_info+0x1837>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:873
			cmd_aux++;
    1837:	03 15 00 00 00 00    	add    edx,DWORD PTR [rip+0x0]        # 183d <.debug_info+0x183d>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:872
		while ( *cmd_aux && *cmd_aux <= ' ' ) // skip whitespace
    183d:	04 15                	add    al,0x15
    183f:	00 00                	add    BYTE PTR [rax],al
    1841:	00 00                	add    BYTE PTR [rax],al
    1843:	05 15 00 00 00       	add    eax,0x15
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:872 (discriminator 1)
    1848:	00 06                	add    BYTE PTR [rsi],al
    184a:	15 00 00 00 00       	adc    eax,0x0
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:874
		cmd_aux += 4; // "rcon"
    184f:	07                   	(bad)  
    1850:	15 00 00 00 00       	adc    eax,0x0
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:875
		while ( *cmd_aux == ' ' )
    1855:	08 15 00 00 00 00    	or     BYTE PTR [rip+0x0],dl        # 185b <.debug_info+0x185b>
    185b:	09 15 00 00 00 00    	or     DWORD PTR [rip+0x0],edx        # 1861 <.debug_info+0x1861>
    1861:	0a 15 00 00 00 00    	or     dl,BYTE PTR [rip+0x0]        # 1867 <.debug_info+0x1867>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:877
		if ( *cmd_aux == '"' ) {
    1867:	0b 00                	or     eax,DWORD PTR [rax]
    1869:	09 08                	or     DWORD PTR [rax],ecx
    186b:	64 0b 00             	or     eax,DWORD PTR fs:[rax]
    186e:	00 17                	add    BYTE PTR [rdi],dl
    1870:	07                   	(bad)  
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:878
			cmd_aux++;
    1871:	04 3b                	add    al,0x3b
    1873:	00 00                	add    BYTE PTR [rax],al
    1875:	00 13                	add    BYTE PTR [rbx],dl
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:879
			while ( *cmd_aux && *cmd_aux != '"' ) // quoted password
    1877:	65 02 0e             	add    cl,BYTE PTR gs:[rsi]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:880
				cmd_aux++;
    187a:	b5 18                	mov    ch,0x18
    187c:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:879
			while ( *cmd_aux && *cmd_aux != '"' ) // quoted password
    187e:	15 00 00 00 00       	adc    eax,0x0
    1883:	00 15 00 00 00 00    	add    BYTE PTR [rip+0x0],dl        # 1889 <.debug_info+0x1889>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:879 (discriminator 1)
    1889:	01 15 00 00 00 00    	add    DWORD PTR [rip+0x0],edx        # 188f <.debug_info+0x188f>
    188f:	02 15 00 00 00 00    	add    dl,BYTE PTR [rip+0x0]        # 1895 <.debug_info+0x1895>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:881
			if ( *cmd_aux == '"' )
    1895:	03 15 00 00 00 00    	add    edx,DWORD PTR [rip+0x0]        # 189b <.debug_info+0x189b>
    189b:	04 15                	add    al,0x15
    189d:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:882
				cmd_aux++;
    189f:	00 00                	add    BYTE PTR [rax],al
    18a1:	05 15 00 00 00       	add    eax,0x15
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:885
				cmd_aux++;
    18a6:	00 06                	add    BYTE PTR [rsi],al
    18a8:	15 00 00 00 00       	adc    eax,0x0
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:884
			while ( *cmd_aux && *cmd_aux != ' ' ) // password
    18ad:	07                   	(bad)  
    18ae:	15 00 00 00 00       	adc    eax,0x0
    18b3:	08 00                	or     BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:884 (discriminator 1)
    18b5:	16                   	(bad)  
    18b6:	00 00                	add    BYTE PTR [rax],al
    18b8:	00 00                	add    BYTE PTR [rax],al
    18ba:	13 71 02             	adc    esi,DWORD PTR [rcx+0x2]
    18bd:	03 6f 18             	add    ebp,DWORD PTR [rdi+0x18]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:887 (discriminator 1)
		while ( *cmd_aux == ' ' )
    18c0:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:888
			cmd_aux++;
    18c2:	1c 00                	sbb    al,0x0
    18c4:	00 00                	add    BYTE PTR [rax],al
    18c6:	00 60 13             	add    BYTE PTR [rax+0x13],ah
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:887
		while ( *cmd_aux == ' ' )
    18c9:	75 02                	jne    18cd <.debug_info+0x18cd>
    18cb:	10 5d 19             	adc    BYTE PTR [rbp+0x19],bl
    18ce:	00 00                	add    BYTE PTR [rax],al
    18d0:	1d 00 00 00 00       	sbb    eax,0x0
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:890
		Cmd_ExecuteString( cmd_aux );
    18d5:	13 76 02             	adc    esi,DWORD PTR [rsi+0x2]
    18d8:	09 b8 00 00 00 00    	or     DWORD PTR [rax+0x0],edi
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:893
	Com_EndRedirect();
    18de:	1d 00 00 00 00       	sbb    eax,0x0
    18e3:	13 77 02             	adc    esi,DWORD PTR [rdi+0x2]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:894
}
    18e6:	09 b8 00 00 00 08    	or     DWORD PTR [rax+0x8000000],edi
    18ec:	1d 00 00 00 00       	sbb    eax,0x0
SV_ConnectionlessPacket():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:907
static void SV_ConnectionlessPacket( const netadr_t *from, msg_t *msg ) {
    18f1:	13 78 02             	adc    edi,DWORD PTR [rax+0x2]
    18f4:	09 5d 19             	or     DWORD PTR [rbp+0x19],ebx
    18f7:	00 00                	add    BYTE PTR [rax],al
    18f9:	10 1d 00 00 00 00    	adc    BYTE PTR [rip+0x0],bl        # 18ff <.debug_info+0x18ff>
    18ff:	13 7a 02             	adc    edi,DWORD PTR [rdx+0x2]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:911
	MSG_BeginReadingOOB( msg );
    1902:	09 b8 00 00 00 30    	or     DWORD PTR [rax+0x30000000],edi
    1908:	1d 00 00 00 00       	sbb    eax,0x0
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:912
	MSG_ReadLong( msg );		// skip the -1 marker
    190d:	13 7b 02             	adc    edi,DWORD PTR [rbx+0x2]
    1910:	09 b8 00 00 00 38    	or     DWORD PTR [rax+0x38000000],edi
    1916:	1d 00 00 00 00       	sbb    eax,0x0
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:914
	if ( !memcmp( "connect ", msg->data + 4, 8 ) ) {
    191b:	13 7d 02             	adc    edi,DWORD PTR [rbp+0x2]
    191e:	08 6f 00             	or     BYTE PTR [rdi+0x0],ch
    1921:	00 00                	add    BYTE PTR [rax],al
    1923:	40 1d 00 00 00 00    	rex sbb eax,0x0
    1929:	13 7e 02             	adc    edi,DWORD PTR [rsi+0x2]
    192c:	0e                   	(bad)  
    192d:	b5 18                	mov    ch,0x18
    192f:	00 00                	add    BYTE PTR [rax],al
    1931:	44 1d 00 00 00 00    	rex.R sbb eax,0x0
    1937:	13 80 02 08 6f 00    	adc    eax,DWORD PTR [rax+0x6f0802]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:915
		if ( msg->cursize > MAX_INFO_STRING*2 ) { // if we assume 200% compression ratio on userinfo
    193d:	00 00                	add    BYTE PTR [rax],al
    193f:	48 1d 00 00 00 00    	sbb    rax,0x0
    1945:	13 82 02 09 b8 00    	adc    eax,DWORD PTR [rdx+0xb80902]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:916
			if ( com_developer->integer ) {
    194b:	00 00                	add    BYTE PTR [rax],al
    194d:	50                   	push   rax
    194e:	1d 00 00 00 00       	sbb    eax,0x0
    1953:	13 83 02 09 b8 00    	adc    eax,DWORD PTR [rbx+0xb80902]
    1959:	00 00                	add    BYTE PTR [rax],al
    195b:	58                   	pop    rax
    195c:	00 06                	add    BYTE PTR [rsi],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:917
				Com_Printf( "%s : connect packet is too long - %i\n", NET_AdrToString( from ), msg->cursize );
    195e:	b8 00 00 00 6d       	mov    eax,0x6d000000
    1963:	19 00                	sbb    DWORD PTR [rax],eax
    1965:	00 07                	add    BYTE PTR [rdi],al
    1967:	42 00 00             	rex.X add BYTE PTR [rax],al
    196a:	00 03                	add    BYTE PTR [rbx],al
    196c:	00 16                	add    BYTE PTR [rsi],dl
    196e:	00 00                	add    BYTE PTR [rax],al
    1970:	00 00                	add    BYTE PTR [rax],al
    1972:	13 84 02 03 c2 18 00 	adc    eax,DWORD PTR [rdx+rax*1+0x18c203]
    1979:	00 06                	add    BYTE PTR [rsi],al
    197b:	6d                   	ins    DWORD PTR es:[rdi],dx
    197c:	19 00                	sbb    DWORD PTR [rax],eax
    197e:	00 85 19 00 00 13    	add    BYTE PTR [rbp+0x13000019],al
    1984:	00 0a                	add    BYTE PTR [rdx],cl
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:919
			return;
    1986:	00 00                	add    BYTE PTR [rax],al
    1988:	00 00                	add    BYTE PTR [rax],al
    198a:	13 87 02 10 7a 19    	adc    eax,DWORD PTR [rdi+0x197a1002]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:921
		Huff_Decompress( msg, 12 );
    1990:	00 00                	add    BYTE PTR [rax],al
    1992:	0a 00                	or     al,BYTE PTR [rax]
    1994:	00 00                	add    BYTE PTR [rax],al
    1996:	00 13                	add    BYTE PTR [rbx],dl
    1998:	88 02                	mov    BYTE PTR [rdx],al
    199a:	0d 6f 00 00 00       	or     eax,0x6f
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:924
	s = MSG_ReadStringLine( msg );
    199f:	2e 00 00             	add    BYTE PTR cs:[rax],al
    19a2:	00 00                	add    BYTE PTR [rax],al
    19a4:	38 01                	cmp    BYTE PTR [rcx],al
    19a6:	14 25                	adc    al,0x25
    19a8:	10 27                	adc    BYTE PTR [rdi],ah
    19aa:	1a 00                	sbb    al,BYTE PTR [rax]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:925
	Cmd_TokenizeString( s );
    19ac:	00 0f                	add    BYTE PTR [rdi],cl
    19ae:	00 00                	add    BYTE PTR [rax],al
    19b0:	00 00                	add    BYTE PTR [rax],al
    19b2:	14 26                	adc    al,0x26
    19b4:	18 2c 1a             	sbb    BYTE PTR [rdx+rbx*1],ch
    19b7:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:927
	c = Cmd_Argv(0);
    19b9:	00 0f                	add    BYTE PTR [rdi],cl
    19bb:	00 00                	add    BYTE PTR [rax],al
    19bd:	00 00                	add    BYTE PTR [rax],al
    19bf:	14 27                	adc    al,0x27
    19c1:	15 32 1a 00 00       	adc    eax,0x1a32
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:929
	if ( com_developer->integer ) {
    19c6:	08 0f                	or     BYTE PTR [rdi],cl
    19c8:	00 00                	add    BYTE PTR [rax],al
    19ca:	00 00                	add    BYTE PTR [rax],al
    19cc:	14 29                	adc    al,0x29
    19ce:	10 25 0e 00 00 10    	adc    BYTE PTR [rip+0x1000000e],ah        # 100019e2 <dlNextRound.8083+0xff1effa>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:930
		Com_Printf( "SV packet %s : %s\n", NET_AdrToString( from ), c );
    19d4:	0f 00 00             	sldt   WORD PTR [rax]
    19d7:	00 00                	add    BYTE PTR [rax],al
    19d9:	14 2a                	adc    al,0x2a
    19db:	08 6f 00             	or     BYTE PTR [rdi+0x0],ch
    19de:	00 00                	add    BYTE PTR [rax],al
    19e0:	e0 0f                	loopne 19f1 <.debug_info+0x19f1>
    19e2:	00 00                	add    BYTE PTR [rax],al
    19e4:	00 00                	add    BYTE PTR [rax],al
    19e6:	14 2b                	adc    al,0x2b
    19e8:	08 54 0b 00          	or     BYTE PTR [rbx+rcx*1+0x0],dl
    19ec:	00 e4                	add    ah,ah
    19ee:	27                   	(bad)  
    19ef:	00 00                	add    BYTE PTR [rax],al
    19f1:	00 00                	add    BYTE PTR [rax],al
    19f3:	14 2c                	adc    al,0x2c
    19f5:	08 6f 00             	or     BYTE PTR [rdi+0x0],ch
    19f8:	00 00                	add    BYTE PTR [rax],al
    19fa:	24 01                	and    al,0x1
    19fc:	27                   	(bad)  
    19fd:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:933
	if ( !Q_stricmp(c, "rcon") ) {
    19ff:	00 00                	add    BYTE PTR [rax],al
    1a01:	14 2d                	adc    al,0x2d
    1a03:	08 6f 00             	or     BYTE PTR [rdi+0x0],ch
    1a06:	00 00                	add    BYTE PTR [rax],al
    1a08:	28 01                	sub    BYTE PTR [rcx],al
    1a0a:	27                   	(bad)  
    1a0b:	00 00                	add    BYTE PTR [rax],al
    1a0d:	00 00                	add    BYTE PTR [rax],al
    1a0f:	14 2d                	adc    al,0x2d
    1a11:	11 6f 00             	adc    DWORD PTR [rdi+0x0],ebp
    1a14:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:934
		SVC_RemoteCommand( from );
    1a16:	2c 01                	sub    al,0x1
    1a18:	27                   	(bad)  
    1a19:	00 00                	add    BYTE PTR [rax],al
    1a1b:	00 00                	add    BYTE PTR [rax],al
    1a1d:	14 2e                	adc    al,0x2e
    1a1f:	08 6f 00             	or     BYTE PTR [rdi+0x0],ch
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:935
		return;
    1a22:	00 00                	add    BYTE PTR [rax],al
    1a24:	30 01                	xor    BYTE PTR [rcx],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:938
	if ( !com_sv_running->integer ) {
    1a26:	00 11                	add    BYTE PTR [rcx],dl
    1a28:	00 00                	add    BYTE PTR [rax],al
    1a2a:	00 00                	add    BYTE PTR [rax],al
    1a2c:	09 08                	or     DWORD PTR [rax],ecx
    1a2e:	27                   	(bad)  
    1a2f:	1a 00                	sbb    al,BYTE PTR [rax]
    1a31:	00 09                	add    BYTE PTR [rcx],cl
    1a33:	08 9f 19 00 00 03    	or     BYTE PTR [rdi+0x3000019],bl
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:942
	if (!Q_stricmp(c, "getstatus")) {
    1a39:	00 00                	add    BYTE PTR [rax],al
    1a3b:	00 00                	add    BYTE PTR [rax],al
    1a3d:	14 2f                	adc    al,0x2f
    1a3f:	03 9f 19 00 00 14    	add    ebx,DWORD PTR [rdi+0x14000019]
    1a45:	07                   	(bad)  
    1a46:	04 3b                	add    al,0x3b
    1a48:	00 00                	add    BYTE PTR [rax],al
    1a4a:	00 14 31             	add    BYTE PTR [rcx+rsi*1],dl
    1a4d:	0e                   	(bad)  
    1a4e:	65 1a 00             	sbb    al,BYTE PTR gs:[rax]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:943
		SVC_Status( from );
    1a51:	00 15 00 00 00 00    	add    BYTE PTR [rip+0x0],dl        # 1a57 <.debug_info+0x1a57>
    1a57:	00 15 00 00 00 00    	add    BYTE PTR [rip+0x0],dl        # 1a5d <.debug_info+0x1a5d>
    1a5d:	01 15 00 00 00 00    	add    DWORD PTR [rip+0x0],edx        # 1a63 <.debug_info+0x1a63>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:944
	} else if (!Q_stricmp(c, "getinfo")) {
    1a63:	02 00                	add    al,BYTE PTR [rax]
    1a65:	03 00                	add    eax,DWORD PTR [rax]
    1a67:	00 00                	add    BYTE PTR [rax],al
    1a69:	00 14 35 03 44 1a 00 	add    BYTE PTR [rsi*1+0x1a4403],dl
    1a70:	00 2e                	add    BYTE PTR [rsi],ch
    1a72:	00 00                	add    BYTE PTR [rax],al
    1a74:	00 00                	add    BYTE PTR [rax],al
    1a76:	10 20                	adc    BYTE PTR [rax],ah
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:945
		SVC_Info( from );
    1a78:	14 3b                	adc    al,0x3b
    1a7a:	10 b7 1a 00 00 0f    	adc    BYTE PTR [rdi+0xf00001a],dh
    1a80:	00 00                	add    BYTE PTR [rax],al
    1a82:	00 00                	add    BYTE PTR [rax],al
    1a84:	14 3c                	adc    al,0x3c
    1a86:	11 b7 1a 00 00 00    	adc    DWORD PTR [rdi+0x1a],esi
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:946
	} else if (!Q_stricmp(c, "getchallenge")) {
    1a8c:	27                   	(bad)  
    1a8d:	00 00                	add    BYTE PTR [rax],al
    1a8f:	00 00                	add    BYTE PTR [rax],al
    1a91:	14 3d                	adc    al,0x3d
    1a93:	06                   	(bad)  
    1a94:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    1a95:	00 00                	add    BYTE PTR [rax],al
    1a97:	00 00                	add    BYTE PTR [rax],al
    1a99:	20 27                	and    BYTE PTR [rdi],ah
    1a9b:	00 00                	add    BYTE PTR [rax],al
    1a9d:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:947
		SV_GetChallenge( from );
    1a9f:	14 3e                	adc    al,0x3e
    1aa1:	06                   	(bad)  
    1aa2:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    1aa3:	00 00                	add    BYTE PTR [rax],al
    1aa5:	00 04 20             	add    BYTE PTR [rax+riz*1],al
    1aa8:	27                   	(bad)  
    1aa9:	00 00                	add    BYTE PTR [rax],al
    1aab:	00 00                	add    BYTE PTR [rax],al
    1aad:	14 3f                	adc    al,0x3f
    1aaf:	06                   	(bad)  
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:948
	} else if (!Q_stricmp(c, "connect")) {
    1ab0:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    1ab1:	00 00                	add    BYTE PTR [rax],al
    1ab3:	00 08                	add    BYTE PTR [rax],cl
    1ab5:	20 00                	and    BYTE PTR [rax],al
    1ab7:	06                   	(bad)  
    1ab8:	c8 1a 00 00          	enter  0x1a,0x0
    1abc:	c8 1a 00 00          	enter  0x1a,0x0
    1ac0:	18 42 00             	sbb    BYTE PTR [rdx+0x0],al
    1ac3:	00 00                	add    BYTE PTR [rax],al
    1ac5:	ff 03                	inc    DWORD PTR [rbx]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:949
		SV_DirectConnect( from );
    1ac7:	00 09                	add    BYTE PTR [rcx],cl
    1ac9:	08 25 0e 00 00 03    	or     BYTE PTR [rip+0x300000e],ah        # 3001add <dlNextRound.8083+0x2f1f0f5>
    1acf:	00 00                	add    BYTE PTR [rax],al
    1ad1:	00 00                	add    BYTE PTR [rax],al
    1ad3:	14 40                	adc    al,0x40
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:951
	} else if (!Q_stricmp(c, "ipAuthorize")) {
    1ad5:	03 71 1a             	add    esi,DWORD PTR [rcx+0x1a]
    1ad8:	00 00                	add    BYTE PTR [rax],al
    1ada:	2f                   	(bad)  
    1adb:	50                   	push   rax
    1adc:	04 05                	add    al,0x5
    1ade:	00 14 42             	add    BYTE PTR [rdx+rax*2],dl
    1ae1:	09 fa                	or     edx,edi
    1ae3:	1b 00                	sbb    eax,DWORD PTR [rax]
    1ae5:	00 0f                	add    BYTE PTR [rdi],cl
    1ae7:	00 00                	add    BYTE PTR [rax],al
    1ae9:	00 00                	add    BYTE PTR [rax],al
    1aeb:	14 43                	adc    al,0x43
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:954
	} else if (!Q_stricmp(c, "disconnect")) {
    1aed:	10 65 1a             	adc    BYTE PTR [rbp+0x1a],ah
    1af0:	00 00                	add    BYTE PTR [rax],al
    1af2:	00 0f                	add    BYTE PTR [rdi],cl
    1af4:	00 00                	add    BYTE PTR [rax],al
    1af6:	00 00                	add    BYTE PTR [rax],al
    1af8:	14 44                	adc    al,0x44
    1afa:	0c 83                	or     al,0x83
    1afc:	04 00                	add    al,0x0
    1afe:	00 04 0f             	add    BYTE PTR [rdi+rcx*1],al
    1b01:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:959
		if ( com_developer->integer ) {
    1b03:	00 00                	add    BYTE PTR [rax],al
    1b05:	14 45                	adc    al,0x45
    1b07:	09 6f 00             	or     DWORD PTR [rdi+0x0],ebp
    1b0a:	00 00                	add    BYTE PTR [rax],al
    1b0c:	08 0f                	or     BYTE PTR [rdi],cl
    1b0e:	00 00                	add    BYTE PTR [rax],al
    1b10:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:960
			Com_Printf( "bad connectionless packet from %s:\n%s\n",
    1b12:	14 46                	adc    al,0x46
    1b14:	09 6f 00             	or     DWORD PTR [rdi+0x0],ebp
    1b17:	00 00                	add    BYTE PTR [rax],al
    1b19:	0c 0f                	or     al,0xf
    1b1b:	00 00                	add    BYTE PTR [rax],al
    1b1d:	00 00                	add    BYTE PTR [rax],al
    1b1f:	14 47                	adc    al,0x47
    1b21:	09 6f 00             	or     DWORD PTR [rdi+0x0],ebp
    1b24:	00 00                	add    BYTE PTR [rax],al
    1b26:	10 0f                	adc    BYTE PTR [rdi],cl
    1b28:	00 00                	add    BYTE PTR [rax],al
    1b2a:	00 00                	add    BYTE PTR [rax],al
    1b2c:	14 4a                	adc    al,0x4a
    1b2e:	09 6f 00             	or     DWORD PTR [rdi+0x0],ebp
    1b31:	00 00                	add    BYTE PTR [rax],al
    1b33:	14 0f                	adc    al,0xf
    1b35:	00 00                	add    BYTE PTR [rax],al
    1b37:	00 00                	add    BYTE PTR [rax],al
    1b39:	14 4b                	adc    al,0x4b
    1b3b:	09 6f 00             	or     DWORD PTR [rdi+0x0],ebp
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:919
			return;
    1b3e:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:939
		return;
    1b40:	18 0f                	sbb    BYTE PTR [rdi],cl
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:964
}
    1b42:	00 00                	add    BYTE PTR [rax],al
    1b44:	00 00                	add    BYTE PTR [rax],al
    1b46:	14 4c                	adc    al,0x4c
SV_PacketEvent():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:973
void SV_PacketEvent( const netadr_t *from, msg_t *msg ) {
    1b48:	09 6f 00             	or     DWORD PTR [rdi+0x0],ebp
    1b4b:	00 00                	add    BYTE PTR [rax],al
    1b4d:	1c 0f                	sbb    al,0xf
    1b4f:	00 00                	add    BYTE PTR [rax],al
    1b51:	00 00                	add    BYTE PTR [rax],al
    1b53:	14 4d                	adc    al,0x4d
    1b55:	0a fa                	or     bh,dl
    1b57:	1b 00                	sbb    eax,DWORD PTR [rax]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:978
	if ( msg->cursize < 6 ) // too short for anything
    1b59:	00 20                	add    BYTE PTR [rax],ah
    1b5b:	27                   	(bad)  
    1b5c:	00 00                	add    BYTE PTR [rax],al
    1b5e:	00 00                	add    BYTE PTR [rax],al
    1b60:	14 4e                	adc    al,0x4e
    1b62:	0e                   	(bad)  
    1b63:	0b 1c 00             	or     ebx,DWORD PTR [rax+rax*1]
    1b66:	00 20                	add    BYTE PTR [rax],ah
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:982
	if ( *(int32_t *)msg->data == -1 ) {
    1b68:	20 30                	and    BYTE PTR [rax],dh
    1b6a:	00 00                	add    BYTE PTR [rax],al
    1b6c:	00 00                	add    BYTE PTR [rax],al
    1b6e:	14 50                	adc    al,0x50
    1b70:	0f 8d 03 00 00 20    	jge    20001b79 <dlNextRound.8083+0x1ff1f191>
    1b76:	00 05 00 30 00 00    	add    BYTE PTR [rip+0x3000],al        # 4b7c <SV_SendQueuedPackets+0x24a7>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:983
		SV_ConnectionlessPacket( from, msg );
    1b7c:	00 00                	add    BYTE PTR [rax],al
    1b7e:	14 53                	adc    al,0x53
    1b80:	12 1c 1c             	adc    bl,BYTE PTR [rsp+rbx*1]
    1b83:	00 00                	add    BYTE PTR [rax],al
    1b85:	28 00                	sub    BYTE PTR [rax],al
    1b87:	05 00 30 00 00       	add    eax,0x3000
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:984
		return;
    1b8c:	00 00                	add    BYTE PTR [rax],al
    1b8e:	14 54                	adc    al,0x54
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:987
	if ( sv.state == SS_DEAD ) {
    1b90:	09 6f 00             	or     DWORD PTR [rdi+0x0],ebp
    1b93:	00 00                	add    BYTE PTR [rax],al
    1b95:	30 00                	xor    BYTE PTR [rax],al
    1b97:	05 00 30 00 00       	add    eax,0x3000
    1b9c:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:993
	MSG_BeginReadingOOB( msg );
    1b9e:	14 55                	adc    al,0x55
    1ba0:	09 6f 00             	or     DWORD PTR [rdi+0x0],ebp
    1ba3:	00 00                	add    BYTE PTR [rax],al
    1ba5:	34 00                	xor    al,0x0
    1ba7:	05 00 30 00 00       	add    eax,0x3000
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:994
	MSG_ReadLong( msg ); // sequence number
    1bac:	00 00                	add    BYTE PTR [rax],al
    1bae:	14 57                	adc    al,0x57
    1bb0:	11 69 18             	adc    DWORD PTR [rcx+0x18],ebp
    1bb3:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:995
	qport = MSG_ReadShort( msg ) & 0xffff;
    1bb5:	38 00                	cmp    BYTE PTR [rax],al
    1bb7:	05 00 30 00 00       	add    eax,0x3000
    1bbc:	00 00                	add    BYTE PTR [rax],al
    1bbe:	14 58                	adc    al,0x58
    1bc0:	09 6f 00             	or     DWORD PTR [rdi+0x0],ebp
    1bc3:	00 00                	add    BYTE PTR [rax],al
    1bc5:	40 00 05 00 30 00 00 	add    BYTE PTR [rip+0x3000],al        # 4bcc <SV_SendQueuedPackets+0x24f7>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:998
	for (i=0, cl=svs.clients ; i < sv_maxclients->integer ; i++,cl++) {
    1bcc:	00 00                	add    BYTE PTR [rax],al
    1bce:	14 5a                	adc    al,0x5a
    1bd0:	09 6f 00             	or     DWORD PTR [rdi+0x0],ebp
    1bd3:	00 00                	add    BYTE PTR [rax],al
    1bd5:	44 00 05 00 30 00 00 	add    BYTE PTR [rip+0x3000],r8b        # 4bdc <SV_SendQueuedPackets+0x2507>
    1bdc:	00 00                	add    BYTE PTR [rax],al
    1bde:	14 5b                	adc    al,0x5b
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:999
		if (cl->state == CS_FREE) {
    1be0:	09 6f 00             	or     DWORD PTR [rdi+0x0],ebp
    1be3:	00 00                	add    BYTE PTR [rax],al
    1be5:	48 00 05 00 30 00 00 	rex.W add BYTE PTR [rip+0x3000],al        # 4bec <SV_SendQueuedPackets+0x2517>
    1bec:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1002
		if ( !NET_CompareBaseAdr( from, &cl->netchan.remoteAddress ) ) {
    1bee:	14 5d                	adc    al,0x5d
    1bf0:	09 22                	or     DWORD PTR [rdx],esp
    1bf2:	1c 00                	sbb    al,0x0
    1bf4:	00 4c 00 05          	add    BYTE PTR [rax+rax*1+0x5],cl
    1bf8:	00 00                	add    BYTE PTR [rax],al
    1bfa:	06                   	(bad)  
    1bfb:	b8 00 00 00 0b       	mov    eax,0xb000000
    1c00:	1c 00                	sbb    al,0x0
    1c02:	00 18                	add    BYTE PTR [rax],bl
    1c04:	42 00 00             	rex.X add BYTE PTR [rax],al
    1c07:	00 ff                	add    bh,bh
    1c09:	03 00                	add    eax,DWORD PTR [rax]
    1c0b:	06                   	(bad)  
    1c0c:	38 1a                	cmp    BYTE PTR [rdx],bl
    1c0e:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1007
		if (cl->netchan.qport != qport) {
    1c10:	1c 1c                	sbb    al,0x1c
    1c12:	00 00                	add    BYTE PTR [rax],al
    1c14:	18 42 00             	sbb    BYTE PTR [rdx+0x0],al
    1c17:	00 00                	add    BYTE PTR [rax],al
    1c19:	ff 03                	inc    DWORD PTR [rbx]
    1c1b:	00 09                	add    BYTE PTR [rcx],cl
    1c1d:	08 05 18 00 00 06    	or     BYTE PTR [rip+0x6000018],al        # 6001c3b <dlNextRound.8083+0x5f1f253>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1012
		if (SV_Netchan_Process(cl, msg)) {
    1c23:	57                   	push   rdi
    1c24:	04 00                	add    al,0x0
    1c26:	00 33                	add    BYTE PTR [rbx],dh
    1c28:	1c 00                	sbb    al,0x0
    1c2a:	00 18                	add    BYTE PTR [rax],bl
    1c2c:	42 00 00             	rex.X add BYTE PTR [rax],al
    1c2f:	00 ff                	add    bh,bh
    1c31:	03 00                	add    eax,DWORD PTR [rax]
    1c33:	03 00                	add    eax,DWORD PTR [rax]
    1c35:	00 00                	add    BYTE PTR [rax],al
    1c37:	00 14 5e             	add    BYTE PTR [rsi+rbx*2],dl
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1016
			if (cl->netchan.remoteAddress.port != from->port) {
    1c3a:	03 da                	add    ebx,edx
    1c3c:	1a 00                	sbb    al,BYTE PTR [rax]
    1c3e:	00 26                	add    BYTE PTR [rsi],ah
    1c40:	10 0a                	adc    BYTE PTR [rdx],cl
    1c42:	14 60                	adc    al,0x60
    1c44:	09 c4                	or     esp,eax
    1c46:	1c 00                	sbb    al,0x0
    1c48:	00 0f                	add    BYTE PTR [rdi],cl
    1c4a:	00 00                	add    BYTE PTR [rax],al
    1c4c:	00 00                	add    BYTE PTR [rax],al
    1c4e:	14 61                	adc    al,0x61
    1c50:	09 6f 00             	or     DWORD PTR [rdi+0x0],ebp
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1017
				Com_Printf( "SV_PacketEvent: fixing up a translated port\n" );
    1c53:	00 00                	add    BYTE PTR [rax],al
    1c55:	00 0f                	add    BYTE PTR [rdi],cl
    1c57:	00 00                	add    BYTE PTR [rax],al
    1c59:	00 00                	add    BYTE PTR [rax],al
    1c5b:	14 62                	adc    al,0x62
    1c5d:	09 c4                	or     esp,eax
    1c5f:	1c 00                	sbb    al,0x0
    1c61:	00 04 23             	add    BYTE PTR [rbx+riz*1],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1018
				cl->netchan.remoteAddress.port = from->port;
    1c64:	70 73                	jo     1cd9 <.debug_info+0x1cd9>
    1c66:	00 14 63             	add    BYTE PTR [rbx+riz*2],dl
    1c69:	10 64 0b 00          	adc    BYTE PTR [rbx+rcx*1+0x0],ah
    1c6d:	00 24 27             	add    BYTE PTR [rdi+riz*1],ah
    1c70:	00 00                	add    BYTE PTR [rax],al
    1c72:	00 00                	add    BYTE PTR [rax],al
    1c74:	14 64                	adc    al,0x64
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1023
			if (cl->state != CS_ZOMBIE) {
    1c76:	09 6f 00             	or     DWORD PTR [rdi+0x0],ebp
    1c79:	00 00                	add    BYTE PTR [rax],al
    1c7b:	f8                   	clc    
    1c7c:	01 27                	add    DWORD PTR [rdi],esp
    1c7e:	00 00                	add    BYTE PTR [rax],al
    1c80:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1024
				cl->lastPacketTime = svs.time;	// don't timeout
    1c82:	14 6a                	adc    al,0x6a
    1c84:	09 6f 00             	or     DWORD PTR [rdi+0x0],ebp
    1c87:	00 00                	add    BYTE PTR [rax],al
    1c89:	fc                   	cld    
    1c8a:	01 27                	add    DWORD PTR [rdi],esp
    1c8c:	00 00                	add    BYTE PTR [rax],al
    1c8e:	00 00                	add    BYTE PTR [rax],al
    1c90:	14 6b                	adc    al,0x6b
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1025
				SV_ExecuteClientMessage( cl, msg );
    1c92:	09 6f 00             	or     DWORD PTR [rdi+0x0],ebp
    1c95:	00 00                	add    BYTE PTR [rax],al
    1c97:	00 02                	add    BYTE PTR [rdx],al
    1c99:	27                   	(bad)  
    1c9a:	00 00                	add    BYTE PTR [rax],al
    1c9c:	00 00                	add    BYTE PTR [rax],al
    1c9e:	14 6c                	adc    al,0x6c
    1ca0:	09 6f 00             	or     DWORD PTR [rdi+0x0],ebp
    1ca3:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1027
			return;
    1ca5:	04 02                	add    al,0x2
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1000
			continue;
    1ca7:	27                   	(bad)  
    1ca8:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1003
			continue;
    1caa:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1008
			continue;
    1cac:	14 6e                	adc    al,0x6e
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:998 (discriminator 2)
	for (i=0, cl=svs.clients ; i < sv_maxclients->integer ; i++,cl++) {
    1cae:	09 6f 00             	or     DWORD PTR [rdi+0x0],ebp
    1cb1:	00 00                	add    BYTE PTR [rax],al
    1cb3:	08 02                	or     BYTE PTR [rdx],al
    1cb5:	27                   	(bad)  
    1cb6:	00 00                	add    BYTE PTR [rax],al
    1cb8:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:998 (discriminator 1)
    1cba:	14 6f                	adc    al,0x6f
    1cbc:	11 d4                	adc    esp,edx
    1cbe:	1c 00                	sbb    al,0x0
    1cc0:	00 10                	add    BYTE PTR [rax],dl
    1cc2:	02 00                	add    al,BYTE PTR [rax]
    1cc4:	06                   	(bad)  
    1cc5:	57                   	push   rdi
    1cc6:	04 00                	add    al,0x0
    1cc8:	00 d4                	add    ah,dl
    1cca:	1c 00                	sbb    al,0x0
    1ccc:	00 07                	add    BYTE PTR [rdi],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:979
		return;
    1cce:	42 00 00             	rex.X add BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:988
		return;
    1cd1:	00 1f                	add    BYTE PTR [rdi],bl
    1cd3:	00 06                	add    BYTE PTR [rsi],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1030
}
    1cd5:	c8 1a 00 00          	enter  0x1a,0x0
SV_CalcPings():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1040
static void SV_CalcPings( void ) {
    1cd9:	e4 1c                	in     al,0x1c
    1cdb:	00 00                	add    BYTE PTR [rax],al
    1cdd:	07                   	(bad)  
    1cde:	42 00 00             	rex.X add BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1047
	for (i=0 ; i < sv_maxclients->integer ; i++) {
    1ce1:	00 ff                	add    bh,bh
    1ce3:	00 03                	add    BYTE PTR [rbx],al
    1ce5:	00 00                	add    BYTE PTR [rax],al
    1ce7:	00 00                	add    BYTE PTR [rax],al
    1ce9:	14 71                	adc    al,0x71
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1048
		cl = &svs.clients[i];
    1ceb:	03 3f                	add    edi,DWORD PTR [rdi]
    1ced:	1c 00                	sbb    al,0x0
    1cef:	00 14 07             	add    BYTE PTR [rdi+rax*1],dl
    1cf2:	04 3b                	add    al,0x3b
    1cf4:	00 00                	add    BYTE PTR [rax],al
    1cf6:	00 14 73             	add    BYTE PTR [rbx+rsi*2],dl
    1cf9:	0e                   	(bad)  
    1cfa:	1d 1d 00 00 15       	sbb    eax,0x1500001d
    1cff:	00 00                	add    BYTE PTR [rax],al
    1d01:	00 00                	add    BYTE PTR [rax],al
    1d03:	00 15 00 00 00 00    	add    BYTE PTR [rip+0x0],dl        # 1d09 <.debug_info+0x1d09>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1049
		if ( cl->state != CS_ACTIVE ) {
    1d09:	01 15 00 00 00 00    	add    DWORD PTR [rip+0x0],edx        # 1d0f <.debug_info+0x1d0f>
    1d0f:	02 15 00 00 00 00    	add    dl,BYTE PTR [rip+0x0]        # 1d15 <.debug_info+0x1d15>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1050
			cl->ping = 999;
    1d15:	03 15 00 00 00 00    	add    edx,DWORD PTR [rip+0x0]        # 1d1b <.debug_info+0x1d1b>
    1d1b:	04 00                	add    al,0x0
    1d1d:	03 00                	add    eax,DWORD PTR [rax]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1051
			continue;
    1d1f:	00 00                	add    BYTE PTR [rax],al
    1d21:	00 14 7a             	add    BYTE PTR [rdx+rdi*2],dl
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1053
		if ( !cl->gentity ) {
    1d24:	03 f0                	add    esi,eax
    1d26:	1c 00                	sbb    al,0x0
    1d28:	00 2e                	add    BYTE PTR [rsi],ch
    1d2a:	00 00                	add    BYTE PTR [rax],al
    1d2c:	00 00                	add    BYTE PTR [rax],al
    1d2e:	38 44 14 7c          	cmp    BYTE PTR [rsp+rdx*1+0x7c],al
    1d32:	10 6e 1d             	adc    BYTE PTR [rsi+0x1d],ch
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1054
			cl->ping = 999;
    1d35:	00 00                	add    BYTE PTR [rax],al
    1d37:	23 6d 73             	and    ebp,DWORD PTR [rbp+0x73]
    1d3a:	67 00 14 7d 12 c7 0e 	add    BYTE PTR [edi*2+0xec712],dl
    1d41:	00 
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1055
			continue;
    1d42:	00 00                	add    BYTE PTR [rax],al
    1d44:	0f 00 00             	sldt   WORD PTR [rax]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1057
		if ( cl->netchan.remoteAddress.type == NA_BOT ) {
    1d47:	00 00                	add    BYTE PTR [rax],al
    1d49:	14 7e                	adc    al,0x7e
    1d4b:	12 c8                	adc    cl,al
    1d4d:	10 00                	adc    BYTE PTR [rax],al
    1d4f:	00 30                	add    BYTE PTR [rax],dh
    1d51:	27                   	(bad)  
    1d52:	00 00                	add    BYTE PTR [rax],al
    1d54:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1058
			cl->ping = 0;
    1d56:	14 7f                	adc    al,0x7f
    1d58:	08 8b 06 00 00 30    	or     BYTE PTR [rbx+0x30000006],cl
    1d5e:	40 27                	rex (bad) 
    1d60:	00 00                	add    BYTE PTR [rax],al
    1d62:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1059
			continue;
    1d64:	14 80                	adc    al,0x80
    1d66:	1b 6e 1d             	sbb    ebp,DWORD PTR [rsi+0x1d]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1062
		total = 0;
    1d69:	00 00                	add    BYTE PTR [rax],al
    1d6b:	30 44 00 09          	xor    BYTE PTR [rax+rax*1+0x9],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1063
		count = 0;
    1d6f:	08 29                	or     BYTE PTR [rcx],ch
    1d71:	1d 00 00 03 00       	sbb    eax,0x30000
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1064
		for ( j = 0 ; j < PACKET_BACKUP ; j++ ) {
    1d76:	00 00                	add    BYTE PTR [rax],al
    1d78:	00 14 81             	add    BYTE PTR [rcx+rax*4],dl
    1d7b:	03 29                	add    ebp,DWORD PTR [rcx]
    1d7d:	1d 00 00 0e 00       	sbb    eax,0xe0000
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1065
			if ( cl->frames[j].messageAcked == 0 ) {
    1d82:	00 00                	add    BYTE PTR [rax],al
    1d84:	00 08                	add    BYTE PTR [rax],cl
    1d86:	14 83                	adc    al,0x83
    1d88:	10 a8 1d 00 00 0f    	adc    BYTE PTR [rax+0xf00001d],ch
    1d8e:	00 00                	add    BYTE PTR [rax],al
    1d90:	00 00                	add    BYTE PTR [rax],al
    1d92:	14 84                	adc    al,0x84
    1d94:	08 6f 00             	or     BYTE PTR [rdi+0x0],ch
    1d97:	00 00                	add    BYTE PTR [rax],al
    1d99:	00 0f                	add    BYTE PTR [rdi],cl
    1d9b:	00 00                	add    BYTE PTR [rax],al
    1d9d:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1068
			delta = cl->frames[j].messageAcked - cl->frames[j].messageSent;
    1d9f:	14 85                	adc    al,0x85
    1da1:	08 6f 00             	or     BYTE PTR [rdi+0x0],ch
    1da4:	00 00                	add    BYTE PTR [rax],al
    1da6:	04 00                	add    al,0x0
    1da8:	03 00                	add    eax,DWORD PTR [rax]
    1daa:	00 00                	add    BYTE PTR [rax],al
    1dac:	00 14 86             	add    BYTE PTR [rsi+rax*4],dl
    1daf:	03 80 1d 00 00 03    	add    eax,DWORD PTR [rax+0x300001d]
    1db5:	00 00                	add    BYTE PTR [rax],al
    1db7:	00 00                	add    BYTE PTR [rax],al
    1db9:	14 88                	adc    al,0x88
    1dbb:	1e                   	(bad)  
    1dbc:	c0 1d 00 00 0e 00 00 	rcr    BYTE PTR [rip+0xe0000],0x0        # e1dc3 <bucketHashes+0x1da3>
    1dc3:	00 00                	add    BYTE PTR [rax],al
    1dc5:	38 14 89             	cmp    BYTE PTR [rcx+rcx*4],dl
    1dc8:	08 29                	or     BYTE PTR [rcx],ch
    1dca:	1e                   	(bad)  
    1dcb:	00 00                	add    BYTE PTR [rax],al
    1dcd:	0f 00 00             	sldt   WORD PTR [rax]
    1dd0:	00 00                	add    BYTE PTR [rax],al
    1dd2:	14 8a                	adc    al,0x8a
    1dd4:	0f 12 0f             	movlps xmm1,QWORD PTR [rdi]
    1dd7:	00 00                	add    BYTE PTR [rax],al
    1dd9:	00 23                	add    BYTE PTR [rbx],ah
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1069
			count++;
    1ddb:	69 70 76 00 14 8f 04 	imul   esi,DWORD PTR [rax+0x76],0x48f1400
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1070
			total += delta;
    1de2:	29 1e                	sub    DWORD PTR [rsi],ebx
    1de4:	00 00                	add    BYTE PTR [rax],al
    1de6:	04 0f                	add    al,0xf
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1064 (discriminator 2)
		for ( j = 0 ; j < PACKET_BACKUP ; j++ ) {
    1de8:	00 00                	add    BYTE PTR [rax],al
    1dea:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1064 (discriminator 1)
    1dec:	14 91                	adc    al,0x91
    1dee:	0e                   	(bad)  
    1def:	a8 1d                	test   al,0x1d
    1df1:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1072
		if (!count) {
    1df3:	14 0f                	adc    al,0xf
    1df5:	00 00                	add    BYTE PTR [rax],al
    1df7:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1073
			cl->ping = 999;
    1df9:	14 93                	adc    al,0x93
    1dfb:	08 6f 00             	or     BYTE PTR [rdi+0x0],ch
    1dfe:	00 00                	add    BYTE PTR [rax],al
    1e00:	1c 0f                	sbb    al,0xf
    1e02:	00 00                	add    BYTE PTR [rax],al
    1e04:	00 00                	add    BYTE PTR [rax],al
    1e06:	14 94                	adc    al,0x94
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1075
			cl->ping = total/count;
    1e08:	08 6f 00             	or     BYTE PTR [rdi+0x0],ch
    1e0b:	00 00                	add    BYTE PTR [rax],al
    1e0d:	20 0f                	and    BYTE PTR [rdi],cl
    1e0f:	00 00                	add    BYTE PTR [rax],al
    1e11:	00 00                	add    BYTE PTR [rax],al
    1e13:	14 96                	adc    al,0x96
    1e15:	11 49 1e             	adc    DWORD PTR [rcx+0x1e],ecx
    1e18:	00 00                	add    BYTE PTR [rax],al
    1e1a:	28 0f                	sub    BYTE PTR [rdi],cl
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1076
			if ( cl->ping > 999 ) {
    1e1c:	00 00                	add    BYTE PTR [rax],al
    1e1e:	00 00                	add    BYTE PTR [rax],al
    1e20:	14 96                	adc    al,0x96
    1e22:	18 49 1e             	sbb    BYTE PTR [rcx+0x1e],cl
    1e25:	00 00                	add    BYTE PTR [rax],al
    1e27:	30 00                	xor    BYTE PTR [rax],al
    1e29:	24 10                	and    al,0x10
    1e2b:	14 8c                	adc    al,0x8c
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1077
				cl->ping = 999;
    1e2d:	02 49 1e             	add    cl,BYTE PTR [rcx+0x1e]
    1e30:	00 00                	add    BYTE PTR [rax],al
    1e32:	25 5f 34 00 14       	and    eax,0x1400345f
    1e37:	8d 08                	lea    ecx,[rax]
    1e39:	8f 04 00             	pop    QWORD PTR [rax+rax*1]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1082
		ps = SV_GameClientNum( i );
    1e3c:	00 25 5f 36 00 14    	add    BYTE PTR [rip+0x1400365f],ah        # 140054a1 <dlNextRound.8083+0x13f22ab9>
    1e42:	8e 08                	mov    cs,WORD PTR [rax]
    1e44:	65 0f 00 00          	sldt   WORD PTR gs:[rax]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1083
		ps->ping = cl->ping;
    1e48:	00 09                	add    BYTE PTR [rcx],cl
    1e4a:	08 b4 1d 00 00 31 00 	or     BYTE PTR [rbp+rbx*1+0x310000],dh
    1e51:	00 00                	add    BYTE PTR [rax],al
    1e53:	00 e0                	add    al,ah
    1e55:	dd 02                	fld    QWORD PTR [rdx]
    1e57:	00 14 9a             	add    BYTE PTR [rdx+rbx*4],dl
    1e5a:	10 78 21             	adc    BYTE PTR [rax+0x21],bh
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1047 (discriminator 2)
	for (i=0 ; i < sv_maxclients->integer ; i++) {
    1e5d:	00 00                	add    BYTE PTR [rax],al
    1e5f:	0f 00 00             	sldt   WORD PTR [rax]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1047 (discriminator 1)
    1e62:	00 00                	add    BYTE PTR [rax],al
    1e64:	14 9b                	adc    al,0x9b
    1e66:	10 1d 1d 00 00 00    	adc    BYTE PTR [rip+0x1d],bl        # 1e89 <.debug_info+0x1e89>
    1e6c:	0f 00 00             	sldt   WORD PTR [rax]
    1e6f:	00 00                	add    BYTE PTR [rax],al
    1e71:	14 9c                	adc    al,0x9c
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1085
}
    1e73:	09 8b 06 00 00 04    	or     DWORD PTR [rbx+0x4000006],ecx
SV_CheckTimeouts():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1100
static void SV_CheckTimeouts( void ) {
    1e79:	27                   	(bad)  
    1e7a:	00 00                	add    BYTE PTR [rax],al
    1e7c:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1106
	droppoint = svs.time - 1000 * sv_timeout->integer;
    1e7e:	14 9e                	adc    al,0x9e
    1e80:	09 78 21             	or     DWORD PTR [rax+0x21],edi
    1e83:	00 00                	add    BYTE PTR [rax],al
    1e85:	04 04                	add    al,0x4
    1e87:	30 00                	xor    BYTE PTR [rax],al
    1e89:	00 00                	add    BYTE PTR [rax],al
    1e8b:	00 14 9f             	add    BYTE PTR [rdi+rbx*4],dl
    1e8e:	09 6f 00             	or     DWORD PTR [rdi+0x0],ebp
    1e91:	00 00                	add    BYTE PTR [rax],al
    1e93:	04 04                	add    al,0x4
    1e95:	01 00                	add    DWORD PTR [rax],eax
    1e97:	30 00                	xor    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1107
	zombiepoint = svs.time - 1000 * sv_zombietime->integer;
    1e99:	00 00                	add    BYTE PTR [rax],al
    1e9b:	00 14 a0             	add    BYTE PTR [rax+riz*4],dl
    1e9e:	09 6f 00             	or     DWORD PTR [rdi+0x0],ebp
    1ea1:	00 00                	add    BYTE PTR [rax],al
    1ea3:	08 04 01             	or     BYTE PTR [rcx+rax*1],al
    1ea6:	00 30                	add    BYTE PTR [rax],dh
    1ea8:	00 00                	add    BYTE PTR [rax],al
    1eaa:	00 00                	add    BYTE PTR [rax],al
    1eac:	14 a1                	adc    al,0xa1
    1eae:	09 6f 00             	or     DWORD PTR [rdi+0x0],ebp
    1eb1:	00 00                	add    BYTE PTR [rax],al
    1eb3:	0c 04                	or     al,0x4
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1109
	for ( i = 0, cl = svs.clients ; i < sv_maxclients->integer ; i++, cl++ ) {
    1eb5:	01 00                	add    DWORD PTR [rax],eax
    1eb7:	30 00                	xor    BYTE PTR [rax],al
    1eb9:	00 00                	add    BYTE PTR [rax],al
    1ebb:	00 14 a3             	add    BYTE PTR [rbx+riz*4],dl
    1ebe:	09 6f 00             	or     DWORD PTR [rdi+0x0],ebp
    1ec1:	00 00                	add    BYTE PTR [rax],al
    1ec3:	10 04 01             	adc    BYTE PTR [rcx+rax*1],al
    1ec6:	00 30                	add    BYTE PTR [rax],dh
    1ec8:	00 00                	add    BYTE PTR [rax],al
    1eca:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1110
		if ( cl->state == CS_FREE ) {
    1ecc:	14 a4                	adc    al,0xa4
    1ece:	09 6f 00             	or     DWORD PTR [rdi+0x0],ebp
    1ed1:	00 00                	add    BYTE PTR [rax],al
    1ed3:	14 04                	adc    al,0x4
    1ed5:	01 00                	add    DWORD PTR [rax],eax
    1ed7:	30 00                	xor    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1114
		if ( cl->lastPacketTime - svs.time > 0 ) {
    1ed9:	00 00                	add    BYTE PTR [rax],al
    1edb:	00 14 a6             	add    BYTE PTR [rsi+riz*4],dl
    1ede:	0d e2 0b 00 00       	or     eax,0xbe2
    1ee3:	18 04 01             	sbb    BYTE PTR [rcx+rax*1],al
    1ee6:	00 30                	add    BYTE PTR [rax],dh
    1ee8:	00 00                	add    BYTE PTR [rax],al
    1eea:	00 00                	add    BYTE PTR [rax],al
    1eec:	14 a7                	adc    al,0xa7
    1eee:	09 6f 00             	or     DWORD PTR [rdi+0x0],ebp
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1115
			cl->lastPacketTime = svs.time;
    1ef1:	00 00                	add    BYTE PTR [rax],al
    1ef3:	30 04 01             	xor    BYTE PTR [rcx+rax*1],al
    1ef6:	00 30                	add    BYTE PTR [rax],dh
    1ef8:	00 00                	add    BYTE PTR [rax],al
    1efa:	00 00                	add    BYTE PTR [rax],al
    1efc:	14 a8                	adc    al,0xa8
    1efe:	09 8b 06 00 00 34    	or     DWORD PTR [rbx+0x34000006],ecx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1118
		if ( cl->state == CS_ZOMBIE && cl->lastPacketTime - zombiepoint < 0 ) {
    1f04:	04 01                	add    al,0x1
    1f06:	00 30                	add    BYTE PTR [rax],dh
    1f08:	00 00                	add    BYTE PTR [rax],al
    1f0a:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1118 (discriminator 1)
    1f0c:	14 a9                	adc    al,0xa9
    1f0e:	12 1c 1c             	adc    bl,BYTE PTR [rsp+rbx*1]
    1f11:	00 00                	add    BYTE PTR [rax],al
    1f13:	38 08                	cmp    BYTE PTR [rax],cl
    1f15:	01 00                	add    DWORD PTR [rax],eax
    1f17:	30 00                	xor    BYTE PTR [rax],al
    1f19:	00 00                	add    BYTE PTR [rax],al
    1f1b:	00 14 aa             	add    BYTE PTR [rdx+rbp*4],dl
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1120
			Com_DPrintf( "Going from CS_ZOMBIE to CS_FREE for client %d\n", i );
    1f1e:	09 be 03 00 00 40    	or     DWORD PTR [rsi+0x40000003],edi
    1f24:	08 01                	or     BYTE PTR [rcx],al
    1f26:	00 30                	add    BYTE PTR [rax],dh
    1f28:	00 00                	add    BYTE PTR [rax],al
    1f2a:	00 00                	add    BYTE PTR [rax],al
    1f2c:	14 ad                	adc    al,0xad
    1f2e:	09 32                	or     DWORD PTR [rdx],esi
    1f30:	0e                   	(bad)  
    1f31:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1121
			cl->state = CS_FREE;	// can now be reused
    1f33:	60                   	(bad)  
    1f34:	08 01                	or     BYTE PTR [rcx],al
    1f36:	00 30                	add    BYTE PTR [rax],dh
    1f38:	00 00                	add    BYTE PTR [rax],al
    1f3a:	00 00                	add    BYTE PTR [rax],al
    1f3c:	14 ae                	adc    al,0xae
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1122
			continue;
    1f3e:	0f 9f 04 00          	setg   BYTE PTR [rax+rax*1]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1124
		if ( cl->justConnected && svs.time - cl->lastPacketTime > 4000 ) {
    1f42:	00 a0 08 01 00 30    	add    BYTE PTR [rax+0x30000108],ah
    1f48:	00 00                	add    BYTE PTR [rax],al
    1f4a:	00 00                	add    BYTE PTR [rax],al
    1f4c:	14 af                	adc    al,0xaf
    1f4e:	0a 6f 00             	or     ch,BYTE PTR [rdi+0x0]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1124 (discriminator 1)
    1f51:	00 00                	add    BYTE PTR [rax],al
    1f53:	a4                   	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
    1f54:	08 01                	or     BYTE PTR [rcx],al
    1f56:	00 30                	add    BYTE PTR [rax],dh
    1f58:	00 00                	add    BYTE PTR [rax],al
    1f5a:	00 00                	add    BYTE PTR [rax],al
    1f5c:	14 b0                	adc    al,0xb0
    1f5e:	0a 6f 00             	or     ch,BYTE PTR [rdi+0x0]
    1f61:	00 00                	add    BYTE PTR [rax],al
    1f63:	a8 08                	test   al,0x8
    1f65:	01 00                	add    DWORD PTR [rax],eax
    1f67:	30 00                	xor    BYTE PTR [rax],al
    1f69:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1126
			SVC_RateDropAddress( &cl->netchan.remoteAddress, 10, 1000 ); // enforce burst with progressive multiplier
    1f6b:	00 14 b1             	add    BYTE PTR [rcx+rsi*4],dl
    1f6e:	09 6f 00             	or     DWORD PTR [rdi+0x0],ebp
    1f71:	00 00                	add    BYTE PTR [rax],al
    1f73:	ac                   	lods   al,BYTE PTR ds:[rsi]
    1f74:	08 01                	or     BYTE PTR [rcx],al
    1f76:	00 30                	add    BYTE PTR [rax],dh
    1f78:	00 00                	add    BYTE PTR [rax],al
    1f7a:	00 00                	add    BYTE PTR [rax],al
    1f7c:	14 b2                	adc    al,0xb2
    1f7e:	09 6f 00             	or     DWORD PTR [rdi+0x0],ebp
    1f81:	00 00                	add    BYTE PTR [rax],al
    1f83:	b0 08                	mov    al,0x8
    1f85:	01 00                	add    DWORD PTR [rax],eax
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1127
			SV_DropClient( cl, NULL ); // drop silently
    1f87:	30 00                	xor    BYTE PTR [rax],al
    1f89:	00 00                	add    BYTE PTR [rax],al
    1f8b:	00 14 b3             	add    BYTE PTR [rbx+rsi*4],dl
    1f8e:	09 6f 00             	or     DWORD PTR [rdi+0x0],ebp
    1f91:	00 00                	add    BYTE PTR [rax],al
    1f93:	b4 08                	mov    ah,0x8
    1f95:	01 00                	add    DWORD PTR [rax],eax
    1f97:	30 00                	xor    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1128
			cl->state = CS_FREE;
    1f99:	00 00                	add    BYTE PTR [rax],al
    1f9b:	00 14 b4             	add    BYTE PTR [rsp+rsi*4],dl
    1f9e:	11 8f 21 00 00 b8    	adc    DWORD PTR [rdi-0x47ffffdf],ecx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1131
		if ( cl->state >= CS_CONNECTED && cl->lastPacketTime - droppoint < 0 ) {
    1fa4:	08 01                	or     BYTE PTR [rcx],al
    1fa6:	00 30                	add    BYTE PTR [rax],dh
    1fa8:	00 00                	add    BYTE PTR [rax],al
    1faa:	00 00                	add    BYTE PTR [rax],al
    1fac:	14 b5                	adc    al,0xb5
    1fae:	09 a5 21 00 00 38    	or     DWORD PTR [rbp+0x38000021],esp
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1131 (discriminator 1)
    1fb4:	0a 01                	or     al,BYTE PTR [rcx]
    1fb6:	00 30                	add    BYTE PTR [rax],dh
    1fb8:	00 00                	add    BYTE PTR [rax],al
    1fba:	00 00                	add    BYTE PTR [rax],al
    1fbc:	14 b6                	adc    al,0xb6
    1fbe:	0c 83                	or     al,0x83
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1134
			if ( ++cl->timeoutCount > 5 ) {
    1fc0:	04 00                	add    al,0x0
    1fc2:	00 f8                	add    al,bh
    1fc4:	0a 01                	or     al,BYTE PTR [rcx]
    1fc6:	00 30                	add    BYTE PTR [rax],dh
    1fc8:	00 00                	add    BYTE PTR [rax],al
    1fca:	00 00                	add    BYTE PTR [rax],al
    1fcc:	14 b7                	adc    al,0xb7
    1fce:	09 6f 00             	or     DWORD PTR [rdi+0x0],ebp
    1fd1:	00 00                	add    BYTE PTR [rax],al
    1fd3:	fc                   	cld    
    1fd4:	0a 01                	or     al,BYTE PTR [rcx]
    1fd6:	00 30                	add    BYTE PTR [rax],dh
    1fd8:	00 00                	add    BYTE PTR [rax],al
    1fda:	00 00                	add    BYTE PTR [rax],al
    1fdc:	14 b9                	adc    al,0xb9
    1fde:	09 6f 00             	or     DWORD PTR [rdi+0x0],ebp
    1fe1:	00 00                	add    BYTE PTR [rax],al
    1fe3:	00 0b                	add    BYTE PTR [rbx],cl
    1fe5:	01 00                	add    DWORD PTR [rax],eax
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1135
				SV_DropClient( cl, "timed out" );
    1fe7:	30 00                	xor    BYTE PTR [rax],al
    1fe9:	00 00                	add    BYTE PTR [rax],al
    1feb:	00 14 ba             	add    BYTE PTR [rdx+rdi*4],dl
    1fee:	09 6f 00             	or     DWORD PTR [rdi+0x0],ebp
    1ff1:	00 00                	add    BYTE PTR [rax],al
    1ff3:	04 0b                	add    al,0xb
    1ff5:	01 00                	add    DWORD PTR [rax],eax
    1ff7:	30 00                	xor    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1136
				cl->state = CS_FREE;	// don't bother with zombie state
    1ff9:	00 00                	add    BYTE PTR [rax],al
    1ffb:	00 14 bb             	add    BYTE PTR [rbx+rdi*4],dl
    1ffe:	09 6f 00             	or     DWORD PTR [rdi+0x0],ebp
    2001:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1134
			if ( ++cl->timeoutCount > 5 ) {
    2003:	08 0b                	or     BYTE PTR [rbx],cl
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1139
			cl->timeoutCount = 0;
    2005:	01 00                	add    DWORD PTR [rax],eax
    2007:	30 00                	xor    BYTE PTR [rax],al
    2009:	00 00                	add    BYTE PTR [rax],al
    200b:	00 14 bc             	add    BYTE PTR [rsp+rdi*4],dl
    200e:	09 6f 00             	or     DWORD PTR [rdi+0x0],ebp
    2011:	00 00                	add    BYTE PTR [rax],al
    2013:	0c 0b                	or     al,0xb
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1111
			continue;
    2015:	01 00                	add    DWORD PTR [rax],eax
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1109 (discriminator 2)
	for ( i = 0, cl = svs.clients ; i < sv_maxclients->integer ; i++, cl++ ) {
    2017:	30 00                	xor    BYTE PTR [rax],al
    2019:	00 00                	add    BYTE PTR [rax],al
    201b:	00 14 bd 09 6f 00 00 	add    BYTE PTR [rdi*4+0x6f09],dl
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1109 (discriminator 1)
    2022:	00 10                	add    BYTE PTR [rax],dl
    2024:	0b 01                	or     eax,DWORD PTR [rcx]
    2026:	00 30                	add    BYTE PTR [rax],dh
    2028:	00 00                	add    BYTE PTR [rax],al
    202a:	00 00                	add    BYTE PTR [rax],al
    202c:	14 be                	adc    al,0xbe
    202e:	0c 83                	or     al,0x83
    2030:	04 00                	add    al,0x0
    2032:	00 14 0b             	add    BYTE PTR [rbx+rcx*1],dl
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1142
}
    2035:	01 00                	add    DWORD PTR [rax],eax
    2037:	30 00                	xor    BYTE PTR [rax],al
SV_CheckPaused():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1150
static qboolean SV_CheckPaused( void ) {
    2039:	00 00                	add    BYTE PTR [rax],al
    203b:	00 14 bf             	add    BYTE PTR [rdi+rdi*4],dl
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1154
	return qfalse;
    203e:	09 6f 00             	or     DWORD PTR [rdi+0x0],ebp
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1184
}
    2041:	00 00                	add    BYTE PTR [rax],al
SV_FrameMsec():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1194
{
    2043:	18 0b                	sbb    BYTE PTR [rbx],cl
    2045:	01 00                	add    DWORD PTR [rax],eax
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1195
	if ( sv_fps )
    2047:	30 00                	xor    BYTE PTR [rax],al
    2049:	00 00                	add    BYTE PTR [rax],al
    204b:	00 14 c0             	add    BYTE PTR [rax+rax*8],dl
    204e:	13 b5 21 00 00 20    	adc    esi,DWORD PTR [rbp+0x20000021]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1199
		frameMsec = 1000.0f / sv_fps->value;
    2054:	0b 01                	or     eax,DWORD PTR [rcx]
    2056:	00 30                	add    BYTE PTR [rax],dh
    2058:	00 00                	add    BYTE PTR [rax],al
    205a:	00 00                	add    BYTE PTR [rax],al
    205c:	14 c1                	adc    al,0xc1
    205e:	09 6f 00             	or     DWORD PTR [rdi+0x0],ebp
    2061:	00 00                	add    BYTE PTR [rax],al
    2063:	20 4d 02             	and    BYTE PTR [rbp+0x2],cl
    2066:	00 30                	add    BYTE PTR [rax],dh
    2068:	00 00                	add    BYTE PTR [rax],al
    206a:	00 00                	add    BYTE PTR [rax],al
    206c:	14 c2                	adc    al,0xc2
    206e:	09 6f 00             	or     DWORD PTR [rdi+0x0],ebp
    2071:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1201
		if ( frameMsec < sv.timeResidual )
    2073:	24 4d                	and    al,0x4d
    2075:	02 00                	add    al,BYTE PTR [rax]
    2077:	30 00                	xor    BYTE PTR [rax],al
    2079:	00 00                	add    BYTE PTR [rax],al
    207b:	00 14 c3             	add    BYTE PTR [rbx+rax*8],dl
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1202
			return 0;
    207e:	09 6f 00             	or     DWORD PTR [rdi+0x0],ebp
    2081:	00 00                	add    BYTE PTR [rax],al
    2083:	28 4d 02             	sub    BYTE PTR [rbp+0x2],cl
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1204
			return frameMsec - sv.timeResidual;
    2086:	00 30                	add    BYTE PTR [rax],dh
    2088:	00 00                	add    BYTE PTR [rax],al
    208a:	00 00                	add    BYTE PTR [rax],al
    208c:	14 c4                	adc    al,0xc4
    208e:	0c 83                	or     al,0x83
    2090:	04 00                	add    al,0x0
    2092:	00 2c 4d 02 00 30 00 	add    BYTE PTR [rcx*2+0x300002],ch
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1208
}
    2099:	00 00                	add    BYTE PTR [rax],al
SV_TrackCvarChanges():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1217
{
    209b:	00 14 c5 0c 83 04 00 	add    BYTE PTR [rax*8+0x4830c],dl
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1221
	if ( sv_maxRate->integer && sv_maxRate->integer < 1000 ) {
    20a2:	00 30                	add    BYTE PTR [rax],dh
    20a4:	4d 02 00             	rex.WRB add r8b,BYTE PTR [r8]
    20a7:	30 00                	xor    BYTE PTR [rax],al
    20a9:	00 00                	add    BYTE PTR [rax],al
    20ab:	00 14 c6             	add    BYTE PTR [rsi+rax*8],dl
    20ae:	0d d9 10 00 00       	or     eax,0x10d9
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1221 (discriminator 1)
    20b3:	38 4d 02             	cmp    BYTE PTR [rbp+0x2],cl
    20b6:	00 30                	add    BYTE PTR [rax],dh
    20b8:	00 00                	add    BYTE PTR [rax],al
    20ba:	00 00                	add    BYTE PTR [rax],al
    20bc:	14 cb                	adc    al,0xcb
    20be:	14 c5                	adc    al,0xc5
    20c0:	21 00                	and    DWORD PTR [rax],eax
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1222
		Cvar_Set( "sv_maxRate", "1000" );
    20c2:	00 98 cd 02 00 30    	add    BYTE PTR [rax+0x300002cd],bl
    20c8:	00 00                	add    BYTE PTR [rax],al
    20ca:	00 00                	add    BYTE PTR [rax],al
    20cc:	14 cc                	adc    al,0xcc
    20ce:	15 cb 21 00 00       	adc    eax,0x21cb
    20d3:	a0 cd 02 00 30 00 00 	movabs al,ds:0x300002cd
    20da:	00 00 
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1223
		Com_DPrintf( "sv_maxRate adjusted to 1000\n" );
    20dc:	14 ce                	adc    al,0xce
    20de:	09 6f 00             	or     DWORD PTR [rdi+0x0],ebp
    20e1:	00 00                	add    BYTE PTR [rax],al
    20e3:	a8 cd                	test   al,0xcd
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1226
	if ( sv_minRate->integer && sv_minRate->integer < 1000 ) {
    20e5:	02 00                	add    al,BYTE PTR [rax]
    20e7:	30 00                	xor    BYTE PTR [rax],al
    20e9:	00 00                	add    BYTE PTR [rax],al
    20eb:	00 14 cf             	add    BYTE PTR [rdi+rcx*8],dl
    20ee:	0c d1                	or     al,0xd1
    20f0:	21 00                	and    DWORD PTR [rax],eax
    20f2:	00 ac cd 02 00 30 00 	add    BYTE PTR [rbp+rcx*8+0x300002],ch
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1226 (discriminator 1)
    20f9:	00 00                	add    BYTE PTR [rax],al
    20fb:	00 14 d0             	add    BYTE PTR [rax+rdx*8],dl
    20fe:	0c 83                	or     al,0x83
    2100:	04 00                	add    al,0x0
    2102:	00 ac dd 02 00 30 00 	add    BYTE PTR [rbp+rbx*8+0x300002],ch
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1227
		Cvar_Set( "sv_minRate", "1000" );
    2109:	00 00                	add    BYTE PTR [rax],al
    210b:	00 14 d3             	add    BYTE PTR [rbx+rdx*8],dl
    210e:	0f a8                	push   gs
    2110:	1d 00 00 b0 dd       	sbb    eax,0xddb00000
    2115:	02 00                	add    al,BYTE PTR [rax]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1228
		Com_DPrintf( "sv_minRate adjusted to 1000\n" );
    2117:	30 00                	xor    BYTE PTR [rax],al
    2119:	00 00                	add    BYTE PTR [rax],al
    211b:	00 14 d4             	add    BYTE PTR [rsp+rdx*8],dl
    211e:	0f a8                	push   gs
    2120:	1d 00 00 b8 dd       	sbb    eax,0xddb80000
    2125:	02 00                	add    al,BYTE PTR [rax]
    2127:	30 00                	xor    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1231
	Cvar_ResetGroup( CVG_SERVER, qfalse );
    2129:	00 00                	add    BYTE PTR [rax],al
    212b:	00 14 d5 0f a8 1d 00 	add    BYTE PTR [rdx*8+0x1da80f],dl
    2132:	00 c0                	add    al,al
    2134:	dd 02                	fld    QWORD PTR [rdx]
    2136:	00 30                	add    BYTE PTR [rax],dh
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1233
	if ( sv.state == SS_DEAD || !svs.clients )
    2138:	00 00                	add    BYTE PTR [rax],al
    213a:	00 00                	add    BYTE PTR [rax],al
    213c:	14 d8                	adc    al,0xd8
    213e:	0c 83                	or     al,0x83
    2140:	04 00                	add    al,0x0
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1233 (discriminator 1)
    2142:	00 c8                	add    al,cl
    2144:	dd 02                	fld    QWORD PTR [rdx]
    2146:	00 30                	add    BYTE PTR [rax],dh
    2148:	00 00                	add    BYTE PTR [rax],al
    214a:	00 00                	add    BYTE PTR [rax],al
    214c:	14 da                	adc    al,0xda
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1236
	for ( i = 0, cl = svs.clients; i < sv_maxclients->integer; i++, cl++ ) {
    214e:	0c 83                	or     al,0x83
    2150:	04 00                	add    al,0x0
    2152:	00 cc                	add    ah,cl
    2154:	dd 02                	fld    QWORD PTR [rdx]
    2156:	00 32                	add    BYTE PTR [rdx],dh
    2158:	74 6c                	je     21c6 <.debug_info+0x21c6>
    215a:	64 00 14 dc          	add    BYTE PTR fs:[rsp+rbx*8],dl
    215e:	09 e2                	or     edx,esp
    2160:	21 00                	and    DWORD PTR [rax],eax
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1237
		if ( cl->state >= CS_CONNECTED ) {
    2162:	00 d0                	add    al,dl
    2164:	dd 02                	fld    QWORD PTR [rdx]
    2166:	00 30                	add    BYTE PTR [rax],dh
    2168:	00 00                	add    BYTE PTR [rax],al
    216a:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1238
			SV_UserinfoChanged( cl, qfalse, qfalse ); // do not update userinfo, do not run filter
    216c:	14 dd                	adc    al,0xdd
    216e:	0f 8d 03 00 00 d8    	jge    ffffffffd8002177 <dlNextRound.8083+0xffffffffd7f1f78f>
    2174:	dd 02                	fld    QWORD PTR [rdx]
    2176:	00 00                	add    BYTE PTR [rax],al
    2178:	06                   	(bad)  
    2179:	be 00 00 00 8f       	mov    esi,0x8f000000
    217e:	21 00                	and    DWORD PTR [rax],eax
    2180:	00 07                	add    BYTE PTR [rdi],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1236 (discriminator 2)
	for ( i = 0, cl = svs.clients; i < sv_maxclients->integer; i++, cl++ ) {
    2182:	42 00 00             	rex.X add BYTE PTR [rax],al
    2185:	00 3f                	add    BYTE PTR [rdi],bh
    2187:	18 42 00             	sbb    BYTE PTR [rdx+0x0],al
    218a:	00 00                	add    BYTE PTR [rax],al
    218c:	ff 03                	inc    DWORD PTR [rbx]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1236 (discriminator 1)
    218e:	00 06                	add    BYTE PTR [rsi],al
    2190:	9f                   	lahf   
    2191:	21 00                	and    DWORD PTR [rax],eax
    2193:	00 9f 21 00 00 07    	add    BYTE PTR [rdi+0x7000021],bl
    2199:	42 00 00             	rex.X add BYTE PTR [rax],al
    219c:	00 2f                	add    BYTE PTR [rdi],ch
    219e:	00 09                	add    BYTE PTR [rcx],cl
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1241
}
    21a0:	08 2d 00 00 00 06    	or     BYTE PTR [rip+0x6000000],ch        # 60021a6 <dlNextRound.8083+0x5f1f7be>
SV_Restart():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1249
static void SV_Restart( const char *reason ) {
    21a6:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    21a7:	00 00                	add    BYTE PTR [rax],al
    21a9:	00 b5 21 00 00 07    	add    BYTE PTR [rbp+0x7000021],dh
    21af:	42 00 00             	rex.X add BYTE PTR [rax],al
    21b2:	00 2f                	add    BYTE PTR [rdi],ch
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1250
	qboolean sv_shutdown = qfalse;
    21b4:	00 06                	add    BYTE PTR [rsi],al
    21b6:	e4 1c                	in     al,0x1c
    21b8:	00 00                	add    BYTE PTR [rax],al
    21ba:	c5 21 00             	(bad)  
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1254
	if ( svs.clients ) {
    21bd:	00 07                	add    BYTE PTR [rdi],al
    21bf:	42 00 00             	rex.X add BYTE PTR [rax],al
    21c2:	00 1f                	add    BYTE PTR [rdi],bl
    21c4:	00 09                	add    BYTE PTR [rcx],cl
    21c6:	08 74 1d 00          	or     BYTE PTR [rbp+rbx*1+0x0],dh
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1256
		for ( i = 0; i < sv_maxclients->integer; i++ ) {
    21ca:	00 09                	add    BYTE PTR [rcx],cl
    21cc:	08 c5                	or     ch,al
    21ce:	21 00                	and    DWORD PTR [rax],eax
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1257
			if ( svs.clients[i].state >= CS_CONNECTED ) {
    21d0:	00 06                	add    BYTE PTR [rsi],al
    21d2:	83 04 00 00          	add    DWORD PTR [rax+rax*1],0x0
    21d6:	e2 21                	loop   21f9 <.debug_info+0x21f9>
    21d8:	00 00                	add    BYTE PTR [rax],al
    21da:	18 42 00             	sbb    BYTE PTR [rdx+0x0],al
    21dd:	00 00                	add    BYTE PTR [rax],al
    21df:	ff 03                	inc    DWORD PTR [rbx]
    21e1:	00 06                	add    BYTE PTR [rsi],al
    21e3:	be 00 00 00 f2       	mov    esi,0xf2000000
    21e8:	21 00                	and    DWORD PTR [rax],eax
    21ea:	00 07                	add    BYTE PTR [rdi],al
    21ec:	42 00 00             	rex.X add BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1258
				sv_shutdown = qtrue;
    21ef:	00 02                	add    BYTE PTR [rdx],al
    21f1:	00 03                	add    BYTE PTR [rbx],al
    21f3:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1259
				break;
    21f5:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1256 (discriminator 2)
		for ( i = 0; i < sv_maxclients->integer; i++ ) {
    21f7:	14 df                	adc    al,0xdf
    21f9:	03 4f 1e             	add    ecx,DWORD PTR [rdi+0x1e]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1256 (discriminator 1)
    21fc:	00 00                	add    BYTE PTR [rax],al
    21fe:	05 f2 21 00 00       	add    eax,0x21f2
    2203:	2f                   	(bad)  
    2204:	80 08 10             	or     BYTE PTR [rax],0x10
    2207:	00 14 e5 09 f0 22 00 	add    BYTE PTR [riz*8+0x22f009],dl
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1264
	sv.time = 0; // force level time reset
    220e:	00 0f                	add    BYTE PTR [rdi],cl
    2210:	00 00                	add    BYTE PTR [rax],al
    2212:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1265
	sv.restartTime = 0;
    2214:	14 e6                	adc    al,0xe6
    2216:	0b 83 04 00 00 00    	or     eax,DWORD PTR [rbx+0x4]
    221c:	0f 00 00             	sldt   WORD PTR [rax]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1267
	Cvar_VariableStringBuffer( "mapname", mapName, sizeof( mapName ) );
    221f:	00 00                	add    BYTE PTR [rax],al
    2221:	14 e8                	adc    al,0xe8
    2223:	08 6f 00             	or     BYTE PTR [rdi+0x0],ch
    2226:	00 00                	add    BYTE PTR [rax],al
    2228:	04 0f                	add    al,0xf
    222a:	00 00                	add    BYTE PTR [rax],al
    222c:	00 00                	add    BYTE PTR [rax],al
    222e:	14 e9                	adc    al,0xe9
    2230:	08 6f 00             	or     BYTE PTR [rdi+0x0],ch
    2233:	00 00                	add    BYTE PTR [rax],al
    2235:	08 0f                	or     BYTE PTR [rdi],cl
    2237:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1269
	if ( sv_shutdown ) {
    2239:	00 00                	add    BYTE PTR [rax],al
    223b:	14 eb                	adc    al,0xeb
    223d:	08 6f 00             	or     BYTE PTR [rdi+0x0],ch
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1270
		SV_Shutdown( reason );
    2240:	00 00                	add    BYTE PTR [rax],al
    2242:	0c 0f                	or     al,0xf
    2244:	00 00                	add    BYTE PTR [rax],al
    2246:	00 00                	add    BYTE PTR [rax],al
    2248:	14 ed                	adc    al,0xed
    224a:	0c f0                	or     al,0xf0
    224c:	22 00                	and    al,BYTE PTR [rax]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1273
	Cbuf_AddText( va( "map %s\n", mapName ) );
    224e:	00 10                	add    BYTE PTR [rax],dl
    2250:	0f 00 00             	sldt   WORD PTR [rax]
    2253:	00 00                	add    BYTE PTR [rax],al
    2255:	14 ee                	adc    al,0xee
    2257:	08 6f 00             	or     BYTE PTR [rdi+0x0],ch
    225a:	00 00                	add    BYTE PTR [rax],al
    225c:	18 0f                	sbb    BYTE PTR [rdi],cl
    225e:	00 00                	add    BYTE PTR [rax],al
    2260:	00 00                	add    BYTE PTR [rax],al
    2262:	14 ef                	adc    al,0xef
    2264:	11 c8                	adc    eax,ecx
    2266:	1a 00                	sbb    al,BYTE PTR [rax]
    2268:	00 20                	add    BYTE PTR [rax],ah
    226a:	0f 00 00             	sldt   WORD PTR [rax]
    226d:	00 00                	add    BYTE PTR [rax],al
    226f:	14 f0                	adc    al,0xf0
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1274
}
    2271:	08 6f 00             	or     BYTE PTR [rdi+0x0],ch
SV_Frame():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1285
void SV_Frame( int msec ) {
    2274:	00 00                	add    BYTE PTR [rax],al
    2276:	28 0f                	sub    BYTE PTR [rdi],cl
    2278:	00 00                	add    BYTE PTR [rax],al
    227a:	00 00                	add    BYTE PTR [rax],al
    227c:	14 f2                	adc    al,0xf2
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1290
	if ( Cvar_CheckGroup( CVG_SERVER ) )
    227e:	0b b3 0f 00 00 30    	or     esi,DWORD PTR [rbx+0x3000000f]
    2284:	0f 00 00             	sldt   WORD PTR [rax]
    2287:	00 00                	add    BYTE PTR [rax],al
    2289:	14 f3                	adc    al,0xf3
    228b:	08 f6                	or     dh,dh
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1291
		SV_TrackCvarChanges(); // update rate settings, etc.
    228d:	22 00                	and    al,BYTE PTR [rax]
    228f:	00 50 0f             	add    BYTE PTR [rax+0xf],dl
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1294
	if ( sv_killserver->integer ) {
    2292:	00 00                	add    BYTE PTR [rax],al
    2294:	00 00                	add    BYTE PTR [rax],al
    2296:	14 f6                	adc    al,0xf6
    2298:	08 6f 00             	or     BYTE PTR [rdi+0x0],ch
    229b:	00 00                	add    BYTE PTR [rax],al
    229d:	64 0f 00 00          	sldt   WORD PTR fs:[rax]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1295
		SV_Shutdown( "Server was killed" );
    22a1:	00 00                	add    BYTE PTR [rax],al
    22a3:	14 f7                	adc    al,0xf7
    22a5:	08 6f 00             	or     BYTE PTR [rdi+0x0],ch
    22a8:	00 00                	add    BYTE PTR [rax],al
    22aa:	68 0f 00 00 00       	push   0xf
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1296
		Cvar_Set( "sv_killserver", "0" );
    22af:	00 14 f8             	add    BYTE PTR [rax+rdi*8],dl
    22b2:	08 6f 00             	or     BYTE PTR [rdi+0x0],ch
    22b5:	00 00                	add    BYTE PTR [rax],al
    22b7:	6c                   	ins    BYTE PTR es:[rdi],dx
    22b8:	0f 00 00             	sldt   WORD PTR [rax]
    22bb:	00 00                	add    BYTE PTR [rax],al
    22bd:	14 f9                	adc    al,0xf9
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1297
		return;
    22bf:	08 6f 00             	or     BYTE PTR [rdi+0x0],ch
    22c2:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1300
	if ( !com_sv_running->integer )
    22c4:	70 0f                	jo     22d5 <.debug_info+0x22d5>
    22c6:	00 00                	add    BYTE PTR [rax],al
    22c8:	00 00                	add    BYTE PTR [rax],al
    22ca:	14 fa                	adc    al,0xfa
    22cc:	08 6f 00             	or     BYTE PTR [rdi+0x0],ch
    22cf:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1302
		if ( com_dedicated->integer )
    22d1:	74 0f                	je     22e2 <.debug_info+0x22e2>
    22d3:	00 00                	add    BYTE PTR [rax],al
    22d5:	00 00                	add    BYTE PTR [rax],al
    22d7:	14 fb                	adc    al,0xfb
    22d9:	12 06                	adc    al,BYTE PTR [rsi]
    22db:	23 00                	and    eax,DWORD PTR [rax]
    22dd:	00 78 30             	add    BYTE PTR [rax+0x30],bh
    22e0:	00 00                	add    BYTE PTR [rax],al
    22e2:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1306
			Sys_Sleep( -1 );
    22e4:	14 fc                	adc    al,0xfc
    22e6:	13 16                	adc    edx,DWORD PTR [rsi]
    22e8:	23 00                	and    eax,DWORD PTR [rax]
    22ea:	00 78 08             	add    BYTE PTR [rax+0x8],bh
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1308
		return;
    22ed:	10 00                	adc    BYTE PTR [rax],al
    22ef:	00 09                	add    BYTE PTR [rcx],cl
    22f1:	08 f2                	or     dl,dh
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1312
	if ( SV_CheckPaused() ) {
    22f3:	21 00                	and    DWORD PTR [rax],eax
    22f5:	00 06                	add    BYTE PTR [rsi],al
    22f7:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    22f8:	00 00                	add    BYTE PTR [rax],al
    22fa:	00 06                	add    BYTE PTR [rsi],al
    22fc:	23 00                	and    eax,DWORD PTR [rax]
    22fe:	00 07                	add    BYTE PTR [rdi],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1318
	frameMsec = 1000 / sv_fps->integer * com_timescale->value;
    2300:	42 00 00             	rex.X add BYTE PTR [rax],al
    2303:	00 04 00             	add    BYTE PTR [rax+rax*1],al
    2306:	06                   	(bad)  
    2307:	ce                   	(bad)  
    2308:	1a 00                	sbb    al,BYTE PTR [rax]
    230a:	00 16                	add    BYTE PTR [rsi],dl
    230c:	23 00                	and    eax,DWORD PTR [rax]
    230e:	00 07                	add    BYTE PTR [rdi],al
    2310:	42 00 00             	rex.X add BYTE PTR [rax],al
    2313:	00 7f 00             	add    BYTE PTR [rdi+0x0],bh
    2316:	09 08                	or     DWORD PTR [rax],ecx
    2318:	ce                   	(bad)  
    2319:	1a 00                	sbb    al,BYTE PTR [rax]
    231b:	00 03                	add    BYTE PTR [rbx],al
    231d:	00 00                	add    BYTE PTR [rax],al
    231f:	00 00                	add    BYTE PTR [rax],al
    2321:	14 fe                	adc    al,0xfe
    2323:	03 03                	add    eax,DWORD PTR [rbx]
    2325:	22 00                	and    al,BYTE PTR [rax]
    2327:	00 2d 73 76 73 00    	add    BYTE PTR [rip+0x737673],ch        # 7399a0 <dlNextRound.8083+0x656fb8>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1320
	if(frameMsec < 1)
    232d:	14 0f                	adc    al,0xf
    232f:	01 17                	add    DWORD PTR [rdi],edx
    2331:	1c 23                	sbb    al,0x23
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1322
		Cvar_Set( "timescale", va( "%f", sv_fps->value / 1000.0f ) );
    2333:	00 00                	add    BYTE PTR [rax],al
    2335:	2d 73 76 00 14       	sub    eax,0x14007673
    233a:	10 01                	adc    BYTE PTR [rcx],al
    233c:	12 33                	adc    dh,BYTE PTR [rbx]
    233e:	1c 00                	sbb    al,0x0
    2340:	00 2d 67 76 6d 00    	add    BYTE PTR [rip+0x6d7667],ch        # 6d99ad <dlNextRound.8083+0x5f6fc5>
    2346:	14 11                	adc    al,0x11
    2348:	01 10                	add    DWORD PTR [rax],edx
    234a:	97                   	xchg   edi,eax
    234b:	16                   	(bad)  
    234c:	00 00                	add    BYTE PTR [rax],al
    234e:	0a 00                	or     al,BYTE PTR [rax]
    2350:	00 00                	add    BYTE PTR [rax],al
    2352:	00 14 13             	add    BYTE PTR [rbx+rdx*1],dl
    2355:	01 10                	add    DWORD PTR [rax],edx
    2357:	9f                   	lahf   
    2358:	08 00                	or     BYTE PTR [rax],al
    235a:	00 0a                	add    BYTE PTR [rdx],cl
    235c:	00 00                	add    BYTE PTR [rax],al
    235e:	00 00                	add    BYTE PTR [rax],al
    2360:	14 14                	adc    al,0x14
    2362:	01 10                	add    DWORD PTR [rax],edx
    2364:	9f                   	lahf   
    2365:	08 00                	or     BYTE PTR [rax],al
    2367:	00 0a                	add    BYTE PTR [rdx],cl
    2369:	00 00                	add    BYTE PTR [rax],al
    236b:	00 00                	add    BYTE PTR [rax],al
    236d:	14 15                	adc    al,0x15
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1323
		Com_DPrintf( "timescale adjusted to %f\n", com_timescale->value );
    236f:	01 10                	add    DWORD PTR [rax],edx
    2371:	9f                   	lahf   
    2372:	08 00                	or     BYTE PTR [rax],al
    2374:	00 0a                	add    BYTE PTR [rdx],cl
    2376:	00 00                	add    BYTE PTR [rax],al
    2378:	00 00                	add    BYTE PTR [rax],al
    237a:	14 16                	adc    al,0x16
    237c:	01 10                	add    DWORD PTR [rax],edx
    237e:	9f                   	lahf   
    237f:	08 00                	or     BYTE PTR [rax],al
    2381:	00 0a                	add    BYTE PTR [rdx],cl
    2383:	00 00                	add    BYTE PTR [rax],al
    2385:	00 00                	add    BYTE PTR [rax],al
    2387:	14 17                	adc    al,0x17
    2389:	01 10                	add    DWORD PTR [rax],edx
    238b:	9f                   	lahf   
    238c:	08 00                	or     BYTE PTR [rax],al
    238e:	00 0a                	add    BYTE PTR [rdx],cl
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1324
		frameMsec = 1;
    2390:	00 00                	add    BYTE PTR [rax],al
    2392:	00 00                	add    BYTE PTR [rax],al
    2394:	14 18                	adc    al,0x18
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1327
	sv.timeResidual += msec;
    2396:	01 10                	add    DWORD PTR [rax],edx
    2398:	9f                   	lahf   
    2399:	08 00                	or     BYTE PTR [rax],al
    239b:	00 0a                	add    BYTE PTR [rdx],cl
    239d:	00 00                	add    BYTE PTR [rax],al
    239f:	00 00                	add    BYTE PTR [rax],al
    23a1:	14 19                	adc    al,0x19
    23a3:	01 10                	add    DWORD PTR [rax],edx
    23a5:	9f                   	lahf   
    23a6:	08 00                	or     BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1329
	if ( !com_dedicated->integer )
    23a8:	00 0a                	add    BYTE PTR [rdx],cl
    23aa:	00 00                	add    BYTE PTR [rax],al
    23ac:	00 00                	add    BYTE PTR [rax],al
    23ae:	14 1a                	adc    al,0x1a
    23b0:	01 10                	add    DWORD PTR [rax],edx
    23b2:	9f                   	lahf   
    23b3:	08 00                	or     BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1330
		SV_BotFrame( sv.time + sv.timeResidual );
    23b5:	00 0a                	add    BYTE PTR [rdx],cl
    23b7:	00 00                	add    BYTE PTR [rax],al
    23b9:	00 00                	add    BYTE PTR [rax],al
    23bb:	14 1b                	adc    al,0x1b
    23bd:	01 10                	add    DWORD PTR [rax],edx
    23bf:	9f                   	lahf   
    23c0:	08 00                	or     BYTE PTR [rax],al
    23c2:	00 0a                	add    BYTE PTR [rdx],cl
    23c4:	00 00                	add    BYTE PTR [rax],al
    23c6:	00 00                	add    BYTE PTR [rax],al
    23c8:	14 1d                	adc    al,0x1d
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1336
	if ( sv.time > 0x78000000 ) {
    23ca:	01 10                	add    DWORD PTR [rax],edx
    23cc:	9f                   	lahf   
    23cd:	08 00                	or     BYTE PTR [rax],al
    23cf:	00 0a                	add    BYTE PTR [rdx],cl
    23d1:	00 00                	add    BYTE PTR [rax],al
    23d3:	00 00                	add    BYTE PTR [rax],al
    23d5:	14 1e                	adc    al,0x1e
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1337
		SV_Restart( "Restarting server due to time wrapping" );
    23d7:	01 10                	add    DWORD PTR [rax],edx
    23d9:	9f                   	lahf   
    23da:	08 00                	or     BYTE PTR [rax],al
    23dc:	00 06                	add    BYTE PTR [rsi],al
    23de:	9f                   	lahf   
    23df:	08 00                	or     BYTE PTR [rax],al
    23e1:	00 ed                	add    ch,ch
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1338
		return;
    23e3:	23 00                	and    eax,DWORD PTR [rax]
    23e5:	00 07                	add    BYTE PTR [rdi],al
    23e7:	42 00 00             	rex.X add BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1342
	if ( sv.time > (12*3600*1000) && ( sv_levelTimeReset->integer == 0 || sv.time > 0x40000000 ) ) {
    23ea:	00 04 00             	add    BYTE PTR [rax+rax*1],al
    23ed:	0a 00                	or     al,BYTE PTR [rax]
    23ef:	00 00                	add    BYTE PTR [rax],al
    23f1:	00 14 1f             	add    BYTE PTR [rdi+rbx*1],dl
    23f4:	01 10                	add    DWORD PTR [rax],edx
    23f6:	dd 23                	frstor [rbx]
    23f8:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1342 (discriminator 1)
    23fa:	0a 00                	or     al,BYTE PTR [rax]
    23fc:	00 00                	add    BYTE PTR [rax],al
    23fe:	00 14 20             	add    BYTE PTR [rax+riz*1],dl
    2401:	01 10                	add    DWORD PTR [rax],edx
    2403:	9f                   	lahf   
    2404:	08 00                	or     BYTE PTR [rax],al
    2406:	00 0a                	add    BYTE PTR [rdx],cl
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1342 (discriminator 2)
    2408:	00 00                	add    BYTE PTR [rax],al
    240a:	00 00                	add    BYTE PTR [rax],al
    240c:	14 21                	adc    al,0x21
    240e:	01 10                	add    DWORD PTR [rax],edx
    2410:	9f                   	lahf   
    2411:	08 00                	or     BYTE PTR [rax],al
    2413:	00 0a                	add    BYTE PTR [rdx],cl
    2415:	00 00                	add    BYTE PTR [rax],al
    2417:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1343
		if ( svs.clients ) {
    2419:	14 22                	adc    al,0x22
    241b:	01 10                	add    DWORD PTR [rax],edx
    241d:	9f                   	lahf   
    241e:	08 00                	or     BYTE PTR [rax],al
    2420:	00 0a                	add    BYTE PTR [rdx],cl
    2422:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1344
			for ( i = 0; i < sv_maxclients->integer; i++ ) {
    2424:	00 00                	add    BYTE PTR [rax],al
    2426:	14 23                	adc    al,0x23
    2428:	01 10                	add    DWORD PTR [rax],edx
    242a:	9f                   	lahf   
    242b:	08 00                	or     BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1346
				if ( svs.clients[i].state != CS_FREE && svs.clients[i].netchan.remoteAddress.type != NA_BOT ) {
    242d:	00 0a                	add    BYTE PTR [rdx],cl
    242f:	00 00                	add    BYTE PTR [rax],al
    2431:	00 00                	add    BYTE PTR [rax],al
    2433:	14 24                	adc    al,0x24
    2435:	01 10                	add    DWORD PTR [rax],edx
    2437:	9f                   	lahf   
    2438:	08 00                	or     BYTE PTR [rax],al
    243a:	00 0a                	add    BYTE PTR [rdx],cl
    243c:	00 00                	add    BYTE PTR [rax],al
    243e:	00 00                	add    BYTE PTR [rax],al
    2440:	14 25                	adc    al,0x25
    2442:	01 10                	add    DWORD PTR [rax],edx
    2444:	9f                   	lahf   
    2445:	08 00                	or     BYTE PTR [rax],al
    2447:	00 0a                	add    BYTE PTR [rdx],cl
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1346 (discriminator 1)
    2449:	00 00                	add    BYTE PTR [rax],al
    244b:	00 00                	add    BYTE PTR [rax],al
    244d:	14 26                	adc    al,0x26
    244f:	01 10                	add    DWORD PTR [rax],edx
    2451:	9f                   	lahf   
    2452:	08 00                	or     BYTE PTR [rax],al
    2454:	00 0a                	add    BYTE PTR [rdx],cl
    2456:	00 00                	add    BYTE PTR [rax],al
    2458:	00 00                	add    BYTE PTR [rax],al
    245a:	14 27                	adc    al,0x27
    245c:	01 10                	add    DWORD PTR [rax],edx
    245e:	9f                   	lahf   
    245f:	08 00                	or     BYTE PTR [rax],al
    2461:	00 0a                	add    BYTE PTR [rdx],cl
    2463:	00 00                	add    BYTE PTR [rax],al
    2465:	00 00                	add    BYTE PTR [rax],al
    2467:	14 28                	adc    al,0x28
    2469:	01 10                	add    DWORD PTR [rax],edx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1344 (discriminator 2)
			for ( i = 0; i < sv_maxclients->integer; i++ ) {
    246b:	9f                   	lahf   
    246c:	08 00                	or     BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1344 (discriminator 1)
    246e:	00 0a                	add    BYTE PTR [rdx],cl
    2470:	00 00                	add    BYTE PTR [rax],al
    2472:	00 00                	add    BYTE PTR [rax],al
    2474:	14 29                	adc    al,0x29
    2476:	01 10                	add    DWORD PTR [rax],edx
    2478:	9f                   	lahf   
    2479:	08 00                	or     BYTE PTR [rax],al
    247b:	00 0a                	add    BYTE PTR [rdx],cl
    247d:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1347
					break;
    247f:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1350
			if ( i == sv_maxclients->integer ) {
    2481:	14 2a                	adc    al,0x2a
    2483:	01 10                	add    DWORD PTR [rax],edx
    2485:	9f                   	lahf   
    2486:	08 00                	or     BYTE PTR [rax],al
    2488:	00 0a                	add    BYTE PTR [rdx],cl
    248a:	00 00                	add    BYTE PTR [rax],al
    248c:	00 00                	add    BYTE PTR [rax],al
    248e:	14 2b                	adc    al,0x2b
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1351
				SV_Restart( "Restarting server" );
    2490:	01 10                	add    DWORD PTR [rax],edx
    2492:	9f                   	lahf   
    2493:	08 00                	or     BYTE PTR [rax],al
    2495:	00 0a                	add    BYTE PTR [rdx],cl
    2497:	00 00                	add    BYTE PTR [rax],al
    2499:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1352
				return;
    249b:	14 2c                	adc    al,0x2c
    249d:	01 10                	add    DWORD PTR [rax],edx
    249f:	9f                   	lahf   
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1357
	if ( sv.restartTime && sv.time - sv.restartTime >= 0 ) {
    24a0:	08 00                	or     BYTE PTR [rax],al
    24a2:	00 0a                	add    BYTE PTR [rdx],cl
    24a4:	00 00                	add    BYTE PTR [rax],al
    24a6:	00 00                	add    BYTE PTR [rax],al
    24a8:	14 2d                	adc    al,0x2d
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1357 (discriminator 1)
    24aa:	01 10                	add    DWORD PTR [rax],edx
    24ac:	9f                   	lahf   
    24ad:	08 00                	or     BYTE PTR [rax],al
    24af:	00 0a                	add    BYTE PTR [rdx],cl
    24b1:	00 00                	add    BYTE PTR [rax],al
    24b3:	00 00                	add    BYTE PTR [rax],al
    24b5:	14 2f                	adc    al,0x2f
    24b7:	01 10                	add    DWORD PTR [rax],edx
    24b9:	9f                   	lahf   
    24ba:	08 00                	or     BYTE PTR [rax],al
    24bc:	00 0a                	add    BYTE PTR [rdx],cl
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1358
		sv.restartTime = 0;
    24be:	00 00                	add    BYTE PTR [rax],al
    24c0:	00 00                	add    BYTE PTR [rax],al
    24c2:	14 30                	adc    al,0x30
    24c4:	01 10                	add    DWORD PTR [rax],edx
    24c6:	9f                   	lahf   
    24c7:	08 00                	or     BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1359
		Cbuf_AddText( "map_restart 0\n" );
    24c9:	00 33                	add    BYTE PTR [rbx],dh
    24cb:	28 23                	sub    BYTE PTR [rbx],ah
    24cd:	00 00                	add    BYTE PTR [rax],al
    24cf:	01 19                	add    DWORD PTR [rcx],ebx
    24d1:	10 09                	adc    BYTE PTR [rcx],cl
    24d3:	03 00                	add    eax,DWORD PTR [rax]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1360
		return;
    24d5:	00 00                	add    BYTE PTR [rax],al
    24d7:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1364
	if ( cvar_modifiedFlags & CVAR_SERVERINFO ) {
    24d9:	00 00                	add    BYTE PTR [rax],al
    24db:	00 33                	add    BYTE PTR [rbx],dh
    24dd:	35 23 00 00 01       	xor    eax,0x1000023
    24e2:	1a 0b                	sbb    cl,BYTE PTR [rbx]
    24e4:	09 03                	or     DWORD PTR [rbx],eax
	...
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1365
		SV_SetConfigstring( CS_SERVERINFO, Cvar_InfoString( CVAR_SERVERINFO, NULL ) );
    24ee:	33 41 23             	xor    eax,DWORD PTR [rcx+0x23]
    24f1:	00 00                	add    BYTE PTR [rax],al
    24f3:	01 1b                	add    DWORD PTR [rbx],ebx
    24f5:	09 09                	or     DWORD PTR [rcx],ecx
    24f7:	03 00                	add    eax,DWORD PTR [rax]
    24f9:	00 00                	add    BYTE PTR [rax],al
    24fb:	00 00                	add    BYTE PTR [rax],al
    24fd:	00 00                	add    BYTE PTR [rax],al
    24ff:	00 33                	add    BYTE PTR [rbx],dh
    2501:	4e 23 00             	rex.WRX and r8,QWORD PTR [rax]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1366
		cvar_modifiedFlags &= ~CVAR_SERVERINFO;
    2504:	00 01                	add    BYTE PTR [rcx],al
    2506:	1d 09 09 03 00       	sbb    eax,0x30909
    250b:	00 00                	add    BYTE PTR [rax],al
    250d:	00 00                	add    BYTE PTR [rax],al
    250f:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1368
	if ( cvar_modifiedFlags & CVAR_SYSTEMINFO ) {
    2511:	00 33                	add    BYTE PTR [rbx],dh
    2513:	5b                   	pop    rbx
    2514:	23 00                	and    eax,DWORD PTR [rax]
    2516:	00 01                	add    BYTE PTR [rcx],al
    2518:	1e                   	(bad)  
    2519:	09 09                	or     DWORD PTR [rcx],ecx
    251b:	03 00                	add    eax,DWORD PTR [rax]
    251d:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1369
		SV_SetConfigstring( CS_SYSTEMINFO, Cvar_InfoString_Big( CVAR_SYSTEMINFO, NULL ) );
    251f:	00 00                	add    BYTE PTR [rax],al
    2521:	00 00                	add    BYTE PTR [rax],al
    2523:	00 33                	add    BYTE PTR [rbx],dh
    2525:	68 23 00 00 01       	push   0x1000023
    252a:	1f                   	(bad)  
    252b:	09 09                	or     DWORD PTR [rcx],ecx
    252d:	03 00                	add    eax,DWORD PTR [rax]
    252f:	00 00                	add    BYTE PTR [rax],al
    2531:	00 00                	add    BYTE PTR [rax],al
    2533:	00 00                	add    BYTE PTR [rax],al
    2535:	00 33                	add    BYTE PTR [rbx],dh
    2537:	75 23                	jne    255c <.debug_info+0x255c>
    2539:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1370
		cvar_modifiedFlags &= ~CVAR_SYSTEMINFO;
    253b:	01 20                	add    DWORD PTR [rax],esp
    253d:	09 09                	or     DWORD PTR [rcx],ecx
    253f:	03 00                	add    eax,DWORD PTR [rax]
    2541:	00 00                	add    BYTE PTR [rax],al
    2543:	00 00                	add    BYTE PTR [rax],al
    2545:	00 00                	add    BYTE PTR [rax],al
    2547:	00 33                	add    BYTE PTR [rbx],dh
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1373
	if ( com_speeds->integer ) {
    2549:	82                   	(bad)  
    254a:	23 00                	and    eax,DWORD PTR [rax]
    254c:	00 01                	add    BYTE PTR [rcx],al
    254e:	21 09                	and    DWORD PTR [rcx],ecx
    2550:	09 03                	or     DWORD PTR [rbx],eax
	...
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1374
		startTime = Sys_Milliseconds();
    255a:	33 8f 23 00 00 01    	xor    ecx,DWORD PTR [rdi+0x1000023]
    2560:	22 09                	and    cl,BYTE PTR [rcx]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1376
		startTime = 0;	// quite a compiler warning
    2562:	09 03                	or     DWORD PTR [rbx],eax
	...
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1380
	SV_CalcPings();
    256c:	33 9c 23 00 00 01 23 	xor    ebx,DWORD PTR [rbx+riz*1+0x23010000]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1382
	if (com_dedicated->integer) SV_BotFrame (sv.time);
    2573:	09 09                	or     DWORD PTR [rcx],ecx
    2575:	03 00                	add    eax,DWORD PTR [rax]
    2577:	00 00                	add    BYTE PTR [rax],al
    2579:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1382 (discriminator 1)
    257b:	00 00                	add    BYTE PTR [rax],al
    257d:	00 33                	add    BYTE PTR [rbx],dh
    257f:	a9 23 00 00 01       	test   eax,0x1000023
    2584:	24 09                	and    al,0x9
    2586:	09 03                	or     DWORD PTR [rbx],eax
	...
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1386
		sv.timeResidual -= frameMsec;
    2590:	33 b6 23 00 00 01    	xor    esi,DWORD PTR [rsi+0x1000023]
    2596:	25 09 09 03 00       	and    eax,0x30909
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1387
		svs.time += frameMsec;
    259b:	00 00                	add    BYTE PTR [rax],al
    259d:	00 00                	add    BYTE PTR [rax],al
    259f:	00 00                	add    BYTE PTR [rax],al
    25a1:	00 33                	add    BYTE PTR [rbx],dh
    25a3:	c3                   	ret    
    25a4:	23 00                	and    eax,DWORD PTR [rax]
    25a6:	00 01                	add    BYTE PTR [rcx],al
    25a8:	27                   	(bad)  
    25a9:	09 09                	or     DWORD PTR [rcx],ecx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1388
		sv.time += frameMsec;
    25ab:	03 00                	add    eax,DWORD PTR [rax]
    25ad:	00 00                	add    BYTE PTR [rax],al
    25af:	00 00                	add    BYTE PTR [rax],al
    25b1:	00 00                	add    BYTE PTR [rax],al
    25b3:	00 33                	add    BYTE PTR [rbx],dh
    25b5:	d0 23                	shl    BYTE PTR [rbx],1
    25b7:	00 00                	add    BYTE PTR [rax],al
    25b9:	01 28                	add    DWORD PTR [rax],ebp
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1391
		VM_Call( gvm, 1, GAME_RUN_FRAME, sv.time );
    25bb:	09 09                	or     DWORD PTR [rcx],ecx
    25bd:	03 00                	add    eax,DWORD PTR [rax]
    25bf:	00 00                	add    BYTE PTR [rax],al
    25c1:	00 00                	add    BYTE PTR [rax],al
    25c3:	00 00                	add    BYTE PTR [rax],al
    25c5:	00 33                	add    BYTE PTR [rbx],dh
    25c7:	ed                   	in     eax,dx
    25c8:	23 00                	and    eax,DWORD PTR [rax]
    25ca:	00 01                	add    BYTE PTR [rcx],al
    25cc:	29 09                	sub    DWORD PTR [rcx],ecx
    25ce:	09 03                	or     DWORD PTR [rbx],eax
	...
    25d8:	33 fa                	xor    edi,edx
    25da:	23 00                	and    eax,DWORD PTR [rax]
    25dc:	00 01                	add    BYTE PTR [rcx],al
    25de:	2a 09                	sub    cl,BYTE PTR [rcx]
    25e0:	09 03                	or     DWORD PTR [rbx],eax
	...
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1385
	while ( sv.timeResidual >= frameMsec ) {
    25ea:	33 07                	xor    eax,DWORD PTR [rdi]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1394
	if ( com_speeds->integer ) {
    25ec:	24 00                	and    al,0x0
    25ee:	00 01                	add    BYTE PTR [rcx],al
    25f0:	2b 09                	sub    ecx,DWORD PTR [rcx]
    25f2:	09 03                	or     DWORD PTR [rbx],eax
	...
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1395
		time_game = Sys_Milliseconds () - startTime;
    25fc:	33 14 24             	xor    edx,DWORD PTR [rsp]
    25ff:	00 00                	add    BYTE PTR [rax],al
    2601:	01 2c 09             	add    DWORD PTR [rcx+rcx*1],ebp
    2604:	09 03                	or     DWORD PTR [rbx],eax
	...
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1402
	SV_IssueNewSnapshot();
    260e:	33 21                	xor    esp,DWORD PTR [rcx]
    2610:	24 00                	and    al,0x0
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1405
	SV_SendClientMessages();
    2612:	00 01                	add    BYTE PTR [rcx],al
    2614:	2d 09 09 03 00       	sub    eax,0x30909
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1408
	SV_MasterHeartbeat(HEARTBEAT_FOR_MASTER);
    2619:	00 00                	add    BYTE PTR [rax],al
    261b:	00 00                	add    BYTE PTR [rax],al
    261d:	00 00                	add    BYTE PTR [rax],al
    261f:	00 33                	add    BYTE PTR [rbx],dh
    2621:	2e 24 00             	cs and al,0x0
    2624:	00 01                	add    BYTE PTR [rcx],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1308
		return;
    2626:	2e 09 09             	or     DWORD PTR cs:[rcx],ecx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1409
}
    2629:	03 00                	add    eax,DWORD PTR [rax]
SV_RateMsec():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1425
{
    262b:	00 00                	add    BYTE PTR [rax],al
    262d:	00 00                	add    BYTE PTR [rax],al
    262f:	00 00                	add    BYTE PTR [rax],al
    2631:	00 33                	add    BYTE PTR [rbx],dh
    2633:	3b 24 00             	cmp    esp,DWORD PTR [rax+rax*1]
    2636:	00 01                	add    BYTE PTR [rcx],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1429
	if ( !client->rate )
    2638:	2f                   	(bad)  
    2639:	09 09                	or     DWORD PTR [rcx],ecx
    263b:	03 00                	add    eax,DWORD PTR [rax]
    263d:	00 00                	add    BYTE PTR [rax],al
    263f:	00 00                	add    BYTE PTR [rax],al
    2641:	00 00                	add    BYTE PTR [rax],al
    2643:	00 33                	add    BYTE PTR [rbx],dh
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1430
		return 0;
    2645:	48 24 00             	rex.W and al,0x0
    2648:	00 01                	add    BYTE PTR [rcx],al
    264a:	30 09                	xor    BYTE PTR [rcx],cl
    264c:	09 03                	or     DWORD PTR [rbx],eax
	...
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1432
	messageSize = client->netchan.lastSentSize;
    2656:	33 55 24             	xor    edx,DWORD PTR [rbp+0x24]
    2659:	00 00                	add    BYTE PTR [rax],al
    265b:	01 31                	add    DWORD PTR [rcx],esi
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1435
	if ( client->netchan.remoteAddress.type == NA_IP6 )
    265d:	09 09                	or     DWORD PTR [rcx],ecx
    265f:	03 00                	add    eax,DWORD PTR [rax]
    2661:	00 00                	add    BYTE PTR [rax],al
    2663:	00 00                	add    BYTE PTR [rax],al
    2665:	00 00                	add    BYTE PTR [rax],al
    2667:	00 33                	add    BYTE PTR [rbx],dh
    2669:	62                   	(bad)  
    266a:	24 00                	and    al,0x0
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1436
		messageSize += UDPIP6_HEADER_SIZE;
    266c:	00 01                	add    BYTE PTR [rcx],al
    266e:	32 09                	xor    cl,BYTE PTR [rcx]
    2670:	09 03                	or     DWORD PTR [rbx],eax
	...
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1441
	rateMsec = messageSize * 1000 / ((int) (client->rate * com_timescale->value));
    267a:	33 6f 24             	xor    ebp,DWORD PTR [rdi+0x24]
    267d:	00 00                	add    BYTE PTR [rax],al
    267f:	01 33                	add    DWORD PTR [rbx],esi
    2681:	09 09                	or     DWORD PTR [rcx],ecx
    2683:	03 00                	add    eax,DWORD PTR [rax]
    2685:	00 00                	add    BYTE PTR [rax],al
    2687:	00 00                	add    BYTE PTR [rax],al
    2689:	00 00                	add    BYTE PTR [rax],al
    268b:	00 33                	add    BYTE PTR [rbx],dh
    268d:	7c 24                	jl     26b3 <.debug_info+0x26b3>
    268f:	00 00                	add    BYTE PTR [rax],al
    2691:	01 34 09             	add    DWORD PTR [rcx+rcx*1],esi
    2694:	09 03                	or     DWORD PTR [rbx],eax
	...
    269e:	33 89 24 00 00 01    	xor    ecx,DWORD PTR [rcx+0x1000024]
    26a4:	35 09 09 03 00       	xor    eax,0x30909
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1442
	rate = Sys_Milliseconds() - client->netchan.lastSentTime;
    26a9:	00 00                	add    BYTE PTR [rax],al
    26ab:	00 00                	add    BYTE PTR [rax],al
    26ad:	00 00                	add    BYTE PTR [rax],al
    26af:	00 33                	add    BYTE PTR [rbx],dh
    26b1:	96                   	xchg   esi,eax
    26b2:	24 00                	and    al,0x0
    26b4:	00 01                	add    BYTE PTR [rcx],al
    26b6:	36 09 09             	or     DWORD PTR ss:[rcx],ecx
    26b9:	03 00                	add    eax,DWORD PTR [rax]
    26bb:	00 00                	add    BYTE PTR [rax],al
    26bd:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1444
	if ( rate > rateMsec )
    26bf:	00 00                	add    BYTE PTR [rax],al
    26c1:	00 33                	add    BYTE PTR [rbx],dh
    26c3:	a3 24 00 00 01 37 09 	movabs ds:0x309093701000024,eax
    26ca:	09 03 
	...
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1448
}
    26d4:	33 b0 24 00 00 01    	xor    esi,DWORD PTR [rax+0x1000024]
SV_SendQueuedPackets():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1461
{
    26da:	39 09                	cmp    DWORD PTR [rcx],ecx
    26dc:	09 03                	or     DWORD PTR [rbx],eax
	...
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1468
	delayT = SV_SendQueuedMessages();
    26e6:	33 bd 24 00 00 01    	xor    edi,DWORD PTR [rbp+0x1000024]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1469
	if(delayT >= 0)
    26ec:	3a 09                	cmp    cl,BYTE PTR [rcx]
    26ee:	09 03                	or     DWORD PTR [rbx],eax
	...
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1472
	if(sv_dlRate->integer)
    26f8:	06                   	(bad)  
    26f9:	b4 1d                	mov    ah,0x1d
    26fb:	00 00                	add    BYTE PTR [rax],al
    26fd:	09 27                	or     DWORD PTR [rdi],esp
    26ff:	00 00                	add    BYTE PTR [rax],al
    2701:	18 42 00             	sbb    BYTE PTR [rdx+0x0],al
    2704:	00 00                	add    BYTE PTR [rax],al
    2706:	ff                   	(bad)  
    2707:	3f                   	(bad)  
    2708:	00 34 00             	add    BYTE PTR [rax+rax*1],dh
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1476
		dlStart = Sys_Milliseconds();
    270b:	00 00                	add    BYTE PTR [rax],al
    270d:	00 01                	add    BYTE PTR [rcx],al
    270f:	68 01 16 f8 26       	push   0x26f81601
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1477
		deltaT = dlNextRound - dlStart;
    2714:	00 00                	add    BYTE PTR [rax],al
    2716:	09 03                	or     DWORD PTR [rbx],eax
	...
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1479
		if(deltaT > 0)
    2720:	06                   	(bad)  
    2721:	49 1e                	rex.WB (bad) 
    2723:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1481
			if(deltaT < timeVal)
    2725:	31 27                	xor    DWORD PTR [rdi],esp
    2727:	00 00                	add    BYTE PTR [rax],al
    2729:	18 42 00             	sbb    BYTE PTR [rdx+0x0],al
    272c:	00 00                	add    BYTE PTR [rax],al
    272e:	ff 03                	inc    DWORD PTR [rbx]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1482
				timeVal = deltaT + 1;
    2730:	00 34 00             	add    BYTE PTR [rax+rax*1],dh
    2733:	00 00                	add    BYTE PTR [rax],al
    2735:	00 01                	add    BYTE PTR [rcx],al
    2737:	69 01 17 20 27 00    	imul   eax,DWORD PTR [rcx],0x272017
    273d:	00 09                	add    BYTE PTR [rcx],cl
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1486
			numBlocks = SV_SendDownloadMessages();
    273f:	03 00                	add    eax,DWORD PTR [rax]
    2741:	00 00                	add    BYTE PTR [rax],al
    2743:	00 00                	add    BYTE PTR [rax],al
    2745:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1488
			if(numBlocks)
    2747:	00 34 00             	add    BYTE PTR [rax+rax*1],dh
    274a:	00 00                	add    BYTE PTR [rax],al
    274c:	00 01                	add    BYTE PTR [rcx],al
    274e:	6a 01                	push   0x1
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1491
				deltaT = Sys_Milliseconds() - dlStart;
    2750:	14 a8                	adc    al,0xa8
    2752:	1d 00 00 09 03       	sbb    eax,0x3090000
	...
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1493
				delayT = 1000 * numBlocks * MAX_DOWNLOAD_BLKSIZE;
    275f:	34 00                	xor    al,0x0
    2761:	00 00                	add    BYTE PTR [rax],al
    2763:	00 01                	add    BYTE PTR [rcx],al
    2765:	25 03 11 b3 0f       	and    eax,0xfb31103
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1494
				delayT /= sv_dlRate->integer * 1024;
    276a:	00 00                	add    BYTE PTR [rax],al
    276c:	09 03                	or     DWORD PTR [rbx],eax
	...
    2776:	35 00 00 00 00       	xor    eax,0x0
    277b:	01 b4 05 05 6f 00 00 	add    DWORD PTR [rbp+rax*1+0x6f05],esi
	...
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1505
					if(timeVal > 2)
    278a:	00 0e                	add    BYTE PTR [rsi],cl
    278c:	01 00                	add    DWORD PTR [rax],eax
    278e:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1506
						timeVal = 2;
    2790:	00 00                	add    BYTE PTR [rax],al
    2792:	00 01                	add    BYTE PTR [rcx],al
    2794:	9c                   	pushf  
    2795:	01 28                	add    DWORD PTR [rax],ebp
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1508
					dlNextRound = dlStart + deltaT + 1;
    2797:	00 00                	add    BYTE PTR [rax],al
    2799:	34 00                	xor    al,0x0
    279b:	00 00                	add    BYTE PTR [rax],al
    279d:	00 01                	add    BYTE PTR [rcx],al
    279f:	b6 05                	mov    dh,0x5
    27a1:	06                   	(bad)  
    27a2:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    27a3:	00 00                	add    BYTE PTR [rax],al
    27a5:	00 02                	add    BYTE PTR [rdx],al
    27a7:	91                   	xchg   ecx,eax
    27a8:	5c                   	pop    rsp
    27a9:	34 00                	xor    al,0x0
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1512
					dlNextRound = dlStart + delayT;
    27ab:	00 00                	add    BYTE PTR [rax],al
    27ad:	00 01                	add    BYTE PTR [rcx],al
    27af:	b7 05                	mov    bh,0x5
    27b1:	06                   	(bad)  
    27b2:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    27b3:	00 00                	add    BYTE PTR [rax],al
    27b5:	00 02                	add    BYTE PTR [rdx],al
    27b7:	91                   	xchg   ecx,eax
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1513
					delayT -= deltaT;
    27b8:	64 34 00             	fs xor al,0x0
    27bb:	00 00                	add    BYTE PTR [rax],al
    27bd:	00 01                	add    BYTE PTR [rcx],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1515
					if(delayT < timeVal)
    27bf:	b7 05                	mov    bh,0x5
    27c1:	0f 6f 00             	movq   mm0,QWORD PTR [rax]
    27c4:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1516
						timeVal = delayT;
    27c6:	02 91 60 34 00 00    	add    dl,BYTE PTR [rcx+0x3460]
    27cc:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1523
		if(SV_SendDownloadMessages())
    27ce:	01 b7 05 17 6f 00    	add    DWORD PTR [rdi+0x6f1705],esi
    27d4:	00 00                	add    BYTE PTR [rax],al
    27d6:	02 91 68 34 00 00    	add    dl,BYTE PTR [rcx+0x3468]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1524
			timeVal = 0;
    27dc:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1527
	return timeVal;
    27de:	01 b8 05 0d 6f 00    	add    DWORD PTR [rax+0x6f0d05],edi
    27e4:	00 00                	add    BYTE PTR [rax],al
    27e6:	09 03                	or     DWORD PTR [rbx],eax
	...
    27f0:	34 00                	xor    al,0x0
    27f2:	00 00                	add    BYTE PTR [rax],al
    27f4:	00 01                	add    BYTE PTR [rcx],al
    27f6:	b9 05 06 6f 00       	mov    ecx,0x6f0605
    27fb:	00 00                	add    BYTE PTR [rax],al
    27fd:	02 91 6c 00 35 00    	add    dl,BYTE PTR [rcx+0x35006c]
    2803:	00 00                	add    BYTE PTR [rax],al
    2805:	00 01                	add    BYTE PTR [rcx],al
    2807:	90                   	nop
    2808:	05 05 6f 00 00       	add    eax,0x6f05
	...
    2815:	00 aa 00 00 00 00    	add    BYTE PTR [rdx+0x0],ch
    281b:	00 00                	add    BYTE PTR [rax],al
    281d:	00 01                	add    BYTE PTR [rcx],al
    281f:	9c                   	pushf  
    2820:	65 28 00             	sub    BYTE PTR gs:[rax],al
    2823:	00 36                	add    BYTE PTR [rsi],dh
    2825:	00 00                	add    BYTE PTR [rax],al
    2827:	00 00                	add    BYTE PTR [rax],al
    2829:	01 90 05 22 65 28    	add    DWORD PTR [rax+0x28652205],edx
    282f:	00 00                	add    BYTE PTR [rax],al
    2831:	02 91 58 34 00 00    	add    dl,BYTE PTR [rcx+0x3458]
    2837:	00 00                	add    BYTE PTR [rax],al
    2839:	01 92 05 06 6f 00    	add    DWORD PTR [rdx+0x6f0605],edx
    283f:	00 00                	add    BYTE PTR [rax],al
    2841:	02 91 64 34 00 00    	add    dl,BYTE PTR [rcx+0x3464]
    2847:	00 00                	add    BYTE PTR [rax],al
    2849:	01 92 05 0c 6f 00    	add    DWORD PTR [rdx+0x6f0c05],edx
    284f:	00 00                	add    BYTE PTR [rax],al
    2851:	02 91 68 34 00 00    	add    dl,BYTE PTR [rcx+0x3468]
    2857:	00 00                	add    BYTE PTR [rax],al
    2859:	01 93 05 06 6f 00    	add    DWORD PTR [rbx+0x6f0605],edx
    285f:	00 00                	add    BYTE PTR [rax],al
    2861:	02 91 6c 00 09 08    	add    dl,BYTE PTR [rcx+0x809006c]
    2867:	fe                   	(bad)  
    2868:	21 00                	and    DWORD PTR [rax],eax
    286a:	00 37                	add    BYTE PTR [rdi],dh
    286c:	00 00                	add    BYTE PTR [rax],al
    286e:	00 00                	add    BYTE PTR [rax],al
    2870:	01 05 05 06 00 00    	add    DWORD PTR [rip+0x605],eax        # 2e7b <.debug_info+0x2e7b>
    2876:	00 00                	add    BYTE PTR [rax],al
    2878:	00 00                	add    BYTE PTR [rax],al
    287a:	00 00                	add    BYTE PTR [rax],al
    287c:	b8 03 00 00 00       	mov    eax,0x3
    2881:	00 00                	add    BYTE PTR [rax],al
    2883:	00 01                	add    BYTE PTR [rcx],al
    2885:	9c                   	pushf  
    2886:	c9                   	leave  
    2887:	28 00                	sub    BYTE PTR [rax],al
    2889:	00 36                	add    BYTE PTR [rsi],dh
    288b:	00 00                	add    BYTE PTR [rax],al
    288d:	00 00                	add    BYTE PTR [rax],al
    288f:	01 05 05 14 6f 00    	add    DWORD PTR [rip+0x6f1405],eax        # 6f3c9a <dlNextRound.8083+0x6112b2>
    2895:	00 00                	add    BYTE PTR [rax],al
    2897:	02 91 5c 34 00 00    	add    dl,BYTE PTR [rcx+0x345c]
    289d:	00 00                	add    BYTE PTR [rax],al
    289f:	01 06                	add    DWORD PTR [rsi],eax
    28a1:	05 07 6f 00 00       	add    eax,0x6f07
    28a6:	00 02                	add    BYTE PTR [rdx],al
    28a8:	91                   	xchg   ecx,eax
    28a9:	6c                   	ins    BYTE PTR es:[rdi],dx
    28aa:	34 00                	xor    al,0x0
    28ac:	00 00                	add    BYTE PTR [rax],al
    28ae:	00 01                	add    BYTE PTR [rcx],al
    28b0:	07                   	(bad)  
    28b1:	05 07 6f 00 00       	add    eax,0x6f07
    28b6:	00 02                	add    BYTE PTR [rdx],al
    28b8:	91                   	xchg   ecx,eax
    28b9:	68 38 69 00 01       	push   0x1006938
    28be:	08 05 07 6f 00 00    	or     BYTE PTR [rip+0x6f07],al        # 97cb <SV_SendQueuedPackets+0x70f6>
    28c4:	00 02                	add    BYTE PTR [rdx],al
    28c6:	91                   	xchg   ecx,eax
    28c7:	64 00 39             	add    BYTE PTR fs:[rcx],bh
    28ca:	00 00                	add    BYTE PTR [rax],al
    28cc:	00 00                	add    BYTE PTR [rax],al
    28ce:	01 e1                	add    ecx,esp
    28d0:	04 0d                	add    al,0xd
	...
    28da:	d1 00                	rol    DWORD PTR [rax],1
    28dc:	00 00                	add    BYTE PTR [rax],al
    28de:	00 00                	add    BYTE PTR [rax],al
    28e0:	00 00                	add    BYTE PTR [rax],al
    28e2:	01 9c 29 29 00 00 36 	add    DWORD PTR [rcx+rbp*1+0x36000029],ebx
    28e9:	00 00                	add    BYTE PTR [rax],al
    28eb:	00 00                	add    BYTE PTR [rax],al
    28ed:	01 e1                	add    ecx,esp
    28ef:	04 25                	add    al,0x25
    28f1:	8d 03                	lea    eax,[rbx]
    28f3:	00 00                	add    BYTE PTR [rax],al
    28f5:	03 91 d8 7d 34 00    	add    edx,DWORD PTR [rcx+0x347dd8]
    28fb:	00 00                	add    BYTE PTR [rax],al
    28fd:	00 01                	add    BYTE PTR [rcx],al
    28ff:	e2 04                	loop   2905 <.debug_info+0x2905>
    2901:	0b 83 04 00 00 02    	or     eax,DWORD PTR [rbx+0x2000004]
    2907:	91                   	xchg   ecx,eax
    2908:	6c                   	ins    BYTE PTR es:[rdi],dx
    2909:	34 00                	xor    al,0x0
    290b:	00 00                	add    BYTE PTR [rax],al
    290d:	00 01                	add    BYTE PTR [rcx],al
    290f:	e3 04                	jrcxz  2915 <.debug_info+0x2915>
    2911:	07                   	(bad)  
    2912:	a5                   	movs   DWORD PTR es:[rdi],DWORD PTR ds:[rsi]
    2913:	08 00                	or     BYTE PTR [rax],al
    2915:	00 03                	add    BYTE PTR [rbx],al
    2917:	91                   	xchg   ecx,eax
    2918:	e0 7d                	loopne 2997 <.debug_info+0x2997>
    291a:	38 69 00             	cmp    BYTE PTR [rcx+0x0],ch
    291d:	01 e4                	add    esp,esp
    291f:	04 06                	add    al,0x6
    2921:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    2922:	00 00                	add    BYTE PTR [rax],al
    2924:	00 02                	add    BYTE PTR [rdx],al
    2926:	91                   	xchg   ecx,eax
    2927:	68 00 37 00 00       	push   0x3700
    292c:	00 00                	add    BYTE PTR [rax],al
    292e:	01 c0                	add    eax,eax
    2930:	04 06                	add    al,0x6
	...
    293a:	08 01                	or     BYTE PTR [rcx],al
    293c:	00 00                	add    BYTE PTR [rax],al
    293e:	00 00                	add    BYTE PTR [rax],al
    2940:	00 00                	add    BYTE PTR [rax],al
    2942:	01 9c 66 29 00 00 38 	add    DWORD PTR [rsi+riz*2+0x38000029],ebx
    2949:	63 6c 00 01          	movsxd ebp,DWORD PTR [rax+rax*1+0x1]
    294d:	c2 04 0c             	ret    0xc04
    2950:	f0 22 00             	lock and al,BYTE PTR [rax]
    2953:	00 02                	add    BYTE PTR [rdx],al
    2955:	91                   	xchg   ecx,eax
    2956:	68 38 69 00 01       	push   0x1006938
    295b:	c3                   	ret    
    295c:	04 06                	add    al,0x6
    295e:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    295f:	00 00                	add    BYTE PTR [rax],al
    2961:	00 02                	add    BYTE PTR [rdx],al
    2963:	91                   	xchg   ecx,eax
    2964:	64 00 3a             	add    BYTE PTR fs:[rdx],bh
    2967:	00 00                	add    BYTE PTR [rax],al
    2969:	00 00                	add    BYTE PTR [rax],al
    296b:	01 a9 04 05 6f 00    	add    DWORD PTR [rcx+0x6f0504],ebp
	...
    2979:	00 00                	add    BYTE PTR [rax],al
    297b:	57                   	push   rdi
    297c:	00 00                	add    BYTE PTR [rax],al
    297e:	00 00                	add    BYTE PTR [rax],al
    2980:	00 00                	add    BYTE PTR [rax],al
    2982:	00 01                	add    BYTE PTR [rcx],al
    2984:	9c                   	pushf  
    2985:	ac                   	lods   al,BYTE PTR ds:[rsi]
    2986:	29 00                	sub    DWORD PTR [rax],eax
    2988:	00 3b                	add    BYTE PTR [rbx],bh
	...
    2992:	40 00 00             	add    BYTE PTR [rax],al
    2995:	00 00                	add    BYTE PTR [rax],al
    2997:	00 00                	add    BYTE PTR [rax],al
    2999:	00 34 00             	add    BYTE PTR [rax+rax*1],dh
    299c:	00 00                	add    BYTE PTR [rax],al
    299e:	00 01                	add    BYTE PTR [rcx],al
    29a0:	ad                   	lods   eax,DWORD PTR ds:[rsi]
    29a1:	04 07                	add    al,0x7
    29a3:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    29a4:	00 00                	add    BYTE PTR [rax],al
    29a6:	00 02                	add    BYTE PTR [rdx],al
    29a8:	91                   	xchg   ecx,eax
    29a9:	6c                   	ins    BYTE PTR es:[rdi],dx
    29aa:	00 00                	add    BYTE PTR [rax],al
    29ac:	3c 00                	cmp    al,0x0
    29ae:	00 00                	add    BYTE PTR [rax],al
    29b0:	00 01                	add    BYTE PTR [rcx],al
    29b2:	7e 04                	jle    29b8 <.debug_info+0x29b8>
    29b4:	11 83 04 00 00 00    	adc    DWORD PTR [rbx+0x4],eax
    29ba:	00 00                	add    BYTE PTR [rax],al
    29bc:	00 00                	add    BYTE PTR [rax],al
    29be:	00 00                	add    BYTE PTR [rax],al
    29c0:	00 0b                	add    BYTE PTR [rbx],cl
    29c2:	00 00                	add    BYTE PTR [rax],al
    29c4:	00 00                	add    BYTE PTR [rax],al
    29c6:	00 00                	add    BYTE PTR [rax],al
    29c8:	00 01                	add    BYTE PTR [rcx],al
    29ca:	9c                   	pushf  
    29cb:	39 00                	cmp    DWORD PTR [rax],eax
    29cd:	00 00                	add    BYTE PTR [rax],al
    29cf:	00 01                	add    BYTE PTR [rcx],al
    29d1:	4c 04 0d             	rex.WR add al,0xd
	...
    29dc:	c2 01 00             	ret    0x1
    29df:	00 00                	add    BYTE PTR [rax],al
    29e1:	00 00                	add    BYTE PTR [rax],al
    29e3:	00 01                	add    BYTE PTR [rcx],al
    29e5:	9c                   	pushf  
    29e6:	28 2a                	sub    BYTE PTR [rdx],ch
    29e8:	00 00                	add    BYTE PTR [rax],al
    29ea:	38 69 00             	cmp    BYTE PTR [rcx+0x0],ch
    29ed:	01 4d 04             	add    DWORD PTR [rbp+0x4],ecx
    29f0:	07                   	(bad)  
    29f1:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    29f2:	00 00                	add    BYTE PTR [rax],al
    29f4:	00 02                	add    BYTE PTR [rdx],al
    29f6:	91                   	xchg   ecx,eax
    29f7:	6c                   	ins    BYTE PTR es:[rdi],dx
    29f8:	38 63 6c             	cmp    BYTE PTR [rbx+0x6c],ah
    29fb:	00 01                	add    BYTE PTR [rcx],al
    29fd:	4e 04 0c             	rex.WRX add al,0xc
    2a00:	f0 22 00             	lock and al,BYTE PTR [rax]
    2a03:	00 02                	add    BYTE PTR [rdx],al
    2a05:	91                   	xchg   ecx,eax
    2a06:	60                   	(bad)  
    2a07:	34 00                	xor    al,0x0
    2a09:	00 00                	add    BYTE PTR [rax],al
    2a0b:	00 01                	add    BYTE PTR [rcx],al
    2a0d:	4f 04 08             	rex.WRXB add al,0x8
    2a10:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    2a11:	00 00                	add    BYTE PTR [rax],al
    2a13:	00 02                	add    BYTE PTR [rdx],al
    2a15:	91                   	xchg   ecx,eax
    2a16:	5c                   	pop    rsp
    2a17:	34 00                	xor    al,0x0
    2a19:	00 00                	add    BYTE PTR [rax],al
    2a1b:	00 01                	add    BYTE PTR [rcx],al
    2a1d:	50                   	push   rax
    2a1e:	04 08                	add    al,0x8
    2a20:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    2a21:	00 00                	add    BYTE PTR [rax],al
    2a23:	00 02                	add    BYTE PTR [rdx],al
    2a25:	91                   	xchg   ecx,eax
    2a26:	58                   	pop    rax
    2a27:	00 39                	add    BYTE PTR [rcx],bh
    2a29:	00 00                	add    BYTE PTR [rax],al
    2a2b:	00 00                	add    BYTE PTR [rax],al
    2a2d:	01 10                	add    DWORD PTR [rax],edx
    2a2f:	04 0d                	add    al,0xd
	...
    2a39:	9f                   	lahf   
    2a3a:	01 00                	add    DWORD PTR [rax],eax
    2a3c:	00 00                	add    BYTE PTR [rax],al
    2a3e:	00 00                	add    BYTE PTR [rax],al
    2a40:	00 01                	add    BYTE PTR [rcx],al
    2a42:	9c                   	pushf  
    2a43:	b2 2a                	mov    dl,0x2a
    2a45:	00 00                	add    BYTE PTR [rax],al
    2a47:	38 69 00             	cmp    BYTE PTR [rcx+0x0],ch
    2a4a:	01 11                	add    DWORD PTR [rcx],edx
    2a4c:	04 08                	add    al,0x8
    2a4e:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    2a4f:	00 00                	add    BYTE PTR [rax],al
    2a51:	00 02                	add    BYTE PTR [rdx],al
    2a53:	91                   	xchg   ecx,eax
    2a54:	6c                   	ins    BYTE PTR es:[rdi],dx
    2a55:	38 6a 00             	cmp    BYTE PTR [rdx+0x0],ch
    2a58:	01 11                	add    DWORD PTR [rcx],edx
    2a5a:	04 0b                	add    al,0xb
    2a5c:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    2a5d:	00 00                	add    BYTE PTR [rax],al
    2a5f:	00 02                	add    BYTE PTR [rdx],al
    2a61:	91                   	xchg   ecx,eax
    2a62:	68 38 63 6c 00       	push   0x6c6338
    2a67:	01 12                	add    DWORD PTR [rdx],edx
    2a69:	04 0c                	add    al,0xc
    2a6b:	f0 22 00             	lock and al,BYTE PTR [rax]
    2a6e:	00 02                	add    BYTE PTR [rdx],al
    2a70:	91                   	xchg   ecx,eax
    2a71:	58                   	pop    rax
    2a72:	34 00                	xor    al,0x0
    2a74:	00 00                	add    BYTE PTR [rax],al
    2a76:	00 01                	add    BYTE PTR [rcx],al
    2a78:	13 04 08             	adc    eax,DWORD PTR [rax+rcx*1]
    2a7b:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    2a7c:	00 00                	add    BYTE PTR [rax],al
    2a7e:	00 02                	add    BYTE PTR [rdx],al
    2a80:	91                   	xchg   ecx,eax
    2a81:	64 34 00             	fs xor al,0x0
    2a84:	00 00                	add    BYTE PTR [rax],al
    2a86:	00 01                	add    BYTE PTR [rcx],al
    2a88:	13 04 0f             	adc    eax,DWORD PTR [rdi+rcx*1]
    2a8b:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    2a8c:	00 00                	add    BYTE PTR [rax],al
    2a8e:	00 02                	add    BYTE PTR [rdx],al
    2a90:	91                   	xchg   ecx,eax
    2a91:	60                   	(bad)  
    2a92:	34 00                	xor    al,0x0
    2a94:	00 00                	add    BYTE PTR [rax],al
    2a96:	00 01                	add    BYTE PTR [rcx],al
    2a98:	14 04                	adc    al,0x4
    2a9a:	08 6f 00             	or     BYTE PTR [rdi+0x0],ch
    2a9d:	00 00                	add    BYTE PTR [rax],al
    2a9f:	02 91 54 38 70 73    	add    dl,BYTE PTR [rcx+0x73703854]
    2aa5:	00 01                	add    BYTE PTR [rcx],al
    2aa7:	15 04 11 69 18       	adc    eax,0x18691104
    2aac:	00 00                	add    BYTE PTR [rax],al
    2aae:	02 91 48 00 37 00    	add    dl,BYTE PTR [rcx+0x370048]
    2ab4:	00 00                	add    BYTE PTR [rax],al
    2ab6:	00 01                	add    BYTE PTR [rcx],al
    2ab8:	cd 03                	int    0x3
    2aba:	06                   	(bad)  
	...
    2ac3:	8f 01                	pop    QWORD PTR [rcx]
    2ac5:	00 00                	add    BYTE PTR [rax],al
    2ac7:	00 00                	add    BYTE PTR [rax],al
    2ac9:	00 00                	add    BYTE PTR [rax],al
    2acb:	01 9c 1f 2b 00 00 36 	add    DWORD PTR [rdi+rbx*1+0x3600002b],ebx
    2ad2:	00 00                	add    BYTE PTR [rax],al
    2ad4:	00 00                	add    BYTE PTR [rax],al
    2ad6:	01 cd                	add    ebp,ecx
    2ad8:	03 26                	add    esp,DWORD PTR [rsi]
    2ada:	1f                   	(bad)  
    2adb:	2b 00                	sub    eax,DWORD PTR [rax]
    2add:	00 02                	add    BYTE PTR [rdx],al
    2adf:	91                   	xchg   ecx,eax
    2ae0:	48 3d 6d 73 67 00    	cmp    rax,0x67736d
    2ae6:	01 cd                	add    ebp,ecx
    2ae8:	03 33                	add    esi,DWORD PTR [rbx]
    2aea:	25 2b 00 00 02       	and    eax,0x200002b
    2aef:	91                   	xchg   ecx,eax
    2af0:	40 38 69 00          	cmp    BYTE PTR [rcx+0x0],bpl
    2af4:	01 ce                	add    esi,ecx
    2af6:	03 08                	add    ecx,DWORD PTR [rax]
    2af8:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    2af9:	00 00                	add    BYTE PTR [rax],al
    2afb:	00 02                	add    BYTE PTR [rdx],al
    2afd:	91                   	xchg   ecx,eax
    2afe:	6c                   	ins    BYTE PTR es:[rdi],dx
    2aff:	38 63 6c             	cmp    BYTE PTR [rbx+0x6c],ah
    2b02:	00 01                	add    BYTE PTR [rcx],al
    2b04:	cf                   	iret   
    2b05:	03 0c f0             	add    ecx,DWORD PTR [rax+rsi*8]
    2b08:	22 00                	and    al,BYTE PTR [rax]
    2b0a:	00 02                	add    BYTE PTR [rdx],al
    2b0c:	91                   	xchg   ecx,eax
    2b0d:	60                   	(bad)  
    2b0e:	34 00                	xor    al,0x0
    2b10:	00 00                	add    BYTE PTR [rax],al
    2b12:	00 01                	add    BYTE PTR [rcx],al
    2b14:	d0 03                	rol    BYTE PTR [rbx],1
    2b16:	08 6f 00             	or     BYTE PTR [rdi+0x0],ch
    2b19:	00 00                	add    BYTE PTR [rax],al
    2b1b:	02 91 5c 00 09 08    	add    dl,BYTE PTR [rcx+0x809005c]
    2b21:	bf 0f 00 00 09       	mov    edi,0x900000f
    2b26:	08 c7                	or     bh,al
    2b28:	0e                   	(bad)  
    2b29:	00 00                	add    BYTE PTR [rax],al
    2b2b:	39 00                	cmp    DWORD PTR [rax],eax
    2b2d:	00 00                	add    BYTE PTR [rax],al
    2b2f:	00 01                	add    BYTE PTR [rcx],al
    2b31:	8b 03                	mov    eax,DWORD PTR [rbx]
    2b33:	0d 00 00 00 00       	or     eax,0x0
    2b38:	00 00                	add    BYTE PTR [rax],al
    2b3a:	00 00                	add    BYTE PTR [rax],al
    2b3c:	58                   	pop    rax
    2b3d:	02 00                	add    al,BYTE PTR [rax]
    2b3f:	00 00                	add    BYTE PTR [rax],al
    2b41:	00 00                	add    BYTE PTR [rax],al
    2b43:	00 01                	add    BYTE PTR [rcx],al
    2b45:	9c                   	pushf  
    2b46:	87 2b                	xchg   DWORD PTR [rbx],ebp
    2b48:	00 00                	add    BYTE PTR [rax],al
    2b4a:	36 00 00             	add    BYTE PTR ss:[rax],al
    2b4d:	00 00                	add    BYTE PTR [rax],al
    2b4f:	01 8b 03 36 1f 2b    	add    DWORD PTR [rbx+0x2b1f3603],ecx
    2b55:	00 00                	add    BYTE PTR [rax],al
    2b57:	02 91 48 3d 6d 73    	add    dl,BYTE PTR [rcx+0x736d3d48]
    2b5d:	67 00 01             	add    BYTE PTR [ecx],al
    2b60:	8b 03                	mov    eax,DWORD PTR [rbx]
    2b62:	43 25 2b 00 00 02    	rex.XB and eax,0x200002b
    2b68:	91                   	xchg   ecx,eax
    2b69:	40 38 73 00          	cmp    BYTE PTR [rbx+0x0],sil
    2b6d:	01 8c 03 0e 8d 03 00 	add    DWORD PTR [rbx+rax*1+0x38d0e],ecx
    2b74:	00 02                	add    BYTE PTR [rdx],al
    2b76:	91                   	xchg   ecx,eax
    2b77:	58                   	pop    rax
    2b78:	38 63 00             	cmp    BYTE PTR [rbx+0x0],ah
    2b7b:	01 8d 03 0e 8d 03    	add    DWORD PTR [rbp+0x38d0e03],ecx
    2b81:	00 00                	add    BYTE PTR [rax],al
    2b83:	02 91 50 00 39 00    	add    dl,BYTE PTR [rcx+0x390050]
    2b89:	00 00                	add    BYTE PTR [rax],al
    2b8b:	00 01                	add    BYTE PTR [rcx],al
    2b8d:	39 03                	cmp    DWORD PTR [rbx],eax
    2b8f:	0d 00 00 00 00       	or     eax,0x0
    2b94:	00 00                	add    BYTE PTR [rax],al
    2b96:	00 00                	add    BYTE PTR [rax],al
    2b98:	d3 02                	rol    DWORD PTR [rdx],cl
    2b9a:	00 00                	add    BYTE PTR [rax],al
    2b9c:	00 00                	add    BYTE PTR [rax],al
    2b9e:	00 00                	add    BYTE PTR [rax],al
    2ba0:	01 9c 0f 2c 00 00 36 	add    DWORD PTR [rdi+rcx*1+0x3600002c],ebx
    2ba7:	00 00                	add    BYTE PTR [rax],al
    2ba9:	00 00                	add    BYTE PTR [rax],al
    2bab:	01 39                	add    DWORD PTR [rcx],edi
    2bad:	03 30                	add    esi,DWORD PTR [rax]
    2baf:	1f                   	(bad)  
    2bb0:	2b 00                	sub    eax,DWORD PTR [rax]
    2bb2:	00 03                	add    BYTE PTR [rbx],al
    2bb4:	91                   	xchg   ecx,eax
    2bb5:	c8 77 34 00          	enter  0x3477,0x0
    2bb9:	00 00                	add    BYTE PTR [rax],al
    2bbb:	00 01                	add    BYTE PTR [rcx],al
    2bbd:	3a 03                	cmp    al,BYTE PTR [rbx]
    2bbf:	15 a8 1d 00 00       	adc    eax,0x1da8
    2bc4:	09 03                	or     DWORD PTR [rbx],eax
	...
    2bce:	34 00                	xor    al,0x0
    2bd0:	00 00                	add    BYTE PTR [rax],al
    2bd2:	00 01                	add    BYTE PTR [rcx],al
    2bd4:	3b 03                	cmp    eax,DWORD PTR [rbx]
    2bd6:	0b 83 04 00 00 02    	or     eax,DWORD PTR [rbx+0x2000004]
    2bdc:	91                   	xchg   ecx,eax
    2bdd:	5c                   	pop    rsp
    2bde:	34 00                	xor    al,0x0
    2be0:	00 00                	add    BYTE PTR [rax],al
    2be2:	00 01                	add    BYTE PTR [rcx],al
    2be4:	3e 03 08             	add    ecx,DWORD PTR ds:[rax]
    2be7:	0f 2c 00             	cvttps2pi mm0,QWORD PTR [rax]
    2bea:	00 03                	add    BYTE PTR [rbx],al
    2bec:	91                   	xchg   ecx,eax
    2bed:	d0 77 34             	shl    BYTE PTR [rdi+0x34],1
    2bf0:	00 00                	add    BYTE PTR [rax],al
    2bf2:	00 00                	add    BYTE PTR [rax],al
    2bf4:	01 3f                	add    DWORD PTR [rdi],edi
    2bf6:	03 0e                	add    ecx,DWORD PTR [rsi]
    2bf8:	8d 03                	lea    eax,[rbx]
    2bfa:	00 00                	add    BYTE PTR [rax],al
    2bfc:	02 91 50 38 70 77    	add    dl,BYTE PTR [rcx+0x77703850]
    2c02:	00 01                	add    BYTE PTR [rcx],al
    2c04:	3f                   	(bad)  
    2c05:	03 18                	add    ebx,DWORD PTR [rax]
    2c07:	8d 03                	lea    eax,[rbx]
    2c09:	00 00                	add    BYTE PTR [rax],al
    2c0b:	02 91 48 00 06 be    	add    dl,BYTE PTR [rcx-0x41f9ffb8]
    2c11:	00 00                	add    BYTE PTR [rax],al
    2c13:	00 20                	add    BYTE PTR [rax],ah
    2c15:	2c 00                	sub    al,0x0
    2c17:	00 18                	add    BYTE PTR [rax],bl
    2c19:	42 00 00             	rex.X add BYTE PTR [rax],al
    2c1c:	00 ef                	add    bh,ch
    2c1e:	03 00                	add    eax,DWORD PTR [rax]
    2c20:	39 00                	cmp    DWORD PTR [rax],eax
    2c22:	00 00                	add    BYTE PTR [rax],al
    2c24:	00 01                	add    BYTE PTR [rcx],al
    2c26:	27                   	(bad)  
    2c27:	03 0d 00 00 00 00    	add    ecx,DWORD PTR [rip+0x0]        # 2c2d <.debug_info+0x2c2d>
    2c2d:	00 00                	add    BYTE PTR [rax],al
    2c2f:	00 00                	add    BYTE PTR [rax],al
    2c31:	3e 00 00             	add    BYTE PTR ds:[rax],al
    2c34:	00 00                	add    BYTE PTR [rax],al
    2c36:	00 00                	add    BYTE PTR [rax],al
    2c38:	00 01                	add    BYTE PTR [rcx],al
    2c3a:	9c                   	pushf  
    2c3b:	50                   	push   rax
    2c3c:	2c 00                	sub    al,0x0
    2c3e:	00 36                	add    BYTE PTR [rsi],dh
    2c40:	00 00                	add    BYTE PTR [rax],al
    2c42:	00 00                	add    BYTE PTR [rax],al
    2c44:	01 27                	add    DWORD PTR [rdi],esp
    2c46:	03 2b                	add    ebp,DWORD PTR [rbx]
    2c48:	8d 03                	lea    eax,[rbx]
    2c4a:	00 00                	add    BYTE PTR [rax],al
    2c4c:	02 91 68 00 39 00    	add    dl,BYTE PTR [rcx+0x390068]
    2c52:	00 00                	add    BYTE PTR [rax],al
    2c54:	00 01                	add    BYTE PTR [rcx],al
    2c56:	d7                   	xlat   BYTE PTR ds:[rbx]
    2c57:	02 0d 00 00 00 00    	add    cl,BYTE PTR [rip+0x0]        # 2c5d <.debug_info+0x2c5d>
    2c5d:	00 00                	add    BYTE PTR [rax],al
    2c5f:	00 00                	add    BYTE PTR [rax],al
    2c61:	be 03 00 00 00       	mov    esi,0x3
    2c66:	00 00                	add    BYTE PTR [rax],al
    2c68:	00 01                	add    BYTE PTR [rcx],al
    2c6a:	9c                   	pushf  
    2c6b:	d0 2c 00             	shr    BYTE PTR [rax+rax*1],1
    2c6e:	00 36                	add    BYTE PTR [rsi],dh
    2c70:	00 00                	add    BYTE PTR [rax],al
    2c72:	00 00                	add    BYTE PTR [rax],al
    2c74:	01 d7                	add    edi,edx
    2c76:	02 27                	add    ah,BYTE PTR [rdi]
    2c78:	1f                   	(bad)  
    2c79:	2b 00                	sub    eax,DWORD PTR [rax]
    2c7b:	00 03                	add    BYTE PTR [rbx],al
    2c7d:	91                   	xchg   ecx,eax
    2c7e:	c8 77 38 69          	enter  0x3877,0x69
    2c82:	00 01                	add    BYTE PTR [rcx],al
    2c84:	d8 02                	fadd   DWORD PTR [rdx]
    2c86:	07                   	(bad)  
    2c87:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    2c88:	00 00                	add    BYTE PTR [rax],al
    2c8a:	00 02                	add    BYTE PTR [rdx],al
    2c8c:	91                   	xchg   ecx,eax
    2c8d:	6c                   	ins    BYTE PTR es:[rdi],dx
    2c8e:	34 00                	xor    al,0x0
    2c90:	00 00                	add    BYTE PTR [rax],al
    2c92:	00 01                	add    BYTE PTR [rcx],al
    2c94:	d8 02                	fadd   DWORD PTR [rdx]
    2c96:	0a 6f 00             	or     ch,BYTE PTR [rdi+0x0]
    2c99:	00 00                	add    BYTE PTR [rax],al
    2c9b:	02 91 68 34 00 00    	add    dl,BYTE PTR [rcx+0x3468]
    2ca1:	00 00                	add    BYTE PTR [rax],al
    2ca3:	01 d8                	add    eax,ebx
    2ca5:	02 11                	add    dl,BYTE PTR [rcx]
    2ca7:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    2ca8:	00 00                	add    BYTE PTR [rax],al
    2caa:	00 02                	add    BYTE PTR [rdx],al
    2cac:	91                   	xchg   ecx,eax
    2cad:	64 34 00             	fs xor al,0x0
    2cb0:	00 00                	add    BYTE PTR [rax],al
    2cb2:	00 01                	add    BYTE PTR [rcx],al
    2cb4:	d9 02                	fld    DWORD PTR [rdx]
    2cb6:	0e                   	(bad)  
    2cb7:	8d 03                	lea    eax,[rbx]
    2cb9:	00 00                	add    BYTE PTR [rax],al
    2cbb:	02 91 58 34 00 00    	add    dl,BYTE PTR [rcx+0x3458]
    2cc1:	00 00                	add    BYTE PTR [rax],al
    2cc3:	01 da                	add    edx,ebx
    2cc5:	02 07                	add    al,BYTE PTR [rdi]
    2cc7:	8b 06                	mov    eax,DWORD PTR [rsi]
    2cc9:	00 00                	add    BYTE PTR [rax],al
    2ccb:	03 91 d0 77 00 39    	add    edx,DWORD PTR [rcx+0x390077d0]
    2cd1:	00 00                	add    BYTE PTR [rax],al
    2cd3:	00 00                	add    BYTE PTR [rax],al
    2cd5:	01 8b 02 0d 00 00    	add    DWORD PTR [rbx+0xd02],ecx
    2cdb:	00 00                	add    BYTE PTR [rax],al
    2cdd:	00 00                	add    BYTE PTR [rax],al
    2cdf:	00 00                	add    BYTE PTR [rax],al
    2ce1:	3e 02 00             	add    al,BYTE PTR ds:[rax]
    2ce4:	00 00                	add    BYTE PTR [rax],al
    2ce6:	00 00                	add    BYTE PTR [rax],al
    2ce8:	00 01                	add    BYTE PTR [rcx],al
    2cea:	9c                   	pushf  
    2ceb:	8e 2d 00 00 36 00    	mov    gs,WORD PTR [rip+0x360000]        # 362cf1 <dlNextRound.8083+0x280309>
    2cf1:	00 00                	add    BYTE PTR [rax],al
    2cf3:	00 01                	add    BYTE PTR [rcx],al
    2cf5:	8b 02                	mov    eax,DWORD PTR [rdx]
    2cf7:	29 1f                	sub    DWORD PTR [rdi],ebx
    2cf9:	2b 00                	sub    eax,DWORD PTR [rax]
    2cfb:	00 03                	add    BYTE PTR [rbx],al
    2cfd:	91                   	xchg   ecx,eax
    2cfe:	d8 6a 34             	fsubr  DWORD PTR [rdx+0x34]
    2d01:	00 00                	add    BYTE PTR [rax],al
    2d03:	00 00                	add    BYTE PTR [rax],al
    2d05:	01 8c 02 07 32 0e 00 	add    DWORD PTR [rdx+rax*1+0xe3207],ecx
    2d0c:	00 03                	add    BYTE PTR [rbx],al
    2d0e:	91                   	xchg   ecx,eax
    2d0f:	80 7f 34 00          	cmp    BYTE PTR [rdi+0x34],0x0
    2d13:	00 00                	add    BYTE PTR [rax],al
    2d15:	00 01                	add    BYTE PTR [rcx],al
    2d17:	8d 02                	lea    eax,[rdx]
    2d19:	07                   	(bad)  
    2d1a:	8e 2d 00 00 03 91    	mov    gs,WORD PTR [rip+0xffffffff91030000]        # ffffffff91032d20 <dlNextRound.8083+0xffffffff90f50338>
    2d20:	80 74 38 73 00       	xor    BYTE PTR [rax+rdi*1+0x73],0x0
    2d25:	01 8e 02 08 b8 00    	add    DWORD PTR [rsi+0xb80802],ecx
    2d2b:	00 00                	add    BYTE PTR [rax],al
    2d2d:	02 91 68 38 69 00    	add    dl,BYTE PTR [rcx+0x693868]
    2d33:	01 8f 02 07 6f 00    	add    DWORD PTR [rdi+0x6f0702],ecx
    2d39:	00 00                	add    BYTE PTR [rax],al
    2d3b:	02 91 64 38 63 6c    	add    dl,BYTE PTR [rcx+0x6c633864]
    2d41:	00 01                	add    BYTE PTR [rcx],al
    2d43:	90                   	nop
    2d44:	02 0c f0             	add    cl,BYTE PTR [rax+rsi*8]
    2d47:	22 00                	and    al,BYTE PTR [rax]
    2d49:	00 02                	add    BYTE PTR [rdx],al
    2d4b:	91                   	xchg   ecx,eax
    2d4c:	58                   	pop    rax
    2d4d:	38 70 73             	cmp    BYTE PTR [rax+0x73],dh
    2d50:	00 01                	add    BYTE PTR [rcx],al
    2d52:	91                   	xchg   ecx,eax
    2d53:	02 11                	add    dl,BYTE PTR [rcx]
    2d55:	69 18 00 00 02 91    	imul   ebx,DWORD PTR [rax],0x91020000
    2d5b:	50                   	push   rax
    2d5c:	34 00                	xor    al,0x0
    2d5e:	00 00                	add    BYTE PTR [rax],al
    2d60:	00 01                	add    BYTE PTR [rcx],al
    2d62:	92                   	xchg   edx,eax
    2d63:	02 07                	add    al,BYTE PTR [rdi]
    2d65:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    2d66:	00 00                	add    BYTE PTR [rax],al
    2d68:	00 02                	add    BYTE PTR [rdx],al
    2d6a:	91                   	xchg   ecx,eax
    2d6b:	60                   	(bad)  
    2d6c:	34 00                	xor    al,0x0
    2d6e:	00 00                	add    BYTE PTR [rax],al
    2d70:	00 01                	add    BYTE PTR [rcx],al
    2d72:	93                   	xchg   ebx,eax
    2d73:	02 07                	add    al,BYTE PTR [rdi]
    2d75:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    2d76:	00 00                	add    BYTE PTR [rax],al
    2d78:	00 02                	add    BYTE PTR [rdx],al
    2d7a:	91                   	xchg   ecx,eax
    2d7b:	4c 34 00             	rex.WR xor al,0x0
    2d7e:	00 00                	add    BYTE PTR [rax],al
    2d80:	00 01                	add    BYTE PTR [rcx],al
    2d82:	94                   	xchg   esp,eax
    2d83:	02 07                	add    al,BYTE PTR [rdi]
    2d85:	9f                   	lahf   
    2d86:	2d 00 00 03 91       	sub    eax,0x91030000
    2d8b:	e0 6a                	loopne 2df7 <.debug_info+0x2df7>
    2d8d:	00 06                	add    BYTE PTR [rsi],al
    2d8f:	be 00 00 00 9f       	mov    esi,0x9f000000
    2d94:	2d 00 00 18 42       	sub    eax,0x42180000
    2d99:	00 00                	add    BYTE PTR [rax],al
    2d9b:	00 77 05             	add    BYTE PTR [rdi+0x5],dh
    2d9e:	00 06                	add    BYTE PTR [rsi],al
    2da0:	be 00 00 00 b0       	mov    esi,0xb0000000
    2da5:	2d 00 00 18 42       	sub    eax,0x42180000
    2daa:	00 00                	add    BYTE PTR [rax],al
    2dac:	00 9f 04 00 37 00    	add    BYTE PTR [rdi+0x370004],bl
    2db2:	00 00                	add    BYTE PTR [rax],al
    2db4:	00 01                	add    BYTE PTR [rcx],al
    2db6:	7b 02                	jnp    2dba <.debug_info+0x2dba>
    2db8:	06                   	(bad)  
	...
    2dc1:	3e 00 00             	add    BYTE PTR ds:[rax],al
    2dc4:	00 00                	add    BYTE PTR [rax],al
    2dc6:	00 00                	add    BYTE PTR [rax],al
    2dc8:	00 01                	add    BYTE PTR [rcx],al
    2dca:	9c                   	pushf  
    2dcb:	10 2e                	adc    BYTE PTR [rsi],ch
    2dcd:	00 00                	add    BYTE PTR [rax],al
    2dcf:	36 00 00             	add    BYTE PTR ss:[rax],al
    2dd2:	00 00                	add    BYTE PTR [rax],al
    2dd4:	01 7b 02             	add    DWORD PTR [rbx+0x2],edi
    2dd7:	2b 1f                	sub    ebx,DWORD PTR [rdi]
    2dd9:	2b 00                	sub    eax,DWORD PTR [rax]
    2ddb:	00 02                	add    BYTE PTR [rdx],al
    2ddd:	91                   	xchg   ecx,eax
    2dde:	58                   	pop    rax
    2ddf:	36 00 00             	add    BYTE PTR ss:[rax],al
    2de2:	00 00                	add    BYTE PTR [rax],al
    2de4:	01 7b 02             	add    DWORD PTR [rbx+0x2],edi
    2de7:	35 6f 00 00 00       	xor    eax,0x6f
    2dec:	02 91 54 36 00 00    	add    dl,BYTE PTR [rcx+0x3654]
    2df2:	00 00                	add    BYTE PTR [rax],al
    2df4:	01 7b 02             	add    DWORD PTR [rbx+0x2],edi
    2df7:	40 6f                	rex outs dx,DWORD PTR ds:[rsi]
    2df9:	00 00                	add    BYTE PTR [rax],al
    2dfb:	00 02                	add    BYTE PTR [rdx],al
    2dfd:	91                   	xchg   ecx,eax
    2dfe:	50                   	push   rax
    2dff:	34 00                	xor    al,0x0
    2e01:	00 00                	add    BYTE PTR [rax],al
    2e03:	00 01                	add    BYTE PTR [rcx],al
    2e05:	7c 02                	jl     2e09 <.debug_info+0x2e09>
    2e07:	11 49 1e             	adc    DWORD PTR [rcx+0x1e],ecx
    2e0a:	00 00                	add    BYTE PTR [rax],al
    2e0c:	02 91 68 00 37 00    	add    dl,BYTE PTR [rcx+0x370068]
    2e12:	00 00                	add    BYTE PTR [rax],al
    2e14:	00 01                	add    BYTE PTR [rcx],al
    2e16:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    2e17:	02 06                	add    al,BYTE PTR [rsi]
	...
    2e21:	39 00                	cmp    DWORD PTR [rax],eax
    2e23:	00 00                	add    BYTE PTR [rax],al
    2e25:	00 00                	add    BYTE PTR [rax],al
    2e27:	00 00                	add    BYTE PTR [rax],al
    2e29:	01 9c 70 2e 00 00 36 	add    DWORD PTR [rax+rsi*2+0x3600002e],ebx
    2e30:	00 00                	add    BYTE PTR [rax],al
    2e32:	00 00                	add    BYTE PTR [rax],al
    2e34:	01 6f 02             	add    DWORD PTR [rdi+0x2],ebp
    2e37:	33 1f                	xor    ebx,DWORD PTR [rdi]
    2e39:	2b 00                	sub    eax,DWORD PTR [rax]
    2e3b:	00 02                	add    BYTE PTR [rdx],al
    2e3d:	91                   	xchg   ecx,eax
    2e3e:	58                   	pop    rax
    2e3f:	36 00 00             	add    BYTE PTR ss:[rax],al
    2e42:	00 00                	add    BYTE PTR [rax],al
    2e44:	01 6f 02             	add    DWORD PTR [rdi+0x2],ebp
    2e47:	3d 6f 00 00 00       	cmp    eax,0x6f
    2e4c:	02 91 54 36 00 00    	add    dl,BYTE PTR [rcx+0x3654]
    2e52:	00 00                	add    BYTE PTR [rax],al
    2e54:	01 6f 02             	add    DWORD PTR [rdi+0x2],ebp
    2e57:	48 6f                	rex.W outs dx,DWORD PTR ds:[rsi]
    2e59:	00 00                	add    BYTE PTR [rax],al
    2e5b:	00 02                	add    BYTE PTR [rdx],al
    2e5d:	91                   	xchg   ecx,eax
    2e5e:	50                   	push   rax
    2e5f:	34 00                	xor    al,0x0
    2e61:	00 00                	add    BYTE PTR [rax],al
    2e63:	00 01                	add    BYTE PTR [rcx],al
    2e65:	70 02                	jo     2e69 <.debug_info+0x2e69>
    2e67:	11 49 1e             	adc    DWORD PTR [rcx+0x1e],ecx
    2e6a:	00 00                	add    BYTE PTR [rax],al
    2e6c:	02 91 68 00 37 00    	add    dl,BYTE PTR [rcx+0x370068]
    2e72:	00 00                	add    BYTE PTR [rax],al
    2e74:	00 01                	add    BYTE PTR [rcx],al
    2e76:	61                   	(bad)  
    2e77:	02 06                	add    al,BYTE PTR [rsi]
	...
    2e81:	39 00                	cmp    DWORD PTR [rax],eax
    2e83:	00 00                	add    BYTE PTR [rax],al
    2e85:	00 00                	add    BYTE PTR [rax],al
    2e87:	00 00                	add    BYTE PTR [rax],al
    2e89:	01 9c d0 2e 00 00 36 	add    DWORD PTR [rax+rdx*8+0x3600002e],ebx
    2e90:	00 00                	add    BYTE PTR [rax],al
    2e92:	00 00                	add    BYTE PTR [rax],al
    2e94:	01 61 02             	add    DWORD PTR [rcx+0x2],esp
    2e97:	33 1f                	xor    ebx,DWORD PTR [rdi]
    2e99:	2b 00                	sub    eax,DWORD PTR [rax]
    2e9b:	00 02                	add    BYTE PTR [rdx],al
    2e9d:	91                   	xchg   ecx,eax
    2e9e:	58                   	pop    rax
    2e9f:	36 00 00             	add    BYTE PTR ss:[rax],al
    2ea2:	00 00                	add    BYTE PTR [rax],al
    2ea4:	01 61 02             	add    DWORD PTR [rcx+0x2],esp
    2ea7:	3d 6f 00 00 00       	cmp    eax,0x6f
    2eac:	02 91 54 36 00 00    	add    dl,BYTE PTR [rcx+0x3654]
    2eb2:	00 00                	add    BYTE PTR [rax],al
    2eb4:	01 61 02             	add    DWORD PTR [rcx+0x2],esp
    2eb7:	48 6f                	rex.W outs dx,DWORD PTR ds:[rsi]
    2eb9:	00 00                	add    BYTE PTR [rax],al
    2ebb:	00 02                	add    BYTE PTR [rdx],al
    2ebd:	91                   	xchg   ecx,eax
    2ebe:	50                   	push   rax
    2ebf:	34 00                	xor    al,0x0
    2ec1:	00 00                	add    BYTE PTR [rax],al
    2ec3:	00 01                	add    BYTE PTR [rcx],al
    2ec5:	62 02                	(bad)  
    2ec7:	11 49 1e             	adc    DWORD PTR [rcx+0x1e],ecx
    2eca:	00 00                	add    BYTE PTR [rax],al
    2ecc:	02 91 68 00 35 00    	add    dl,BYTE PTR [rcx+0x350068]
    2ed2:	00 00                	add    BYTE PTR [rax],al
    2ed4:	00 01                	add    BYTE PTR [rcx],al
    2ed6:	53                   	push   rbx
    2ed7:	02 0a                	add    cl,BYTE PTR [rdx]
    2ed9:	83 04 00 00          	add    DWORD PTR [rax+rax*1],0x0
	...
    2ee5:	52                   	push   rdx
    2ee6:	00 00                	add    BYTE PTR [rax],al
    2ee8:	00 00                	add    BYTE PTR [rax],al
    2eea:	00 00                	add    BYTE PTR [rax],al
    2eec:	00 01                	add    BYTE PTR [rcx],al
    2eee:	9c                   	pushf  
    2eef:	34 2f                	xor    al,0x2f
    2ef1:	00 00                	add    BYTE PTR [rax],al
    2ef3:	36 00 00             	add    BYTE PTR ss:[rax],al
    2ef6:	00 00                	add    BYTE PTR [rax],al
    2ef8:	01 53 02             	add    DWORD PTR [rbx+0x2],edx
    2efb:	30 1f                	xor    BYTE PTR [rdi],bl
    2efd:	2b 00                	sub    eax,DWORD PTR [rax]
    2eff:	00 02                	add    BYTE PTR [rdx],al
    2f01:	91                   	xchg   ecx,eax
    2f02:	58                   	pop    rax
    2f03:	36 00 00             	add    BYTE PTR ss:[rax],al
    2f06:	00 00                	add    BYTE PTR [rax],al
    2f08:	01 53 02             	add    DWORD PTR [rbx+0x2],edx
    2f0b:	3a 6f 00             	cmp    ch,BYTE PTR [rdi+0x0]
    2f0e:	00 00                	add    BYTE PTR [rax],al
    2f10:	02 91 54 36 00 00    	add    dl,BYTE PTR [rcx+0x3654]
    2f16:	00 00                	add    BYTE PTR [rax],al
    2f18:	01 53 02             	add    DWORD PTR [rbx+0x2],edx
    2f1b:	45 6f                	rex.RB outs dx,DWORD PTR ds:[rsi]
    2f1d:	00 00                	add    BYTE PTR [rax],al
    2f1f:	00 02                	add    BYTE PTR [rdx],al
    2f21:	91                   	xchg   ecx,eax
    2f22:	50                   	push   rax
    2f23:	34 00                	xor    al,0x0
    2f25:	00 00                	add    BYTE PTR [rax],al
    2f27:	00 01                	add    BYTE PTR [rcx],al
    2f29:	54                   	push   rsp
    2f2a:	02 11                	add    dl,BYTE PTR [rcx]
    2f2c:	49 1e                	rex.WB (bad) 
    2f2e:	00 00                	add    BYTE PTR [rax],al
    2f30:	02 91 68 00 3e 00    	add    dl,BYTE PTR [rcx+0x3e0068]
    2f36:	00 00                	add    BYTE PTR [rax],al
    2f38:	00 01                	add    BYTE PTR [rcx],al
    2f3a:	43 02 0d 00 00 00 00 	rex.XB add cl,BYTE PTR [rip+0x0]        # 2f41 <.debug_info+0x2f41>
    2f41:	00 00                	add    BYTE PTR [rax],al
    2f43:	00 00                	add    BYTE PTR [rax],al
    2f45:	2e 00 00             	add    BYTE PTR cs:[rax],al
    2f48:	00 00                	add    BYTE PTR [rax],al
    2f4a:	00 00                	add    BYTE PTR [rax],al
    2f4c:	00 01                	add    BYTE PTR [rcx],al
    2f4e:	9c                   	pushf  
    2f4f:	64 2f                	fs (bad) 
    2f51:	00 00                	add    BYTE PTR [rax],al
    2f53:	36 00 00             	add    BYTE PTR ss:[rax],al
    2f56:	00 00                	add    BYTE PTR [rax],al
    2f58:	01 43 02             	add    DWORD PTR [rbx+0x2],eax
    2f5b:	32 49 1e             	xor    cl,BYTE PTR [rcx+0x1e]
    2f5e:	00 00                	add    BYTE PTR [rax],al
    2f60:	02 91 68 00 3e 00    	add    dl,BYTE PTR [rcx+0x3e0068]
    2f66:	00 00                	add    BYTE PTR [rax],al
    2f68:	00 01                	add    BYTE PTR [rcx],al
    2f6a:	35 02 0d 00 00       	xor    eax,0xd02
    2f6f:	00 00                	add    BYTE PTR [rax],al
    2f71:	00 00                	add    BYTE PTR [rax],al
    2f73:	00 00                	add    BYTE PTR [rax],al
    2f75:	2e 00 00             	add    BYTE PTR cs:[rax],al
    2f78:	00 00                	add    BYTE PTR [rax],al
    2f7a:	00 00                	add    BYTE PTR [rax],al
    2f7c:	00 01                	add    BYTE PTR [rcx],al
    2f7e:	9c                   	pushf  
    2f7f:	94                   	xchg   esp,eax
    2f80:	2f                   	(bad)  
    2f81:	00 00                	add    BYTE PTR [rax],al
    2f83:	36 00 00             	add    BYTE PTR ss:[rax],al
    2f86:	00 00                	add    BYTE PTR [rax],al
    2f88:	01 35 02 32 49 1e    	add    DWORD PTR [rip+0x1e493202],esi        # 1e496190 <dlNextRound.8083+0x1e3b37a8>
    2f8e:	00 00                	add    BYTE PTR [rax],al
    2f90:	02 91 68 00 39 00    	add    dl,BYTE PTR [rcx+0x390068]
    2f96:	00 00                	add    BYTE PTR [rax],al
    2f98:	00 01                	add    BYTE PTR [rcx],al
    2f9a:	26 02 0d 00 00 00 00 	add    cl,BYTE PTR es:[rip+0x0]        # 2fa1 <.debug_info+0x2fa1>
    2fa1:	00 00                	add    BYTE PTR [rax],al
    2fa3:	00 00                	add    BYTE PTR [rax],al
    2fa5:	5a                   	pop    rdx
    2fa6:	00 00                	add    BYTE PTR [rax],al
    2fa8:	00 00                	add    BYTE PTR [rax],al
    2faa:	00 00                	add    BYTE PTR [rax],al
    2fac:	00 01                	add    BYTE PTR [rcx],al
    2fae:	9c                   	pushf  
    2faf:	d4                   	(bad)  
    2fb0:	2f                   	(bad)  
    2fb1:	00 00                	add    BYTE PTR [rax],al
    2fb3:	36 00 00             	add    BYTE PTR ss:[rax],al
    2fb6:	00 00                	add    BYTE PTR [rax],al
    2fb8:	01 26                	add    DWORD PTR [rsi],esp
    2fba:	02 2a                	add    ch,BYTE PTR [rdx]
    2fbc:	49 1e                	rex.WB (bad) 
    2fbe:	00 00                	add    BYTE PTR [rax],al
    2fc0:	02 91 68 36 00 00    	add    dl,BYTE PTR [rcx+0x3668]
    2fc6:	00 00                	add    BYTE PTR [rax],al
    2fc8:	01 26                	add    DWORD PTR [rsi],esp
    2fca:	02 36                	add    dh,BYTE PTR [rsi]
    2fcc:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    2fcd:	00 00                	add    BYTE PTR [rax],al
    2fcf:	00 02                	add    BYTE PTR [rdx],al
    2fd1:	91                   	xchg   ecx,eax
    2fd2:	64 00 35 00 00 00 00 	add    BYTE PTR fs:[rip+0x0],dh        # 2fd9 <.debug_info+0x2fd9>
    2fd9:	01 0a                	add    DWORD PTR [rdx],ecx
    2fdb:	02 0a                	add    cl,BYTE PTR [rdx]
    2fdd:	83 04 00 00          	add    DWORD PTR [rax+rax*1],0x0
	...
    2fe9:	b2 00                	mov    dl,0x0
    2feb:	00 00                	add    BYTE PTR [rax],al
    2fed:	00 00                	add    BYTE PTR [rax],al
    2fef:	00 00                	add    BYTE PTR [rax],al
    2ff1:	01 9c 68 30 00 00 36 	add    DWORD PTR [rax+rbp*2+0x36000030],ebx
    2ff8:	00 00                	add    BYTE PTR [rax],al
    2ffa:	00 00                	add    BYTE PTR [rax],al
    2ffc:	01 0a                	add    DWORD PTR [rdx],ecx
    2ffe:	02 26                	add    ah,BYTE PTR [rsi]
    3000:	68 30 00 00 02       	push   0x2000030
    3005:	91                   	xchg   ecx,eax
    3006:	58                   	pop    rax
    3007:	36 00 00             	add    BYTE PTR ss:[rax],al
    300a:	00 00                	add    BYTE PTR [rax],al
    300c:	01 0a                	add    DWORD PTR [rdx],ecx
    300e:	02 32                	add    dh,BYTE PTR [rdx]
    3010:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    3011:	00 00                	add    BYTE PTR [rax],al
    3013:	00 02                	add    BYTE PTR [rdx],al
    3015:	91                   	xchg   ecx,eax
    3016:	54                   	push   rsp
    3017:	36 00 00             	add    BYTE PTR ss:[rax],al
    301a:	00 00                	add    BYTE PTR [rax],al
    301c:	01 0a                	add    DWORD PTR [rdx],ecx
    301e:	02 3d 6f 00 00 00    	add    bh,BYTE PTR [rip+0x6f]        # 3093 <.debug_info+0x3093>
    3024:	02 91 50 38 6e 6f    	add    dl,BYTE PTR [rcx+0x6f6e3850]
    302a:	77 00                	ja     302c <.debug_info+0x302c>
    302c:	01 0b                	add    DWORD PTR [rbx],ecx
    302e:	02 06                	add    al,BYTE PTR [rsi]
    3030:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    3031:	00 00                	add    BYTE PTR [rax],al
    3033:	00 02                	add    BYTE PTR [rdx],al
    3035:	91                   	xchg   ecx,eax
    3036:	6c                   	ins    BYTE PTR es:[rdi],dx
    3037:	34 00                	xor    al,0x0
    3039:	00 00                	add    BYTE PTR [rax],al
    303b:	00 01                	add    BYTE PTR [rcx],al
    303d:	0c 02                	or     al,0x2
    303f:	06                   	(bad)  
    3040:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    3041:	00 00                	add    BYTE PTR [rax],al
    3043:	00 02                	add    BYTE PTR [rdx],al
    3045:	91                   	xchg   ecx,eax
    3046:	68 34 00 00 00       	push   0x34
    304b:	00 01                	add    BYTE PTR [rcx],al
    304d:	0d 02 06 6f 00       	or     eax,0x6f0602
    3052:	00 00                	add    BYTE PTR [rax],al
    3054:	02 91 64 34 00 00    	add    dl,BYTE PTR [rcx+0x3464]
    305a:	00 00                	add    BYTE PTR [rax],al
    305c:	01 0e                	add    DWORD PTR [rsi],ecx
    305e:	02 06                	add    al,BYTE PTR [rsi]
    3060:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    3061:	00 00                	add    BYTE PTR [rax],al
    3063:	00 02                	add    BYTE PTR [rdx],al
    3065:	91                   	xchg   ecx,eax
    3066:	60                   	(bad)  
    3067:	00 09                	add    BYTE PTR [rcx],cl
    3069:	08 a8 1d 00 00 3f    	or     BYTE PTR [rax+0x3f00001d],ch
    306f:	00 00                	add    BYTE PTR [rax],al
    3071:	00 00                	add    BYTE PTR [rax],al
    3073:	01 ac 01 17 49 1e 00 	add    DWORD PTR [rcx+rax*1+0x1e4917],ebp
	...
    3082:	00 3e                	add    BYTE PTR [rsi],bh
    3084:	03 00                	add    eax,DWORD PTR [rax]
    3086:	00 00                	add    BYTE PTR [rax],al
    3088:	00 00                	add    BYTE PTR [rax],al
    308a:	00 01                	add    BYTE PTR [rcx],al
    308c:	9c                   	pushf  
    308d:	5e                   	pop    rsi
    308e:	31 00                	xor    DWORD PTR [rax],eax
    3090:	00 36                	add    BYTE PTR [rsi],dh
    3092:	00 00                	add    BYTE PTR [rax],al
    3094:	00 00                	add    BYTE PTR [rax],al
    3096:	01 ac 01 3d 1f 2b 00 	add    DWORD PTR [rcx+rax*1+0x2b1f3d],ebp
    309d:	00 02                	add    BYTE PTR [rdx],al
    309f:	91                   	xchg   ecx,eax
    30a0:	48                   	rex.W
    30a1:	36 00 00             	add    BYTE PTR ss:[rax],al
    30a4:	00 00                	add    BYTE PTR [rax],al
    30a6:	01 ac 01 4a 6f 00 00 	add    DWORD PTR [rcx+rax*1+0x6f4a],ebp
    30ad:	00 02                	add    BYTE PTR [rdx],al
    30af:	91                   	xchg   ecx,eax
    30b0:	44                   	rex.R
    30b1:	36 00 00             	add    BYTE PTR ss:[rax],al
    30b4:	00 00                	add    BYTE PTR [rax],al
    30b6:	01 ac 01 55 6f 00 00 	add    DWORD PTR [rcx+rax*1+0x6f55],ebp
    30bd:	00 02                	add    BYTE PTR [rdx],al
    30bf:	91                   	xchg   ecx,eax
    30c0:	40 34 00             	xor    al,0x0
    30c3:	00 00                	add    BYTE PTR [rax],al
    30c5:	00 01                	add    BYTE PTR [rcx],al
    30c7:	ad                   	lods   eax,DWORD PTR ds:[rsi]
    30c8:	01 17                	add    DWORD PTR [rdi],edx
    30ca:	b4 1d                	mov    ah,0x1d
    30cc:	00 00                	add    BYTE PTR [rax],al
    30ce:	09 03                	or     DWORD PTR [rbx],eax
	...
    30d8:	34 00                	xor    al,0x0
    30da:	00 00                	add    BYTE PTR [rax],al
    30dc:	00 01                	add    BYTE PTR [rcx],al
    30de:	ae                   	scas   al,BYTE PTR es:[rdi]
    30df:	01 0e                	add    DWORD PTR [rsi],ecx
    30e1:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    30e2:	00 00                	add    BYTE PTR [rax],al
    30e4:	00 09                	add    BYTE PTR [rcx],cl
    30e6:	03 00                	add    eax,DWORD PTR [rax]
    30e8:	00 00                	add    BYTE PTR [rax],al
    30ea:	00 00                	add    BYTE PTR [rax],al
    30ec:	00 00                	add    BYTE PTR [rax],al
    30ee:	00 34 00             	add    BYTE PTR [rax+rax*1],dh
    30f1:	00 00                	add    BYTE PTR [rax],al
    30f3:	00 01                	add    BYTE PTR [rcx],al
    30f5:	af                   	scas   eax,DWORD PTR es:[rdi]
    30f6:	01 0d 76 00 00 00    	add    DWORD PTR [rip+0x76],ecx        # 3172 <.debug_info+0x3172>
    30fc:	02 91 5c 38 6e 6f    	add    dl,BYTE PTR [rcx+0x6f6e385c]
    3102:	77 00                	ja     3104 <.debug_info+0x3104>
    3104:	01 b0 01 0d 76 00    	add    DWORD PTR [rax+0x760d01],esi
    310a:	00 00                	add    BYTE PTR [rax],al
    310c:	02 91 58 34 00 00    	add    dl,BYTE PTR [rcx+0x3458]
    3112:	00 00                	add    BYTE PTR [rax],al
    3114:	01 b1 01 11 49 1e    	add    DWORD PTR [rcx+0x1e491101],esi
    311a:	00 00                	add    BYTE PTR [rax],al
    311c:	02 91 68 38 69 00    	add    dl,BYTE PTR [rcx+0x693868]
    3122:	01 b2 01 09 6f 00    	add    DWORD PTR [rdx+0x6f0901],esi
    3128:	00 00                	add    BYTE PTR [rax],al
    312a:	02 91 64 38 6e 00    	add    dl,BYTE PTR [rcx+0x6e3864]
    3130:	01 b2 01 0c 6f 00    	add    DWORD PTR [rdx+0x6f0c01],esi
    3136:	00 00                	add    BYTE PTR [rax],al
    3138:	02 91 60 3b 00 00    	add    dl,BYTE PTR [rcx+0x3b60]
    313e:	00 00                	add    BYTE PTR [rax],al
    3140:	00 00                	add    BYTE PTR [rax],al
    3142:	00 00                	add    BYTE PTR [rax],al
    3144:	01 02                	add    DWORD PTR [rdx],eax
    3146:	00 00                	add    BYTE PTR [rax],al
    3148:	00 00                	add    BYTE PTR [rax],al
    314a:	00 00                	add    BYTE PTR [rax],al
    314c:	34 00                	xor    al,0x0
    314e:	00 00                	add    BYTE PTR [rax],al
    3150:	00 01                	add    BYTE PTR [rcx],al
    3152:	ce                   	(bad)  
    3153:	01 07                	add    DWORD PTR [rdi],eax
    3155:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    3156:	00 00                	add    BYTE PTR [rax],al
    3158:	00 02                	add    BYTE PTR [rdx],al
    315a:	91                   	xchg   ecx,eax
    315b:	54                   	push   rsp
    315c:	00 00                	add    BYTE PTR [rax],al
    315e:	3e 00 00             	add    BYTE PTR ds:[rax],al
    3161:	00 00                	add    BYTE PTR [rax],al
    3163:	01 8f 01 0d 00 00    	add    DWORD PTR [rdi+0xd01],ecx
    3169:	00 00                	add    BYTE PTR [rax],al
    316b:	00 00                	add    BYTE PTR [rax],al
    316d:	00 00                	add    BYTE PTR [rax],al
    316f:	db 00                	fild   DWORD PTR [rax]
    3171:	00 00                	add    BYTE PTR [rax],al
    3173:	00 00                	add    BYTE PTR [rax],al
    3175:	00 00                	add    BYTE PTR [rax],al
    3177:	01 9c 9e 31 00 00 36 	add    DWORD PTR [rsi+rbx*4+0x36000031],ebx
    317e:	00 00                	add    BYTE PTR [rax],al
    3180:	00 00                	add    BYTE PTR [rax],al
    3182:	01 8f 01 2e 49 1e    	add    DWORD PTR [rdi+0x1e492e01],ecx
    3188:	00 00                	add    BYTE PTR [rax],al
    318a:	02 91 68 36 00 00    	add    dl,BYTE PTR [rcx+0x3668]
    3190:	00 00                	add    BYTE PTR [rax],al
    3192:	01 8f 01 3a 6f 00    	add    DWORD PTR [rdi+0x6f3a01],ecx
    3198:	00 00                	add    BYTE PTR [rax],al
    319a:	02 91 64 00 40 00    	add    dl,BYTE PTR [rcx+0x400064]
    31a0:	00 00                	add    BYTE PTR [rax],al
    31a2:	00 01                	add    BYTE PTR [rcx],al
    31a4:	71 01                	jno    31a7 <.debug_info+0x31a7>
    31a6:	0c 6f                	or     al,0x6f
	...
    31b0:	00 00                	add    BYTE PTR [rax],al
    31b2:	00 ad 00 00 00 00    	add    BYTE PTR [rbp+0x0],ch
    31b8:	00 00                	add    BYTE PTR [rax],al
    31ba:	00 01                	add    BYTE PTR [rcx],al
    31bc:	9c                   	pushf  
    31bd:	0f 32                	rdmsr  
    31bf:	00 00                	add    BYTE PTR [rax],al
    31c1:	36 00 00             	add    BYTE PTR ss:[rax],al
    31c4:	00 00                	add    BYTE PTR [rax],al
    31c6:	01 71 01             	add    DWORD PTR [rcx+0x1],esi
    31c9:	30 1f                	xor    BYTE PTR [rdi],bl
    31cb:	2b 00                	sub    eax,DWORD PTR [rax]
    31cd:	00 02                	add    BYTE PTR [rdx],al
    31cf:	91                   	xchg   ecx,eax
    31d0:	48 38 69 70          	rex.W cmp BYTE PTR [rcx+0x70],bpl
    31d4:	00 01                	add    BYTE PTR [rcx],al
    31d6:	72 01                	jb     31d9 <.debug_info+0x31d9>
    31d8:	0e                   	(bad)  
    31d9:	0f 32                	rdmsr  
    31db:	00 00                	add    BYTE PTR [rax],al
    31dd:	02 91 68 34 00 00    	add    dl,BYTE PTR [rcx+0x3468]
    31e3:	00 00                	add    BYTE PTR [rax],al
    31e5:	01 73 01             	add    DWORD PTR [rbx+0x1],esi
    31e8:	08 6f 00             	or     BYTE PTR [rdi+0x0],ch
    31eb:	00 00                	add    BYTE PTR [rax],al
    31ed:	02 91 64 34 00 00    	add    dl,BYTE PTR [rcx+0x3464]
    31f3:	00 00                	add    BYTE PTR [rax],al
    31f5:	01 74 01 08          	add    DWORD PTR [rcx+rax*1+0x8],esi
    31f9:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    31fa:	00 00                	add    BYTE PTR [rax],al
    31fc:	00 02                	add    BYTE PTR [rdx],al
    31fe:	91                   	xchg   ecx,eax
    31ff:	60                   	(bad)  
    3200:	38 69 00             	cmp    BYTE PTR [rcx+0x0],ch
    3203:	01 75 01             	add    DWORD PTR [rbp+0x1],esi
    3206:	08 6f 00             	or     BYTE PTR [rdi+0x0],ch
    3209:	00 00                	add    BYTE PTR [rax],al
    320b:	02 91 5c 00 09 08    	add    dl,BYTE PTR [rcx+0x809005c]
    3211:	63 04 00             	movsxd eax,DWORD PTR [rax+rax*1]
    3214:	00 41 00             	add    BYTE PTR [rcx+0x0],al
    3217:	00 00                	add    BYTE PTR [rax],al
    3219:	00 01                	add    BYTE PTR [rcx],al
    321b:	4d 01 06             	add    QWORD PTR [r14],r8
	...
    3226:	37                   	(bad)  
    3227:	00 00                	add    BYTE PTR [rax],al
    3229:	00 00                	add    BYTE PTR [rax],al
    322b:	00 00                	add    BYTE PTR [rax],al
    322d:	00 01                	add    BYTE PTR [rcx],al
    322f:	9c                   	pushf  
    3230:	42 00 00             	rex.X add BYTE PTR [rax],al
    3233:	00 00                	add    BYTE PTR [rax],al
    3235:	01 ef                	add    edi,ebp
    3237:	0d 00 00 00 00       	or     eax,0x0
    323c:	00 00                	add    BYTE PTR [rax],al
    323e:	00 00                	add    BYTE PTR [rax],al
    3240:	cf                   	iret   
    3241:	04 00                	add    al,0x0
    3243:	00 00                	add    BYTE PTR [rax],al
    3245:	00 00                	add    BYTE PTR [rax],al
    3247:	00 01                	add    BYTE PTR [rcx],al
    3249:	9c                   	pushf  
    324a:	9f                   	lahf   
    324b:	32 00                	xor    al,BYTE PTR [rax]
    324d:	00 43 00             	add    BYTE PTR [rbx+0x0],al
    3250:	00 00                	add    BYTE PTR [rax],al
    3252:	00 01                	add    BYTE PTR [rcx],al
    3254:	ef                   	out    dx,eax
    3255:	2d 8d 03 00 00       	sub    eax,0x38d
    325a:	02 91 58 44 61 64    	add    dl,BYTE PTR [rcx+0x64614458]
    3260:	72 00                	jb     3262 <.debug_info+0x3262>
    3262:	01 f1                	add    ecx,esi
    3264:	12 9f 32 00 00 09    	adc    bl,BYTE PTR [rdi+0x9000032]
    326a:	03 00                	add    eax,DWORD PTR [rax]
    326c:	00 00                	add    BYTE PTR [rax],al
    326e:	00 00                	add    BYTE PTR [rax],al
    3270:	00 00                	add    BYTE PTR [rax],al
    3272:	00 44 69 00          	add    BYTE PTR [rcx+rbp*2+0x0],al
    3276:	01 f2                	add    edx,esi
    3278:	08 6f 00             	or     BYTE PTR [rdi+0x0],ch
    327b:	00 00                	add    BYTE PTR [rax],al
    327d:	02 91 6c 44 72 65    	add    dl,BYTE PTR [rcx+0x6572446c]
    3283:	73 00                	jae    3285 <.debug_info+0x3285>
    3285:	01 f3                	add    ebx,esi
    3287:	08 6f 00             	or     BYTE PTR [rdi+0x0],ch
    328a:	00 00                	add    BYTE PTR [rax],al
    328c:	02 91 64 45 00 00    	add    dl,BYTE PTR [rcx+0x4564]
    3292:	00 00                	add    BYTE PTR [rax],al
    3294:	01 f4                	add    esp,esi
    3296:	08 6f 00             	or     BYTE PTR [rdi+0x0],ch
    3299:	00 00                	add    BYTE PTR [rax],al
    329b:	02 91 68 00 06 b3    	add    dl,BYTE PTR [rcx-0x4cf9ff98]
    32a1:	0f 00 00             	sldt   WORD PTR [rax]
    32a4:	b5 32                	mov    ch,0x32
    32a6:	00 00                	add    BYTE PTR [rax],al
    32a8:	07                   	(bad)  
    32a9:	42 00 00             	rex.X add BYTE PTR [rax],al
    32ac:	00 04 07             	add    BYTE PTR [rdi+rax*1],al
    32af:	42 00 00             	rex.X add BYTE PTR [rax],al
    32b2:	00 01                	add    BYTE PTR [rcx],al
    32b4:	00 46 00             	add    BYTE PTR [rsi+0x0],al
    32b7:	00 00                	add    BYTE PTR [rax],al
    32b9:	00 01                	add    BYTE PTR [rcx],al
    32bb:	b9 0c 00 00 00       	mov    ecx,0xc
    32c0:	00 00                	add    BYTE PTR [rax],al
    32c2:	00 00                	add    BYTE PTR [rax],al
    32c4:	00 c0                	add    al,al
    32c6:	01 00                	add    DWORD PTR [rax],eax
    32c8:	00 00                	add    BYTE PTR [rax],al
    32ca:	00 00                	add    BYTE PTR [rax],al
    32cc:	00 01                	add    BYTE PTR [rcx],al
    32ce:	9c                   	pushf  
    32cf:	42 33 00             	rex.X xor eax,DWORD PTR [rax]
    32d2:	00 47 63             	add    BYTE PTR [rdi+0x63],al
    32d5:	6c                   	ins    BYTE PTR es:[rdi],dx
    32d6:	00 01                	add    BYTE PTR [rcx],al
    32d8:	b9 2c f0 22 00       	mov    ecx,0x22f02c
    32dd:	00 03                	add    BYTE PTR [rbx],al
    32df:	91                   	xchg   ecx,eax
    32e0:	88 75 47             	mov    BYTE PTR [rbp+0x47],dh
    32e3:	66 6d                	ins    WORD PTR es:[rdi],dx
    32e5:	74 00                	je     32e7 <.debug_info+0x32e7>
    32e7:	01 b9 3c 8d 03 00    	add    DWORD PTR [rcx+0x38d3c],edi
    32ed:	00 03                	add    BYTE PTR [rbx],al
    32ef:	91                   	xchg   ecx,eax
    32f0:	80 75 1b 45          	xor    BYTE PTR [rbp+0x1b],0x45
    32f4:	00 00                	add    BYTE PTR [rax],al
    32f6:	00 00                	add    BYTE PTR [rax],al
    32f8:	01 ba 0b 3b 03 00    	add    DWORD PTR [rdx+0x33b0b],edi
    32fe:	00 03                	add    BYTE PTR [rbx],al
    3300:	91                   	xchg   ecx,eax
    3301:	98                   	cwde   
    3302:	7e 45                	jle    3349 <.debug_info+0x3349>
    3304:	00 00                	add    BYTE PTR [rax],al
    3306:	00 00                	add    BYTE PTR [rax],al
    3308:	01 bb 08 42 33 00    	add    DWORD PTR [rbx+0x334208],edi
    330e:	00 03                	add    BYTE PTR [rbx],al
    3310:	91                   	xchg   ecx,eax
    3311:	90                   	nop
    3312:	75 45                	jne    3359 <.debug_info+0x3359>
    3314:	00 00                	add    BYTE PTR [rax],al
    3316:	00 00                	add    BYTE PTR [rax],al
    3318:	01 bc 0c f0 22 00 00 	add    DWORD PTR [rsp+rcx*1+0x22f0],edi
    331f:	03 91 b8 7e 44 6a    	add    edx,DWORD PTR [rcx+0x6a447eb8]
    3325:	00 01                	add    BYTE PTR [rcx],al
    3327:	bd 08 6f 00 00       	mov    ebp,0x6f08
    332c:	00 03                	add    BYTE PTR [rbx],al
    332e:	91                   	xchg   ecx,eax
    332f:	b4 7e                	mov    ah,0x7e
    3331:	44 6c                	rex.R ins BYTE PTR es:[rdi],dx
    3333:	65 6e                	outs   dx,BYTE PTR gs:[rsi]
    3335:	00 01                	add    BYTE PTR [rcx],al
    3337:	bd 0b 6f 00 00       	mov    ebp,0x6f0b
    333c:	00 03                	add    BYTE PTR [rbx],al
    333e:	91                   	xchg   ecx,eax
    333f:	b0 7e                	mov    al,0x7e
    3341:	00 06                	add    BYTE PTR [rsi],al
    3343:	be 00 00 00 53       	mov    esi,0x53000000
    3348:	33 00                	xor    eax,DWORD PTR [rax]
    334a:	00 18                	add    BYTE PTR [rax],bl
    334c:	42 00 00             	rex.X add BYTE PTR [rax],al
    334f:	00 7f 04             	add    BYTE PTR [rdi+0x4],bh
    3352:	00 46 00             	add    BYTE PTR [rsi+0x0],al
    3355:	00 00                	add    BYTE PTR [rax],al
    3357:	00 01                	add    BYTE PTR [rcx],al
    3359:	8e 06                	mov    es,WORD PTR [rsi]
	...
    3363:	54                   	push   rsp
    3364:	01 00                	add    DWORD PTR [rax],eax
    3366:	00 00                	add    BYTE PTR [rax],al
    3368:	00 00                	add    BYTE PTR [rax],al
    336a:	00 01                	add    BYTE PTR [rcx],al
    336c:	9c                   	pushf  
    336d:	da 33                	fidiv  DWORD PTR [rbx]
    336f:	00 00                	add    BYTE PTR [rax],al
    3371:	43 00 00             	rex.XB add BYTE PTR [r8],al
    3374:	00 00                	add    BYTE PTR [rax],al
    3376:	01 8e 25 f0 22 00    	add    DWORD PTR [rsi+0x22f025],ecx
    337c:	00 02                	add    BYTE PTR [rdx],al
    337e:	91                   	xchg   ecx,eax
    337f:	58                   	pop    rax
    3380:	47 63 6d 64          	rex.RXB movsxd r13d,DWORD PTR [r13+0x64]
    3384:	00 01                	add    BYTE PTR [rcx],al
    3386:	8e 39                	mov    ?,WORD PTR [rcx]
    3388:	8d 03                	lea    eax,[rbx]
    338a:	00 00                	add    BYTE PTR [rax],al
    338c:	02 91 50 45 00 00    	add    dl,BYTE PTR [rcx+0x4550]
    3392:	00 00                	add    BYTE PTR [rax],al
    3394:	01 8f 07 6f 00 00    	add    DWORD PTR [rdi+0x6f07],ecx
    339a:	00 02                	add    BYTE PTR [rdx],al
    339c:	91                   	xchg   ecx,eax
    339d:	60                   	(bad)  
    339e:	44 69 00 01 8f 0e 6f 	imul   r8d,DWORD PTR [rax],0x6f0e8f01
    33a5:	00 00                	add    BYTE PTR [rax],al
    33a7:	00 02                	add    BYTE PTR [rdx],al
    33a9:	91                   	xchg   ecx,eax
    33aa:	6c                   	ins    BYTE PTR es:[rdi],dx
    33ab:	44 6e                	rex.R outs dx,BYTE PTR ds:[rsi]
    33ad:	00 01                	add    BYTE PTR [rcx],al
    33af:	8f                   	(bad)  
    33b0:	11 6f 00             	adc    DWORD PTR [rdi+0x0],ebp
    33b3:	00 00                	add    BYTE PTR [rax],al
    33b5:	02 91 68 3b 00 00    	add    dl,BYTE PTR [rcx+0x3b68]
    33bb:	00 00                	add    BYTE PTR [rax],al
    33bd:	00 00                	add    BYTE PTR [rax],al
    33bf:	00 00                	add    BYTE PTR [rax],al
    33c1:	49 00 00             	rex.WB add BYTE PTR [r8],al
    33c4:	00 00                	add    BYTE PTR [rax],al
    33c6:	00 00                	add    BYTE PTR [rax],al
    33c8:	00 45 00             	add    BYTE PTR [rbp+0x0],al
    33cb:	00 00                	add    BYTE PTR [rax],al
    33cd:	00 01                	add    BYTE PTR [rcx],al
    33cf:	a4                   	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
    33d0:	0e                   	(bad)  
    33d1:	76 00                	jbe    33d3 <.debug_info+0x33d3>
    33d3:	00 00                	add    BYTE PTR [rax],al
    33d5:	02 91 64 00 00 48    	add    dl,BYTE PTR [rcx+0x48000064]
    33db:	00 00                	add    BYTE PTR [rax],al
    33dd:	00 00                	add    BYTE PTR [rax],al
    33df:	01 51 14             	add    DWORD PTR [rcx+0x14],edx
    33e2:	8d 03                	lea    eax,[rbx]
	...
    33ec:	00 00                	add    BYTE PTR [rax],al
    33ee:	99                   	cdq    
    33ef:	00 00                	add    BYTE PTR [rax],al
    33f1:	00 00                	add    BYTE PTR [rax],al
    33f3:	00 00                	add    BYTE PTR [rax],al
    33f5:	00 01                	add    BYTE PTR [rcx],al
    33f7:	9c                   	pushf  
    33f8:	2e 34 00             	cs xor al,0x0
    33fb:	00 47 69             	add    BYTE PTR [rdi+0x69],al
    33fe:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    33ff:	00 01                	add    BYTE PTR [rcx],al
    3401:	51                   	push   rcx
    3402:	33 8d 03 00 00 02    	xor    ecx,DWORD PTR [rbp+0x2000003]
    3408:	91                   	xchg   ecx,eax
    3409:	58                   	pop    rax
    340a:	45 00 00             	add    BYTE PTR [r8],r8b
    340d:	00 00                	add    BYTE PTR [rax],al
    340f:	01 52 0e             	add    DWORD PTR [rdx+0xe],edx
    3412:	2e 34 00             	cs xor al,0x0
    3415:	00 09                	add    BYTE PTR [rcx],cl
    3417:	03 00                	add    eax,DWORD PTR [rax]
    3419:	00 00                	add    BYTE PTR [rax],al
    341b:	00 00                	add    BYTE PTR [rax],al
    341d:	00 00                	add    BYTE PTR [rax],al
    341f:	00 44 6c 00          	add    BYTE PTR [rsp+rbp*2+0x0],al
    3423:	01 53 07             	add    DWORD PTR [rbx+0x7],edx
    3426:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    3427:	00 00                	add    BYTE PTR [rax],al
    3429:	00 02                	add    BYTE PTR [rdx],al
    342b:	91                   	xchg   ecx,eax
    342c:	6c                   	ins    BYTE PTR es:[rdi],dx
    342d:	00 49 be             	add    BYTE PTR [rcx-0x42],cl
    3430:	00 00                	add    BYTE PTR [rax],al
    3432:	00 18                	add    BYTE PTR [rax],bl
    3434:	42 00 00             	rex.X add BYTE PTR [rax],al
    3437:	00 ff                	add    bh,bh
    3439:	07                   	(bad)  
	...

Disassembly of section .debug_abbrev:

0000000000000000 <.debug_abbrev>:
SV_ExpandNewlines():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:81
static const char *SV_ExpandNewlines( const char *in ) {
   0:	01 11                	add    DWORD PTR [rcx],edx
   2:	01 25 0e 13 0b 03    	add    DWORD PTR [rip+0x30b130e],esp        # 30b1316 <dlNextRound.8083+0x2fce92e>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:85
	l = 0;
   8:	0e                   	(bad)  
   9:	1b 0e                	sbb    ecx,DWORD PTR [rsi]
   b:	11 01                	adc    DWORD PTR [rcx],eax
   d:	12 07                	adc    al,BYTE PTR [rdi]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:86
	while ( *in && l < sizeof(string) - 3 ) {
   f:	10 17                	adc    BYTE PTR [rdi],dl
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:87
		if ( *in == '\n' ) {
  11:	00 00                	add    BYTE PTR [rax],al
  13:	02 24 00             	add    ah,BYTE PTR [rax+rax*1]
  16:	0b 0b                	or     ecx,DWORD PTR [rbx]
  18:	3e 0b 03             	or     eax,DWORD PTR ds:[rbx]
  1b:	0e                   	(bad)  
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:88
			string[l++] = '\\';
  1c:	00 00                	add    BYTE PTR [rax],al
  1e:	03 16                	add    edx,DWORD PTR [rsi]
  20:	00 03                	add    BYTE PTR [rbx],al
  22:	0e                   	(bad)  
  23:	3a 0b                	cmp    cl,BYTE PTR [rbx]
  25:	3b 0b                	cmp    ecx,DWORD PTR [rbx]
  27:	39 0b                	cmp    DWORD PTR [rbx],ecx
  29:	49 13 00             	adc    rax,QWORD PTR [r8]
  2c:	00 04 24             	add    BYTE PTR [rsp],al
  2f:	00 0b                	add    BYTE PTR [rbx],cl
  31:	0b 3e                	or     edi,DWORD PTR [rsi]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:89
			string[l++] = 'n';
  33:	0b 03                	or     eax,DWORD PTR [rbx]
  35:	08 00                	or     BYTE PTR [rax],al
  37:	00 05 26 00 49 13    	add    BYTE PTR [rip+0x13490026],al        # 13490063 <dlNextRound.8083+0x133ad67b>
  3d:	00 00                	add    BYTE PTR [rax],al
  3f:	06                   	(bad)  
  40:	01 01                	add    DWORD PTR [rcx],eax
  42:	49 13 01             	adc    rax,QWORD PTR [r9]
  45:	13 00                	adc    eax,DWORD PTR [rax]
  47:	00 07                	add    BYTE PTR [rdi],al
  49:	21 00                	and    DWORD PTR [rax],eax
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:91
			string[l++] = *in;
  4b:	49 13 2f             	adc    rbp,QWORD PTR [r15]
  4e:	0b 00                	or     eax,DWORD PTR [rax]
  50:	00 08                	add    BYTE PTR [rax],cl
  52:	0f 00 0b             	str    WORD PTR [rbx]
  55:	0b 00                	or     eax,DWORD PTR [rax]
  57:	00 09                	add    BYTE PTR [rcx],cl
  59:	0f 00 0b             	str    WORD PTR [rbx]
  5c:	0b 49 13             	or     ecx,DWORD PTR [rcx+0x13]
  5f:	00 00                	add    BYTE PTR [rax],al
  61:	0a 34 00             	or     dh,BYTE PTR [rax+rax*1]
  64:	03 0e                	add    ecx,DWORD PTR [rsi]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:93
		in++;
  66:	3a 0b                	cmp    cl,BYTE PTR [rbx]
  68:	3b 05 39 0b 49 13    	cmp    eax,DWORD PTR [rip+0x13490b39]        # 13490ba7 <dlNextRound.8083+0x133ae1bf>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:86
	while ( *in && l < sizeof(string) - 3 ) {
  6e:	3f                   	(bad)  
  6f:	19 3c 19             	sbb    DWORD PTR [rcx+rbx*1],edi
  72:	00 00                	add    BYTE PTR [rax],al
  74:	0b 16                	or     edx,DWORD PTR [rsi]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:86 (discriminator 1)
  76:	00 03                	add    BYTE PTR [rbx],al
  78:	0e                   	(bad)  
  79:	49 13 00             	adc    rax,QWORD PTR [r8]
  7c:	00 0c 13             	add    BYTE PTR [rbx+rdx*1],cl
  7f:	01 03                	add    DWORD PTR [rbx],eax
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:95
	string[l] = '\0';
  81:	0e                   	(bad)  
  82:	0b 0b                	or     ecx,DWORD PTR [rbx]
  84:	3a 0b                	cmp    cl,BYTE PTR [rbx]
  86:	3b 0b                	cmp    ecx,DWORD PTR [rbx]
  88:	01 13                	add    DWORD PTR [rbx],edx
  8a:	00 00                	add    BYTE PTR [rax],al
  8c:	0d 0d 00 03 0e       	or     eax,0xe03000d
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:97
	return string;
  91:	3a 0b                	cmp    cl,BYTE PTR [rbx]
  93:	3b 0b                	cmp    ecx,DWORD PTR [rbx]
  95:	49 13 38             	adc    rdi,QWORD PTR [r8]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:98
}
  98:	0b 00                	or     eax,DWORD PTR [rax]
SV_AddServerCommand():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:142
void SV_AddServerCommand( client_t *client, const char *cmd ) {
  9a:	00 0e                	add    BYTE PTR [rsi],cl
  9c:	13 01                	adc    eax,DWORD PTR [rcx]
  9e:	03 0e                	add    ecx,DWORD PTR [rsi]
  a0:	0b 0b                	or     ecx,DWORD PTR [rbx]
  a2:	3a 0b                	cmp    cl,BYTE PTR [rbx]
  a4:	3b 0b                	cmp    ecx,DWORD PTR [rbx]
  a6:	39 0b                	cmp    DWORD PTR [rbx],ecx
  a8:	01 13                	add    DWORD PTR [rbx],edx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:152
	if ( client->state < CS_PRIMED )
  aa:	00 00                	add    BYTE PTR [rax],al
  ac:	0f 0d 00             	prefetch BYTE PTR [rax]
  af:	03 0e                	add    ecx,DWORD PTR [rsi]
  b1:	3a 0b                	cmp    cl,BYTE PTR [rbx]
  b3:	3b 0b                	cmp    ecx,DWORD PTR [rbx]
  b5:	39 0b                	cmp    DWORD PTR [rbx],ecx
  b7:	49 13 38             	adc    rdi,QWORD PTR [r8]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:155
	client->reliableSequence++;
  ba:	0b 00                	or     eax,DWORD PTR [rax]
  bc:	00 10                	add    BYTE PTR [rax],dl
  be:	16                   	(bad)  
  bf:	00 03                	add    BYTE PTR [rbx],al
  c1:	0e                   	(bad)  
  c2:	3a 0b                	cmp    cl,BYTE PTR [rbx]
  c4:	3b 0b                	cmp    ecx,DWORD PTR [rbx]
  c6:	39 0b                	cmp    DWORD PTR [rbx],ecx
  c8:	00 00                	add    BYTE PTR [rax],al
  ca:	11 13                	adc    DWORD PTR [rbx],edx
  cc:	00 03                	add    BYTE PTR [rbx],al
  ce:	0e                   	(bad)  
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:160
	if ( client->reliableSequence - client->reliableAcknowledge == MAX_RELIABLE_COMMANDS + 1 ) {
  cf:	3c 19                	cmp    al,0x19
  d1:	00 00                	add    BYTE PTR [rax],al
  d3:	12 34 00             	adc    dh,BYTE PTR [rax+rax*1]
  d6:	03 0e                	add    ecx,DWORD PTR [rsi]
  d8:	3a 0b                	cmp    cl,BYTE PTR [rbx]
  da:	3b 0b                	cmp    ecx,DWORD PTR [rbx]
  dc:	39 0b                	cmp    DWORD PTR [rbx],ecx
  de:	49 13 3f             	adc    rdi,QWORD PTR [r15]
  e1:	19 3c 19             	sbb    DWORD PTR [rcx+rbx*1],edi
  e4:	00 00                	add    BYTE PTR [rax],al
  e6:	13 21                	adc    esp,DWORD PTR [rcx]
  e8:	00 00                	add    BYTE PTR [rax],al
  ea:	00 14 04             	add    BYTE PTR [rsp+rax*1],dl
  ed:	01 3e                	add    DWORD PTR [rsi],edi
  ef:	0b 0b                	or     ecx,DWORD PTR [rbx]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:161
		Com_Printf( "===== pending server commands =====\n" );
  f1:	0b 49 13             	or     ecx,DWORD PTR [rcx+0x13]
  f4:	3a 0b                	cmp    cl,BYTE PTR [rbx]
  f6:	3b 0b                	cmp    ecx,DWORD PTR [rbx]
  f8:	39 0b                	cmp    DWORD PTR [rbx],ecx
  fa:	01 13                	add    DWORD PTR [rbx],edx
  fc:	00 00                	add    BYTE PTR [rax],al
  fe:	15 28 00 03 0e       	adc    eax,0xe030028
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:162
		n = client->reliableSequence - client->reliableAcknowledge;
 103:	1c 0b                	sbb    al,0xb
 105:	00 00                	add    BYTE PTR [rax],al
 107:	16                   	(bad)  
 108:	16                   	(bad)  
 109:	00 03                	add    BYTE PTR [rbx],al
 10b:	0e                   	(bad)  
 10c:	3a 0b                	cmp    cl,BYTE PTR [rbx]
 10e:	3b 05 39 0b 49 13    	cmp    eax,DWORD PTR [rip+0x13490b39]        # 13490c4d <dlNextRound.8083+0x133ae265>
 114:	00 00                	add    BYTE PTR [rax],al
 116:	17                   	(bad)  
 117:	04 01                	add    al,0x1
 119:	3e 0b 0b             	or     ecx,DWORD PTR ds:[rbx]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:163
		for ( i = 0; i < n; i++ ) {
 11c:	0b 49 13             	or     ecx,DWORD PTR [rcx+0x13]
 11f:	3a 0b                	cmp    cl,BYTE PTR [rbx]
 121:	3b 05 39 0b 01 13    	cmp    eax,DWORD PTR [rip+0x13010b39]        # 13010c60 <dlNextRound.8083+0x12f2e278>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:164 (discriminator 3)
			const int index = client->reliableAcknowledge + 1 + i;
 127:	00 00                	add    BYTE PTR [rax],al
 129:	18 21                	sbb    BYTE PTR [rcx],ah
 12b:	00 49 13             	add    BYTE PTR [rcx+0x13],cl
 12e:	2f                   	(bad)  
 12f:	05 00 00 19 15       	add    eax,0x15190000
 134:	01 27                	add    DWORD PTR [rdi],esp
 136:	19 49 13             	sbb    DWORD PTR [rcx+0x13],ecx
 139:	01 13                	add    DWORD PTR [rbx],edx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:165 (discriminator 3)
			Com_Printf( "cmd %5d: %s\n", i, client->reliableCommands[ index & ( MAX_RELIABLE_COMMANDS - 1 ) ] );
 13b:	00 00                	add    BYTE PTR [rax],al
 13d:	1a 05 00 49 13 00    	sbb    al,BYTE PTR [rip+0x134900]        # 134a43 <dlNextRound.8083+0x5205b>
 143:	00 1b                	add    BYTE PTR [rbx],bl
 145:	18 00                	sbb    BYTE PTR [rax],al
 147:	00 00                	add    BYTE PTR [rax],al
 149:	1c 13                	sbb    al,0x13
 14b:	01 03                	add    DWORD PTR [rbx],eax
 14d:	0e                   	(bad)  
 14e:	0b 0b                	or     ecx,DWORD PTR [rbx]
 150:	3a 0b                	cmp    cl,BYTE PTR [rbx]
 152:	3b 05 39 0b 01 13    	cmp    eax,DWORD PTR [rip+0x13010b39]        # 13010c91 <dlNextRound.8083+0x12f2e2a9>
 158:	00 00                	add    BYTE PTR [rax],al
 15a:	1d 0d 00 03 0e       	sbb    eax,0xe03000d
 15f:	3a 0b                	cmp    cl,BYTE PTR [rbx]
 161:	3b 05 39 0b 49 13    	cmp    eax,DWORD PTR [rip+0x13490b39]        # 13490ca0 <dlNextRound.8083+0x133ae2b8>
 167:	38 0b                	cmp    BYTE PTR [rbx],cl
 169:	00 00                	add    BYTE PTR [rax],al
 16b:	1e                   	(bad)  
 16c:	13 01                	adc    eax,DWORD PTR [rcx]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:163 (discriminator 3)
		for ( i = 0; i < n; i++ ) {
 16e:	03 0e                	add    ecx,DWORD PTR [rsi]
 170:	0b 05 3a 0b 3b 05    	or     eax,DWORD PTR [rip+0x53b0b3a]        # 53b0cb0 <dlNextRound.8083+0x52ce2c8>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:163 (discriminator 1)
 176:	39 0b                	cmp    DWORD PTR [rbx],ecx
 178:	01 13                	add    DWORD PTR [rbx],edx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:167
		Com_Printf( "cmd %5d: %s\n", i, cmd );
 17a:	00 00                	add    BYTE PTR [rax],al
 17c:	1f                   	(bad)  
 17d:	0d 00 03 0e 3a       	or     eax,0x3a0e0300
 182:	0b 3b                	or     edi,DWORD PTR [rbx]
 184:	05 39 0b 49 13       	add    eax,0x13490b39
 189:	38 05 00 00 20 13    	cmp    BYTE PTR [rip+0x13200000],al        # 1320018f <dlNextRound.8083+0x1311d7a7>
 18f:	01 0b                	add    DWORD PTR [rbx],ecx
 191:	0b 3a                	or     edi,DWORD PTR [rdx]
 193:	0b 3b                	or     edi,DWORD PTR [rbx]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:168
		SV_DropClient( client, "Server command overflow" );
 195:	05 39 0b 01 13       	add    eax,0x13010b39
 19a:	00 00                	add    BYTE PTR [rax],al
 19c:	21 0d 00 03 08 3a    	and    DWORD PTR [rip+0x3a080300],ecx        # 3a0804a2 <dlNextRound.8083+0x39f9daba>
 1a2:	0b 3b                	or     edi,DWORD PTR [rbx]
 1a4:	05 39 0b 49 13       	add    eax,0x13490b39
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:171
	index = client->reliableSequence & ( MAX_RELIABLE_COMMANDS - 1 );
 1a9:	38 0b                	cmp    BYTE PTR [rbx],cl
 1ab:	00 00                	add    BYTE PTR [rax],al
 1ad:	22 13                	and    dl,BYTE PTR [rbx]
 1af:	01 0b                	add    DWORD PTR [rbx],ecx
 1b1:	0b 3a                	or     edi,DWORD PTR [rdx]
 1b3:	0b 3b                	or     edi,DWORD PTR [rbx]
 1b5:	0b 39                	or     edi,DWORD PTR [rcx]
 1b7:	0b 01                	or     eax,DWORD PTR [rcx]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:172
	Q_strncpyz( client->reliableCommands[ index ], cmd, sizeof( client->reliableCommands[ index ] ) );
 1b9:	13 00                	adc    eax,DWORD PTR [rax]
 1bb:	00 23                	add    BYTE PTR [rbx],ah
 1bd:	0d 00 03 08 3a       	or     eax,0x3a080300
 1c2:	0b 3b                	or     edi,DWORD PTR [rbx]
 1c4:	0b 39                	or     edi,DWORD PTR [rcx]
 1c6:	0b 49 13             	or     ecx,DWORD PTR [rcx+0x13]
 1c9:	38 0b                	cmp    BYTE PTR [rbx],cl
 1cb:	00 00                	add    BYTE PTR [rax],al
 1cd:	24 17                	and    al,0x17
 1cf:	01 0b                	add    DWORD PTR [rbx],ecx
 1d1:	0b 3a                	or     edi,DWORD PTR [rdx]
 1d3:	0b 3b                	or     edi,DWORD PTR [rbx]
 1d5:	0b 39                	or     edi,DWORD PTR [rcx]
 1d7:	0b 01                	or     eax,DWORD PTR [rcx]
 1d9:	13 00                	adc    eax,DWORD PTR [rax]
 1db:	00 25 0d 00 03 08    	add    BYTE PTR [rip+0x803000d],ah        # 80301ee <dlNextRound.8083+0x7f4d806>
 1e1:	3a 0b                	cmp    cl,BYTE PTR [rbx]
 1e3:	3b 0b                	cmp    ecx,DWORD PTR [rbx]
 1e5:	39 0b                	cmp    DWORD PTR [rbx],ecx
 1e7:	49 13 00             	adc    rax,QWORD PTR [r8]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:153
		return;
 1ea:	00 26                	add    BYTE PTR [rsi],ah
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:173
}
 1ec:	13 01                	adc    eax,DWORD PTR [rcx]
SV_SendServerCommand():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:185
void QDECL SV_SendServerCommand( client_t *cl, const char *fmt, ... ) {
 1ee:	0b 05 3a 0b 3b 0b    	or     eax,DWORD PTR [rip+0xb3b0b3a]        # b3b0d2e <dlNextRound.8083+0xb2ce346>
 1f4:	39 0b                	cmp    DWORD PTR [rbx],ecx
 1f6:	01 13                	add    DWORD PTR [rbx],edx
 1f8:	00 00                	add    BYTE PTR [rax],al
 1fa:	27                   	(bad)  
 1fb:	0d 00 03 0e 3a       	or     eax,0x3a0e0300
 200:	0b 3b                	or     edi,DWORD PTR [rbx]
 202:	0b 39                	or     edi,DWORD PTR [rcx]
 204:	0b 49 13             	or     ecx,DWORD PTR [rcx+0x13]
 207:	38 05 00 00 28 28    	cmp    BYTE PTR [rip+0x28280000],al        # 2828020d <dlNextRound.8083+0x2819d825>
 20d:	00 03                	add    BYTE PTR [rbx],al
 20f:	0e                   	(bad)  
 210:	1c 0d                	sbb    al,0xd
 212:	00 00                	add    BYTE PTR [rax],al
 214:	29 15 00 27 19 00    	sub    DWORD PTR [rip+0x192700],edx        # 19291a <dlNextRound.8083+0xaff32>
 21a:	00 2a                	add    BYTE PTR [rdx],ch
 21c:	17                   	(bad)  
 21d:	01 03                	add    DWORD PTR [rbx],eax
 21f:	0e                   	(bad)  
 220:	0b 0b                	or     ecx,DWORD PTR [rbx]
 222:	3a 0b                	cmp    cl,BYTE PTR [rbx]
 224:	3b 0b                	cmp    ecx,DWORD PTR [rbx]
 226:	39 0b                	cmp    DWORD PTR [rbx],ecx
 228:	01 13                	add    DWORD PTR [rbx],edx
 22a:	00 00                	add    BYTE PTR [rax],al
 22c:	2b 0d 00 03 0e 3a    	sub    ecx,DWORD PTR [rip+0x3a0e0300]        # 3a0e0532 <dlNextRound.8083+0x39ffdb4a>
 232:	0b 3b                	or     edi,DWORD PTR [rbx]
 234:	0b 39                	or     edi,DWORD PTR [rcx]
 236:	0b 49 13             	or     ecx,DWORD PTR [rcx+0x13]
 239:	00 00                	add    BYTE PTR [rax],al
 23b:	2c 15                	sub    al,0x15
 23d:	01 27                	add    DWORD PTR [rdi],esp
 23f:	19 01                	sbb    DWORD PTR [rcx],eax
 241:	13 00                	adc    eax,DWORD PTR [rax]
 243:	00 2d 34 00 03 08    	add    BYTE PTR [rip+0x8030034],ch        # 803027d <dlNextRound.8083+0x7f4d895>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:191
	va_start( argptr, fmt );
 249:	3a 0b                	cmp    cl,BYTE PTR [rbx]
 24b:	3b 05 39 0b 49 13    	cmp    eax,DWORD PTR [rip+0x13490b39]        # 13490d8a <dlNextRound.8083+0x133ae3a2>
 251:	3f                   	(bad)  
 252:	19 3c 19             	sbb    DWORD PTR [rcx+rbx*1],edi
 255:	00 00                	add    BYTE PTR [rax],al
 257:	2e 13 01             	adc    eax,DWORD PTR cs:[rcx]
 25a:	03 0e                	add    ecx,DWORD PTR [rsi]
 25c:	0b 05 3a 0b 3b 0b    	or     eax,DWORD PTR [rip+0xb3b0b3a]        # b3b0d9c <dlNextRound.8083+0xb2ce3b4>
 262:	39 0b                	cmp    DWORD PTR [rbx],ecx
 264:	01 13                	add    DWORD PTR [rbx],edx
 266:	00 00                	add    BYTE PTR [rax],al
 268:	2f                   	(bad)  
 269:	13 01                	adc    eax,DWORD PTR [rcx]
 26b:	0b 06                	or     eax,DWORD PTR [rsi]
 26d:	3a 0b                	cmp    cl,BYTE PTR [rbx]
 26f:	3b 0b                	cmp    ecx,DWORD PTR [rbx]
 271:	39 0b                	cmp    DWORD PTR [rbx],ecx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:192
	len = Q_vsnprintf( message, sizeof( message ), fmt, argptr );
 273:	01 13                	add    DWORD PTR [rbx],edx
 275:	00 00                	add    BYTE PTR [rax],al
 277:	30 0d 00 03 0e 3a    	xor    BYTE PTR [rip+0x3a0e0300],cl        # 3a0e057d <dlNextRound.8083+0x39ffdb95>
 27d:	0b 3b                	or     edi,DWORD PTR [rbx]
 27f:	0b 39                	or     edi,DWORD PTR [rcx]
 281:	0b 49 13             	or     ecx,DWORD PTR [rcx+0x13]
 284:	38 06                	cmp    BYTE PTR [rsi],al
 286:	00 00                	add    BYTE PTR [rax],al
 288:	31 13                	xor    DWORD PTR [rbx],edx
 28a:	01 03                	add    DWORD PTR [rbx],eax
 28c:	0e                   	(bad)  
 28d:	0b 06                	or     eax,DWORD PTR [rsi]
 28f:	3a 0b                	cmp    cl,BYTE PTR [rbx]
 291:	3b 0b                	cmp    ecx,DWORD PTR [rbx]
 293:	39 0b                	cmp    DWORD PTR [rbx],ecx
 295:	01 13                	add    DWORD PTR [rbx],edx
 297:	00 00                	add    BYTE PTR [rax],al
 299:	32 0d 00 03 08 3a    	xor    cl,BYTE PTR [rip+0x3a080300]        # 3a08059f <dlNextRound.8083+0x39f9dbb7>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:195
	if ( cl != NULL ) {
 29f:	0b 3b                	or     edi,DWORD PTR [rbx]
 2a1:	0b 39                	or     edi,DWORD PTR [rcx]
 2a3:	0b 49 13             	or     ecx,DWORD PTR [rcx+0x13]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:198
		if ( len <= 1022 || cl->longstr ) {
 2a6:	38 06                	cmp    BYTE PTR [rsi],al
 2a8:	00 00                	add    BYTE PTR [rax],al
 2aa:	33 34 00             	xor    esi,DWORD PTR [rax+rax*1]
 2ad:	47 13 3a             	rex.RXB adc r15d,DWORD PTR [r10]
 2b0:	0b 3b                	or     edi,DWORD PTR [rbx]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:198 (discriminator 1)
 2b2:	0b 39                	or     edi,DWORD PTR [rcx]
 2b4:	0b 02                	or     eax,DWORD PTR [rdx]
 2b6:	18 00                	sbb    BYTE PTR [rax],al
 2b8:	00 34 34             	add    BYTE PTR [rsp+rsi*1],dh
 2bb:	00 03                	add    BYTE PTR [rbx],al
 2bd:	0e                   	(bad)  
 2be:	3a 0b                	cmp    cl,BYTE PTR [rbx]
 2c0:	3b 05 39 0b 49 13    	cmp    eax,DWORD PTR [rip+0x13490b39]        # 13490dff <dlNextRound.8083+0x133ae417>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:199
			SV_AddServerCommand( cl, message );
 2c6:	02 18                	add    bl,BYTE PTR [rax]
 2c8:	00 00                	add    BYTE PTR [rax],al
 2ca:	35 2e 01 3f 19       	xor    eax,0x193f012e
 2cf:	03 0e                	add    ecx,DWORD PTR [rsi]
 2d1:	3a 0b                	cmp    cl,BYTE PTR [rbx]
 2d3:	3b 05 39 0b 27 19    	cmp    eax,DWORD PTR [rip+0x19270b39]        # 19270e12 <dlNextRound.8083+0x1918e42a>
 2d9:	49 13 11             	adc    rdx,QWORD PTR [r9]
 2dc:	01 12                	add    DWORD PTR [rdx],edx
 2de:	07                   	(bad)  
 2df:	40 18 96 42 19 01 13 	sbb    BYTE PTR [rsi+0x13011942],dl
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:205
	if ( com_dedicated->integer && !strncmp( message, "print", 5 ) ) {
 2e6:	00 00                	add    BYTE PTR [rax],al
 2e8:	36 05 00 03 0e 3a    	ss add eax,0x3a0e0300
 2ee:	0b 3b                	or     edi,DWORD PTR [rbx]
 2f0:	05 39 0b 49 13       	add    eax,0x13490b39
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:205 (discriminator 1)
 2f5:	02 18                	add    bl,BYTE PTR [rax]
 2f7:	00 00                	add    BYTE PTR [rax],al
 2f9:	37                   	(bad)  
 2fa:	2e 01 3f             	add    DWORD PTR cs:[rdi],edi
 2fd:	19 03                	sbb    DWORD PTR [rbx],eax
 2ff:	0e                   	(bad)  
 300:	3a 0b                	cmp    cl,BYTE PTR [rbx]
 302:	3b 05 39 0b 27 19    	cmp    eax,DWORD PTR [rip+0x19270b39]        # 19270e41 <dlNextRound.8083+0x1918e459>
 308:	11 01                	adc    DWORD PTR [rcx],eax
 30a:	12 07                	adc    al,BYTE PTR [rdi]
 30c:	40 18 96 42 19 01 13 	sbb    BYTE PTR [rsi+0x13011942],dl
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:206
		Com_Printf( "broadcast: %s\n", SV_ExpandNewlines( message ) );
 313:	00 00                	add    BYTE PTR [rax],al
 315:	38 34 00             	cmp    BYTE PTR [rax+rax*1],dh
 318:	03 08                	add    ecx,DWORD PTR [rax]
 31a:	3a 0b                	cmp    cl,BYTE PTR [rbx]
 31c:	3b 05 39 0b 49 13    	cmp    eax,DWORD PTR [rip+0x13490b39]        # 13490e5b <dlNextRound.8083+0x133ae473>
 322:	02 18                	add    bl,BYTE PTR [rax]
 324:	00 00                	add    BYTE PTR [rax],al
 326:	39 2e                	cmp    DWORD PTR [rsi],ebp
 328:	01 03                	add    DWORD PTR [rbx],eax
 32a:	0e                   	(bad)  
 32b:	3a 0b                	cmp    cl,BYTE PTR [rbx]
 32d:	3b 05 39 0b 27 19    	cmp    eax,DWORD PTR [rip+0x19270b39]        # 19270e6c <dlNextRound.8083+0x1918e484>
 333:	11 01                	adc    DWORD PTR [rcx],eax
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:210
	for ( j = 0, client = svs.clients; j < sv_maxclients->integer ; j++, client++ ) {
 335:	12 07                	adc    al,BYTE PTR [rdi]
 337:	40 18 96 42 19 01 13 	sbb    BYTE PTR [rsi+0x13011942],dl
 33e:	00 00                	add    BYTE PTR [rax],al
 340:	3a 2e                	cmp    ch,BYTE PTR [rsi]
 342:	01 3f                	add    DWORD PTR [rdi],edi
 344:	19 03                	sbb    DWORD PTR [rbx],eax
 346:	0e                   	(bad)  
 347:	3a 0b                	cmp    cl,BYTE PTR [rbx]
 349:	3b 05 39 0b 27 19    	cmp    eax,DWORD PTR [rip+0x19270b39]        # 19270e88 <dlNextRound.8083+0x1918e4a0>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:211
		if ( len <= 1022 || client->longstr ) {
 34f:	49 13 11             	adc    rdx,QWORD PTR [r9]
 352:	01 12                	add    DWORD PTR [rdx],edx
 354:	07                   	(bad)  
 355:	40 18 97 42 19 01 13 	sbb    BYTE PTR [rdi+0x13011942],dl
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:211 (discriminator 1)
 35c:	00 00                	add    BYTE PTR [rax],al
 35e:	3b 0b                	cmp    ecx,DWORD PTR [rbx]
 360:	01 11                	add    DWORD PTR [rcx],edx
 362:	01 12                	add    DWORD PTR [rdx],edx
 364:	07                   	(bad)  
 365:	00 00                	add    BYTE PTR [rax],al
 367:	3c 2e                	cmp    al,0x2e
 369:	00 03                	add    BYTE PTR [rbx],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:212
			SV_AddServerCommand( client, message );
 36b:	0e                   	(bad)  
 36c:	3a 0b                	cmp    cl,BYTE PTR [rbx]
 36e:	3b 05 39 0b 27 19    	cmp    eax,DWORD PTR [rip+0x19270b39]        # 19270ead <dlNextRound.8083+0x1918e4c5>
 374:	49 13 11             	adc    rdx,QWORD PTR [r9]
 377:	01 12                	add    DWORD PTR [rdx],edx
 379:	07                   	(bad)  
 37a:	40 18 97 42 19 00 00 	sbb    BYTE PTR [rdi+0x1942],dl
 381:	3d 05 00 03 08       	cmp    eax,0x8030005
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:210 (discriminator 2)
	for ( j = 0, client = svs.clients; j < sv_maxclients->integer ; j++, client++ ) {
 386:	3a 0b                	cmp    cl,BYTE PTR [rbx]
 388:	3b 05 39 0b 49 13    	cmp    eax,DWORD PTR [rip+0x13490b39]        # 13490ec7 <dlNextRound.8083+0x133ae4df>
 38e:	02 18                	add    bl,BYTE PTR [rax]
 390:	00 00                	add    BYTE PTR [rax],al
 392:	3e 2e 01 03          	ds add DWORD PTR cs:[rbx],eax
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:210 (discriminator 1)
 396:	0e                   	(bad)  
 397:	3a 0b                	cmp    cl,BYTE PTR [rbx]
 399:	3b 05 39 0b 27 19    	cmp    eax,DWORD PTR [rip+0x19270b39]        # 19270ed8 <dlNextRound.8083+0x1918e4f0>
 39f:	11 01                	adc    DWORD PTR [rcx],eax
 3a1:	12 07                	adc    al,BYTE PTR [rdi]
 3a3:	40 18 97 42 19 01 13 	sbb    BYTE PTR [rdi+0x13011942],dl
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:201
		return;
 3aa:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:215
}
 3ac:	3f                   	(bad)  
SV_MasterHeartbeat():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:240
{
 3ad:	2e 01 03             	add    DWORD PTR cs:[rbx],eax
 3b0:	0e                   	(bad)  
 3b1:	3a 0b                	cmp    cl,BYTE PTR [rbx]
 3b3:	3b 05 39 0b 27 19    	cmp    eax,DWORD PTR [rip+0x19270b39]        # 19270ef2 <dlNextRound.8083+0x1918e50a>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:246
	netenabled = Cvar_VariableIntegerValue("net_enabled");
 3b9:	49 13 11             	adc    rdx,QWORD PTR [r9]
 3bc:	01 12                	add    DWORD PTR [rdx],edx
 3be:	07                   	(bad)  
 3bf:	40 18 96 42 19 01 13 	sbb    BYTE PTR [rsi+0x13011942],dl
 3c6:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:249
	if (!com_dedicated || com_dedicated->integer != 2 || !(netenabled & (NET_ENABLEV4 | NET_ENABLEV6)))
 3c8:	40                   	rex
 3c9:	2e 01 03             	add    DWORD PTR cs:[rbx],eax
 3cc:	0e                   	(bad)  
 3cd:	3a 0b                	cmp    cl,BYTE PTR [rbx]
 3cf:	3b 05 39 0b 27 19    	cmp    eax,DWORD PTR [rip+0x19270b39]        # 19270f0e <dlNextRound.8083+0x1918e526>
 3d5:	49 13 11             	adc    rdx,QWORD PTR [r9]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:249 (discriminator 1)
 3d8:	01 12                	add    DWORD PTR [rdx],edx
 3da:	07                   	(bad)  
 3db:	40 18 97 42 19 01 13 	sbb    BYTE PTR [rdi+0x13011942],dl
 3e2:	00 00                	add    BYTE PTR [rax],al
 3e4:	41                   	rex.B
 3e5:	2e 00 3f             	add    BYTE PTR cs:[rdi],bh
 3e8:	19 03                	sbb    DWORD PTR [rbx],eax
 3ea:	0e                   	(bad)  
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:249 (discriminator 2)
 3eb:	3a 0b                	cmp    cl,BYTE PTR [rbx]
 3ed:	3b 05 39 0b 27 19    	cmp    eax,DWORD PTR [rip+0x19270b39]        # 19270f2c <dlNextRound.8083+0x1918e544>
 3f3:	11 01                	adc    DWORD PTR [rcx],eax
 3f5:	12 07                	adc    al,BYTE PTR [rdi]
 3f7:	40 18 96 42 19 00 00 	sbb    BYTE PTR [rsi+0x1942],dl
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:253
	if ( svs.nextHeartbeatTime - svs.time > 0 )
 3fe:	42                   	rex.X
 3ff:	2e 01 03             	add    DWORD PTR cs:[rbx],eax
 402:	0e                   	(bad)  
 403:	3a 0b                	cmp    cl,BYTE PTR [rbx]
 405:	3b 0b                	cmp    ecx,DWORD PTR [rbx]
 407:	39 0b                	cmp    DWORD PTR [rbx],ecx
 409:	27                   	(bad)  
 40a:	19 11                	sbb    DWORD PTR [rcx],edx
 40c:	01 12                	add    DWORD PTR [rdx],edx
 40e:	07                   	(bad)  
 40f:	40 18 96 42 19 01 13 	sbb    BYTE PTR [rsi+0x13011942],dl
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:256
	svs.nextHeartbeatTime = svs.time + HEARTBEAT_MSEC;
 416:	00 00                	add    BYTE PTR [rax],al
 418:	43 05 00 03 0e 3a    	rex.XB add eax,0x3a0e0300
 41e:	0b 3b                	or     edi,DWORD PTR [rbx]
 420:	0b 39                	or     edi,DWORD PTR [rcx]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:259
	for (i = 0; i < MAX_MASTER_SERVERS; i++)
 422:	0b 49 13             	or     ecx,DWORD PTR [rcx+0x13]
 425:	02 18                	add    bl,BYTE PTR [rax]
 427:	00 00                	add    BYTE PTR [rax],al
 429:	44 34 00             	rex.R xor al,0x0
 42c:	03 08                	add    ecx,DWORD PTR [rax]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:261
		if(!sv_master[i]->string[0])
 42e:	3a 0b                	cmp    cl,BYTE PTR [rbx]
 430:	3b 0b                	cmp    ecx,DWORD PTR [rbx]
 432:	39 0b                	cmp    DWORD PTR [rbx],ecx
 434:	49 13 02             	adc    rax,QWORD PTR [r10]
 437:	18 00                	sbb    BYTE PTR [rax],al
 439:	00 45 34             	add    BYTE PTR [rbp+0x34],al
 43c:	00 03                	add    BYTE PTR [rbx],al
 43e:	0e                   	(bad)  
 43f:	3a 0b                	cmp    cl,BYTE PTR [rbx]
 441:	3b 0b                	cmp    ecx,DWORD PTR [rbx]
 443:	39 0b                	cmp    DWORD PTR [rbx],ecx
 445:	49 13 02             	adc    rax,QWORD PTR [r10]
 448:	18 00                	sbb    BYTE PTR [rax],al
 44a:	00 46 2e             	add    BYTE PTR [rsi+0x2e],al
 44d:	01 3f                	add    DWORD PTR [rdi],edi
 44f:	19 03                	sbb    DWORD PTR [rbx],eax
 451:	0e                   	(bad)  
 452:	3a 0b                	cmp    cl,BYTE PTR [rbx]
 454:	3b 0b                	cmp    ecx,DWORD PTR [rbx]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:266
		if ( sv_master[i]->modified || svs.time - svs.masterResolveTime[i] > 0 )
 456:	39 0b                	cmp    DWORD PTR [rbx],ecx
 458:	27                   	(bad)  
 459:	19 11                	sbb    DWORD PTR [rcx],edx
 45b:	01 12                	add    DWORD PTR [rdx],edx
 45d:	07                   	(bad)  
 45e:	40 18 96 42 19 01 13 	sbb    BYTE PTR [rsi+0x13011942],dl
 465:	00 00                	add    BYTE PTR [rax],al
 467:	47 05 00 03 08 3a    	rex.RXB add eax,0x3a080300
 46d:	0b 3b                	or     edi,DWORD PTR [rbx]
 46f:	0b 39                	or     edi,DWORD PTR [rcx]
 471:	0b 49 13             	or     ecx,DWORD PTR [rcx+0x13]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:266 (discriminator 1)
 474:	02 18                	add    bl,BYTE PTR [rax]
 476:	00 00                	add    BYTE PTR [rax],al
 478:	48                   	rex.W
 479:	2e 01 03             	add    DWORD PTR cs:[rbx],eax
 47c:	0e                   	(bad)  
 47d:	3a 0b                	cmp    cl,BYTE PTR [rbx]
 47f:	3b 0b                	cmp    ecx,DWORD PTR [rbx]
 481:	39 0b                	cmp    DWORD PTR [rbx],ecx
 483:	27                   	(bad)  
 484:	19 49 13             	sbb    DWORD PTR [rcx+0x13],ecx
 487:	11 01                	adc    DWORD PTR [rcx],eax
 489:	12 07                	adc    al,BYTE PTR [rdi]
 48b:	40 18 97 42 19 01 13 	sbb    BYTE PTR [rdi+0x13011942],dl
 492:	00 00                	add    BYTE PTR [rax],al
 494:	49 01 01             	add    QWORD PTR [r9],rax
 497:	49 13 00             	adc    rax,QWORD PTR [r8]
	...

Disassembly of section .debug_aranges:

0000000000000000 <.debug_aranges>:
SV_ExpandNewlines():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:81
static const char *SV_ExpandNewlines( const char *in ) {
   0:	2c 00                	sub    al,0x0
   2:	00 00                	add    BYTE PTR [rax],al
   4:	02 00                	add    al,BYTE PTR [rax]
   6:	00 00                	add    BYTE PTR [rax],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:85
	l = 0;
   8:	00 00                	add    BYTE PTR [rax],al
   a:	08 00                	or     BYTE PTR [rax],al
	...
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:87
		if ( *in == '\n' ) {
  18:	e3 27                	jrcxz  41 <buckets+0x21>
	...

Disassembly of section .debug_line:

0000000000000000 <.debug_line>:
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:81
static const char *SV_ExpandNewlines( const char *in ) {
       0:	69 10 00 00 02 00    	imul   edx,DWORD PTR [rax],0x20000
       6:	d5                   	(bad)  
       7:	01 00                	add    DWORD PTR [rax],eax
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:85
	l = 0;
       9:	00 01                	add    BYTE PTR [rcx],al
       b:	01 fb                	add    ebx,edi
       d:	0e                   	(bad)  
       e:	0d 00 01 01 01       	or     eax,0x1010100
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:87
		if ( *in == '\n' ) {
      13:	01 00                	add    DWORD PTR [rax],eax
      15:	00 00                	add    BYTE PTR [rax],al
      17:	01 00                	add    DWORD PTR [rax],eax
      19:	00 01                	add    BYTE PTR [rcx],al
      1b:	63 6f 64             	movsxd ebp,DWORD PTR [rdi+0x64]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:88
			string[l++] = '\\';
      1e:	65 2f                	gs (bad) 
      20:	73 65                	jae    87 <.debug_line+0x87>
      22:	72 76                	jb     9a <.debug_line+0x9a>
      24:	65 72 00             	gs jb  27 <.debug_line+0x27>
      27:	2f                   	(bad)  
      28:	75 73                	jne    9d <.debug_line+0x9d>
      2a:	72 2f                	jb     5b <.debug_line+0x5b>
      2c:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [rsi+0x63],0x6564756c
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:89
			string[l++] = 'n';
      33:	2f                   	(bad)  
      34:	78 38                	js     6e <.debug_line+0x6e>
      36:	36 5f                	ss pop rdi
      38:	36 34 2d             	ss xor al,0x2d
      3b:	6c                   	ins    BYTE PTR es:[rdi],dx
      3c:	69 6e 75 78 2d 67 6e 	imul   ebp,DWORD PTR [rsi+0x75],0x6e672d78
      43:	75 2f                	jne    74 <.debug_line+0x74>
      45:	62                   	(bad)  
      46:	69 74 73 00 2f 75 73 	imul   esi,DWORD PTR [rbx+rsi*2+0x0],0x7273752f
      4d:	72 
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:91
			string[l++] = *in;
      4e:	2f                   	(bad)  
      4f:	6c                   	ins    BYTE PTR es:[rdi],dx
      50:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [rdx+0x2f],0x2f636367
      57:	78 38                	js     91 <.debug_line+0x91>
      59:	36 5f                	ss pop rdi
      5b:	36 34 2d             	ss xor al,0x2d
      5e:	6c                   	ins    BYTE PTR es:[rdi],dx
      5f:	69 6e 75 78 2d 67 6e 	imul   ebp,DWORD PTR [rsi+0x75],0x6e672d78
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:93
		in++;
      66:	75 2f                	jne    97 <.debug_line+0x97>
      68:	38 2f                	cmp    BYTE PTR [rdi],ch
      6a:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [rsi+0x63],0x6564756c
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:86
	while ( *in && l < sizeof(string) - 3 ) {
      71:	00 2f                	add    BYTE PTR [rdi],ch
      73:	75 73                	jne    e8 <.debug_line+0xe8>
      75:	72 2f                	jb     a6 <.debug_line+0xa6>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:86 (discriminator 1)
      77:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [rsi+0x63],0x6564756c
      7e:	2f                   	(bad)  
      7f:	78 38                	js     b9 <.debug_line+0xb9>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:95
	string[l] = '\0';
      81:	36 5f                	ss pop rdi
      83:	36 34 2d             	ss xor al,0x2d
      86:	6c                   	ins    BYTE PTR es:[rdi],dx
      87:	69 6e 75 78 2d 67 6e 	imul   ebp,DWORD PTR [rsi+0x75],0x6e672d78
      8e:	75 2f                	jne    bf <.debug_line+0xbf>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:97
	return string;
      90:	62                   	(bad)  
      91:	69 74 73 2f 74 79 70 	imul   esi,DWORD PTR [rbx+rsi*2+0x2f],0x65707974
      98:	65 
SV_AddServerCommand():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:142
void SV_AddServerCommand( client_t *client, const char *cmd ) {
      99:	73 00                	jae    9b <.debug_line+0x9b>
      9b:	2f                   	(bad)  
      9c:	75 73                	jne    111 <.debug_line+0x111>
      9e:	72 2f                	jb     cf <.debug_line+0xcf>
      a0:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [rsi+0x63],0x6564756c
      a7:	00 63 6f             	add    BYTE PTR [rbx+0x6f],ah
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:152
	if ( client->state < CS_PRIMED )
      aa:	64 65 2f             	fs gs (bad) 
      ad:	73 65                	jae    114 <.debug_line+0x114>
      af:	72 76                	jb     127 <.debug_line+0x127>
      b1:	65 72 2f             	gs jb  e3 <.debug_line+0xe3>
      b4:	2e 2e 2f             	cs cs (bad) 
      b7:	71 63                	jno    11c <.debug_line+0x11c>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:155
	client->reliableSequence++;
      b9:	6f                   	outs   dx,DWORD PTR ds:[rsi]
      ba:	6d                   	ins    DWORD PTR es:[rdi],dx
      bb:	6d                   	ins    DWORD PTR es:[rdi],dx
      bc:	6f                   	outs   dx,DWORD PTR ds:[rsi]
      bd:	6e                   	outs   dx,BYTE PTR ds:[rsi]
      be:	00 63 6f             	add    BYTE PTR [rbx+0x6f],ah
      c1:	64 65 2f             	fs gs (bad) 
      c4:	73 65                	jae    12b <.debug_line+0x12b>
      c6:	72 76                	jb     13e <.debug_line+0x13e>
      c8:	65 72 2f             	gs jb  fa <.debug_line+0xfa>
      cb:	2e 2e 2f             	cs cs (bad) 
      ce:	67 61                	addr32 (bad) 
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:160
	if ( client->reliableSequence - client->reliableAcknowledge == MAX_RELIABLE_COMMANDS + 1 ) {
      d0:	6d                   	ins    DWORD PTR es:[rdi],dx
      d1:	65 00 00             	add    BYTE PTR gs:[rax],al
      d4:	73 76                	jae    14c <.debug_line+0x14c>
      d6:	5f                   	pop    rdi
      d7:	6d                   	ins    DWORD PTR es:[rdi],dx
      d8:	61                   	(bad)  
      d9:	69 6e 2e 63 00 01 00 	imul   ebp,DWORD PTR [rsi+0x2e],0x10063
      e0:	00 74 79 70          	add    BYTE PTR [rcx+rdi*2+0x70],dh
      e4:	65 73 2e             	gs jae 115 <.debug_line+0x115>
      e7:	68 00 02 00 00       	push   0x200
      ec:	73 74                	jae    162 <.debug_line+0x162>
      ee:	64 64 65 66 2e 68 00 	fs fs gs cs pushw 0x300
      f5:	03 
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:161
		Com_Printf( "===== pending server commands =====\n" );
      f6:	00 00                	add    BYTE PTR [rax],al
      f8:	73 74                	jae    16e <.debug_line+0x16e>
      fa:	64 61                	fs (bad) 
      fc:	72 67                	jb     165 <.debug_line+0x165>
      fe:	2e 68 00 03 00 00    	cs push 0x300
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:162
		n = client->reliableSequence - client->reliableAcknowledge;
     104:	3c 62                	cmp    al,0x62
     106:	75 69                	jne    171 <.debug_line+0x171>
     108:	6c                   	ins    BYTE PTR es:[rdi],dx
     109:	74 2d                	je     138 <.debug_line+0x138>
     10b:	69 6e 3e 00 00 00 00 	imul   ebp,DWORD PTR [rsi+0x3e],0x0
     112:	73 74                	jae    188 <.debug_line+0x188>
     114:	72 75                	jb     18b <.debug_line+0x18b>
     116:	63 74 5f 46          	movsxd esi,DWORD PTR [rdi+rbx*2+0x46]
     11a:	49                   	rex.WB
     11b:	4c                   	rex.WR
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:163
		for ( i = 0; i < n; i++ ) {
     11c:	45                   	rex.RB
     11d:	2e 68 00 04 00 00    	cs push 0x400
     123:	46                   	rex.RX
     124:	49                   	rex.WB
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:164 (discriminator 3)
			const int index = client->reliableAcknowledge + 1 + i;
     125:	4c                   	rex.WR
     126:	45                   	rex.RB
     127:	2e 68 00 04 00 00    	cs push 0x400
     12d:	73 74                	jae    1a3 <.debug_line+0x1a3>
     12f:	64 69 6f 2e 68 00 05 	imul   ebp,DWORD PTR fs:[rdi+0x2e],0x50068
     136:	00 
     137:	00 6d 61             	add    BYTE PTR [rbp+0x61],ch
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:165 (discriminator 3)
			Com_Printf( "cmd %5d: %s\n", i, client->reliableCommands[ index & ( MAX_RELIABLE_COMMANDS - 1 ) ] );
     13a:	74 68                	je     1a4 <.debug_line+0x1a4>
     13c:	2e 68 00 05 00 00    	cs push 0x500
     142:	73 79                	jae    1bd <.debug_line+0x1bd>
     144:	73 5f                	jae    1a5 <.debug_line+0x1a5>
     146:	65 72 72             	gs jb  1bb <.debug_line+0x1bb>
     149:	6c                   	ins    BYTE PTR es:[rdi],dx
     14a:	69 73 74 2e 68 00 02 	imul   esi,DWORD PTR [rbx+0x74],0x200682e
     151:	00 00                	add    BYTE PTR [rax],al
     153:	73 74                	jae    1c9 <.debug_line+0x1c9>
     155:	64 69 6e 74 2d 69 6e 	imul   ebp,DWORD PTR fs:[rsi+0x74],0x746e692d
     15c:	74 
     15d:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     15e:	2e 68 00 02 00 00    	cs push 0x200
     164:	74 69                	je     1cf <.debug_line+0x1cf>
     166:	6d                   	ins    DWORD PTR es:[rdi],dx
     167:	65 2e 68 00 05 00 00 	gs cs push 0x500
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:163 (discriminator 3)
		for ( i = 0; i < n; i++ ) {
     16e:	73 74                	jae    1e4 <.debug_line+0x1e4>
     170:	64 69 6e 74 2d 75 69 	imul   ebp,DWORD PTR fs:[rsi+0x74],0x6e69752d
     177:	6e 
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:163 (discriminator 1)
     178:	74 6e                	je     1e8 <.debug_line+0x1e8>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:167
		Com_Printf( "cmd %5d: %s\n", i, cmd );
     17a:	2e 68 00 02 00 00    	cs push 0x200
     180:	73 74                	jae    1f6 <.debug_line+0x1f6>
     182:	64 69 6e 74 2e 68 00 	imul   ebp,DWORD PTR fs:[rsi+0x74],0x500682e
     189:	05 
     18a:	00 00                	add    BYTE PTR [rax],al
     18c:	71 5f                	jno    1ed <.debug_line+0x1ed>
     18e:	73 68                	jae    1f8 <.debug_line+0x1f8>
     190:	61                   	(bad)  
     191:	72 65                	jb     1f8 <.debug_line+0x1f8>
     193:	64 2e 68 00 06 00 00 	fs cs push 0x600
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:168
		SV_DropClient( client, "Server command overflow" );
     19a:	71 63                	jno    1ff <.debug_line+0x1ff>
     19c:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     19d:	6d                   	ins    DWORD PTR es:[rdi],dx
     19e:	6d                   	ins    DWORD PTR es:[rdi],dx
     19f:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     1a0:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     1a1:	2e 68 00 06 00 00    	cs push 0x600
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:169
		return;
     1a7:	76 6d                	jbe    216 <.debug_line+0x216>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:171
	index = client->reliableSequence & ( MAX_RELIABLE_COMMANDS - 1 );
     1a9:	5f                   	pop    rdi
     1aa:	6c                   	ins    BYTE PTR es:[rdi],dx
     1ab:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     1ac:	63 61 6c             	movsxd esp,DWORD PTR [rcx+0x6c]
     1af:	2e 68 00 06 00 00    	cs push 0x600
     1b5:	67 5f                	addr32 pop rdi
     1b7:	70 75                	jo     22e <.debug_line+0x22e>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:172
	Q_strncpyz( client->reliableCommands[ index ], cmd, sizeof( client->reliableCommands[ index ] ) );
     1b9:	62                   	(bad)  
     1ba:	6c                   	ins    BYTE PTR es:[rdi],dx
     1bb:	69 63 2e 68 00 07 00 	imul   esp,DWORD PTR [rbx+0x2e],0x70068
     1c2:	00 62 67             	add    BYTE PTR [rdx+0x67],ah
     1c5:	5f                   	pop    rdi
     1c6:	70 75                	jo     23d <.debug_line+0x23d>
     1c8:	62                   	(bad)  
     1c9:	6c                   	ins    BYTE PTR es:[rdi],dx
     1ca:	69 63 2e 68 00 07 00 	imul   esp,DWORD PTR [rbx+0x2e],0x70068
     1d1:	00 73 65             	add    BYTE PTR [rbx+0x65],dh
     1d4:	72 76                	jb     24c <.debug_line+0x24c>
     1d6:	65 72 2e             	gs jb  207 <.debug_line+0x207>
     1d9:	68 00 01 00 00       	push   0x100
     1de:	00 05 38 00 09 02    	add    BYTE PTR [rip+0x2090038],al        # 209021c <dlNextRound.8083+0x1fad834>
	...
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:173
}
     1ec:	03 d0                	add    edx,eax
SV_SendServerCommand():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:185
void QDECL SV_SendServerCommand( client_t *cl, const char *fmt, ... ) {
     1ee:	00 01                	add    BYTE PTR [rcx],al
     1f0:	05 04 86 05 08       	add    eax,0x8058604
     1f5:	75 2f                	jne    226 <.debug_line+0x226>
     1f7:	05 06 74 05 0c       	add    eax,0xc057406
     1fc:	4b 05 10 90 05 0c    	rex.WXB add rax,0xc059010
     202:	c9                   	leave  
     203:	05 10 90 05 0c       	add    eax,0xc059010
     208:	e6 05                	out    0x5,al
     20a:	12 90 05 10 74 05    	adc    dl,BYTE PTR [rax+0x5741005]
     210:	05 bc 05 0a 03       	add    eax,0x30a05bc
     215:	79 58                	jns    26f <.debug_line+0x26f>
     217:	05 08 74 05 13       	add    eax,0x13057408
     21c:	00 02                	add    BYTE PTR [rdx],al
     21e:	04 01                	add    al,0x1
     220:	4a 05 0e 00 02 04    	rex.WX add rax,0x402000e
     226:	01 3c 05 0c 03 09 74 	add    DWORD PTR [rax*1+0x7409030c],edi
     22d:	05 09 f4 05 01       	add    eax,0x105f409
     232:	75 05                	jne    239 <.debug_line+0x239>
     234:	3f                   	(bad)  
     235:	03 2c 2e             	add    ebp,DWORD PTR [rsi+rbp*1]
     238:	05 0d 03 0a f2       	add    eax,0xf20a030d
     23d:	05 05 66 05 08       	add    eax,0x8056605
     242:	93                   	xchg   ebx,eax
     243:	05 1a 9e 05 0d       	add    eax,0xd059e1a
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:191
	va_start( argptr, fmt );
     248:	cd 05                	int    0x5
     24a:	28 9e 05 20 9e 05    	sub    BYTE PTR [rsi+0x59e2005],bl
     250:	05 4a 05 03 91       	add    eax,0x9103054a
     255:	05 0d 08 13 05       	add    eax,0x513080d
     25a:	28 9e 05 05 9e 05    	sub    BYTE PTR [rsi+0x59e0505],bl
     260:	0b 75 05             	or     esi,DWORD PTR [rbp+0x5]
     263:	03 74 05 1c          	add    esi,DWORD PTR [rbp+rax*1+0x1c]
     267:	00 02                	add    BYTE PTR [rdx],al
     269:	04 03                	add    al,0x3
     26b:	2f                   	(bad)  
     26c:	05 32 00 02 04       	add    eax,0x4020032
     271:	03 9e 05 0e 00 02    	add    ebx,DWORD PTR [rsi+0x2000e05]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:192
	len = Q_vsnprintf( message, sizeof( message ), fmt, argptr );
     277:	04 03                	add    al,0x3
     279:	3c 05                	cmp    al,0x5
     27b:	44 00 02             	add    BYTE PTR [rdx],r8b
     27e:	04 03                	add    al,0x3
     280:	83 05 3c 00 02 04 03 	add    DWORD PTR [rip+0x402003c],0x3        # 40202c3 <dlNextRound.8083+0x3f3d8db>
     287:	66 05 04 00          	add    ax,0x4
     28b:	02 04 03             	add    al,BYTE PTR [rbx+rax*1]
     28e:	08 74 05 18          	or     BYTE PTR [rbp+rax*1+0x18],dh
     292:	00 02                	add    BYTE PTR [rdx],al
     294:	04 03                	add    al,0x3
     296:	08 56 05             	or     BYTE PTR [rsi+0x5],dl
     299:	03 00                	add    eax,DWORD PTR [rax]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:195
	if ( cl != NULL ) {
     29b:	02 04 01             	add    al,BYTE PTR [rcx+rax*1]
     29e:	4a 86 08             	rex.WX xchg BYTE PTR [rax],cl
     2a1:	91                   	xchg   ecx,eax
     2a2:	08 2f                	or     BYTE PTR [rdi],ch
     2a4:	05 10 30 05 08       	add    eax,0x8053010
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:198
		if ( len <= 1022 || cl->longstr ) {
     2a9:	9e                   	sahf   
     2aa:	05 26 67 05 02       	add    eax,0x2056726
     2af:	08 9e 05 03 03 6d    	or     BYTE PTR [rsi+0x6d030305],bl
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:198 (discriminator 1)
     2b5:	08 58 05             	or     BYTE PTR [rax+0x5],bl
     2b8:	01 03                	add    DWORD PTR [rbx],eax
     2ba:	14 20                	adc    al,0x20
     2bc:	05 47 03 0c 2e       	add    eax,0x2e0c0347
     2c1:	05 02 02 59 18       	add    eax,0x18590202
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:199
			SV_AddServerCommand( cl, message );
     2c6:	05 08 02 2d 13       	add    eax,0x132d0208
     2cb:	05 05 02 28 15       	add    eax,0x15280205
     2d0:	05 06 a1 05 19       	add    eax,0x1905a106
     2d5:	00 02                	add    BYTE PTR [rdx],al
     2d7:	04 01                	add    al,0x1
     2d9:	ba 05 14 00 02       	mov    edx,0x2001405
     2de:	04 01                	add    al,0x1
     2e0:	c8 05 04 83          	enter  0x405,0x83
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:205
	if ( com_dedicated->integer && !strncmp( message, "print", 5 ) ) {
     2e4:	05 14 08 ce 05       	add    eax,0x5ce0814
     2e9:	05 9e 05 22 00       	add    eax,0x22059e
     2ee:	02 04 01             	add    al,BYTE PTR [rcx+rax*1]
     2f1:	4a 05 1e 00 02 04    	rex.WX add rax,0x402001e
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:205 (discriminator 1)
     2f7:	01 08                	add    DWORD PTR [rax],ecx
     2f9:	9e                   	sahf   
     2fa:	05 03 4b 05 0a       	add    eax,0xa054b03
     2ff:	02 23                	add    ah,BYTE PTR [rbx]
     301:	16                   	(bad)  
     302:	05 16 9e 05 02       	add    eax,0x2059e16
     307:	d6                   	(bad)  
     308:	05 06 2f 05 1d       	add    eax,0x1d052f06
     30d:	00 02                	add    BYTE PTR [rdx],al
     30f:	04 01                	add    al,0x1
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:206
		Com_Printf( "broadcast: %s\n", SV_ExpandNewlines( message ) );
     311:	ba 05 14 00 02       	mov    edx,0x2001405
     316:	04 01                	add    al,0x1
     318:	c8 05 04 4b          	enter  0x405,0x4b
     31c:	05 43 00 02 04       	add    eax,0x4020043
     321:	02 08                	add    cl,BYTE PTR [rax]
     323:	80 05 4d 00 02 04 02 	add    BYTE PTR [rip+0x402004d],0x2        # 4020377 <dlNextRound.8083+0x3f3d98f>
     32a:	74 05                	je     331 <.debug_line+0x331>
     32c:	36 00 02             	add    BYTE PTR ss:[rdx],al
     32f:	04 01                	add    al,0x1
     331:	ac                   	lods   al,BYTE PTR ds:[rsi]
     332:	05 02 00 02 04       	add    eax,0x4020002
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:210
	for ( j = 0, client = svs.clients; j < sv_maxclients->integer ; j++, client++ ) {
     337:	01 9e 05 03 03 77    	add    DWORD PTR [rsi+0x77030305],ebx
     33d:	9e                   	sahf   
     33e:	05 01 03 0e 20       	add    eax,0x200e0301
     343:	03 19                	add    ebx,DWORD PTR [rcx]
     345:	2e 05 0f c0 05 06    	cs add eax,0x605c00f
     34b:	e7 05                	out    0x5,eax
     34d:	05 74 05 25 00       	add    eax,0x250574
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:211
		if ( len <= 1022 || client->longstr ) {
     352:	02 04 01             	add    al,BYTE PTR [rcx+rax*1]
     355:	90                   	nop
     356:	05 15 00 02 04       	add    eax,0x4020015
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:211 (discriminator 1)
     35b:	01 9e 05 44 00 02    	add    DWORD PTR [rsi+0x2004405],ebx
     361:	04 02                	add    al,0x2
     363:	90                   	nop
     364:	05 34 00 02 04       	add    eax,0x4020034
     369:	02 66 05             	add    ah,BYTE PTR [rsi+0x5]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:212
			SV_AddServerCommand( client, message );
     36c:	0a 86 05 22 66 05    	or     al,BYTE PTR [rsi+0x5662205]
     372:	1d 66 05 05 4a       	sbb    eax,0x4a050566
     377:	05 1d 85 05 23       	add    eax,0x2305851d
     37c:	66 05 18 58          	add    ax,0x5818
     380:	05 09 69 05 02       	add    eax,0x2056909
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:210 (discriminator 2)
	for ( j = 0, client = svs.clients; j < sv_maxclients->integer ; j++, client++ ) {
     385:	74 05                	je     38c <.debug_line+0x38c>
     387:	10 5a 05             	adc    BYTE PTR [rdx+0x5],bl
     38a:	13 08                	adc    ecx,DWORD PTR [rax]
     38c:	74 05                	je     393 <.debug_line+0x393>
     38e:	1b 4a 05             	sbb    ecx,DWORD PTR [rdx+0x5]
     391:	05 3c 05 11 87       	add    eax,0x8711053c
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:210 (discriminator 1)
     396:	05 14 08 74 05       	add    eax,0x5740814
     39b:	06                   	(bad)  
     39c:	3c 05                	cmp    al,0x5
     39e:	25 00 02 04 01       	and    eax,0x1040200
     3a3:	4a 05 42 00 02 04    	rex.WX add rax,0x4020042
     3a9:	01 66 05             	add    DWORD PTR [rsi+0x5],esp
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:215
}
     3ac:	2b 00                	sub    eax,DWORD PTR [rax]
SV_MasterHeartbeat():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:240
{
     3ae:	02 04 01             	add    al,BYTE PTR [rcx+rax*1]
     3b1:	08 9e 05 1f 00 02    	or     BYTE PTR [rsi+0x2001f05],bl
     3b7:	04 01                	add    al,0x1
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:246
	netenabled = Cvar_VariableIntegerValue("net_enabled");
     3b9:	4a 05 0d 84 05 1b    	rex.WX add rax,0x1b05840d
     3bf:	08 74 05 22          	or     BYTE PTR [rbp+rax*1+0x22],dh
     3c3:	75 05                	jne    3ca <.debug_line+0x3ca>
     3c5:	28 66 05             	sub    BYTE PTR [rsi+0x5],ah
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:249
	if (!com_dedicated || com_dedicated->integer != 2 || !(netenabled & (NET_ENABLEV4 | NET_ENABLEV6)))
     3c8:	1d 66 05 12 08       	sbb    eax,0x8120566
     3cd:	a0 05 06 66 05 32 84 	movabs al,ds:0x505843205660605
     3d4:	05 05 
     3d6:	08 74 05 0b          	or     BYTE PTR [rbp+rax*1+0xb],dh
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:249 (discriminator 1)
     3da:	08 75 05             	or     BYTE PTR [rbp+0x5],dh
     3dd:	24 08                	and    al,0x8
     3df:	66 05 27 08          	add    ax,0x827
     3e3:	74 05                	je     3ea <.debug_line+0x3ea>
     3e5:	0b 4a 05             	or     ecx,DWORD PTR [rdx+0x5]
     3e8:	07                   	(bad)  
     3e9:	08 30                	or     BYTE PTR [rax],dh
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:249 (discriminator 2)
     3eb:	05 17 69 05 15       	add    eax,0x15056917
     3f0:	ba 05 07 08 69       	mov    edx,0x69080705
     3f5:	05 55 67 05 06       	add    eax,0x6056755
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:253
	if ( svs.nextHeartbeatTime - svs.time > 0 )
     3fa:	08 58 05             	or     BYTE PTR [rax+0x5],bl
     3fd:	32 ac 05 06 08 74 05 	xor    ch,BYTE PTR [rbp+rax*1+0x5740806]
     404:	38 08                	cmp    BYTE PTR [rax],cl
     406:	bc 05 06 08 74       	mov    esp,0x74080605
     40b:	05 12 08 77 05       	add    eax,0x5770812
     410:	06                   	(bad)  
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:256
	svs.nextHeartbeatTime = svs.time + HEARTBEAT_MSEC;
     411:	66 05 32 84          	add    ax,0x8432
     415:	05 05 08 74 05       	add    eax,0x5740805
     41a:	0b 08                	or     ecx,DWORD PTR [rax]
     41c:	75 05                	jne    423 <.debug_line+0x423>
     41e:	24 08                	and    al,0x8
     420:	74 05                	je     427 <.debug_line+0x427>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:259
	for (i = 0; i < MAX_MASTER_SERVERS; i++)
     422:	27                   	(bad)  
     423:	08 74 05 0b          	or     BYTE PTR [rbp+rax*1+0xb],dh
     427:	4a 05 07 08 30 05    	rex.WX add rax,0x5300807
     42d:	17                   	(bad)  
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:261
		if(!sv_master[i]->string[0])
     42e:	69 05 15 ba 05 07 08 	imul   eax,DWORD PTR [rip+0x705ba15],0x55056908        # 705be4d <dlNextRound.8083+0x6f79465>
     435:	69 05 55 
     438:	67 05 06 08 66 05    	addr32 add eax,0x5660806
     43e:	32 ac 05 06 08 74 05 	xor    ch,BYTE PTR [rbp+rax*1+0x5740806]
     445:	38 08                	cmp    BYTE PTR [rax],cl
     447:	bc 05 06 08 74       	mov    esp,0x74080605
     44c:	05 10 08 79 05       	add    eax,0x5790810
     451:	05 08 58 05 2c       	add    eax,0x2c055808
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:266
		if ( sv_master[i]->modified || svs.time - svs.masterResolveTime[i] > 0 )
     456:	00 02                	add    BYTE PTR [rdx],al
     458:	04 01                	add    al,0x1
     45a:	4a 05 20 00 02 04    	rex.WX add rax,0x4020020
     460:	01 08                	add    DWORD PTR [rax],ecx
     462:	58                   	pop    rax
     463:	05 35 88 05 03       	add    eax,0x3058835
     468:	08 74 05 0f          	or     BYTE PTR [rbp+rax*1+0xf],dh
     46c:	08 79 05             	or     BYTE PTR [rcx+0x5],bh
     46f:	05 08 58 05 23       	add    eax,0x23055808
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:266 (discriminator 1)
     474:	4b 05 04 08 66 05    	rex.WXB add rax,0x5660804
     47a:	0f 08                	invd   
     47c:	bb 05 05 08 58       	mov    ebx,0x58080505
     481:	05 23 4b 05 04       	add    eax,0x4054b23
     486:	08 74 03 45          	or     BYTE PTR [rbx+rax*1+0x45],dh
     48a:	08 d6                	or     dh,dl
     48c:	03 2f                	add    ebp,DWORD PTR [rdi]
     48e:	3c 05                	cmp    al,0x5
     490:	27                   	(bad)  
     491:	00 02                	add    BYTE PTR [rdx],al
     493:	04 02                	add    al,0x2
     495:	03 4e 20             	add    ecx,DWORD PTR [rsi+0x20]
     498:	05 02 00 02 04       	add    eax,0x4020002
     49d:	01 4a 05             	add    DWORD PTR [rdx+0x5],ecx
     4a0:	03 03                	add    eax,DWORD PTR [rbx]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:268
			sv_master[i]->modified = qfalse;
     4a2:	77 ba                	ja     45e <.debug_line+0x45e>
     4a4:	40 05 01 03 c5 00    	rex add eax,0xc50301
     4aa:	20 03                	and    BYTE PTR [rbx],al
     4ac:	0b 2e                	or     ebp,DWORD PTR [rsi]
     4ae:	05 1d 4c 05 18       	add    eax,0x18054c1d
     4b3:	66 05 02 67          	add    ax,0x6702
     4b7:	05 1d bd 05 18       	add    eax,0x1805bd1d
     4bc:	66 05 02 67          	add    ax,0x6702
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:269
			svs.masterResolveTime[i] = svs.time + MASTERDNS_MSEC;
     4c0:	05 01 be 05 3a       	add    eax,0x3a05be01
     4c5:	03 18                	add    ebx,DWORD PTR [rax]
     4c7:	3c 05                	cmp    al,0x5
     4c9:	0e                   	(bad)  
     4ca:	83 05 08 83 75 05 12 	add    DWORD PTR [rip+0x5758308],0x12        # 57587d9 <dlNextRound.8083+0x5675df1>
     4d1:	77 05                	ja     4d8 <.debug_line+0x4d8>
     4d3:	02 66 05             	add    ah,BYTE PTR [rsi+0x5]
     4d6:	03 a3 05 13 2a 05    	add    esp,DWORD PTR [rbx+0x52a1305]
     4dc:	2b ba 05 03 74 05    	sub    edi,DWORD PTR [rdx+0x5740305]
     4e2:	13 30                	adc    esi,DWORD PTR [rax]
     4e4:	05 2b ba 05 03       	add    eax,0x305ba2b
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:271
			if(netenabled & NET_ENABLEV4)
     4e9:	74 05                	je     4f0 <.debug_line+0x4f0>
     4eb:	0a 25 05 02 74 05    	or     ah,BYTE PTR [rip+0x5740205]        # 57406f6 <dlNextRound.8083+0x565dd0e>
     4f1:	14 00                	adc    al,0x0
     4f3:	02 04 03             	add    al,BYTE PTR [rbx+rax*1]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:273
				Com_Printf("Resolving %s (IPv4)\n", sv_master[i]->string);
     4f6:	2f                   	(bad)  
     4f7:	05 0b 00 02 04       	add    eax,0x402000b
     4fc:	03 f2                	add    esi,edx
     4fe:	05 22 00 02 04       	add    eax,0x4020022
     503:	03 3c 05 1c 00 02 04 	add    edi,DWORD PTR [rax*1+0x402001c]
     50a:	03 66 05             	add    esp,DWORD PTR [rsi+0x5]
     50d:	08 00                	or     BYTE PTR [rax],al
     50f:	02 04 03             	add    al,BYTE PTR [rbx+rax*1]
     512:	3c 05                	cmp    al,0x5
     514:	1a 00                	sbb    al,BYTE PTR [rax]
     516:	02 04 03             	add    al,BYTE PTR [rbx+rax*1]
     519:	3b 05 02 00 02 04    	cmp    eax,DWORD PTR [rip+0x4020002]        # 4020521 <dlNextRound.8083+0x3f3db39>
     51f:	01 4a 05             	add    DWORD PTR [rdx+0x5],ecx
     522:	19 86 05 10 66 05    	sbb    DWORD PTR [rsi+0x5661005],eax
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:274
				res = NET_StringToAdr(sv_master[i]->string, &adr[i][0], NA_IP);
     528:	2a 3c 05 07 66 59 05 	sub    bh,BYTE PTR [rax*1+0x5596607]
     52f:	09 76 05             	or     DWORD PTR [rsi+0x5],esi
     532:	01 3d 05 41 36 05    	add    DWORD PTR [rip+0x5364105],edi        # 536463d <dlNextRound.8083+0x5281c55>
     538:	0d ae 05 05 82       	or     eax,0x820505ae
     53d:	05 09 91 05 1e       	add    eax,0x1e059109
     542:	82                   	(bad)  
     543:	05 16 82 05 0d       	add    eax,0xd058216
     548:	4f 05 05 82 05 09    	rex.WRXB add rax,0x9058205
     54e:	59                   	pop    rcx
     54f:	05 1e 82 05 16       	add    eax,0x1605821e
     554:	82                   	(bad)  
     555:	05 1d 4d 05 0f       	add    eax,0xf054d1d
     55a:	08 74 05 13          	or     BYTE PTR [rbp+rax*1+0x13],dh
     55e:	83 05 05 08 74 05 0f 	add    DWORD PTR [rip+0x5740805],0xf        # 5740d6a <dlNextRound.8083+0x565e382>
     565:	59                   	pop    rcx
     566:	05 1e 08 74 05       	add    eax,0x574081e
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:276
				if(res == 2)
     56b:	0f 85 05 17 bb 05    	jne    5bb1c76 <dlNextRound.8083+0x5acf28e>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:279
					adr[i][0].port = BigShort(PORT_MASTER);
     571:	03 03                	add    eax,DWORD PTR [rbx]
     573:	73 08                	jae    57d <.debug_line+0x57d>
     575:	c8 05 01 03          	enter  0x105,0x3
     579:	0e                   	(bad)  
     57a:	20 05 5e 03 0a 2e    	and    BYTE PTR [rip+0x2e0a035e],al        # 2e0a08de <dlNextRound.8083+0x2dfbdef6>
     580:	05 14 08 23 05       	add    eax,0x5230814
     585:	13 e5                	adc    esp,ebp
     587:	05 0f 86 05 29       	add    eax,0x2905860f
     58c:	08 ac 05 02 74 05 12 	or     BYTE PTR [rbp+rax*1+0x12057402],ch
     593:	59                   	pop    rcx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:282
				if(res)
     594:	05 03 66 05 2e       	add    eax,0x2e056603
     599:	e6 05                	out    0x5,al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:283
					Com_Printf( "%s resolved to %s\n", sv_master[i]->string, NET_AdrToStringwPort( &adr[i][0] ) );
     59b:	1d 82 05 0a 82       	sbb    eax,0x820a0582
     5a0:	05 08 f2 05 09       	add    eax,0x905f208
     5a5:	4b 05 07 67 05 0d    	rex.WXB add rax,0xd056707
     5ab:	08 14 05 2e 95 05 1d 	or     BYTE PTR [rax*1+0x1d05952e],dl
     5b2:	82                   	(bad)  
     5b3:	05 0a 82 05 08       	add    eax,0x805820a
     5b8:	f2 05 09 4b 05 07    	repnz add eax,0x7054b09
     5be:	67 05 0d 08 14 05    	addr32 add eax,0x514080d
     5c4:	0c 95                	or     al,0x95
     5c6:	05 05 03 74 ba       	add    eax,0xba740305
     5cb:	03 09                	add    ecx,DWORD PTR [rcx]
     5cd:	3c 05                	cmp    al,0x5
     5cf:	3d 00 02 04 02       	cmp    eax,0x2040200
     5d4:	03 6e 20             	add    ebp,DWORD PTR [rsi+0x20]
     5d7:	05 4e 00 02 04       	add    eax,0x402004e
     5dc:	02 ba 05 02 00 02    	add    bh,BYTE PTR [rdx+0x2000205]
     5e2:	04 01                	add    al,0x1
     5e4:	4a 05 0a 03 19 ac    	rex.WX add rax,0xffffffffac19030a
     5ea:	05 02 74 05 0e       	add    eax,0xe057402
     5ef:	5b                   	pop    rbx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:285
					Com_Printf( "%s has no IPv4 address.\n", sv_master[i]->string );
     5f0:	05 06 66 05 0a       	add    eax,0xa056606
     5f5:	75 05                	jne    5fc <.debug_line+0x5fc>
     5f7:	1b 9f 05 0a e4 05    	sbb    ebx,DWORD PTR [rdi+0x5e40a05]
     5fd:	20 08                	and    BYTE PTR [rax],cl
     5ff:	d7                   	xlat   BYTE PTR ds:[rbx]
     600:	05 0c 74 05 0e       	add    eax,0xe05740c
     605:	a1 05 06 66 05 45 00 	movabs eax,ds:0x402004505660605
     60c:	02 04 
     60e:	01 82 05 4c 00 02    	add    DWORD PTR [rdx+0x2004c05],eax
     614:	04 01                	add    al,0x1
     616:	74 05                	je     61d <.debug_line+0x61d>
     618:	22 00                	and    al,BYTE PTR [rax]
     61a:	02 04 01             	add    al,BYTE PTR [rcx+rax*1]
     61d:	66 05 1f 00          	add    ax,0x1f
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:288
			if(netenabled & NET_ENABLEV6)
     621:	02 04 01             	add    al,BYTE PTR [rcx+rax*1]
     624:	3c 05                	cmp    al,0x5
     626:	0f 4b 05 07 82 05 0b 	cmovnp eax,DWORD PTR [rip+0xb058207]        # b058834 <dlNextRound.8083+0xaf75e4c>
     62d:	59                   	pop    rcx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:290
				Com_Printf("Resolving %s (IPv6)\n", sv_master[i]->string);
     62e:	05 20 82 05 18       	add    eax,0x18058220
     633:	82                   	(bad)  
     634:	05 19 68 05 2a       	add    eax,0x2a056819
     639:	74 05                	je     640 <.debug_line+0x640>
     63b:	22 82 05 0f 08 5b    	and    al,BYTE PTR [rdx+0x5b080f05]
     641:	05 07 82 05 0b       	add    eax,0xb058207
     646:	59                   	pop    rcx
     647:	05 20 82 05 18       	add    eax,0x18058220
     64c:	82                   	(bad)  
     64d:	05 11 4d 05 0e       	add    eax,0xe054d11
     652:	a1 05 06 66 05 1a 83 	movabs eax,ds:0x1105831a05660605
     659:	05 11 
     65b:	66 05 14 67          	add    ax,0x6714
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:291
				res = NET_StringToAdr(sv_master[i]->string, &adr[i][1], NA_IP6);
     65f:	05 04 66 05 05       	add    eax,0x5056604
     664:	a3 05 3a 2a 05 29 82 	movabs ds:0x12058229052a3a05,eax
     66b:	05 12 
     66d:	82                   	(bad)  
     66e:	05 05 4a 05 3a       	add    eax,0x3a054a05
     673:	30 05 29 82 05 12    	xor    BYTE PTR [rip+0x12058229],al        # 120588a2 <dlNextRound.8083+0x11f75eba>
     679:	82                   	(bad)  
     67a:	05 05 d6 05 1a       	add    eax,0x1a05d605
     67f:	25 05 17 9f 05       	and    eax,0x59f1705
     684:	11 ad 05 12 9f 05    	adc    DWORD PTR [rbp+0x59f1205],ebp
     68a:	1f                   	(bad)  
     68b:	af                   	scas   eax,DWORD PTR es:[rdi]
     68c:	05 11 08 74 05       	add    eax,0x5740811
     691:	15 83 05 07 08       	adc    eax,0x8070583
     696:	74 05                	je     69d <.debug_line+0x69d>
     698:	11 59 05             	adc    DWORD PTR [rcx+0x5],ebx
     69b:	20 08                	and    BYTE PTR [rax],cl
     69d:	74 05                	je     6a4 <.debug_line+0x6a4>
     69f:	11 85 05 19 bb 05    	adc    DWORD PTR [rbp+0x5bb1905],eax
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:293
				if(res == 2)
     6a5:	0b 08                	or     ecx,DWORD PTR [rax]
     6a7:	ae                   	scas   al,BYTE PTR es:[rdi]
     6a8:	05 21 00 02 04       	add    eax,0x4020021
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:296
					adr[i][1].port = BigShort(PORT_MASTER);
     6ad:	02 03                	add    al,BYTE PTR [rbx]
     6af:	51                   	push   rcx
     6b0:	66 05 02 00          	add    ax,0x2
     6b4:	02 04 01             	add    al,BYTE PTR [rcx+rax*1]
     6b7:	4a 05 09 03 34 c8    	rex.WX add rax,0xffffffffc8340309
     6bd:	05 01 59 05 46       	add    eax,0x46055901
     6c2:	36 05 0c 08 21 05    	ss add eax,0x521080c
     6c8:	1d 83 05 06 66       	sbb    eax,0x66060583
     6cd:	9f                   	lahf   
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:299
				if(res)
     6ce:	9f                   	lahf   
     6cf:	05 17 a0 05 05       	add    eax,0x505a017
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:300
					Com_Printf( "%s resolved to %s\n", sv_master[i]->string, NET_AdrToStringwPort( &adr[i][1] ) );
     6d4:	74 05                	je     6db <.debug_line+0x6db>
     6d6:	1f                   	(bad)  
     6d7:	00 02                	add    BYTE PTR [rdx],al
     6d9:	04 01                	add    al,0x1
     6db:	58                   	pop    rax
     6dc:	05 11 67 05 14       	add    eax,0x14056711
     6e1:	ad                   	lods   eax,DWORD PTR ds:[rsi]
     6e2:	05 11 ae 05 1a       	add    eax,0x1a05ae11
     6e7:	08 2f                	or     BYTE PTR [rdi],ch
     6e9:	05 14 82 05 0d       	add    eax,0xd058214
     6ee:	69 05 05 74 05 09 59 	imul   eax,DWORD PTR [rip+0x9057405],0x74100559        # 9057afd <dlNextRound.8083+0x8f75115>
     6f5:	05 10 74 
     6f8:	05 0a 9f 05 09       	add    eax,0x9059f0a
     6fd:	77 05                	ja     704 <.debug_line+0x704>
     6ff:	01 59 05             	add    DWORD PTR [rcx+0x5],ebx
     702:	3e 36 05 05 e5 05 0e 	ds ss add eax,0xe05e505
     709:	75 05                	jne    710 <.debug_line+0x710>
     70b:	06                   	(bad)  
     70c:	74 05                	je     713 <.debug_line+0x713>
     70e:	0c 75                	or     al,0x75
     710:	05 04 74 05 26       	add    eax,0x26057404
     715:	9f                   	lahf   
     716:	05 1e 74 05 16       	add    eax,0x1605741e
     71b:	66 05 1b 75          	add    ax,0x751b
     71f:	05 19 74 05 01       	add    eax,0x1057419
     724:	76 05                	jbe    72b <.debug_line+0x72b>
     726:	3b 44 05 05          	cmp    eax,DWORD PTR [rbp+rax*1+0x5]
     72a:	83 05 14 75 05 06 74 	add    DWORD PTR [rip+0x6057514],0x74        # 6057c45 <dlNextRound.8083+0x5f7525d>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:302
					Com_Printf( "%s has no IPv6 address.\n", sv_master[i]->string );
     731:	05 10 4b 05 16       	add    eax,0x16054b10
     736:	74 05                	je     73d <.debug_line+0x73d>
     738:	01 a1 05 3b 44 05    	add    DWORD PTR [rcx+0x5443b05],esp
     73e:	05 83 05 0e 75       	add    eax,0x750e0583
     743:	05 06 74 05 0a       	add    eax,0xa057406
     748:	4b 05 11 74 05 01    	rex.WXB add rax,0x1057411
     74e:	a1 05 4e 03 0a 3c 05 	movabs eax,ds:0x81a053c0a034e05
     755:	1a 08 
     757:	21 05 40 08 76 05    	and    DWORD PTR [rip+0x5760840],eax        # 5760f9d <dlNextRound.8083+0x567e5b5>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:307
		if( adr[i][0].type == NA_BAD && adr[i][1].type == NA_BAD )
     75d:	12 00                	adc    al,BYTE PTR [rax]
     75f:	02 04 01             	add    al,BYTE PTR [rcx+rax*1]
     762:	74 05                	je     769 <.debug_line+0x769>
     764:	40 00 02             	add    BYTE PTR [rdx],al
     767:	04 01                	add    al,0x1
     769:	08 74 00 02          	or     BYTE PTR [rax+rax*1+0x2],dh
     76d:	04 02                	add    al,0x2
     76f:	06                   	(bad)  
     770:	2e 05 01 00 02 04    	cs add eax,0x4020001
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:307 (discriminator 1)
     776:	05 06 59 05 51       	add    eax,0x51055906
     77b:	03 0a                	add    ecx,DWORD PTR [rdx]
     77d:	2e 05 1a 08 21 05    	cs add eax,0x521081a
     783:	02 08                	add    cl,BYTE PTR [rax]
     785:	76 05                	jbe    78c <.debug_line+0x78c>
     787:	01 bb 05 51 03 0a    	add    DWORD PTR [rbx+0xa035105],edi
     78d:	3c 05                	cmp    al,0x5
     78f:	1a 08                	sbb    cl,BYTE PTR [rax]
     791:	21 05 02 08 76 05    	and    DWORD PTR [rip+0x5760802],eax        # 5760f99 <dlNextRound.8083+0x567e5b1>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:313
		Com_Printf ("Sending heartbeat to %s\n", sv_master[i]->string );
     797:	01 bb 05 49 44 05    	add    DWORD PTR [rbx+0x5444905],edi
     79d:	1a 08                	sbb    cl,BYTE PTR [rax]
     79f:	21 05 02 08 76 05    	and    DWORD PTR [rip+0x5760802],eax        # 5760fa7 <dlNextRound.8083+0x567e5bf>
     7a5:	01 08                	add    DWORD PTR [rax],ecx
     7a7:	13 05 30 03 0c 3c    	adc    eax,DWORD PTR [rip+0x3c0c0330]        # 3c0c0add <dlNextRound.8083+0x3bfde0f5>
     7ad:	05 07 03 13 08       	add    eax,0x8130307
     7b2:	20 05 05 08 82 05    	and    BYTE PTR [rip+0x5820805],al        # 5820fbd <dlNextRound.8083+0x573e5d5>
     7b8:	15 4b 05 06 9e       	adc    eax,0x9e06054b
     7bd:	05 04 83 05 03       	add    eax,0x3058304
     7c2:	02 23                	add    ah,BYTE PTR [rbx]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:318
		if(adr[i][0].type != NA_BAD)
     7c4:	15 05 07 5d 05       	adc    eax,0x55d0705
     7c9:	05 08 58 05 03       	add    eax,0x3055808
     7ce:	4b 08 13             	rex.WXB or BYTE PTR [r11],dl
     7d1:	05 0f 5c 05 07       	add    eax,0x7055c0f
     7d6:	9e                   	sahf   
     7d7:	05 05 82 05 02       	add    eax,0x2058205
     7dc:	bd 02 29 16 05       	mov    ebp,0x5162902
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:319
			NET_OutOfBandPrint( NS_SERVER, &adr[i][0], "heartbeat %s\n", message);
     7e1:	04 02                	add    al,0x2
     7e3:	2b 14 05 0c ad 05 11 	sub    edx,DWORD PTR [rax*1+0x1105ad0c]
     7ea:	75 05                	jne    7f1 <.debug_line+0x7f1>
     7ec:	26 e4 05             	es in  al,0x5
     7ef:	0f 3c                	(bad)  
     7f1:	05 0a 3e 05 02       	add    eax,0x2053e0a
     7f6:	74 05                	je     7fd <.debug_line+0x7fd>
     7f8:	0c 59                	or     al,0x59
     7fa:	05 14 74 05 06       	add    eax,0x6057414
     7ff:	ba 05 0a 75 05       	mov    edx,0x5750a05
     804:	06                   	(bad)  
     805:	66 05 09 92          	add    ax,0x9209
     809:	05 2f d8 05 13       	add    eax,0x1305d82f
     80e:	ab                   	stos   DWORD PTR es:[rdi],eax
     80f:	05 16 02 3c 15       	add    eax,0x153c0216
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:320
		if(adr[i][1].type != NA_BAD)
     814:	05 07 82 05 08       	add    eax,0x8058207
     819:	77 05                	ja     820 <.debug_line+0x820>
     81b:	11 08                	adc    DWORD PTR [rax],ecx
     81d:	67 05 2e 00 02 04    	addr32 add eax,0x402002e
     823:	02 03                	add    al,BYTE PTR [rbx]
     825:	74 66                	je     88d <.debug_line+0x88d>
     827:	05 21 00 02 04       	add    eax,0x4020021
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:321
			NET_OutOfBandPrint( NS_SERVER, &adr[i][1], "heartbeat %s\n", message);
     82c:	01 4a 05             	add    DWORD PTR [rdx+0x5],ecx
     82f:	02 00                	add    al,BYTE PTR [rax]
     831:	02 04 01             	add    al,BYTE PTR [rcx+rax*1]
     834:	9e                   	sahf   
     835:	05 05 03 09 ac       	add    eax,0xac090305
     83a:	05 02 00 02 04       	add    eax,0x4020002
     83f:	01 27                	add    DWORD PTR [rdi],esp
     841:	05 03 03 58 02       	add    eax,0x2580303
     846:	36 01 03             	add    DWORD PTR ss:[rbx],eax
     849:	0c 3c                	or     al,0x3c
     84b:	05 01 03 1d 20       	add    eax,0x201d0301
     850:	05 2e 03 0b 2e       	add    eax,0x2e0b032e
     855:	05 07 03 0d 08       	add    eax,0x80d0307
     85a:	20 05 05 08 82 05    	and    BYTE PTR [rip+0x5820805],al        # 5821065 <dlNextRound.8083+0x573e67d>
     860:	15 4b 05 06 9e       	adc    eax,0x9e06054b
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:309
			continue;
     865:	05 04 83 05 03       	add    eax,0x3058304
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:259 (discriminator 1)
	for (i = 0; i < MAX_MASTER_SERVERS; i++)
     86a:	02 23                	add    ah,BYTE PTR [rbx]
     86c:	15 05 07 5d 05       	adc    eax,0x55d0705
     871:	05 08 58 05 03       	add    eax,0x3055808
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:250
		return;		// only dedicated servers send heartbeats
     876:	4b 08 13             	rex.WXB or BYTE PTR [r11],dl
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:254
		return;
     879:	05 0f 03 09 58       	add    eax,0x5809030f
SV_MasterShutdown():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:334
{
     87e:	05 07 9e 05 05       	add    eax,0x5059e07
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:336
	svs.nextHeartbeatTime = svs.time;
     883:	82                   	(bad)  
     884:	05 11 be 05 08       	add    eax,0x805be11
     889:	74 05                	je     890 <.debug_line+0x890>
     88b:	1d 67 05 0a 74       	sbb    eax,0x740a0567
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:337
	SV_MasterHeartbeat(HEARTBEAT_FOR_MASTER);
     890:	05 02 66 05 0b       	add    eax,0xb056602
     895:	2f                   	(bad)  
     896:	05 13 74 05 16       	add    eax,0x16057413
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:340
	svs.nextHeartbeatTime = svs.time;
     89b:	e4 05                	in     al,0x5
     89d:	06                   	(bad)  
     89e:	2e 05 09 59 05 0b    	cs add eax,0xb055909
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:341
	SV_MasterHeartbeat(HEARTBEAT_FOR_MASTER);
     8a4:	4b 05 13 74 05 2c    	rex.WXB add rax,0x2c057413
     8aa:	e4 05                	in     al,0x5
     8ac:	07                   	(bad)  
     8ad:	66 05 0b 59          	add    ax,0x590b
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:345
}
     8b1:	05 47 00 02 04       	add    eax,0x4020047
SVC_HashForAddress():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:369
static int SVC_HashForAddress( const netadr_t *address ) {
     8b6:	02 46 05             	add    al,BYTE PTR [rsi+0x5]
     8b9:	3a 00                	cmp    al,BYTE PTR [rax]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:370
	const byte	*ip = NULL;
     8bb:	02 04 01             	add    al,BYTE PTR [rcx+rax*1]
     8be:	4a 05 02 00 02 04    	rex.WX add rax,0x4020002
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:371
	int			size = 0;
     8c4:	01 9e 05 10 03 09    	add    DWORD PTR [rsi+0x9031005],ebx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:372
	int			hash = 0;
     8ca:	58                   	pop    rax
     8cb:	05 02 78 02 2b       	add    eax,0x2b027802
     8d0:	14 02                	adc    al,0x2
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:375
	switch ( address->type ) {
     8d2:	29 13                	sub    DWORD PTR [rbx],edx
     8d4:	02 29                	add    ch,BYTE PTR [rcx]
     8d6:	13 02                	adc    eax,DWORD PTR [rdx]
     8d8:	29 13                	sub    DWORD PTR [rbx],edx
     8da:	02 37                	add    dh,BYTE PTR [rdi]
     8dc:	13 02                	adc    eax,DWORD PTR [rdx]
     8de:	37                   	(bad)  
     8df:	13 02                	adc    eax,DWORD PTR [rdx]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:380
		default: break;
     8e1:	4c 14 02             	rex.WR adc al,0x2
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:376
		case NA_IP:  ip = address->ipv._4; size = 4;  break;
     8e4:	3e 13 02             	adc    eax,DWORD PTR ds:[rdx]
     8e7:	3e 13 05 0c 02 40 13 	adc    eax,DWORD PTR ds:[rip+0x1340020c]        # 13400afa <dlNextRound.8083+0x1331e112>
     8ee:	05 06 f3 05 04       	add    eax,0x405f306
     8f3:	74 05                	je     8fa <.debug_line+0x8fa>
     8f5:	03 4b 05             	add    ecx,DWORD PTR [rbx+0x5]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:378
		case NA_IP6: ip = address->ipv._6; size = 16; break;
     8f8:	02 02                	add    al,BYTE PTR [rdx]
     8fa:	22 15 05 03 03 4d    	and    dl,BYTE PTR [rip+0x4d030305]        # 4d030c05 <dlNextRound.8083+0x4cf4e21d>
     900:	02 2c 01             	add    ch,BYTE PTR [rcx+rax*1]
     903:	03 11                	add    edx,DWORD PTR [rcx]
     905:	3c 05                	cmp    al,0x5
     907:	01 03                	add    DWORD PTR [rbx],eax
     909:	23 20                	and    esp,DWORD PTR [rax]
     90b:	03 0b                	add    ecx,DWORD PTR [rbx]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:383
	for ( i = 0; i < size; i++ ) {
     90d:	2e 05 07 bb 05 05    	cs add eax,0x505bb07
     913:	74 05                	je     91a <.debug_line+0x91a>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:384 (discriminator 3)
		hash += (int)( ip[ i ] ) * ( i + 119 );
     915:	03 4c 05 01          	add    ecx,DWORD PTR [rbp+rax*1+0x1]
     919:	02 24 14             	add    ah,BYTE PTR [rsp+rdx*1]
     91c:	05 37 03 0c 3c       	add    eax,0x3c0c0337
     921:	05 07 03 09 08       	add    eax,0x8090307
     926:	2e 05 05 08 82 05    	cs add eax,0x5820805
     92c:	15 4b 05 06 9e       	adc    eax,0x9e06054b
     931:	05 04 83 05 03       	add    eax,0x3058304
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:383 (discriminator 3)
	for ( i = 0; i < size; i++ ) {
     936:	02 23                	add    ah,BYTE PTR [rbx]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:383 (discriminator 1)
     938:	15 05 07 5b 05       	adc    eax,0x55b0705
     93d:	18 d7                	sbb    bh,dl
     93f:	05 20 ac 05 05       	add    eax,0x505ac20
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:387
	hash = ( hash ^ ( hash >> 10 ) ^ ( hash >> 20 ) );
     944:	3c 05                	cmp    al,0x5
     946:	42 00 02             	rex.X add BYTE PTR [rdx],al
     949:	04 01                	add    al,0x1
     94b:	4a 05 27 00 02 04    	rex.WX add rax,0x4020027
     951:	01 ac 05 24 00 02 04 	add    DWORD PTR [rbp+rax*1+0x4020024],ebp
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:388
	hash &= ( MAX_HASHES - 1 );
     958:	01 e4                	add    esp,esp
     95a:	05 12 00 02 04       	add    eax,0x4020012
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:391
}
     95f:	03 4b 05             	add    ecx,DWORD PTR [rbx+0x5]
SVC_RelinkToHead():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:399
static void SVC_RelinkToHead( leakyBucket_t *bucket, int hash ) {
     962:	54                   	push   rsp
     963:	00 02                	add    BYTE PTR [rdx],al
     965:	04 03                	add    al,0x3
     967:	73 05                	jae    96e <.debug_line+0x96e>
     969:	19 4b 05             	sbb    DWORD PTR [rbx+0x5],ecx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:401
	if ( bucket->prev != NULL ) {
     96c:	16                   	(bad)  
     96d:	08 2e                	or     BYTE PTR [rsi],ch
     96f:	05 09 4b 05 03       	add    eax,0x3054b09
     974:	75 05                	jne    97b <.debug_line+0x97b>
     976:	08 02                	or     BYTE PTR [rdx],al
     978:	35 15 05 06 08       	xor    eax,0x8060515
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:402
		bucket->prev->next = bucket->next;
     97d:	58                   	pop    rax
     97e:	05 04 4b 08 13       	add    eax,0x13084b04
     983:	05 09 5b 05 03       	add    eax,0x3055b09
     988:	75 05                	jne    98f <.debug_line+0x98f>
     98a:	12 02                	adc    al,BYTE PTR [rdx]
     98c:	33 16                	xor    edx,DWORD PTR [rsi]
     98e:	05 02 02 32 13       	add    eax,0x13320202
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:407
	if ( bucket->next != NULL ) {
     993:	05 17 08 a0 05       	add    eax,0x5a00817
     998:	1f                   	(bad)  
     999:	ac                   	lods   al,BYTE PTR ds:[rsi]
     99a:	05 05 3c 05 34       	add    eax,0x34053c05
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:408
		bucket->next->prev = bucket->prev;
     99f:	00 02                	add    BYTE PTR [rdx],al
     9a1:	04 01                	add    al,0x1
     9a3:	4a 05 23 00 02 04    	rex.WX add rax,0x4020023
     9a9:	01 74 05 03          	add    DWORD PTR [rbp+rax*1+0x3],esi
     9ad:	4b 05 0c 08 59 05    	rex.WXB add rax,0x559080c
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:411
	bucket->next = bucketHashes[ hash ];
     9b3:	03 67 05             	add    esp,DWORD PTR [rdi+0x5]
     9b6:	0d 08 5e 05 09       	or     eax,0x9055e08
     9bb:	91                   	xchg   ecx,eax
     9bc:	05 0b 2f 57 05       	add    eax,0x5572f0b
     9c1:	09 74 05 17          	or     DWORD PTR [rbp+rax*1+0x17],esi
     9c5:	00 02                	add    BYTE PTR [rdx],al
     9c7:	04 01                	add    al,0x1
     9c9:	4a 05 14 00 02 04    	rex.WX add rax,0x4020014
     9cf:	01 74 05 0b          	add    DWORD PTR [rbp+rax*1+0xb],esi
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:412
	if ( bucketHashes[ hash ] != NULL ) {
     9d3:	4c 05 09 59 05 0b    	rex.WR add rax,0xb055909
     9d9:	2f                   	(bad)  
     9da:	57                   	push   rdi
     9db:	05 09 74 05 08       	add    eax,0x8057409
     9e0:	4c 05 06 74 05 0b    	rex.WR add rax,0xb057406
     9e6:	4b 05 0a 59 05 0c    	rex.WXB add rax,0xc05590a
     9ec:	2f                   	(bad)  
     9ed:	57                   	push   rdi
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:413
		bucketHashes[ hash ]->prev = bucket;
     9ee:	05 0a 74 05 18       	add    eax,0x1805740a
     9f3:	00 02                	add    BYTE PTR [rdx],al
     9f5:	04 01                	add    al,0x1
     9f7:	4a 05 15 00 02 04    	rex.WX add rax,0x4020015
     9fd:	01 74 05 09          	add    DWORD PTR [rbp+rax*1+0x9],esi
     a01:	4c 05 07 74 05 0c    	rex.WR add rax,0xc057407
     a07:	4b 77 57             	rex.WXB ja a61 <.debug_line+0xa61>
     a0a:	05 0a 74 05 18       	add    eax,0x1805740a
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:416
	bucket->prev = NULL;
     a0f:	00 02                	add    BYTE PTR [rdx],al
     a11:	04 01                	add    al,0x1
     a13:	4a 05 15 00 02 04    	rex.WX add rax,0x4020015
     a19:	01 74 05 09          	add    DWORD PTR [rbp+rax*1+0x9],esi
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:417
	bucketHashes[ hash ] = bucket;
     a1d:	00 02                	add    BYTE PTR [rdx],al
     a1f:	04 01                	add    al,0x1
     a21:	4d 05 0b 2f 57 05    	rex.WRB add rax,0x5572f0b
     a27:	09 74 05 03          	or     DWORD PTR [rbp+rax*1+0x3],esi
     a2b:	4d 05 02 bd 05 03    	rex.WRB add rax,0x305bd02
     a31:	03 4a 74             	add    ecx,DWORD PTR [rdx+0x74]
     a34:	05 01 03 37 20       	add    eax,0x20370301
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:418
}
     a39:	05 49 03 0d 9e       	add    eax,0x9e0d0349
SVC_BucketForAddress():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:428
static leakyBucket_t *SVC_BucketForAddress( const netadr_t *address, int burst, int period ) {
     a3e:	05 02 08 16 bb       	add    eax,0xbb160802
     a43:	05 1f bc 05 26       	add    eax,0x2605bc1f
     a48:	82                   	(bad)  
     a49:	05 08 4a 05 05       	add    eax,0x5054a08
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:431
	const int		hash = SVC_HashForAddress( address );
     a4e:	08 3c 05 0b 4b 05 06 	or     BYTE PTR [rax*1+0x6054b0b],bh
     a55:	74 05                	je     a5c <.debug_line+0xa5c>
     a57:	16                   	(bad)  
     a58:	75 05                	jne    a5f <.debug_line+0xa5f>
     a5a:	07                   	(bad)  
     a5b:	9e                   	sahf   
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:432
	const int		now = Sys_Milliseconds();
     a5c:	05 05 83 05 04       	add    eax,0x4058305
     a61:	02 29                	add    ch,BYTE PTR [rcx]
     a63:	14 05                	adc    al,0x5
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:436
	for ( bucket = bucketHashes[ hash ], n = 0; bucket; bucket = bucket->next, n++ ) {
     a65:	03 5a 05             	add    ebx,DWORD PTR [rdx+0x5]
     a68:	06                   	(bad)  
     a69:	08 15 05 02 f3 05    	or     BYTE PTR [rip+0x5f30205],dl        # 5f30c74 <dlNextRound.8083+0x5e4e28c>
     a6f:	06                   	(bad)  
     a70:	bc 05 14 d8 05       	mov    esp,0x5d81405
     a75:	05 9e 05 03 4b       	add    eax,0x4b03059e
     a7a:	05 08 02 2a 15       	add    eax,0x152a0208
     a7f:	05 05 08 2e 05       	add    eax,0x52e0805
     a84:	03 4b bb             	add    ecx,DWORD PTR [rbx-0x45]
     a87:	05 16 5b 05 05       	add    eax,0x5055b16
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:437
		switch ( bucket->type ) {
     a8c:	9e                   	sahf   
     a8d:	05 07 86 05 05       	add    eax,0x5058607
     a92:	08 2e                	or     BYTE PTR [rsi],ch
     a94:	05 03 4b 05 0e       	add    eax,0xe054b03
     a99:	08 13                	or     BYTE PTR [rbx],dl
     a9b:	05 0c 08 2e 05       	add    eax,0x52e080c
     aa0:	03 4b 05             	add    ecx,DWORD PTR [rbx+0x5]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:439
				if ( memcmp( bucket->ipv._4, address->ipv._4, 4 ) == 0 ) {
     aa3:	0e                   	(bad)  
     aa4:	08 13                	or     BYTE PTR [rbx],dl
     aa6:	05 0c 08 2e 05       	add    eax,0x52e080c
     aab:	03 4b 05             	add    ecx,DWORD PTR [rbx+0x5]
     aae:	0e                   	(bad)  
     aaf:	08 13                	or     BYTE PTR [rbx],dl
     ab1:	05 0c 08 2e 05       	add    eax,0x52e080c
     ab6:	03 4b 05             	add    ecx,DWORD PTR [rbx+0x5]
     ab9:	0e                   	(bad)  
     aba:	d8 05 0c 08 2e 05    	fadd   DWORD PTR [rip+0x52e080c]        # 52e12cc <dlNextRound.8083+0x51fe8e4>
     ac0:	0e                   	(bad)  
     ac1:	4d 05 0c 08 2e 05    	rex.WRB add rax,0x52e080c
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:440
					if ( n > 8 ) {
     ac7:	15 4f 05 06 9e       	adc    eax,0x9e06054f
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:441
						SVC_RelinkToHead( bucket, hash );
     acc:	05 04 4b 03 57       	add    eax,0x57034b04
     ad1:	02 2c 01             	add    ch,BYTE PTR [rcx+rax*1]
     ad4:	05 03 03 14 3c       	add    eax,0x3c140303
     ad9:	05 01 03 19 20       	add    eax,0x20190301
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:443
					return bucket;
     ade:	05 39 03 09 74       	add    eax,0x74090339
     ae3:	05 0a f7 05 05       	add    eax,0x505f70a
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:448
				if ( memcmp( bucket->ipv._6, address->ipv._6, 16 ) == 0 ) {
     ae8:	74 05                	je     aef <.debug_line+0xaef>
     aea:	16                   	(bad)  
     aeb:	94                   	xchg   esp,eax
     aec:	05 07 82 05 05       	add    eax,0x5058207
     af1:	2e 05 03 59 08 2f    	cs add eax,0x2f085903
     af7:	05 09 5b 05 05       	add    eax,0x5055b09
     afc:	66 05 02 88          	add    ax,0x8802
     b00:	bb 05 0a bb 05       	mov    ebx,0x5bb0a05
     b05:	08 ba 85 05 0e 74    	or     BYTE PTR [rdx+0x740e0585],bh
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:449
					if ( n > 8 ) {
     b0b:	05 02 ac 05 09       	add    eax,0x905ac02
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:450
						SVC_RelinkToHead( bucket, hash );
     b10:	59                   	pop    rcx
     b11:	05 06 66 05 23       	add    eax,0x23056606
     b16:	85 05 09 ac 05 06    	test   DWORD PTR [rip+0x605ac09],eax        # 605b725 <dlNextRound.8083+0x5f78d3d>
     b1c:	e4 05                	in     al,0x5
     b1e:	12 87 05 06 9e 05    	adc    al,BYTE PTR [rdi+0x59e0605]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:452
					return bucket;
     b24:	07                   	(bad)  
     b25:	95                   	xchg   ebp,eax
     b26:	05 06 08 2e 05       	add    eax,0x52e0806
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:457
				return &dummy;
     b2b:	21 4e 05             	and    DWORD PTR [rsi+0x5],ecx
     b2e:	2e ac                	lods   al,BYTE PTR cs:[rsi]
     b30:	05 07 82 05 05       	add    eax,0x5058207
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:445
				break;
     b35:	59                   	pop    rcx
     b36:	05 2a 08 13 05       	add    eax,0x513082a
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:436 (discriminator 2)
	for ( bucket = bucketHashes[ hash ], n = 0; bucket; bucket = bucket->next, n++ ) {
     b3b:	24 82                	and    al,0x82
     b3d:	05 0a b1 05 07       	add    eax,0x705b10a
     b42:	66 05 1d 59          	add    ax,0x591d
     b46:	05 18 66 05 05       	add    eax,0x5056618
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:436 (discriminator 1)
     b4b:	9f                   	lahf   
     b4c:	05 04 08 30 03       	add    eax,0x3300804
     b51:	65 2e 3f             	gs cs (bad) 
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:461
	for ( i = 0; i < MAX_BUCKETS; i++ ) {
     b54:	41 05 3b 00 02 04    	rex.B add eax,0x402003b
     b5a:	02 03                	add    al,BYTE PTR [rbx]
     b5c:	76 20                	jbe    b7e <.debug_line+0xb7e>
     b5e:	05 40 00 02 04       	add    eax,0x4020040
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:464
		if ( start >= MAX_BUCKETS )
     b63:	02 4a 05             	add    cl,BYTE PTR [rdx+0x5]
     b66:	2e 00 02             	add    BYTE PTR cs:[rdx],al
     b69:	04 01                	add    al,0x1
     b6b:	82                   	(bad)  
     b6c:	05 02 00 02 04       	add    eax,0x4020002
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:465
			start = 0;
     b71:	01 9e 05 03 03 6d    	add    DWORD PTR [rsi+0x6d030305],ebx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:466
		bucket = &buckets[ start++ ];
     b77:	ac                   	lods   al,BYTE PTR ds:[rsi]
     b78:	03 09                	add    ecx,DWORD PTR [rcx]
     b7a:	3c 05                	cmp    al,0x5
     b7c:	04 03                	add    al,0x3
     b7e:	27                   	(bad)  
     b7f:	3c 05                	cmp    al,0x5
     b81:	01 23                	add    DWORD PTR [rbx],esp
     b83:	05 22 03 0a 2e       	add    eax,0x2e0a0322
     b88:	05 08 89 05 02       	add    eax,0x2058908
     b8d:	74 05                	je     b94 <.debug_line+0xb94>
     b8f:	0c 59                	or     al,0x59
     b91:	05 14 74 05 06       	add    eax,0x6057414
     b96:	ba 05 0a 75 05       	mov    edx,0x5750a05
     b9b:	06                   	(bad)  
     b9c:	66 05 0d 59          	add    ax,0x590d
     ba0:	05 04 d7 05 0b       	add    eax,0xb05d704
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:467
		interval = now - bucket->rate.lastTime;
     ba5:	5a                   	pop    rdx
     ba6:	05 06 ac 05 0d       	add    eax,0xd05ac06
     bab:	59                   	pop    rcx
     bac:	05 04 d7 05 21       	add    eax,0x2105d704
     bb1:	5a                   	pop    rdx
     bb2:	05 06 9e 05 0d       	add    eax,0xd059e06
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:470
		if ( bucket->type != NA_BAD && (unsigned)interval > ( bucket->rate.burst * period ) ) {
     bb7:	59                   	pop    rcx
     bb8:	05 04 d7 05 09       	add    eax,0x905d704
     bbd:	5b                   	pop    rbx
     bbe:	75 05                	jne    bc5 <.debug_line+0xbc5>
     bc0:	0b 75 05             	or     esi,DWORD PTR [rbp+0x5]
     bc3:	03 74 05 16          	add    esi,DWORD PTR [rbp+rax*1+0x16]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:470 (discriminator 1)
     bc7:	2f                   	(bad)  
     bc8:	05 07 08 9e 05       	add    eax,0x59e0807
     bcd:	19 4d 05             	sbb    DWORD PTR [rbp+0x5],ecx
     bd0:	36 08 9e 05 0a 08 9e 	or     BYTE PTR ss:[rsi-0x61f7f5fb],bl
     bd7:	05 09 75 05 0a       	add    eax,0xa057509
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:471
			if ( bucket->prev != NULL ) {
     bdc:	4b 05 05 7e 05 26    	rex.WXB add rax,0x26057e05
     be2:	00 02                	add    BYTE PTR [rdx],al
     be4:	04 02                	add    al,0x2
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:472
				bucket->prev->next = bucket->next;
     be6:	1e                   	(bad)  
     be7:	05 03 00 02 04       	add    eax,0x4020003
     bec:	01 4a 05             	add    DWORD PTR [rdx+0x5],ecx
     bef:	06                   	(bad)  
     bf0:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     bf1:	05 0d 67 05 14       	add    eax,0x1405670d
     bf6:	f4                   	hlt    
     bf7:	05 0d 90 05 0b       	add    eax,0xb05900d
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:474
				bucketHashes[ bucket->hash ] = bucket->next;
     bfc:	9f                   	lahf   
     bfd:	05 07 9e 05 0e       	add    eax,0xe059e07
     c02:	75 05                	jne    c09 <.debug_line+0xc09>
     c04:	08 db                	or     bl,bl
     c06:	05 10 d7 05 0c       	add    eax,0xc05d710
     c0b:	9e                   	sahf   
     c0c:	05 2b 00 02 04       	add    eax,0x402002b
     c11:	02 03                	add    al,BYTE PTR [rbx]
     c13:	5c                   	pop    rsp
     c14:	9e                   	sahf   
     c15:	05 1e 00 02 04       	add    eax,0x402001e
     c1a:	01 4a 05             	add    DWORD PTR [rdx+0x5],ecx
     c1d:	02 00                	add    al,BYTE PTR [rax]
     c1f:	02 04 01             	add    al,BYTE PTR [rcx+rax*1]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:477
			if ( bucket->next != NULL ) {
     c22:	9e                   	sahf   
     c23:	05 01 03 26 90       	add    eax,0x90260301
     c28:	05 26 03 0f 3c       	add    eax,0x3c0f0326
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:478
				bucket->next->prev = bucket->prev;
     c2d:	05 11 88 05 2a       	add    eax,0x2a058811
     c32:	66 05 1e 9e          	add    ax,0x9e1e
     c36:	05 0c 66 05 13       	add    eax,0x1305660c
     c3b:	59                   	pop    rcx
     c3c:	05 2f 66 05 20       	add    eax,0x2005662f
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:481
			bucket->type = NA_BAD;
     c41:	9e                   	sahf   
     c42:	05 0e 66 05 0a       	add    eax,0xa05660e
     c47:	5a                   	pop    rdx
     c48:	05 12 74 05 02       	add    eax,0x2057412
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:484
		if ( bucket->type == NA_BAD ) {
     c4d:	ac                   	lods   al,BYTE PTR ds:[rsi]
     c4e:	05 0a 59 05 06       	add    eax,0x605590a
     c53:	66 05 0a 86          	add    ax,0x860a
     c57:	05 20 9e 05 1b       	add    eax,0x1b059e20
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:485
			bucket->type = address->type;
     c5c:	66 05 06 4a          	add    ax,0x4a06
     c60:	05 1c 4b 05 17       	add    eax,0x17054b1c
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:486
			switch ( address->type ) {
     c65:	66 05 0a a1          	add    ax,0xa10a
     c69:	05 06 66 05 24       	add    eax,0x24056606
     c6e:	00 02                	add    BYTE PTR [rdx],al
     c70:	04 01                	add    al,0x1
     c72:	58                   	pop    rax
     c73:	05 35 00 02 04       	add    eax,0x4020035
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:487
				case NA_IP:  Com_Memcpy( bucket->ipv._4, address->ipv._4, 4 );  break;
     c78:	01 9e 05 1f 00 02    	add    DWORD PTR [rsi+0x2001f05],ebx
     c7e:	04 01                	add    al,0x1
     c80:	3c 05                	cmp    al,0x5
     c82:	04 4c                	add    al,0x4c
     c84:	05 0e 08 59 05       	add    eax,0x559080e
     c89:	04 9f                	add    al,0x9f
     c8b:	05 0a 5a 05 06       	add    eax,0x6055a0a
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:489
				case NA_IP6: Com_Memcpy( bucket->ipv._6, address->ipv._6, 16 ); break;
     c90:	9e                   	sahf   
     c91:	05 20 00 02 04       	add    eax,0x4020020
     c96:	01 4a 05             	add    DWORD PTR [rdx+0x5],ecx
     c99:	2a 00                	sub    al,BYTE PTR [rax]
     c9b:	02 04 01             	add    al,BYTE PTR [rcx+rax*1]
     c9e:	66 05 26 00          	add    ax,0x26
     ca2:	02 04 01             	add    al,BYTE PTR [rcx+rax*1]
     ca5:	9e                   	sahf   
     ca6:	05 1a 00 02 04       	add    eax,0x402001a
     cab:	01 4a 05             	add    DWORD PTR [rdx+0x5],ecx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:494
			bucket->rate.lastTime = now;
     cae:	19 76 05             	sbb    DWORD PTR [rsi+0x5],esi
     cb1:	04 9e                	add    al,0x9e
     cb3:	08 21                	or     BYTE PTR [rcx],ah
     cb5:	05 0e 08 13 05       	add    eax,0x513080e
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:495
			bucket->rate.burst = 0;
     cba:	04 9f                	add    al,0x9f
     cbc:	05 0a 30 05 06       	add    eax,0x605300a
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:496
			bucket->hash = hash;
     cc1:	66 05 27 00          	add    ax,0x27
     cc5:	02 04 01             	add    al,BYTE PTR [rcx+rax*1]
     cc8:	58                   	pop    rax
     cc9:	05 38 00 02 04       	add    eax,0x4020038
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:497
			bucket->toxic = 0;
     cce:	01 9e 05 22 00 02    	add    DWORD PTR [rsi+0x2002205],ebx
     cd4:	04 01                	add    al,0x1
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:500
			bucket->next = bucketHashes[ hash ];
     cd6:	3c 05                	cmp    al,0x5
     cd8:	0d 4d 05 09 9e       	or     eax,0x9e09054d
     cdd:	05 07 3c 05 0d       	add    eax,0xd053c07
     ce2:	9e                   	sahf   
     ce3:	05 07 9e 05 05       	add    eax,0x5059e07
     ce8:	59                   	pop    rcx
     ce9:	05 0f 08 2f 05       	add    eax,0x52f080f
     cee:	07                   	(bad)  
     cef:	9c                   	pushf  
     cf0:	05 15 33 05 04       	add    eax,0x4053315
     cf5:	03 64 f2 05          	add    esp,DWORD PTR [rdx+rsi*8+0x5]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:501
			if ( bucketHashes[ hash ] != NULL ) {
     cf9:	40 00 02             	add    BYTE PTR [rdx],al
     cfc:	04 02                	add    al,0x2
     cfe:	1e                   	(bad)  
     cff:	05 46 00 02 04       	add    eax,0x4020046
     d04:	02 4a 05             	add    cl,BYTE PTR [rdx+0x5]
     d07:	33 00                	xor    eax,DWORD PTR [rax]
     d09:	02 04 01             	add    al,BYTE PTR [rcx+rax*1]
     d0c:	82                   	(bad)  
     d0d:	05 02 00 02 04       	add    eax,0x4020002
     d12:	01 9e 05 01 03 21    	add    DWORD PTR [rsi+0x21030105],ebx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:502
				bucketHashes[ hash ]->prev = bucket;
     d18:	90                   	nop
     d19:	05 28 44 05 09       	add    eax,0x9054428
     d1e:	4e 05 01 03 1e 58    	rex.WRX add rax,0x581e0301
     d24:	03 0a                	add    ecx,DWORD PTR [rdx]
     d26:	2e 05 07 4b 05 05    	cs add eax,0x5054b07
     d2c:	74 05                	je     d33 <.debug_line+0xd33>
     d2e:	1f                   	(bad)  
     d2f:	5c                   	pop    rsp
     d30:	05 17 ba 05 0d       	add    eax,0xd05ba17
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:505
			bucket->prev = NULL;
     d35:	ba 05 16 76 05       	mov    edx,0x5761605
     d3a:	06                   	(bad)  
     d3b:	66 05 0b 59          	add    ax,0x590b
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:506
			bucketHashes[ hash ] = bucket;
     d3f:	05 19 76 05 15       	add    eax,0x15057619
     d44:	66 05 0a 93          	add    ax,0x930a
     d48:	05 01 59 03 09       	add    eax,0x9035901
     d4d:	2e 05 11 86 05 05    	cs add eax,0x5058611
     d53:	9e                   	sahf   
     d54:	05 28 00 02 04       	add    eax,0x4020028
     d59:	01 4a 05             	add    DWORD PTR [rdx+0x5],ecx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:508
			return bucket;
     d5c:	1b 00                	sbb    eax,DWORD PTR [rax]
     d5e:	02 04 01             	add    al,BYTE PTR [rcx+rax*1]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:461 (discriminator 2)
	for ( i = 0; i < MAX_BUCKETS; i++ ) {
     d61:	9e                   	sahf   
     d62:	05 03 75 08 2f       	add    eax,0x2f087503
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:461 (discriminator 1)
     d67:	05 11 08 15 05       	add    eax,0x5150811
     d6c:	05 9e 05 28 00       	add    eax,0x28059e
     d71:	02 04 01             	add    al,BYTE PTR [rcx+rax*1]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:513
	return NULL;
     d74:	4a 05 1b 00 02 04    	rex.WX add rax,0x402001b
SVC_RateLimit():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:522
qboolean SVC_RateLimit( rateLimit_t *bucket, int burst, int period ) {
     d7a:	01 9e 05 03 75 08    	add    DWORD PTR [rsi+0x8750305],ebx
     d80:	2f                   	(bad)  
     d81:	05 02 08 15 05       	add    eax,0x5150802
     d86:	09 e6                	or     esi,esp
     d88:	05 05 66 05 22       	add    eax,0x22056605
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:523
	int now = Sys_Milliseconds();
     d8d:	00 02                	add    BYTE PTR [rdx],al
     d8f:	04 01                	add    al,0x1
     d91:	4a 05 1b 00 02 04    	rex.WX add rax,0x402001b
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:524
	int interval = now - bucket->lastTime;
     d97:	01 74 05 0a          	add    DWORD PTR [rbp+rax*1+0xa],esi
     d9b:	5b                   	pop    rbx
     d9c:	05 12 74 05 02       	add    eax,0x2057412
     da1:	ac                   	lods   al,BYTE PTR ds:[rsi]
     da2:	05 0a 2f 05 06       	add    eax,0x6052f0a
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:525
	int expired = interval / period;
     da7:	66 05 04 59          	add    ax,0x5904
     dab:	05 3e 00 02 04       	add    eax,0x402003e
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:526
	int expiredRemainder = interval % period;
     db0:	02 08                	add    cl,BYTE PTR [rax]
     db2:	56                   	push   rsi
     db3:	05 44 00 02 04       	add    eax,0x4020044
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:528
	if ( expired > bucket->burst || interval < 0 ) {
     db8:	02 4a 05             	add    cl,BYTE PTR [rdx+0x5]
     dbb:	32 00                	xor    al,BYTE PTR [rax]
     dbd:	02 04 01             	add    al,BYTE PTR [rcx+rax*1]
     dc0:	82                   	(bad)  
     dc1:	05 02 00 02 04       	add    eax,0x4020002
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:528 (discriminator 1)
     dc6:	01 9e 05 03 72 05    	add    DWORD PTR [rsi+0x5720305],ebx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:529
		bucket->burst = 0;
     dcc:	01 27                	add    DWORD PTR [rdi],esp
     dce:	05 2e 36 05 0b       	add    eax,0xb05362e
     dd3:	08 21                	or     BYTE PTR [rcx],ah
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:530
		bucket->lastTime = now;
     dd5:	05 0a 78 05 05       	add    eax,0x505780a
     dda:	74 05                	je     de1 <.debug_line+0xde1>
     ddc:	0b 5a 05             	or     ebx,DWORD PTR [rdx+0x5]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:532
		bucket->burst -= expired;
     ddf:	03 74 05 0c          	add    esi,DWORD PTR [rbp+rax*1+0xc]
     de3:	2f                   	(bad)  
     de4:	05 14 74 05 17       	add    eax,0x17057414
     de9:	e4 05                	in     al,0x5
     deb:	07                   	(bad)  
     dec:	2e 05 11 59 05 05    	cs add eax,0x5055911
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:533
		bucket->lastTime = now - expiredRemainder;
     df2:	75 05                	jne    df9 <.debug_line+0xdf9>
     df4:	2d 00 02 04 02       	sub    eax,0x2040200
     df9:	2b 05 21 00 02 04    	sub    eax,DWORD PTR [rip+0x4020021]        # 4020e20 <dlNextRound.8083+0x3f3e438>
     dff:	01 4a 05             	add    DWORD PTR [rdx+0x5],ecx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:536
	if ( bucket->burst < burst ) {
     e02:	03 00                	add    eax,DWORD PTR [rax]
     e04:	02 04 01             	add    al,BYTE PTR [rcx+rax*1]
     e07:	9e                   	sahf   
     e08:	05 0a 60 05 11       	add    eax,0x1105600a
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:537
		bucket->burst++;
     e0d:	9f                   	lahf   
     e0e:	05 02 a0 05 05       	add    eax,0x505a002
     e13:	08 a0 05 03 67 05    	or     BYTE PTR [rax+0x5670305],ah
     e19:	02 e7                	add    ah,bh
     e1b:	05 01 02 23 13       	add    eax,0x13230201
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:538
		return qfalse;
     e20:	05 1b 03 0b 3c       	add    eax,0x3c0b031b
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:541
	return qtrue;
     e25:	05 07 b1 05 05       	add    eax,0x505b107
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:542
}
     e2a:	9e                   	sahf   
SVC_RateDrop():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:550
static void SVC_RateDrop( leakyBucket_t *bucket, int burst ) {
     e2b:	05 03 4b 05 14       	add    eax,0x14054b03
     e30:	5b                   	pop    rbx
     e31:	05 05 9e 05 03       	add    eax,0x3059e05
     e36:	4b bb 08 2f 05 16 5b 	rex.WXB movabs r11,0x9e05055b16052f08
     e3d:	05 05 9e 
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:551
	if ( bucket != NULL ) {
     e40:	05 15 4c 05 06       	add    eax,0x6054c15
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:552
		if ( bucket->toxic < 10000 )
     e45:	9e                   	sahf   
     e46:	05 04 86 05 03       	add    eax,0x3058604
     e4b:	a0 05 07 5c 05 05 58 	movabs al,ds:0x1b055805055c0705
     e52:	05 1b 
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:553
			++bucket->toxic;
     e54:	88 05 13 9e 05 25    	mov    BYTE PTR [rip+0x25059e13],al        # 2505ac6d <dlNextRound.8083+0x24f78285>
     e5a:	82                   	(bad)  
     e5b:	05 34 4a 05 25       	add    eax,0x25054a34
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:554
		bucket->rate.burst = burst * bucket->toxic;
     e60:	ba 05 0c 4a 05       	mov    edx,0x54a0c05
     e65:	04 76                	add    al,0x76
     e67:	05 2a 68 05 32       	add    eax,0x3205682a
     e6c:	ba 05 03 ba 05       	mov    edx,0x5ba0305
     e71:	3b 02                	cmp    eax,DWORD PTR [rdx]
     e73:	24 13                	and    al,0x13
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:555
		bucket->rate.lastTime = Sys_Milliseconds();
     e75:	05 03 ba 05 0d       	add    eax,0xd05ba03
     e7a:	08 4b 05             	or     BYTE PTR [rbx+0x5],cl
     e7d:	12 77 05             	adc    dh,BYTE PTR [rdi+0x5]
     e80:	15 08 14 05 05       	adc    eax,0x5051408
SVC_RateRestoreBurst():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:565
static void SVC_RateRestoreBurst( leakyBucket_t *bucket ) {
     e85:	9e                   	sahf   
     e86:	05 12 4b 05 1c       	add    eax,0x1c054b12
     e8b:	66 05 03 66          	add    ax,0x6603
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:566
	if ( bucket != NULL ) {
     e8f:	05 09 96 05 05       	add    eax,0x5059609
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:567
		if ( bucket->rate.burst > 0 ) {
     e94:	66 05 03 75          	add    ax,0x7503
     e98:	bb 05 09 5c 05       	mov    ebx,0x55c0905
     e9d:	05 66 05 36 00       	add    eax,0x360566
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:568
			bucket->rate.burst--;
     ea2:	02 04 01             	add    al,BYTE PTR [rcx+rax*1]
     ea5:	ac                   	lods   al,BYTE PTR ds:[rsi]
     ea6:	05 20 00 02 04       	add    eax,0x4020020
     eab:	01 9e 05 4a 00 02    	add    DWORD PTR [rsi+0x2004a05],ebx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:571
}
     eb1:	04 02                	add    al,0x2
SVC_RateRestoreToxic():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:579
static void SVC_RateRestoreToxic( leakyBucket_t *bucket ) {
     eb3:	4a 05 45 00 02 04    	rex.WX add rax,0x4020045
     eb9:	02 66 05             	add    ah,BYTE PTR [rsi+0x5]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:580
	if ( bucket != NULL ) {
     ebc:	0b ad 05 06 74 05    	or     ebp,DWORD PTR [rbp+0x5740605]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:581
		if ( bucket->toxic > 0 ) {
     ec2:	0c 59                	or     al,0x59
     ec4:	05 04 74 05 0d       	add    eax,0xd057404
     ec9:	30 05 15 74 05 18    	xor    BYTE PTR [rip+0x18057415],al        # 180582e4 <dlNextRound.8083+0x17f758fc>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:582
			bucket->toxic--;
     ecf:	e4 05                	in     al,0x5
     ed1:	08 2e                	or     BYTE PTR [rsi],ch
     ed3:	05 30 00 02 04       	add    eax,0x4020030
     ed8:	01 4a 05             	add    DWORD PTR [rdx+0x5],ecx
     edb:	38 00                	cmp    BYTE PTR [rax],al
     edd:	02 04 01             	add    al,BYTE PTR [rcx+rax*1]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:585
}
     ee0:	74 05                	je     ee7 <.debug_line+0xee7>
SVC_RateLimitAddress():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:595
qboolean SVC_RateLimitAddress( const netadr_t *from, int burst, int period ) {
     ee2:	51                   	push   rcx
     ee3:	00 02                	add    BYTE PTR [rdx],al
     ee5:	04 01                	add    al,0x1
     ee7:	e4 05                	in     al,0x5
     ee9:	2a 00                	sub    al,BYTE PTR [rax]
     eeb:	02 04 01             	add    al,BYTE PTR [rcx+rax*1]
     eee:	66 05 2e 00          	add    ax,0x2e
     ef2:	02 04 02             	add    al,BYTE PTR [rdx+rax*1]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:596
	leakyBucket_t *bucket = SVC_BucketForAddress( from, burst, period );
     ef5:	56                   	push   rsi
     ef6:	05 22 00 02 04       	add    eax,0x4020022
     efb:	01 4a 05             	add    DWORD PTR [rdx+0x5],ecx
     efe:	04 00                	add    al,0x0
     f00:	02 04 01             	add    al,BYTE PTR [rcx+rax*1]
     f03:	9e                   	sahf   
     f04:	05 06 77 05 1b       	add    eax,0x1b057706
     f09:	23 05 07 9e 05 05    	and    eax,DWORD PTR [rip+0x5059e07]        # 505ad16 <dlNextRound.8083+0x4f7832e>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:598
	return bucket ? SVC_RateLimit( &bucket->rate, burst, period ) : qtrue;
     f0f:	59                   	pop    rcx
     f10:	bb 05 09 5d 05       	mov    ebx,0x55d0905
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:598 (discriminator 1)
     f15:	05 66 05 1b 00       	add    eax,0x1b0566
     f1a:	02 04 01             	add    al,BYTE PTR [rcx+rax*1]
     f1d:	4a 05 25 00 02 04    	rex.WX add rax,0x4020025
     f23:	01 66 05             	add    DWORD PTR [rsi+0x5],esp
     f26:	21 00                	and    DWORD PTR [rax],eax
     f28:	02 04 01             	add    al,BYTE PTR [rcx+rax*1]
     f2b:	66 05 16 00          	add    ax,0x16
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:598 (discriminator 2)
     f2f:	02 04 01             	add    al,BYTE PTR [rcx+rax*1]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:599 (discriminator 5)
}
     f32:	4a 05 12 4b 05 03    	rex.WX add rax,0x3054b12
SVC_RateRestoreBurstAddress():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:609
void SVC_RateRestoreBurstAddress( const netadr_t *from, int burst, int period ) {
     f38:	9f                   	lahf   
     f39:	bb 05 1a 5c 05       	mov    ebx,0x55c1a05
     f3e:	05 90 05 03 4b       	add    eax,0x4b030590
     f43:	05 16 08 ad 05       	add    eax,0x5ad0816
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:610
	leakyBucket_t *bucket = SVC_BucketForAddress( from, burst, period );
     f48:	1a e6                	sbb    ah,dh
     f4a:	05 05 90 05 03       	add    eax,0x3059005
     f4f:	4b 05 16 08 ad 05    	rex.WXB add rax,0x5ad0816
     f55:	11 e7                	adc    edi,esp
     f57:	05 05 9e 05 0f       	add    eax,0xf059e05
     f5c:	4b 05 0d a0 05 02    	rex.WXB add rax,0x205a00d
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:612
	SVC_RateRestoreBurst( bucket );
     f62:	78 05                	js     f69 <.debug_line+0xf69>
     f64:	13 5a 05             	adc    ebx,DWORD PTR [rdx+0x5]
     f67:	05 9e 05 1e 00       	add    eax,0x1e059e
SVC_RateRestoreToxicAddress():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:623
void SVC_RateRestoreToxicAddress( const netadr_t *from, int burst, int period ) {
     f6c:	02 04 01             	add    al,BYTE PTR [rcx+rax*1]
     f6f:	4a 05 08 00 02 04    	rex.WX add rax,0x4020008
     f75:	01 cb                	add    ebx,ecx
     f77:	05 13 2f 05 0c       	add    eax,0xc052f13
     f7c:	e5 05                	in     eax,0x5
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:624
	leakyBucket_t *bucket = SVC_BucketForAddress( from, burst, period );
     f7e:	0b 08                	or     ecx,DWORD PTR [rax]
     f80:	13 05 03 08 15 05    	adc    eax,DWORD PTR [rip+0x5150803]        # 5151789 <dlNextRound.8083+0x506eda1>
     f86:	0c 03                	or     al,0x3
     f88:	7a 02                	jp     f8c <.debug_line+0xf8c>
     f8a:	26 01 05 08 66 05 11 	add    DWORD PTR es:[rip+0x11056608],eax        # 11057599 <dlNextRound.8083+0x10f74bb1>
     f91:	03 09                	add    ecx,DWORD PTR [rcx]
     f93:	58                   	pop    rax
     f94:	05 05 9e 05 0f       	add    eax,0xf059e05
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:626
	SVC_RateRestoreToxic( bucket );
     f99:	4b 05 23 58 05 0d    	rex.WXB add rax,0xd055823
     f9f:	3c 05                	cmp    al,0x5
     fa1:	02 6a 5b             	add    ch,BYTE PTR [rdx+0x5b]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:627
}
     fa4:	5b                   	pop    rbx
SVC_RateDropAddress():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:635
void SVC_RateDropAddress( const netadr_t *from, int burst, int period ) {
     fa5:	5b                   	pop    rbx
     fa6:	05 03 03 9c 7f       	add    eax,0x7f9c0303
     fab:	d6                   	(bad)  
     fac:	41 05 01 03 e0 00    	rex.B add eax,0xe00301
     fb2:	20 03                	and    BYTE PTR [rbx],al
     fb4:	10 2e                	adc    BYTE PTR [rsi],ch
     fb6:	05 0e be 05 05       	add    eax,0x505be0e
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:636
	leakyBucket_t *bucket = SVC_BucketForAddress( from, burst, period );
     fbb:	9e                   	sahf   
     fbc:	05 0a 4b 05 0e       	add    eax,0xe054b0a
     fc1:	a0 05 24 cb 05 05 9e 	movabs al,ds:0xf059e0505cb2405
     fc8:	05 0f 
     fca:	59                   	pop    rcx
     fcb:	69 05 19 4c 05 30 90 	imul   eax,DWORD PTR [rip+0x30054c19],0x9e370590        # 30055bee <dlNextRound.8083+0x2ff73206>
     fd2:	05 37 9e 
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:638
	SVC_RateDrop( bucket, burst );
     fd5:	05 46 4a 05 37       	add    eax,0x37054a46
     fda:	ba 05 23 4a 05       	mov    edx,0x54a2305
     fdf:	0b 4a 05             	or     ecx,DWORD PTR [rdx+0x5]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:639
}
     fe2:	09 67 05             	or     DWORD PTR [rdi+0x5],esp
SVC_Status():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:651
static void SVC_Status( const netadr_t *from ) {
     fe5:	2d 74 05 07 9e       	sub    eax,0x9e070574
     fea:	05 05 76 05 0a       	add    eax,0xa057605
     fef:	83 05 13 76 05 01 67 	add    DWORD PTR [rip+0x1057613],0x67        # 1058609 <dlNextRound.8083+0xf75c21>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:670
	if ( SVC_RateLimitAddress( from, 10, 1000 ) ) {
     ff6:	03 0d 2e 05 06 86    	add    ecx,DWORD PTR [rip+0xffffffff8606052e]        # ffffffff8606152a <dlNextRound.8083+0xffffffff85f7eb42>
     ffc:	05 0b 77 05 04       	add    eax,0x405770b
    1001:	83 05 0b 67 05 0e 68 	add    DWORD PTR [rip+0xe05670b],0x68        # e057713 <dlNextRound.8083+0xdf74d2b>
    1008:	05 04 9e 05 0d       	add    eax,0xd059e04
    100d:	86 05 18 83 05 0a    	xchg   BYTE PTR [rip+0xa058318],al        # a05932b <dlNextRound.8083+0x9f76943>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:671
		if ( com_developer->integer ) {
    1013:	66 05 05 68          	add    ax,0x6805
    1017:	05 06 68 05 0d       	add    eax,0xd056806
    101c:	bb 05 10 da 05       	mov    ebx,0x5da1005
    1021:	06                   	(bad)  
    1022:	84 05 0e a1 05 0c    	test   BYTE PTR [rip+0xc05a10e],al        # c05b136 <dlNextRound.8083+0xbf7874e>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:672
			Com_Printf( "SVC_Status: rate limit from %s exceeded, dropping request\n",
    1028:	58                   	pop    rax
    1029:	68 05 18 bb 05       	push   0x5bb1805
    102e:	22 9e 05 0c 58 05    	and    bl,BYTE PTR [rsi+0x5580c05]
    1034:	19 92 05 07 66 05    	sbb    DWORD PTR [rdx+0x5660705],edx
    103a:	08 03                	or     BYTE PTR [rbx],al
    103c:	09 58 05             	or     DWORD PTR [rax+0x5],ebx
    103f:	0f 67 05 1c 76 05 25 	packuswb mm0,QWORD PTR [rip+0x2505761c]        # 25058662 <dlNextRound.8083+0x24f75c7a>
    1046:	82                   	(bad)  
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:675
		return;
    1047:	05 12 3c 05 1c       	add    eax,0x1c053c12
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:680
	if ( SVC_RateLimit( &outboundRateLimit, 10, 100 ) ) {
    104c:	86 05 12 82 05 0d    	xchg   BYTE PTR [rip+0xd058212],al        # d059264 <dlNextRound.8083+0xcf7687c>
    1052:	67 05 08 68 05 0f    	addr32 add eax,0xf056808
    1058:	83 05 06 89 05 05 58 	add    DWORD PTR [rip+0x5058906],0x58        # 5059965 <dlNextRound.8083+0x4f76f7d>
    105f:	05 0c 4b 05 09       	add    eax,0x9054b0c
    1064:	77 05                	ja     106b <.debug_line+0x106b>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:681
		Com_DPrintf( "SVC_Status: rate limit exceeded, dropping request\n" );
    1066:	01 3d 02 02 00 01    	add    DWORD PTR [rip+0x1000202],edi        # 100126e <dlNextRound.8083+0xf1e886>
    106c:	01                   	.byte 0x1

Disassembly of section .debug_str:

0000000000000000 <.debug_str>:
SV_ExpandNewlines():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:81
static const char *SV_ExpandNewlines( const char *in ) {
       0:	74 6f                	je     71 <.debug_str+0x71>
       2:	74 61                	je     65 <.debug_str+0x65>
       4:	6c                   	ins    BYTE PTR es:[rdi],dx
       5:	00 65 76             	add    BYTE PTR [rbp+0x76],ah
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:85
	l = 0;
       8:	65 6e                	outs   dx,BYTE PTR gs:[rsi]
       a:	74 00                	je     c <.debug_str+0xc>
       c:	6c                   	ins    BYTE PTR es:[rdi],dx
       d:	6f                   	outs   dx,DWORD PTR ds:[rsi]
       e:	6e                   	outs   dx,BYTE PTR ds:[rsi]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:86
	while ( *in && l < sizeof(string) - 3 ) {
       f:	67 73 74             	addr32 jae 86 <.debug_str+0x86>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:87
		if ( *in == '\n' ) {
      12:	72 00                	jb     14 <.debug_str+0x14>
      14:	5f                   	pop    rdi
      15:	75 6e                	jne    85 <.debug_str+0x85>
      17:	75 73                	jne    8c <.debug_str+0x8c>
      19:	65 64 32 00          	gs xor al,BYTE PTR fs:[rax]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:88
			string[l++] = '\\';
      1d:	69 6e 66 6f 73 74 72 	imul   ebp,DWORD PTR [rsi+0x66],0x7274736f
      24:	69 6e 67 00 63 6f 6c 	imul   ebp,DWORD PTR [rsi+0x67],0x6c6f6300
      2b:	6f                   	outs   dx,DWORD PTR ds:[rsi]
      2c:	72 42                	jb     70 <.debug_str+0x70>
      2e:	6c                   	ins    BYTE PTR es:[rdi],dx
      2f:	61                   	(bad)  
      30:	63 6b 00             	movsxd ebp,DWORD PTR [rbx+0x0]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:89
			string[l++] = 'n';
      33:	5f                   	pop    rdi
      34:	66 69 6c 65 6e 6f 00 	imul   bp,WORD PTR [rbp+riz*2+0x6e],0x6f
      3b:	6d                   	ins    DWORD PTR es:[rdi],dx
      3c:	65 73 73             	gs jae b2 <.debug_str+0xb2>
      3f:	61                   	(bad)  
      40:	67 65 00 6d 73       	add    BYTE PTR gs:[ebp+0x73],ch
      45:	67 5f                	addr32 pop rdi
      47:	74 00                	je     49 <.debug_str+0x49>
      49:	54                   	push   rsp
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:91
			string[l++] = *in;
      4a:	4b 5f                	rex.WXB pop r15
      4c:	4e                   	rex.WRX
      4d:	45 57                	rex.RB push r15
      4f:	4c                   	rex.WR
      50:	49                   	rex.WB
      51:	4e                   	rex.WRX
      52:	45 00 4f 50          	add    BYTE PTR [r15+0x50],r9b
      56:	5f                   	pop    rdi
      57:	42                   	rex.X
      58:	41                   	rex.B
      59:	4e                   	rex.WRX
      5a:	44 00 53 56          	add    BYTE PTR [rbx+0x56],r10b
      5e:	43 5f                	rex.XB pop r15
      60:	52                   	push   rdx
      61:	61                   	(bad)  
      62:	74 65                	je     c9 <.debug_str+0xc9>
      64:	52                   	push   rdx
      65:	65 73 74             	gs jae dc <.debug_str+0xdc>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:93
		in++;
      68:	6f                   	outs   dx,DWORD PTR ds:[rsi]
      69:	72 65                	jb     d0 <.debug_str+0xd0>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:86
	while ( *in && l < sizeof(string) - 3 ) {
      6b:	54                   	push   rsp
      6c:	6f                   	outs   dx,DWORD PTR ds:[rsi]
      6d:	78 69                	js     d8 <.debug_str+0xd8>
      6f:	63 00                	movsxd eax,DWORD PTR [rax]
      71:	75 70                	jne    e3 <.debug_str+0xe3>
      73:	6d                   	ins    DWORD PTR es:[rdi],dx
      74:	6f                   	outs   dx,DWORD PTR ds:[rsi]
      75:	76 65                	jbe    dc <.debug_str+0xdc>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:86 (discriminator 1)
      77:	00 76 6d             	add    BYTE PTR [rsi+0x6d],dh
      7a:	5f                   	pop    rdi
      7b:	72 74                	jb     f1 <.debug_str+0xf1>
      7d:	43 68 65 63 6b 73    	rex.XB push 0x736b6365
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:95
	string[l] = '\0';
      83:	00 4f 50             	add    BYTE PTR [rdi+0x50],cl
      86:	5f                   	pop    rdi
      87:	45                   	rex.RB
      88:	4e 54                	rex.WRX push rsp
      8a:	45 52                	rex.RB push r10
      8c:	00 63 6f             	add    BYTE PTR [rbx+0x6f],ah
      8f:	6c                   	ins    BYTE PTR es:[rdi],dx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:97
	return string;
      90:	6f                   	outs   dx,DWORD PTR ds:[rsi]
      91:	72 59                	jb     ec <.debug_str+0xec>
      93:	65 6c                	gs ins BYTE PTR es:[rdi],dx
      95:	6c                   	ins    BYTE PTR es:[rdi],dx
      96:	6f                   	outs   dx,DWORD PTR ds:[rsi]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:98
}
      97:	77 00                	ja     99 <.debug_str+0x99>
SV_AddServerCommand():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:142
void SV_AddServerCommand( client_t *client, const char *cmd ) {
      99:	4f 50                	rex.WRXB push r8
      9b:	5f                   	pop    rdi
      9c:	45 51                	rex.RB push r9
      9e:	00 63 6f             	add    BYTE PTR [rbx+0x6f],ah
      a1:	6d                   	ins    DWORD PTR es:[rdi],dx
      a2:	6d                   	ins    DWORD PTR es:[rdi],dx
      a3:	61                   	(bad)  
      a4:	6e                   	outs   dx,BYTE PTR ds:[rsi]
      a5:	64 54                	fs push rsp
      a7:	69 6d 65 00 6e 65 74 	imul   ebp,DWORD PTR [rbp+0x65],0x74656e00
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:152
	if ( client->state < CS_PRIMED )
      ae:	63 68 61             	movsxd ebp,DWORD PTR [rax+0x61]
      b1:	6e                   	outs   dx,BYTE PTR ds:[rsi]
      b2:	5f                   	pop    rdi
      b3:	73 74                	jae    129 <.debug_str+0x129>
      b5:	61                   	(bad)  
      b6:	72 74                	jb     12c <.debug_str+0x12c>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:155
	client->reliableSequence++;
      b8:	5f                   	pop    rdi
      b9:	71 75                	jno    130 <.debug_str+0x130>
      bb:	65 75 65             	gs jne 123 <.debug_str+0x123>
      be:	00 73 65             	add    BYTE PTR [rbx+0x65],dh
      c1:	72 76                	jb     139 <.debug_str+0x139>
      c3:	65 72 53             	gs jb  119 <.debug_str+0x119>
      c6:	74 61                	je     129 <.debug_str+0x129>
      c8:	74 65                	je     12f <.debug_str+0x12f>
      ca:	5f                   	pop    rdi
      cb:	74 00                	je     cd <.debug_str+0xcd>
      cd:	54                   	push   rsp
      ce:	52                   	push   rdx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:160
	if ( client->reliableSequence - client->reliableAcknowledge == MAX_RELIABLE_COMMANDS + 1 ) {
      cf:	5f                   	pop    rdi
      d0:	4c                   	rex.WR
      d1:	49                   	rex.WB
      d2:	4e                   	rex.WRX
      d3:	45                   	rex.RB
      d4:	41 52                	push   r10
      d6:	00 74 72 54          	add    BYTE PTR [rdx+rsi*2+0x54],dh
      da:	79 70                	jns    14c <.debug_str+0x14c>
      dc:	65 00 64 72 6f       	add    BYTE PTR gs:[rdx+rsi*2+0x6f],ah
      e1:	70 70                	jo     153 <.debug_str+0x153>
      e3:	6f                   	outs   dx,DWORD PTR ds:[rsi]
      e4:	69 6e 74 00 5f 73 68 	imul   ebp,DWORD PTR [rsi+0x74],0x68735f00
      eb:	6f                   	outs   dx,DWORD PTR ds:[rsi]
      ec:	72 74                	jb     162 <.debug_str+0x162>
      ee:	62                   	(bad)  
      ef:	75 66                	jne    157 <.debug_str+0x157>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:161
		Com_Printf( "===== pending server commands =====\n" );
      f1:	00 70 6d             	add    BYTE PTR [rax+0x6d],dh
      f4:	6f                   	outs   dx,DWORD PTR ds:[rsi]
      f5:	76 65                	jbe    15c <.debug_str+0x15c>
      f7:	5f                   	pop    rdi
      f8:	66 72 61             	data16 jb 15c <.debug_str+0x15c>
      fb:	6d                   	ins    DWORD PTR es:[rdi],dx
      fc:	65 63 6f 75          	movsxd ebp,DWORD PTR gs:[rdi+0x75]
     100:	6e                   	outs   dx,BYTE PTR ds:[rsi]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:162
		n = client->reliableSequence - client->reliableAcknowledge;
     101:	74 00                	je     103 <.debug_str+0x103>
     103:	73 6f                	jae    174 <.debug_str+0x174>
     105:	6c                   	ins    BYTE PTR es:[rdi],dx
     106:	69 64 00 74 69 6d 65 	imul   esp,DWORD PTR [rax+rax*1+0x74],0x52656d69
     10d:	52 
     10e:	65 73 69             	gs jae 17a <.debug_str+0x17a>
     111:	64 75 61             	fs jne 175 <.debug_str+0x175>
     114:	6c                   	ins    BYTE PTR es:[rdi],dx
     115:	00 4e 41             	add    BYTE PTR [rsi+0x41],cl
     118:	5f                   	pop    rdi
     119:	49 50                	rex.WB push r8
     11b:	00 4e 41             	add    BYTE PTR [rsi+0x41],cl
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:163
		for ( i = 0; i < n; i++ ) {
     11e:	5f                   	pop    rdi
     11f:	55                   	push   rbp
     120:	4e 53                	rex.WRX push rbx
     122:	50                   	push   rax
     123:	45                   	rex.RB
     124:	43 00 67 61          	rex.XB add BYTE PTR [r15+0x61],spl
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:164 (discriminator 3)
			const int index = client->reliableAcknowledge + 1 + i;
     128:	6d                   	ins    DWORD PTR es:[rdi],dx
     129:	65 64 69 72 00 6f 75 	gs imul esi,DWORD PTR fs:[rdx+0x0],0x7074756f
     130:	74 70 
     132:	75 74                	jne    1a8 <.debug_str+0x1a8>
     134:	62                   	(bad)  
     135:	75 66                	jne    19d <.debug_str+0x19d>
     137:	00 77 65             	add    BYTE PTR [rdi+0x65],dh
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:165 (discriminator 3)
			Com_Printf( "cmd %5d: %s\n", i, client->reliableCommands[ index & ( MAX_RELIABLE_COMMANDS - 1 ) ] );
     13a:	61                   	(bad)  
     13b:	70 6f                	jo     1ac <.debug_str+0x1ac>
     13d:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     13e:	73 74                	jae    1b4 <.debug_str+0x1b4>
     140:	61                   	(bad)  
     141:	74 65                	je     1a8 <.debug_str+0x1a8>
     143:	00 74 6f 72          	add    BYTE PTR [rdi+rbp*2+0x72],dh
     147:	73 6f                	jae    1b8 <.debug_str+0x1b8>
     149:	54                   	push   rsp
     14a:	69 6d 65 72 00 53 56 	imul   ebp,DWORD PTR [rbp+0x65],0x56530072
     151:	5f                   	pop    rdi
     152:	54                   	push   rsp
     153:	72 61                	jb     1b6 <.debug_str+0x1b6>
     155:	63 6b 43             	movsxd ebp,DWORD PTR [rbx+0x43]
     158:	76 61                	jbe    1bb <.debug_str+0x1bb>
     15a:	72 43                	jb     19f <.debug_str+0x19f>
     15c:	68 61 6e 67 65       	push   0x65676e61
     161:	73 00                	jae    163 <.debug_str+0x163>
     163:	61                   	(bad)  
     164:	72 67                	jb     1cd <.debug_str+0x1cd>
     166:	70 74                	jo     1dc <.debug_str+0x1dc>
     168:	72 00                	jb     16a <.debug_str+0x16a>
     16a:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     16b:	75 6d                	jne    1da <.debug_str+0x1da>
     16d:	53                   	push   rbx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:163 (discriminator 3)
		for ( i = 0; i < n; i++ ) {
     16e:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     16f:	61                   	(bad)  
     170:	70 73                	jo     1e5 <.debug_str+0x1e5>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:163 (discriminator 1)
     172:	68 6f 74 45 6e       	push   0x6e45746f
     177:	74 69                	je     1e2 <.debug_str+0x1e2>
     179:	74 69                	je     1e4 <.debug_str+0x1e4>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:167
		Com_Printf( "cmd %5d: %s\n", i, cmd );
     17b:	65 73 00             	gs jae 17e <.debug_str+0x17e>
     17e:	64 6f                	outs   dx,DWORD PTR fs:[rsi]
     180:	77 6e                	ja     1f0 <.debug_str+0x1f0>
     182:	6c                   	ins    BYTE PTR es:[rdi],dx
     183:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     184:	61                   	(bad)  
     185:	64 4e 61             	fs rex.WRX (bad) 
     188:	6d                   	ins    DWORD PTR es:[rdi],dx
     189:	65 00 65 6e          	add    BYTE PTR gs:[rbp+0x6e],ah
     18d:	74 69                	je     1f8 <.debug_str+0x1f8>
     18f:	74 79                	je     20a <.debug_str+0x20a>
     191:	50                   	push   rax
     192:	61                   	(bad)  
     193:	72 73                	jb     208 <.debug_str+0x208>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:168
		SV_DropClient( client, "Server command overflow" );
     195:	65 50                	gs push rax
     197:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     198:	69 6e 74 00 53 56 43 	imul   ebp,DWORD PTR [rsi+0x74],0x43565300
     19f:	5f                   	pop    rdi
     1a0:	52                   	push   rdx
     1a1:	61                   	(bad)  
     1a2:	74 65                	je     209 <.debug_str+0x209>
     1a4:	52                   	push   rdx
     1a5:	65 73 74             	gs jae 21c <.debug_str+0x21c>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:169
		return;
     1a8:	6f                   	outs   dx,DWORD PTR ds:[rsi]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:171
	index = client->reliableSequence & ( MAX_RELIABLE_COMMANDS - 1 );
     1a9:	72 65                	jb     210 <.debug_str+0x210>
     1ab:	42 75 72             	rex.X jne 220 <.debug_str+0x220>
     1ae:	73 74                	jae    224 <.debug_str+0x224>
     1b0:	41                   	rex.B
     1b1:	64 64 72 65          	fs fs jb 21a <.debug_str+0x21a>
     1b5:	73 73                	jae    22a <.debug_str+0x22a>
     1b7:	00 75 69             	add    BYTE PTR [rbp+0x69],dh
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:172
	Q_strncpyz( client->reliableCommands[ index ], cmd, sizeof( client->reliableCommands[ index ] ) );
     1ba:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     1bb:	74 31                	je     1ee <.debug_str+0x1ee>
     1bd:	36 5f                	ss pop rdi
     1bf:	74 00                	je     1c1 <.debug_str+0x1c1>
     1c1:	69 6e 66 6f 5f 72 61 	imul   ebp,DWORD PTR [rsi+0x66],0x61725f6f
     1c8:	74 65                	je     22f <.debug_str+0x22f>
     1ca:	00 6e 65             	add    BYTE PTR [rsi+0x65],ch
     1cd:	78 74                	js     243 <.debug_str+0x243>
     1cf:	48                   	rex.W
     1d0:	65 61                	gs (bad) 
     1d2:	72 74                	jb     248 <.debug_str+0x248>
     1d4:	62                   	(bad)  
     1d5:	65 61                	gs (bad) 
     1d7:	74 54                	je     22d <.debug_str+0x22d>
     1d9:	69 6d 65 00 6c 6f 6f 	imul   ebp,DWORD PTR [rbp+0x65],0x6f6f6c00
     1e0:	70 53                	jo     235 <.debug_str+0x235>
     1e2:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     1e3:	75 6e                	jne    253 <.debug_str+0x253>
     1e5:	64 00 6f 76          	add    BYTE PTR fs:[rdi+0x76],ch
     1e9:	65 72 66             	gs jb  252 <.debug_str+0x252>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:173
}
     1ec:	6c                   	ins    BYTE PTR es:[rdi],dx
SV_SendServerCommand():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:185
void QDECL SV_SendServerCommand( client_t *cl, const char *fmt, ... ) {
     1ed:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     1ee:	77 5f                	ja     24f <.debug_str+0x24f>
     1f0:	61                   	(bad)  
     1f1:	72 67                	jb     25a <.debug_str+0x25a>
     1f3:	5f                   	pop    rdi
     1f4:	61                   	(bad)  
     1f5:	72 65                	jb     25c <.debug_str+0x25c>
     1f7:	61                   	(bad)  
     1f8:	00 63 6f             	add    BYTE PTR [rbx+0x6f],ah
     1fb:	6d                   	ins    DWORD PTR es:[rdi],dx
     1fc:	5f                   	pop    rdi
     1fd:	64 65 64 69 63 61 74 	fs gs imul esp,DWORD PTR fs:[rbx+0x61],0x646574
     204:	65 64 00 
     207:	5f                   	pop    rdi
     208:	66 6c                	data16 ins BYTE PTR es:[rdi],dx
     20a:	61                   	(bad)  
     20b:	67 73 00             	addr32 jae 20e <.debug_str+0x20e>
     20e:	65 78 74             	gs js  285 <.debug_str+0x285>
     211:	65 72 6e             	gs jb  282 <.debug_str+0x282>
     214:	61                   	(bad)  
     215:	6c                   	ins    BYTE PTR es:[rdi],dx
     216:	45 76 65             	rex.RB jbe 27e <.debug_str+0x27e>
     219:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     21a:	74 50                	je     26c <.debug_str+0x26c>
     21c:	61                   	(bad)  
     21d:	72 6d                	jb     28c <.debug_str+0x28c>
     21f:	00 6e 65             	add    BYTE PTR [rsi+0x65],ch
     222:	78 74                	js     298 <.debug_str+0x298>
     224:	00 73 76             	add    BYTE PTR [rbx+0x76],dh
     227:	5f                   	pop    rdi
     228:	70 75                	jo     29f <.debug_str+0x29f>
     22a:	72 65                	jb     291 <.debug_str+0x291>
     22c:	00 61 6e             	add    BYTE PTR [rcx+0x6e],ah
     22f:	67 6c                	ins    BYTE PTR es:[edi],dx
     231:	65 73 32             	gs jae 266 <.debug_str+0x266>
     234:	00 72 65             	add    BYTE PTR [rdx+0x65],dh
     237:	67 5f                	addr32 pop rdi
     239:	73 61                	jae    29c <.debug_str+0x29c>
     23b:	76 65                	jbe    2a2 <.debug_str+0x2a2>
     23d:	5f                   	pop    rdi
     23e:	61                   	(bad)  
     23f:	72 65                	jb     2a6 <.debug_str+0x2a6>
     241:	61                   	(bad)  
     242:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
     245:	6f                   	outs   dx,DWORD PTR ds:[rsi]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:191
	va_start( argptr, fmt );
     246:	66 66 5f             	data16 pop di
     249:	74 00                	je     24b <.debug_str+0x24b>
     24b:	4f 50                	rex.WRXB push r8
     24d:	5f                   	pop    rdi
     24e:	4e                   	rex.WRX
     24f:	45                   	rex.RB
     250:	47                   	rex.RXB
     251:	46 00 4f 50          	rex.RX add BYTE PTR [rdi+0x50],r9b
     255:	5f                   	pop    rdi
     256:	4e                   	rex.WRX
     257:	45                   	rex.RB
     258:	47                   	rex.RXB
     259:	49 00 73 76          	rex.WB add BYTE PTR [r11+0x76],sil
     25d:	5f                   	pop    rdi
     25e:	70 61                	jo     2c1 <.debug_str+0x2c1>
     260:	63 6b 65             	movsxd ebp,DWORD PTR [rbx+0x65]
     263:	74 64                	je     2c9 <.debug_str+0x2c9>
     265:	65 6c                	gs ins BYTE PTR es:[rdi],dx
     267:	61                   	(bad)  
     268:	79 00                	jns    26a <.debug_str+0x26a>
     26a:	63 75 72             	movsxd esi,DWORD PTR [rbp+0x72]
     26d:	72 65                	jb     2d4 <.debug_str+0x2d4>
     26f:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     270:	74 53                	je     2c5 <.debug_str+0x2c5>
     272:	74 6f                	je     2e3 <.debug_str+0x2e3>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:192
	len = Q_vsnprintf( message, sizeof( message ), fmt, argptr );
     274:	72 61                	jb     2d7 <.debug_str+0x2d7>
     276:	67 65 50             	addr32 gs push rax
     279:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     27a:	73 69                	jae    2e5 <.debug_str+0x2e5>
     27c:	74 69                	je     2e7 <.debug_str+0x2e7>
     27e:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     27f:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     280:	00 6e 75             	add    BYTE PTR [rsi+0x75],ch
     283:	6d                   	ins    DWORD PTR es:[rdi],dx
     284:	42 6c                	rex.X ins BYTE PTR es:[rdi],dx
     286:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     287:	63 6b 73             	movsxd ebp,DWORD PTR [rbx+0x73]
     28a:	00 47 41             	add    BYTE PTR [rdi+0x41],al
     28d:	4d                   	rex.WRB
     28e:	45 5f                	rex.RB pop r15
     290:	53                   	push   rbx
     291:	48 55                	rex.W push rbp
     293:	54                   	push   rsp
     294:	44                   	rex.R
     295:	4f 57                	rex.WRXB push r15
     297:	4e 00 4f 50          	rex.WRX add BYTE PTR [rdi+0x50],r9b
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:195
	if ( cl != NULL ) {
     29b:	5f                   	pop    rdi
     29c:	42                   	rex.X
     29d:	4c                   	rex.WR
     29e:	4f                   	rex.WRXB
     29f:	43                   	rex.XB
     2a0:	4b 5f                	rex.WXB pop r15
     2a2:	43                   	rex.XB
     2a3:	4f 50                	rex.WRXB push r8
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:198
		if ( len <= 1022 || cl->longstr ) {
     2a5:	59                   	pop    rcx
     2a6:	00 74 72 42          	add    BYTE PTR [rdx+rsi*2+0x42],dh
     2aa:	61                   	(bad)  
     2ab:	73 65                	jae    312 <.debug_str+0x312>
     2ad:	00 73 76             	add    BYTE PTR [rbx+0x76],dh
     2b0:	5f                   	pop    rdi
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:198 (discriminator 1)
     2b1:	6c                   	ins    BYTE PTR es:[rdi],dx
     2b2:	61                   	(bad)  
     2b3:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     2b4:	46 6f                	rex.RX outs dx,DWORD PTR ds:[rsi]
     2b6:	72 63                	jb     31b <.debug_str+0x31b>
     2b8:	65 52                	gs push rdx
     2ba:	61                   	(bad)  
     2bb:	74 65                	je     322 <.debug_str+0x322>
     2bd:	00 64 6f 77          	add    BYTE PTR [rdi+rbp*2+0x77],ah
     2c1:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     2c2:	6c                   	ins    BYTE PTR es:[rdi],dx
     2c3:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     2c4:	61                   	(bad)  
     2c5:	64 43 75 72          	fs rex.XB jne 33b <.debug_str+0x33b>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:199
			SV_AddServerCommand( cl, message );
     2c9:	72 65                	jb     330 <.debug_str+0x330>
     2cb:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     2cc:	74 42                	je     310 <.debug_str+0x310>
     2ce:	6c                   	ins    BYTE PTR es:[rdi],dx
     2cf:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     2d0:	63 6b 00             	movsxd ebp,DWORD PTR [rbx+0x0]
     2d3:	65 78 74             	gs js  34a <.debug_str+0x34a>
     2d6:	65 72 6e             	gs jb  347 <.debug_str+0x347>
     2d9:	61                   	(bad)  
     2da:	6c                   	ins    BYTE PTR es:[rdi],dx
     2db:	45 76 65             	rex.RB jbe 343 <.debug_str+0x343>
     2de:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     2df:	74 00                	je     2e1 <.debug_str+0x2e1>
     2e1:	54                   	push   rsp
     2e2:	52                   	push   rdx
     2e3:	5f                   	pop    rdi
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:205
	if ( com_dedicated->integer && !strncmp( message, "print", 5 ) ) {
     2e4:	53                   	push   rbx
     2e5:	54                   	push   rsp
     2e6:	41 54                	push   r12
     2e8:	49                   	rex.WB
     2e9:	4f                   	rex.WRXB
     2ea:	4e                   	rex.WRX
     2eb:	41 52                	push   r10
     2ed:	59                   	pop    rcx
     2ee:	00 5f 6c             	add    BYTE PTR [rdi+0x6c],bl
     2f1:	6f                   	outs   dx,DWORD PTR ds:[rsi]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:205 (discriminator 1)
     2f2:	63 6b 00             	movsxd ebp,DWORD PTR [rbx+0x0]
     2f5:	53                   	push   rbx
     2f6:	56                   	push   rsi
     2f7:	5f                   	pop    rdi
     2f8:	45 78 70             	rex.RB js 36b <.debug_str+0x36b>
     2fb:	61                   	(bad)  
     2fc:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     2fd:	64 4e                	fs rex.WRX
     2ff:	65 77 6c             	gs ja  36e <.debug_str+0x36e>
     302:	69 6e 65 73 00 73 76 	imul   ebp,DWORD PTR [rsi+0x65],0x76730073
     309:	5f                   	pop    rdi
     30a:	6d                   	ins    DWORD PTR es:[rdi],dx
     30b:	61                   	(bad)  
     30c:	78 63                	js     371 <.debug_str+0x371>
     30e:	6c                   	ins    BYTE PTR es:[rdi],dx
     30f:	69 65 6e 74 73 50 65 	imul   esp,DWORD PTR [rbp+0x6e],0x65507374
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:206
		Com_Printf( "broadcast: %s\n", SV_ExpandNewlines( message ) );
     316:	72 49                	jb     361 <.debug_str+0x361>
     318:	50                   	push   rax
     319:	00 53 56             	add    BYTE PTR [rbx+0x56],dl
     31c:	43 5f                	rex.XB pop r15
     31e:	49 6e                	rex.WB outs dx,BYTE PTR ds:[rsi]
     320:	66 6f                	outs   dx,WORD PTR ds:[rsi]
     322:	00 67 72             	add    BYTE PTR [rdi+0x72],ah
     325:	61                   	(bad)  
     326:	76 69                	jbe    391 <.debug_str+0x391>
     328:	74 79                	je     3a3 <.debug_str+0x3a3>
     32a:	00 43 56             	add    BYTE PTR [rbx+0x56],al
     32d:	47 5f                	rex.RXB pop r15
     32f:	52                   	push   rdx
     330:	45                   	rex.RB
     331:	4e                   	rex.WRX
     332:	44                   	rex.R
     333:	45 52                	rex.RB push r10
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:210
	for ( j = 0, client = svs.clients; j < sv_maxclients->integer ; j++, client++ ) {
     335:	45 52                	rex.RB push r10
     337:	00 64 61 6d          	add    BYTE PTR [rcx+riz*2+0x6d],ah
     33b:	61                   	(bad)  
     33c:	67 65 45 76 65       	addr32 gs rex.RB jbe 3a6 <.debug_str+0x3a6>
     341:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     342:	74 00                	je     344 <.debug_str+0x344>
     344:	53                   	push   rbx
     345:	56                   	push   rsi
     346:	5f                   	pop    rdi
     347:	43 61                	rex.XB (bad) 
     349:	6c                   	ins    BYTE PTR es:[rdi],dx
     34a:	63 50 69             	movsxd edx,DWORD PTR [rax+0x69]
     34d:	6e                   	outs   dx,BYTE PTR ds:[rsi]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:211
		if ( len <= 1022 || client->longstr ) {
     34e:	67 73 00             	addr32 jae 351 <.debug_str+0x351>
     351:	76 69                	jbe    3bc <.debug_str+0x3bc>
     353:	65 77 68             	gs ja  3be <.debug_str+0x3be>
     356:	65 69 67 68 74 00 62 	imul   esp,DWORD PTR gs:[rdi+0x68],0x79620074
     35d:	79 
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:211 (discriminator 1)
     35e:	74 65                	je     3c5 <.debug_str+0x3c5>
     360:	64 69 72 73 00 63 6f 	imul   esi,DWORD PTR fs:[rdx+0x73],0x6d6f6300
     367:	6d 
     368:	70 61                	jo     3cb <.debug_str+0x3cb>
     36a:	74 00                	je     36c <.debug_str+0x36c>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:212
			SV_AddServerCommand( client, message );
     36c:	66 73 5f             	data16 jae 3ce <.debug_str+0x3ce>
     36f:	6c                   	ins    BYTE PTR es:[rdi],dx
     370:	61                   	(bad)  
     371:	73 74                	jae    3e7 <.debug_str+0x3e7>
     373:	50                   	push   rax
     374:	61                   	(bad)  
     375:	6b 49 6e 64          	imul   ecx,DWORD PTR [rcx+0x6e],0x64
     379:	65 78 00             	gs js  37c <.debug_str+0x37c>
     37c:	76 65                	jbe    3e3 <.debug_str+0x3e3>
     37e:	63 33                	movsxd esi,DWORD PTR [rbx]
     380:	5f                   	pop    rdi
     381:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     382:	72 69                	jb     3ed <.debug_str+0x3ed>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:210 (discriminator 2)
	for ( j = 0, client = svs.clients; j < sv_maxclients->integer ; j++, client++ ) {
     384:	67 69 6e 00 5f 5f 62 	imul   ebp,DWORD PTR [esi+0x0],0x75625f5f
     38b:	75 
     38c:	69 6c 74 69 6e 5f 76 	imul   ebp,DWORD PTR [rsp+rsi*2+0x69],0x61765f6e
     393:	61 
     394:	5f                   	pop    rdi
     395:	6c                   	ins    BYTE PTR es:[rdi],dx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:210 (discriminator 1)
     396:	69 73 74 00 53 56 43 	imul   esi,DWORD PTR [rbx+0x74],0x43565300
     39d:	5f                   	pop    rdi
     39e:	52                   	push   rdx
     39f:	61                   	(bad)  
     3a0:	74 65                	je     407 <.debug_str+0x407>
     3a2:	52                   	push   rdx
     3a3:	65 73 74             	gs jae 41a <.debug_str+0x41a>
     3a6:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     3a7:	72 65                	jb     40e <.debug_str+0x40e>
     3a9:	54                   	push   rsp
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:201
		return;
     3aa:	6f                   	outs   dx,DWORD PTR ds:[rsi]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:215
}
     3ab:	78 69                	js     416 <.debug_str+0x416>
SV_MasterHeartbeat():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:240
{
     3ad:	63 41 64             	movsxd eax,DWORD PTR [rcx+0x64]
     3b0:	64 72 65             	fs jb  418 <.debug_str+0x418>
     3b3:	73 73                	jae    428 <.debug_str+0x428>
     3b5:	00 73 74             	add    BYTE PTR [rbx+0x74],dh
     3b8:	61                   	(bad)  
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:246
	netenabled = Cvar_VariableIntegerValue("net_enabled");
     3b9:	63 6b 42             	movsxd ebp,DWORD PTR [rbx+0x42]
     3bc:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     3bd:	74 74                	je     433 <.debug_str+0x433>
     3bf:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     3c0:	6d                   	ins    DWORD PTR es:[rdi],dx
     3c1:	00 6e 75             	add    BYTE PTR [rsi+0x75],ch
     3c4:	6d                   	ins    DWORD PTR es:[rdi],dx
     3c5:	53                   	push   rbx
     3c6:	79 6d                	jns    435 <.debug_str+0x435>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:249
	if (!com_dedicated || com_dedicated->integer != 2 || !(netenabled & (NET_ENABLEV4 | NET_ENABLEV6)))
     3c8:	62                   	(bad)  
     3c9:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     3ca:	6c                   	ins    BYTE PTR es:[rdi],dx
     3cb:	73 00                	jae    3cd <.debug_str+0x3cd>
     3cd:	69 6e 74 33 32 5f 74 	imul   ebp,DWORD PTR [rsi+0x74],0x745f3233
     3d4:	00 4f 50             	add    BYTE PTR [rdi+0x50],cl
     3d7:	5f                   	pop    rdi
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:249 (discriminator 1)
     3d8:	47 54                	rex.RXB push r12
     3da:	46 00 4f 50          	rex.RX add BYTE PTR [rdi+0x50],r9b
     3de:	5f                   	pop    rdi
     3df:	47 54                	rex.RXB push r12
     3e1:	49 00 72 61          	rex.WB add BYTE PTR [r10+0x61],sil
     3e5:	74 65                	je     44c <.debug_str+0x44c>
     3e7:	44                   	rex.R
     3e8:	65 6c                	gs ins BYTE PTR es:[rdi],dx
     3ea:	61                   	(bad)  
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:249 (discriminator 2)
     3eb:	79 65                	jns    452 <.debug_str+0x452>
     3ed:	64 00 4e 41          	add    BYTE PTR fs:[rsi+0x41],cl
     3f1:	5f                   	pop    rdi
     3f2:	49 50                	rex.WB push r8
     3f4:	36 00 4f 50          	add    BYTE PTR ss:[rdi+0x50],cl
     3f8:	5f                   	pop    rdi
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:253
	if ( svs.nextHeartbeatTime - svs.time > 0 )
     3f9:	47 54                	rex.RXB push r12
     3fb:	55                   	push   rbp
     3fc:	00 4f 50             	add    BYTE PTR [rdi+0x50],cl
     3ff:	5f                   	pop    rdi
     400:	53                   	push   rbx
     401:	45 58                	rex.RB pop r8
     403:	31 36                	xor    DWORD PTR [rsi],esi
     405:	00 6c 61 73          	add    BYTE PTR [rcx+riz*2+0x73],ch
     409:	74 54                	je     45f <.debug_str+0x45f>
     40b:	69 6d 65 00 53 56 5f 	imul   ebp,DWORD PTR [rbp+0x65],0x5f565300
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:256
	svs.nextHeartbeatTime = svs.time + HEARTBEAT_MSEC;
     412:	53                   	push   rbx
     413:	65 6e                	outs   dx,BYTE PTR gs:[rsi]
     415:	64 53                	fs push rbx
     417:	65 72 76             	gs jb  490 <.debug_str+0x490>
     41a:	65 72 43             	gs jb  460 <.debug_str+0x460>
     41d:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     41e:	6d                   	ins    DWORD PTR es:[rdi],dx
     41f:	6d                   	ins    DWORD PTR es:[rdi],dx
     420:	61                   	(bad)  
     421:	6e                   	outs   dx,BYTE PTR ds:[rsi]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:259
	for (i = 0; i < MAX_MASTER_SERVERS; i++)
     422:	64 00 61 75          	add    BYTE PTR fs:[rcx+0x75],ah
     426:	74 68                	je     490 <.debug_str+0x490>
     428:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     429:	72 69                	jb     494 <.debug_str+0x494>
     42b:	7a 65                	jp     492 <.debug_str+0x492>
     42d:	41                   	rex.B
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:261
		if(!sv_master[i]->string[0])
     42e:	64 64 72 65          	fs fs jb 497 <.debug_str+0x497>
     432:	73 73                	jae    4a7 <.debug_str+0x4a7>
     434:	00 76 65             	add    BYTE PTR [rsi+0x65],dh
     437:	63 5f 74             	movsxd ebx,DWORD PTR [rdi+0x74]
     43a:	00 70 72             	add    BYTE PTR [rax+0x72],dh
     43d:	69 76 61 74 65 46 6c 	imul   esi,DWORD PTR [rsi+0x61],0x6c466574
     444:	61                   	(bad)  
     445:	67 00 49 54          	add    BYTE PTR [ecx+0x54],cl
     449:	5f                   	pop    rdi
     44a:	48                   	rex.W
     44b:	45                   	rex.RB
     44c:	41                   	rex.B
     44d:	4c 54                	rex.WR push rsp
     44f:	48 00 6c 61 73       	rex.W add BYTE PTR [rcx+riz*2+0x73],bpl
     454:	74 56                	je     4ac <.debug_str+0x4ac>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:266
		if ( sv_master[i]->modified || svs.time - svs.masterResolveTime[i] > 0 )
     456:	61                   	(bad)  
     457:	6c                   	ins    BYTE PTR es:[rdi],dx
     458:	69 64 46 72 61 6d 65 	imul   esp,DWORD PTR [rsi+rax*2+0x72],0x656d61
     45f:	00 
     460:	5f                   	pop    rdi
     461:	49                   	rex.WB
     462:	4f 5f                	rex.WRXB pop r15
     464:	77 72                	ja     4d8 <.debug_str+0x4d8>
     466:	69 74 65 5f 65 6e 64 	imul   esi,DWORD PTR [rbp+riz*2+0x5f],0x646e65
     46d:	00 
     46e:	6c                   	ins    BYTE PTR es:[rdi],dx
     46f:	61                   	(bad)  
     470:	73 74                	jae    4e6 <.debug_str+0x4e6>
     472:	44 69 73 63 6f 6e 6e 	imul   r14d,DWORD PTR [rbx+0x63],0x656e6e6f
     479:	65 
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:266 (discriminator 1)
     47a:	63 74 54 69          	movsxd esi,DWORD PTR [rsp+rdx*2+0x69]
     47e:	6d                   	ins    DWORD PTR es:[rdi],dx
     47f:	65 00 63 6f          	add    BYTE PTR gs:[rbx+0x6f],ah
     483:	6d                   	ins    DWORD PTR es:[rdi],dx
     484:	5f                   	pop    rdi
     485:	64 65 76 65          	fs gs jbe 4ee <.debug_str+0x4ee>
     489:	6c                   	ins    BYTE PTR es:[rdi],dx
     48a:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     48b:	70 65                	jo     4f2 <.debug_str+0x4f2>
     48d:	72 00                	jb     48f <.debug_str+0x48f>
     48f:	5f                   	pop    rdi
     490:	5f                   	pop    rdi
     491:	76 61                	jbe    4f4 <.debug_str+0x4f4>
     493:	5f                   	pop    rdi
     494:	6c                   	ins    BYTE PTR es:[rdi],dx
     495:	69 73 74 5f 74 61 67 	imul   esi,DWORD PTR [rbx+0x74],0x6761745f
     49c:	00 62 79             	add    BYTE PTR [rdx+0x79],ah
     49f:	74 65                	je     506 <.debug_str+0x506>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:268
			sv_master[i]->modified = qfalse;
     4a1:	00 6a 75             	add    BYTE PTR [rdx+0x75],ch
     4a4:	6d                   	ins    DWORD PTR es:[rdi],dx
     4a5:	70 70                	jo     517 <.debug_str+0x517>
     4a7:	61                   	(bad)  
     4a8:	64 5f                	fs pop rdi
     4aa:	65 6e                	outs   dx,BYTE PTR gs:[rsi]
     4ac:	74 00                	je     4ae <.debug_str+0x4ae>
     4ae:	54                   	push   rsp
     4af:	52                   	push   rdx
     4b0:	5f                   	pop    rdi
     4b1:	47 52                	rex.RXB push r10
     4b3:	41 56                	push   r14
     4b5:	49 54                	rex.WB push r12
     4b7:	59                   	pop    rcx
     4b8:	00 73 76             	add    BYTE PTR [rbx+0x76],dh
     4bb:	5f                   	pop    rdi
     4bc:	64 6c                	fs ins BYTE PTR es:[rdi],dx
     4be:	52                   	push   rdx
     4bf:	61                   	(bad)  
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:269
			svs.masterResolveTime[i] = svs.time + MASTERDNS_MSEC;
     4c0:	74 65                	je     527 <.debug_str+0x527>
     4c2:	00 69 6e             	add    BYTE PTR [rcx+0x6e],ch
     4c5:	64 65 78 00          	fs gs js 4c9 <.debug_str+0x4c9>
     4c9:	6d                   	ins    DWORD PTR es:[rdi],dx
     4ca:	73 67                	jae    533 <.debug_str+0x533>
     4cc:	54                   	push   rsp
     4cd:	69 6d 65 00 6c 65 67 	imul   ebp,DWORD PTR [rbp+0x65],0x67656c00
     4d4:	73 54                	jae    52a <.debug_str+0x52a>
     4d6:	69 6d 65 72 00 5f 5f 	imul   ebp,DWORD PTR [rbp+0x65],0x5f5f0072
     4dd:	74 7a                	je     559 <.debug_str+0x559>
     4df:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     4e0:	61                   	(bad)  
     4e1:	6d                   	ins    DWORD PTR es:[rdi],dx
     4e2:	65 00 61 6e          	add    BYTE PTR gs:[rcx+0x6e],ah
     4e6:	67 6c                	ins    BYTE PTR es:[edi],dx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:271
			if(netenabled & NET_ENABLEV4)
     4e8:	65 73 00             	gs jae 4eb <.debug_str+0x4eb>
     4eb:	6c                   	ins    BYTE PTR es:[rdi],dx
     4ec:	61                   	(bad)  
     4ed:	73 74                	jae    563 <.debug_str+0x563>
     4ef:	43 6c                	rex.XB ins BYTE PTR es:[rdi],dx
     4f1:	69 65 6e 74 43 6f 6d 	imul   esp,DWORD PTR [rbp+0x6e],0x6d6f4374
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:273
				Com_Printf("Resolving %s (IPv4)\n", sv_master[i]->string);
     4f8:	6d                   	ins    DWORD PTR es:[rdi],dx
     4f9:	61                   	(bad)  
     4fa:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     4fb:	64 00 65 76          	add    BYTE PTR fs:[rbp+0x76],ah
     4ff:	65 6e                	outs   dx,BYTE PTR gs:[rsi]
     501:	74 53                	je     556 <.debug_str+0x556>
     503:	65 71 75             	gs jno 57b <.debug_str+0x57b>
     506:	65 6e                	outs   dx,BYTE PTR gs:[rsi]
     508:	63 65 00             	movsxd esp,DWORD PTR [rbp+0x0]
     50b:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     50c:	65 74 65             	gs je  574 <.debug_str+0x574>
     50f:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     510:	61                   	(bad)  
     511:	62                   	(bad)  
     512:	6c                   	ins    BYTE PTR es:[rdi],dx
     513:	65 64 00 47 41       	gs add BYTE PTR fs:[rdi+0x41],al
     518:	4d                   	rex.WRB
     519:	45 5f                	rex.RB pop r15
     51b:	49                   	rex.WB
     51c:	4e                   	rex.WRX
     51d:	49 54                	rex.WB push r12
     51f:	00 75 73             	add    BYTE PTR [rbp+0x73],dh
     522:	65 72 63             	gs jb  588 <.debug_str+0x588>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:274
				res = NET_StringToAdr(sv_master[i]->string, &adr[i][0], NA_IP);
     525:	6d                   	ins    DWORD PTR es:[rdi],dx
     526:	64 5f                	fs pop rdi
     528:	73 00                	jae    52a <.debug_str+0x52a>
     52a:	75 73                	jne    59f <.debug_str+0x59f>
     52c:	65 72 63             	gs jb  592 <.debug_str+0x592>
     52f:	6d                   	ins    DWORD PTR es:[rdi],dx
     530:	64 5f                	fs pop rdi
     532:	74 00                	je     534 <.debug_str+0x534>
     534:	65 76 65             	gs jbe 59c <.debug_str+0x59c>
     537:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     538:	74 50                	je     58a <.debug_str+0x58a>
     53a:	61                   	(bad)  
     53b:	72 6d                	jb     5aa <.debug_str+0x5aa>
     53d:	00 64 61 74          	add    BYTE PTR [rcx+riz*2+0x74],ah
     541:	61                   	(bad)  
     542:	42 61                	rex.X (bad) 
     544:	73 65                	jae    5ab <.debug_str+0x5ab>
     546:	00 54 4b 5f          	add    BYTE PTR [rbx+rcx*2+0x5f],dl
     54a:	53                   	push   rbx
     54b:	54                   	push   rsp
     54c:	52                   	push   rdx
     54d:	49                   	rex.WB
     54e:	4e                   	rex.WRX
     54f:	47 00 6d 6f          	rex.RXB add BYTE PTR [r13+0x6f],r13b
     553:	64 69 66 69 63 61 74 	imul   esp,DWORD PTR fs:[rsi+0x69],0x69746163
     55a:	69 
     55b:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     55c:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     55d:	43 6f                	rex.XB outs dx,DWORD PTR ds:[rsi]
     55f:	75 6e                	jne    5cf <.debug_str+0x5cf>
     561:	74 00                	je     563 <.debug_str+0x563>
     563:	63 75 72             	movsxd esi,DWORD PTR [rbp+0x72]
     566:	72 65                	jb     5cd <.debug_str+0x5cd>
     568:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     569:	74 53                	je     5be <.debug_str+0x5be>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:276
				if(res == 2)
     56b:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     56c:	61                   	(bad)  
     56d:	70 73                	jo     5e2 <.debug_str+0x5e2>
     56f:	68 6f 74 46 72       	push   0x7246746f
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:279
					adr[i][0].port = BigShort(PORT_MASTER);
     574:	61                   	(bad)  
     575:	6d                   	ins    DWORD PTR es:[rdi],dx
     576:	65 00 6f 75          	add    BYTE PTR gs:[rdi+0x75],ch
     57a:	74 62                	je     5de <.debug_str+0x5de>
     57c:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     57d:	75 6e                	jne    5ed <.debug_str+0x5ed>
     57f:	64 52                	fs push rdx
     581:	61                   	(bad)  
     582:	74 65                	je     5e9 <.debug_str+0x5e9>
     584:	4c 69 6d 69 74 00 4f 	imul   r13,QWORD PTR [rbp+0x69],0x504f0074
     58b:	50 
     58c:	5f                   	pop    rdi
     58d:	49                   	rex.WB
     58e:	47                   	rex.RXB
     58f:	4e                   	rex.WRX
     590:	4f 52                	rex.WRXB push r10
     592:	45 00 73 76          	add    BYTE PTR [r11+0x76],r14b
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:282
				if(res)
     596:	5f                   	pop    rdi
     597:	61                   	(bad)  
     598:	6c                   	ins    BYTE PTR es:[rdi],dx
     599:	6c                   	ins    BYTE PTR es:[rdi],dx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:283
					Com_Printf( "%s resolved to %s\n", sv_master[i]->string, NET_AdrToStringwPort( &adr[i][0] ) );
     59a:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     59b:	77 44                	ja     5e1 <.debug_str+0x5e1>
     59d:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     59e:	77 6e                	ja     60e <.debug_str+0x60e>
     5a0:	6c                   	ins    BYTE PTR es:[rdi],dx
     5a1:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     5a2:	61                   	(bad)  
     5a3:	64 00 4e 41          	add    BYTE PTR fs:[rsi+0x41],cl
     5a7:	5f                   	pop    rdi
     5a8:	42                   	rex.X
     5a9:	41                   	rex.B
     5aa:	44 00 73 76          	add    BYTE PTR [rbx+0x76],r14b
     5ae:	46 6c                	rex.RX ins BYTE PTR es:[rdi],dx
     5b0:	61                   	(bad)  
     5b1:	67 73 00             	addr32 jae 5b4 <.debug_str+0x5b4>
     5b4:	4e 53                	rex.WRX push rbx
     5b6:	5f                   	pop    rdi
     5b7:	53                   	push   rbx
     5b8:	45 52                	rex.RB push r10
     5ba:	56                   	push   rsi
     5bb:	45 52                	rex.RB push r10
     5bd:	00 6d 61             	add    BYTE PTR [rbp+0x61],ch
     5c0:	78 73                	js     635 <.debug_str+0x635>
     5c2:	00 74 79 70          	add    BYTE PTR [rcx+rdi*2+0x70],dh
     5c6:	65 00 66 72          	add    BYTE PTR gs:[rsi+0x72],ah
     5ca:	61                   	(bad)  
     5cb:	6d                   	ins    DWORD PTR es:[rdi],dx
     5cc:	65 4d 73 65          	gs rex.WRB jae 635 <.debug_str+0x635>
     5d0:	63 00                	movsxd eax,DWORD PTR [rax]
     5d2:	73 79                	jae    64d <.debug_str+0x64d>
     5d4:	73 5f                	jae    635 <.debug_str+0x635>
     5d6:	65 72 72             	gs jb  64b <.debug_str+0x64b>
     5d9:	6c                   	ins    BYTE PTR es:[rdi],dx
     5da:	69 73 74 00 4f 50 5f 	imul   esi,DWORD PTR [rbx+0x74],0x5f504f00
     5e1:	4c 54                	rex.WR push rsp
     5e3:	49 00 64 61 79       	rex.WB add BYTE PTR [r9+riz*2+0x79],spl
     5e8:	6c                   	ins    BYTE PTR es:[rdi],dx
     5e9:	69 67 68 74 00 5f 5f 	imul   esp,DWORD PTR [rdi+0x68],0x5f5f0074
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:285
					Com_Printf( "%s has no IPv4 address.\n", sv_master[i]->string );
     5f0:	75 69                	jne    65b <.debug_str+0x65b>
     5f2:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     5f3:	74 31                	je     626 <.debug_str+0x626>
     5f5:	36 5f                	ss pop rdi
     5f7:	74 00                	je     5f9 <.debug_str+0x5f9>
     5f9:	70 72                	jo     66d <.debug_str+0x66d>
     5fb:	65 63 61 63          	movsxd esp,DWORD PTR gs:[rcx+0x63]
     5ff:	68 65 73 00 73       	push   0x73007365
     604:	76 5f                	jbe    665 <.debug_str+0x665>
     606:	6d                   	ins    DWORD PTR es:[rdi],dx
     607:	69 6e 52 61 74 65 00 	imul   ebp,DWORD PTR [rsi+0x52],0x657461
     60e:	2f                   	(bad)  
     60f:	6d                   	ins    DWORD PTR es:[rdi],dx
     610:	65 64 69 61 2f 57 44 	gs imul esp,DWORD PTR fs:[rcx+0x2f],0x74334457
     617:	33 74 
     619:	62                   	(bad)  
     61a:	55                   	push   rbp
     61b:	53                   	push   rbx
     61c:	42 33 5f 30          	rex.X xor ebx,DWORD PTR [rdi+0x30]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:288
			if(netenabled & NET_ENABLEV6)
     620:	30 2f                	xor    BYTE PTR [rdi],ch
     622:	43                   	rex.XB
     623:	4f                   	rex.WRXB
     624:	44                   	rex.R
     625:	45 2f                	rex.RB (bad) 
     627:	63 70 70             	movsxd esi,DWORD PTR [rax+0x70]
     62a:	2f                   	(bad)  
     62b:	5f                   	pop    rdi
     62c:	5f                   	pop    rdi
     62d:	53                   	push   rbx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:290
				Com_Printf("Resolving %s (IPv6)\n", sv_master[i]->string);
     62e:	2f                   	(bad)  
     62f:	77 6f                	ja     6a0 <.debug_str+0x6a0>
     631:	72 6b                	jb     69e <.debug_str+0x69e>
     633:	73 70                	jae    6a5 <.debug_str+0x6a5>
     635:	61                   	(bad)  
     636:	63 65 2f             	movsxd esp,DWORD PTR [rbp+0x2f]
     639:	51                   	push   rcx
     63a:	75 61                	jne    69d <.debug_str+0x69d>
     63c:	6b 65 33 65          	imul   esp,DWORD PTR [rbp+0x33],0x65
     640:	00 76 6d             	add    BYTE PTR [rsi+0x6d],dh
     643:	49 6e                	rex.WB outs dx,BYTE PTR ds:[rsi]
     645:	64 65 78 5f          	fs gs js 6a8 <.debug_str+0x6a8>
     649:	74 00                	je     64b <.debug_str+0x64b>
     64b:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     64c:	75 6d                	jne    6bb <.debug_str+0x6bb>
     64e:	4a 75 6d             	rex.WX jne 6be <.debug_str+0x6be>
     651:	70 54                	jo     6a7 <.debug_str+0x6a7>
     653:	61                   	(bad)  
     654:	62                   	(bad)  
     655:	6c                   	ins    BYTE PTR es:[rdi],dx
     656:	65 54                	gs push rsp
     658:	61                   	(bad)  
     659:	72 67                	jb     6c2 <.debug_str+0x6c2>
     65b:	65 74 73             	gs je  6d1 <.debug_str+0x6d1>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:291
				res = NET_StringToAdr(sv_master[i]->string, &adr[i][1], NA_IP6);
     65e:	00 73 6e             	add    BYTE PTR [rbx+0x6e],dh
     661:	61                   	(bad)  
     662:	70 73                	jo     6d7 <.debug_str+0x6d7>
     664:	68 6f 74 43 6f       	push   0x6f43746f
     669:	75 6e                	jne    6d9 <.debug_str+0x6d9>
     66b:	74 65                	je     6d2 <.debug_str+0x6d2>
     66d:	72 00                	jb     66f <.debug_str+0x66f>
     66f:	4f 50                	rex.WRXB push r8
     671:	5f                   	pop    rdi
     672:	4d 55                	rex.WRB push r13
     674:	4c                   	rex.WR
     675:	46 00 53 56          	rex.RX add BYTE PTR [rbx+0x56],r10b
     679:	5f                   	pop    rdi
     67a:	4d 61                	rex.WRB (bad) 
     67c:	73 74                	jae    6f2 <.debug_str+0x6f2>
     67e:	65 72 48             	gs jb  6c9 <.debug_str+0x6c9>
     681:	65 61                	gs (bad) 
     683:	72 74                	jb     6f9 <.debug_str+0x6f9>
     685:	62                   	(bad)  
     686:	65 61                	gs (bad) 
     688:	74 00                	je     68a <.debug_str+0x68a>
     68a:	4f 50                	rex.WRXB push r8
     68c:	5f                   	pop    rdi
     68d:	4d 55                	rex.WRB push r13
     68f:	4c                   	rex.WR
     690:	49 00 61 62          	rex.WB add BYTE PTR [r9+0x62],spl
     694:	73 6d                	jae    703 <.debug_str+0x703>
     696:	61                   	(bad)  
     697:	78 00                	js     699 <.debug_str+0x699>
     699:	70 69                	jo     704 <.debug_str+0x704>
     69b:	63 6b 75             	movsxd ebp,DWORD PTR [rbx+0x75]
     69e:	70 5f                	jo     6ff <.debug_str+0x6ff>
     6a0:	73 6f                	jae    711 <.debug_str+0x711>
     6a2:	75 6e                	jne    712 <.debug_str+0x712>
     6a4:	64 00 4f 50          	add    BYTE PTR fs:[rdi+0x50],cl
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:293
				if(res == 2)
     6a8:	5f                   	pop    rdi
     6a9:	4d 55                	rex.WRB push r13
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:296
					adr[i][1].port = BigShort(PORT_MASTER);
     6ab:	4c 55                	rex.WR push rbp
     6ad:	00 4f 50             	add    BYTE PTR [rdi+0x50],cl
     6b0:	5f                   	pop    rdi
     6b1:	42                   	rex.X
     6b2:	43                   	rex.XB
     6b3:	4f                   	rex.WRXB
     6b4:	4d 00 5f 5f          	rex.WRB add BYTE PTR [r15+0x5f],r11b
     6b8:	67 6e                	outs   dx,BYTE PTR ds:[esi]
     6ba:	75 63                	jne    71f <.debug_str+0x71f>
     6bc:	5f                   	pop    rdi
     6bd:	76 61                	jbe    720 <.debug_str+0x720>
     6bf:	5f                   	pop    rdi
     6c0:	6c                   	ins    BYTE PTR es:[rdi],dx
     6c1:	69 73 74 00 64 6c 4e 	imul   esi,DWORD PTR [rbx+0x74],0x4e6c6400
     6c8:	65 78 74             	gs js  73f <.debug_str+0x73f>
     6cb:	52                   	push   rdx
     6cc:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     6cd:	75 6e                	jne    73d <.debug_str+0x73d>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:299
				if(res)
     6cf:	64 00 72 61          	add    BYTE PTR fs:[rdx+0x61],dh
     6d3:	74 65                	je     73a <.debug_str+0x73a>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:300
					Com_Printf( "%s resolved to %s\n", sv_master[i]->string, NET_AdrToStringwPort( &adr[i][1] ) );
     6d5:	4c 69 6d 69 74 5f 73 	imul   r13,QWORD PTR [rbp+0x69],0x735f74
     6dc:	00 
     6dd:	63 6f 6c             	movsxd ebp,DWORD PTR [rdi+0x6c]
     6e0:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     6e1:	72 42                	jb     725 <.debug_str+0x725>
     6e3:	6c                   	ins    BYTE PTR es:[rdi],dx
     6e4:	75 65                	jne    74b <.debug_str+0x74b>
     6e6:	00 5f 63             	add    BYTE PTR [rdi+0x63],bl
     6e9:	68 61 69 6e 00       	push   0x6e6961
     6ee:	6d                   	ins    DWORD PTR es:[rdi],dx
     6ef:	65 73 73             	gs jae 765 <.debug_str+0x765>
     6f2:	61                   	(bad)  
     6f3:	67 65 41 63 6b 6e    	movsxd ebp,DWORD PTR gs:[r11d+0x6e]
     6f9:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     6fa:	77 6c                	ja     768 <.debug_str+0x768>
     6fc:	65 64 67 65 00 43 56 	gs fs add BYTE PTR gs:[ebx+0x56],al
     703:	47 5f                	rex.RXB pop r15
     705:	4d                   	rex.WRB
     706:	41 58                	pop    r8
     708:	00 54 4b 5f          	add    BYTE PTR [rbx+rcx*2+0x5f],dl
     70c:	41                   	rex.B
     70d:	4e                   	rex.WRX
     70e:	44 00 6d 65          	add    BYTE PTR [rbp+0x65],r13b
     712:	73 73                	jae    787 <.debug_str+0x787>
     714:	61                   	(bad)  
     715:	67 65 53             	addr32 gs push rbx
     718:	65 6e                	outs   dx,BYTE PTR gs:[rsi]
     71a:	74 00                	je     71c <.debug_str+0x71c>
     71c:	73 76                	jae    794 <.debug_str+0x794>
     71e:	5f                   	pop    rdi
     71f:	70 61                	jo     782 <.debug_str+0x782>
     721:	64 50                	fs push rax
     723:	61                   	(bad)  
     724:	63 6b 65             	movsxd ebp,DWORD PTR [rbx+0x65]
     727:	74 73                	je     79c <.debug_str+0x79c>
     729:	00 63 6f             	add    BYTE PTR [rbx+0x6f],ah
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:302
					Com_Printf( "%s has no IPv6 address.\n", sv_master[i]->string );
     72c:	6c                   	ins    BYTE PTR es:[rdi],dx
     72d:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     72e:	72 52                	jb     782 <.debug_str+0x782>
     730:	65 64 00 73 63       	gs add BYTE PTR fs:[rbx+0x63],dh
     735:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     736:	70 65                	jo     79d <.debug_str+0x79d>
     738:	5f                   	pop    rdi
     739:	69 64 00 63 6f 6d 5f 	imul   esp,DWORD PTR [rax+rax*1+0x63],0x625f6d6f
     740:	62 
     741:	75 69                	jne    7ac <.debug_str+0x7ac>
     743:	6c                   	ins    BYTE PTR es:[rdi],dx
     744:	64 53                	fs push rbx
     746:	63 72 69             	movsxd esi,DWORD PTR [rdx+0x69]
     749:	70 74                	jo     7bf <.debug_str+0x7bf>
     74b:	00 75 6e             	add    BYTE PTR [rbp+0x6e],dh
     74e:	73 69                	jae    7b9 <.debug_str+0x7b9>
     750:	67 6e                	outs   dx,BYTE PTR ds:[esi]
     752:	65 64 20 63 68       	gs and BYTE PTR fs:[rbx+0x68],ah
     757:	61                   	(bad)  
     758:	72 00                	jb     75a <.debug_str+0x75a>
     75a:	63 6c 69 65          	movsxd ebp,DWORD PTR [rcx+rbp*2+0x65]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:307
		if( adr[i][0].type == NA_BAD && adr[i][1].type == NA_BAD )
     75e:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     75f:	74 73                	je     7d4 <.debug_str+0x7d4>
     761:	00 69 6e             	add    BYTE PTR [rcx+0x6e],ch
     764:	69 74 69 61 6c 69 7a 	imul   esi,DWORD PTR [rcx+rbp*2+0x61],0x657a696c
     76b:	65 
     76c:	64 00 5f 49          	add    BYTE PTR fs:[rdi+0x49],bl
     770:	4f 5f                	rex.WRXB pop r15
     772:	6c                   	ins    BYTE PTR es:[rdi],dx
     773:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     774:	63 6b 5f             	movsxd ebp,DWORD PTR [rbx+0x5f]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:307 (discriminator 1)
     777:	74 00                	je     779 <.debug_str+0x779>
     779:	43 56                	rex.XB push r14
     77b:	47 5f                	rex.RXB pop r15
     77d:	4e                   	rex.WRX
     77e:	4f                   	rex.WRXB
     77f:	4e                   	rex.WRX
     780:	45 00 63 6f          	add    BYTE PTR [r11+0x6f],r12b
     784:	6d                   	ins    DWORD PTR es:[rdi],dx
     785:	5f                   	pop    rdi
     786:	73 70                	jae    7f8 <.debug_str+0x7f8>
     788:	65 65 64 73 00       	gs gs fs jae 78d <.debug_str+0x78d>
     78d:	66 6c                	data16 ins BYTE PTR es:[rdi],dx
     78f:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     790:	61                   	(bad)  
     791:	74 00                	je     793 <.debug_str+0x793>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:313
		Com_Printf ("Sending heartbeat to %s\n", sv_master[i]->string );
     793:	61                   	(bad)  
     794:	72 65                	jb     7fb <.debug_str+0x7fb>
     796:	61                   	(bad)  
     797:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     798:	75 6d                	jne    807 <.debug_str+0x807>
     79a:	32 00                	xor    al,BYTE PTR [rax]
     79c:	73 65                	jae    803 <.debug_str+0x803>
     79e:	72 76                	jb     816 <.debug_str+0x816>
     7a0:	65 72 49             	gs jb  7ec <.debug_str+0x7ec>
     7a3:	64 00 70 69          	add    BYTE PTR fs:[rax+0x69],dh
     7a7:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     7a8:	67 00 4f 50          	add    BYTE PTR [edi+0x50],cl
     7ac:	5f                   	pop    rdi
     7ad:	42 58                	rex.X pop rax
     7af:	4f 52                	rex.WRXB push r10
     7b1:	00 63 6f             	add    BYTE PTR [rbx+0x6f],ah
     7b4:	6d                   	ins    DWORD PTR es:[rdi],dx
     7b5:	5f                   	pop    rdi
     7b6:	6a 6f                	push   0x6f
     7b8:	75 72                	jne    82c <.debug_str+0x82c>
     7ba:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     7bb:	61                   	(bad)  
     7bc:	6c                   	ins    BYTE PTR es:[rdi],dx
     7bd:	00 64 65 6c          	add    BYTE PTR [rbp+riz*2+0x6c],ah
     7c1:	74 61                	je     824 <.debug_str+0x824>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:318
		if(adr[i][0].type != NA_BAD)
     7c3:	00 76 6d             	add    BYTE PTR [rsi+0x6d],dh
     7c6:	53                   	push   rbx
     7c7:	79 6d                	jns    836 <.debug_str+0x836>
     7c9:	62                   	(bad)  
     7ca:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     7cb:	6c                   	ins    BYTE PTR es:[rdi],dx
     7cc:	5f                   	pop    rdi
     7cd:	73 00                	jae    7cf <.debug_str+0x7cf>
     7cf:	67 65 6e             	outs   dx,BYTE PTR gs:[esi]
     7d2:	74 69                	je     83d <.debug_str+0x83d>
     7d4:	74 79                	je     84f <.debug_str+0x84f>
     7d6:	53                   	push   rbx
     7d7:	69 7a 65 00 54 4b 5f 	imul   edi,DWORD PTR [rdx+0x65],0x5f4b5400
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:319
			NET_OutOfBandPrint( NS_SERVER, &adr[i][0], "heartbeat %s\n", message);
     7de:	4d                   	rex.WRB
     7df:	41 54                	push   r12
     7e1:	43                   	rex.XB
     7e2:	48 00 4f 50          	rex.W add BYTE PTR [rdi+0x50],cl
     7e6:	5f                   	pop    rdi
     7e7:	41                   	rex.B
     7e8:	44                   	rex.R
     7e9:	44 00 6d 73          	add    BYTE PTR [rbp+0x73],r13b
     7ed:	67 42 75 66          	addr32 rex.X jne 857 <.debug_str+0x857>
     7f1:	66 65 72 00          	data16 gs jb 7f5 <.debug_str+0x7f5>
     7f5:	61                   	(bad)  
     7f6:	6c                   	ins    BYTE PTR es:[rdi],dx
     7f7:	6c                   	ins    BYTE PTR es:[rdi],dx
     7f8:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     7f9:	77 6f                	ja     86a <.debug_str+0x86a>
     7fb:	76 65                	jbe    862 <.debug_str+0x862>
     7fd:	72 66                	jb     865 <.debug_str+0x865>
     7ff:	6c                   	ins    BYTE PTR es:[rdi],dx
     800:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     801:	77 00                	ja     803 <.debug_str+0x803>
     803:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     804:	75 6d                	jne    873 <.debug_str+0x873>
     806:	62                   	(bad)  
     807:	65 72 00             	gs jb  80a <.debug_str+0x80a>
     80a:	6d                   	ins    DWORD PTR es:[rdi],dx
     80b:	61                   	(bad)  
     80c:	78 73                	js     881 <.debug_str+0x881>
     80e:	69 7a 65 00 61 72 65 	imul   edi,DWORD PTR [rdx+0x65],0x65726100
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:320
		if(adr[i][1].type != NA_BAD)
     815:	61                   	(bad)  
     816:	62                   	(bad)  
     817:	79 74                	jns    88d <.debug_str+0x88d>
     819:	65 73 00             	gs jae 81c <.debug_str+0x81c>
     81c:	64 6f                	outs   dx,DWORD PTR fs:[rsi]
     81e:	77 6e                	ja     88e <.debug_str+0x88e>
     820:	6c                   	ins    BYTE PTR es:[rdi],dx
     821:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     822:	61                   	(bad)  
     823:	64 53                	fs push rbx
     825:	65 6e                	outs   dx,BYTE PTR gs:[rsi]
     827:	64 54                	fs push rsp
     829:	69 6d 65 00 63 6f 75 	imul   ebp,DWORD PTR [rbp+0x65],0x756f6300
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:321
			NET_OutOfBandPrint( NS_SERVER, &adr[i][1], "heartbeat %s\n", message);
     830:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     831:	74 72                	je     8a5 <.debug_str+0x8a5>
     833:	79 00                	jns    835 <.debug_str+0x835>
     835:	72 65                	jb     89c <.debug_str+0x89c>
     837:	6d                   	ins    DWORD PTR es:[rdi],dx
     838:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     839:	74 65                	je     8a0 <.debug_str+0x8a0>
     83b:	41                   	rex.B
     83c:	64 64 72 65          	fs fs jb 8a5 <.debug_str+0x8a5>
     840:	73 73                	jae    8b5 <.debug_str+0x8b5>
     842:	00 4f 50             	add    BYTE PTR [rdi+0x50],cl
     845:	5f                   	pop    rdi
     846:	53                   	push   rbx
     847:	55                   	push   rbp
     848:	42 00 73 74          	rex.X add BYTE PTR [rbx+0x74],sil
     84c:	61                   	(bad)  
     84d:	63 6b 00             	movsxd ebp,DWORD PTR [rbx+0x0]
     850:	47                   	rex.RXB
     851:	41                   	rex.B
     852:	4d                   	rex.WRB
     853:	45 5f                	rex.RB pop r15
     855:	43                   	rex.XB
     856:	4c                   	rex.WR
     857:	49                   	rex.WB
     858:	45                   	rex.RB
     859:	4e 54                	rex.WRX push rsp
     85b:	5f                   	pop    rdi
     85c:	54                   	push   rsp
     85d:	48                   	rex.W
     85e:	49                   	rex.WB
     85f:	4e                   	rex.WRX
     860:	4b 00 63 75          	rex.WXB add BYTE PTR [r11+0x75],spl
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:262
			continue;
     864:	72 72                	jb     8d8 <.debug_str+0x8d8>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:259 (discriminator 2)
	for (i = 0; i < MAX_MASTER_SERVERS; i++)
     866:	65 6e                	outs   dx,BYTE PTR gs:[rsi]
     868:	74 41                	je     8ab <.debug_str+0x8ab>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:259 (discriminator 1)
     86a:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     86b:	67 6c                	ins    BYTE PTR es:[edi],dx
     86d:	65 73 00             	gs jae 870 <.debug_str+0x870>
     870:	63 76 61             	movsxd esi,DWORD PTR [rsi+0x61]
     873:	72 5f                	jb     8d4 <.debug_str+0x8d4>
     875:	6d                   	ins    DWORD PTR es:[rdi],dx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:250
		return;		// only dedicated servers send heartbeats
     876:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     877:	64 69 66 69 65 64 46 	imul   esp,DWORD PTR fs:[rsi+0x69],0x6c466465
     87e:	6c 
SV_MasterShutdown():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:334
{
     87f:	61                   	(bad)  
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:336
	svs.nextHeartbeatTime = svs.time;
     880:	67 73 00             	addr32 jae 883 <.debug_str+0x883>
     883:	63 68 65             	movsxd ebp,DWORD PTR [rax+0x65]
     886:	63 6b 73             	movsxd ebp,DWORD PTR [rbx+0x73]
     889:	75 6d                	jne    8f8 <.debug_str+0x8f8>
     88b:	46                   	rex.RX
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:337
	SV_MasterHeartbeat(HEARTBEAT_FOR_MASTER);
     88c:	65 65 64 00 6c 6f 63 	gs gs add BYTE PTR fs:[rdi+rbp*2+0x63],ch
     893:	61                   	(bad)  
     894:	73 65                	jae    8fb <.debug_str+0x8fb>
     896:	00 73 76             	add    BYTE PTR [rbx+0x76],dh
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:340
	svs.nextHeartbeatTime = svs.time;
     899:	5f                   	pop    rdi
     89a:	6d                   	ins    DWORD PTR es:[rdi],dx
     89b:	61                   	(bad)  
     89c:	70 6e                	jo     90c <.debug_str+0x90c>
     89e:	61                   	(bad)  
     89f:	6d                   	ins    DWORD PTR es:[rdi],dx
     8a0:	65 00 75 6e          	add    BYTE PTR gs:[rbp+0x6e],dh
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:341
	SV_MasterHeartbeat(HEARTBEAT_FOR_MASTER);
     8a4:	73 65                	jae    90b <.debug_str+0x90b>
     8a6:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     8a7:	74 46                	je     8ef <.debug_str+0x8ef>
     8a9:	72 61                	jb     90c <.debug_str+0x90c>
     8ab:	67 6d                	ins    DWORD PTR es:[edi],dx
     8ad:	65 6e                	outs   dx,BYTE PTR gs:[rsi]
     8af:	74 73                	je     924 <.debug_str+0x924>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:345
}
     8b1:	00 63 6d             	add    BYTE PTR [rbx+0x6d],ah
SVC_HashForAddress():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:369
static int SVC_HashForAddress( const netadr_t *address ) {
     8b4:	64 5f                	fs pop rdi
     8b6:	72 61                	jb     919 <.debug_str+0x919>
     8b8:	74 65                	je     91f <.debug_str+0x91f>
     8ba:	00 74 72 44          	add    BYTE PTR [rdx+rsi*2+0x44],dh
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:370
	const byte	*ip = NULL;
     8be:	65 6c                	gs ins BYTE PTR es:[rdi],dx
     8c0:	74 61                	je     923 <.debug_str+0x923>
     8c2:	00 5f 49             	add    BYTE PTR [rdi+0x49],bl
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:371
	int			size = 0;
     8c5:	4f 5f                	rex.WRXB pop r15
     8c7:	77 72                	ja     93b <.debug_str+0x93b>
     8c9:	69 74 65 5f 70 74 72 	imul   esi,DWORD PTR [rbp+riz*2+0x5f],0x727470
     8d0:	00 
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:375
	switch ( address->type ) {
     8d1:	63 6f 6e             	movsxd ebp,DWORD PTR [rdi+0x6e]
     8d4:	74 65                	je     93b <.debug_str+0x93b>
     8d6:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     8d7:	74 73                	je     94c <.debug_str+0x94c>
     8d9:	00 69 6e             	add    BYTE PTR [rcx+0x6e],ch
     8dc:	63 6f 6d             	movsxd ebp,DWORD PTR [rdi+0x6d]
     8df:	69 6e 67 53 65 71 75 	imul   ebp,DWORD PTR [rsi+0x67],0x75716553
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:376
		case NA_IP:  ip = address->ipv._4; size = 4;  break;
     8e6:	65 6e                	outs   dx,BYTE PTR gs:[rsi]
     8e8:	63 65 00             	movsxd esp,DWORD PTR [rbp+0x0]
     8eb:	4f 50                	rex.WRXB push r8
     8ed:	5f                   	pop    rdi
     8ee:	4c                   	rex.WR
     8ef:	45                   	rex.RB
     8f0:	41 56                	push   r14
     8f2:	45 00 72 65          	add    BYTE PTR [r10+0x65],r14b
     8f6:	73 65                	jae    95d <.debug_str+0x95d>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:378
		case NA_IP6: ip = address->ipv._6; size = 16; break;
     8f8:	74 53                	je     94d <.debug_str+0x94d>
     8fa:	74 72                	je     96e <.debug_str+0x96e>
     8fc:	69 6e 67 00 72 65 6c 	imul   ebp,DWORD PTR [rsi+0x67],0x6c657200
     903:	69 61 62 6c 65 53 65 	imul   esp,DWORD PTR [rcx+0x62],0x6553656c
     90a:	71 75                	jno    981 <.debug_str+0x981>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:383
	for ( i = 0; i < size; i++ ) {
     90c:	65 6e                	outs   dx,BYTE PTR gs:[rsi]
     90e:	63 65 00             	movsxd esp,DWORD PTR [rbp+0x0]
     911:	69 63 6f 6e 00 63 6c 	imul   esp,DWORD PTR [rbx+0x6f],0x6c63006e
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:384 (discriminator 3)
		hash += (int)( ip[ i ] ) * ( i + 119 );
     918:	69 65 6e 74 4e 75 6d 	imul   esp,DWORD PTR [rbp+0x6e],0x6d754e74
     91f:	00 76 61             	add    BYTE PTR [rsi+0x61],dh
     922:	5f                   	pop    rdi
     923:	6c                   	ins    BYTE PTR es:[rdi],dx
     924:	69 73 74 00 66 72 6f 	imul   esi,DWORD PTR [rbx+0x74],0x6f726600
     92b:	6d                   	ins    DWORD PTR es:[rdi],dx
     92c:	00 73 74             	add    BYTE PTR [rbx+0x74],dh
     92f:	61                   	(bad)  
     930:	72 74                	jb     9a6 <.debug_str+0x9a6>
     932:	54                   	push   rsp
     933:	69 6d 65 00 54 4b 5f 	imul   ebp,DWORD PTR [rbp+0x65],0x5f4b5400
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:383 (discriminator 1)
	for ( i = 0; i < size; i++ ) {
     93a:	53                   	push   rbx
     93b:	43                   	rex.XB
     93c:	4f 50                	rex.WRXB push r8
     93e:	45 5f                	rex.RB pop r15
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:387
	hash = ( hash ^ ( hash >> 10 ) ^ ( hash >> 20 ) );
     940:	43                   	rex.XB
     941:	4c                   	rex.WR
     942:	4f 53                	rex.WRXB push r11
     944:	45 00 74 72 54       	add    BYTE PTR [r10+rsi*2+0x54],r14b
     949:	79 70                	jns    9bb <.debug_str+0x9bb>
     94b:	65 5f                	gs pop rdi
     94d:	74 00                	je     94f <.debug_str+0x94f>
     94f:	73 69                	jae    9ba <.debug_str+0x9ba>
     951:	7a 65                	jp     9b8 <.debug_str+0x9b8>
     953:	00 67 72             	add    BYTE PTR [rdi+0x72],ah
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:388
	hash &= ( MAX_HASHES - 1 );
     956:	61                   	(bad)  
     957:	70 70                	jo     9c9 <.debug_str+0x9c9>
     959:	6c                   	ins    BYTE PTR es:[rdi],dx
     95a:	65 50                	gs push rax
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:390
	return hash;
     95c:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     95d:	69 6e 74 00 53 56 43 	imul   ebp,DWORD PTR [rsi+0x74],0x43565300
SVC_RelinkToHead():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:399
static void SVC_RelinkToHead( leakyBucket_t *bucket, int hash ) {
     964:	5f                   	pop    rdi
     965:	52                   	push   rdx
     966:	65 6c                	gs ins BYTE PTR es:[rdi],dx
     968:	69 6e 6b 54 6f 48 65 	imul   ebp,DWORD PTR [rsi+0x6b],0x65486f54
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:401
	if ( bucket->prev != NULL ) {
     96f:	61                   	(bad)  
     970:	64 00 69 74          	add    BYTE PTR fs:[rcx+0x74],ch
     974:	65 6d                	gs ins DWORD PTR es:[rdi],dx
     976:	54                   	push   rsp
     977:	79 70                	jns    9e9 <.debug_str+0x9e9>
     979:	65 5f                	gs pop rdi
     97b:	74 00                	je     97d <.debug_str+0x97d>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:402
		bucket->prev->next = bucket->next;
     97d:	46                   	rex.RX
     97e:	49                   	rex.WB
     97f:	4c                   	rex.WR
     980:	45 00 63 6c          	add    BYTE PTR [r11+0x6c],r12b
     984:	69 65 6e 74 5f 73 00 	imul   esp,DWORD PTR [rbp+0x6e],0x735f74
     98b:	63 6c 69 65          	movsxd ebp,DWORD PTR [rcx+rbp*2+0x65]
     98f:	6e                   	outs   dx,BYTE PTR ds:[rsi]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:407
	if ( bucket->next != NULL ) {
     990:	74 5f                	je     9f1 <.debug_str+0x9f1>
     992:	74 00                	je     994 <.debug_str+0x994>
     994:	64 65 6c             	fs gs ins BYTE PTR es:[rdi],dx
     997:	61                   	(bad)  
     998:	79 54                	jns    9ee <.debug_str+0x9ee>
     99a:	00 6c 61 73          	add    BYTE PTR [rcx+riz*2+0x73],ch
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:408
		bucket->next->prev = bucket->prev;
     99e:	74 53                	je     9f3 <.debug_str+0x9f3>
     9a0:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     9a1:	61                   	(bad)  
     9a2:	70 73                	jo     a17 <.debug_str+0xa17>
     9a4:	68 6f 74 54 69       	push   0x6954746f
     9a9:	6d                   	ins    DWORD PTR es:[rdi],dx
     9aa:	65 00 6c 65 67       	add    BYTE PTR gs:[rbp+riz*2+0x67],ch
     9af:	73 41                	jae    9f2 <.debug_str+0x9f2>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:411
	bucket->next = bucketHashes[ hash ];
     9b1:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     9b2:	69 6d 00 49 54 5f 48 	imul   ebp,DWORD PTR [rbp+0x0],0x485f5449
     9b9:	4f                   	rex.WRXB
     9ba:	4c                   	rex.WR
     9bb:	44                   	rex.R
     9bc:	41                   	rex.B
     9bd:	42                   	rex.X
     9be:	4c                   	rex.WR
     9bf:	45 00 53 56          	add    BYTE PTR [r11+0x56],r10b
     9c3:	5f                   	pop    rdi
     9c4:	50                   	push   rax
     9c5:	61                   	(bad)  
     9c6:	63 6b 65             	movsxd ebp,DWORD PTR [rbx+0x65]
     9c9:	74 45                	je     a10 <.debug_str+0xa10>
     9cb:	76 65                	jbe    a32 <.debug_str+0xa32>
     9cd:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     9ce:	74 00                	je     9d0 <.debug_str+0x9d0>
     9d0:	70 72                	jo     a44 <.debug_str+0xa44>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:412
	if ( bucketHashes[ hash ] != NULL ) {
     9d2:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     9d3:	67 72 61             	addr32 jb a37 <.debug_str+0xa37>
     9d6:	6d                   	ins    DWORD PTR es:[rdi],dx
     9d7:	53                   	push   rbx
     9d8:	74 61                	je     a3b <.debug_str+0xa3b>
     9da:	63 6b 00             	movsxd ebp,DWORD PTR [rbx+0x0]
     9dd:	54                   	push   rsp
     9de:	4b 5f                	rex.WXB pop r15
     9e0:	4e                   	rex.WRX
     9e1:	45 51                	rex.RB push r9
     9e3:	00 47 41             	add    BYTE PTR [rdi+0x41],al
     9e6:	4d                   	rex.WRB
     9e7:	45 5f                	rex.RB pop r15
     9e9:	45 58                	rex.RB pop r8
     9eb:	50                   	push   rax
     9ec:	4f 52                	rex.WRXB push r10
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:413
		bucketHashes[ hash ]->prev = bucket;
     9ee:	54                   	push   rsp
     9ef:	5f                   	pop    rdi
     9f0:	4c                   	rex.WR
     9f1:	41 53                	push   r11
     9f3:	54                   	push   rsp
     9f4:	00 63 6f             	add    BYTE PTR [rbx+0x6f],ah
     9f7:	64 65 4c             	fs gs rex.WR
     9fa:	65 6e                	outs   dx,BYTE PTR gs:[rsi]
     9fc:	67 74 68             	addr32 je a67 <.debug_str+0xa67>
     9ff:	00 73 69             	add    BYTE PTR [rbx+0x69],dh
     a02:	7a 65                	jp     a69 <.debug_str+0xa69>
     a04:	5f                   	pop    rdi
     a05:	74 00                	je     a07 <.debug_str+0xa07>
     a07:	76 6d                	jbe    a76 <.debug_str+0xa76>
     a09:	53                   	push   rbx
     a0a:	79 6d                	jns    a79 <.debug_str+0xa79>
     a0c:	62                   	(bad)  
     a0d:	6f                   	outs   dx,DWORD PTR ds:[rsi]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:416
	bucket->prev = NULL;
     a0e:	6c                   	ins    BYTE PTR es:[rdi],dx
     a0f:	5f                   	pop    rdi
     a10:	74 00                	je     a12 <.debug_str+0xa12>
     a12:	73 68                	jae    a7c <.debug_str+0xa7c>
     a14:	61                   	(bad)  
     a15:	72 65                	jb     a7c <.debug_str+0xa7c>
     a17:	64 45 6e             	rex.RB outs dx,BYTE PTR fs:[rsi]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:417
	bucketHashes[ hash ] = bucket;
     a1a:	74 69                	je     a85 <.debug_str+0xa85>
     a1c:	74 79                	je     a97 <.debug_str+0xa97>
     a1e:	5f                   	pop    rdi
     a1f:	74 00                	je     a21 <.debug_str+0xa21>
     a21:	4f 50                	rex.WRXB push r8
     a23:	5f                   	pop    rdi
     a24:	4c                   	rex.WR
     a25:	45                   	rex.RB
     a26:	46 00 53 56          	rex.RX add BYTE PTR [rbx+0x56],r10b
     a2a:	5f                   	pop    rdi
     a2b:	43 6f                	rex.XB outs dx,DWORD PTR ds:[rsi]
     a2d:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     a2e:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     a2f:	65 63 74 69 6f       	movsxd esi,DWORD PTR gs:[rcx+rbp*2+0x6f]
     a34:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     a35:	6c                   	ins    BYTE PTR es:[rdi],dx
     a36:	65 73 73             	gs jae aac <.debug_str+0xaac>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:418
}
     a39:	50                   	push   rax
     a3a:	61                   	(bad)  
SVC_BucketForAddress():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:428
static leakyBucket_t *SVC_BucketForAddress( const netadr_t *address, int burst, int period ) {
     a3b:	63 6b 65             	movsxd ebp,DWORD PTR [rbx+0x65]
     a3e:	74 00                	je     a40 <.debug_str+0xa40>
     a40:	4f 50                	rex.WRXB push r8
     a42:	5f                   	pop    rdi
     a43:	4c                   	rex.WR
     a44:	45                   	rex.RB
     a45:	49 00 61 62          	rex.WB add BYTE PTR [r9+0x62],spl
     a49:	73 6d                	jae    ab8 <.debug_str+0xab8>
     a4b:	69 6e 00 6e 65 74 73 	imul   ebp,DWORD PTR [rsi+0x0],0x7374656e
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:431
	const int		hash = SVC_HashForAddress( address );
     a52:	72 63                	jb     ab7 <.debug_str+0xab7>
     a54:	5f                   	pop    rdi
     a55:	74 00                	je     a57 <.debug_str+0xa57>
     a57:	73 6e                	jae    ac7 <.debug_str+0xac7>
     a59:	61                   	(bad)  
     a5a:	70 46                	jo     aa2 <.debug_str+0xaa2>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:432
	const int		now = Sys_Milliseconds();
     a5c:	6c                   	ins    BYTE PTR es:[rdi],dx
     a5d:	61                   	(bad)  
     a5e:	67 53                	addr32 push rbx
     a60:	65 72 76             	gs jb  ad9 <.debug_str+0xad9>
     a63:	65 72 42             	gs jb  aa8 <.debug_str+0xaa8>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:436
	for ( bucket = bucketHashes[ hash ], n = 0; bucket; bucket = bucket->next, n++ ) {
     a66:	69 74 00 62 75 63 6b 	imul   esi,DWORD PTR [rax+rax*1+0x62],0x656b6375
     a6d:	65 
     a6e:	74 73                	je     ae3 <.debug_str+0xae3>
     a70:	00 64 65 73          	add    BYTE PTR [rbp+riz*2+0x73],ah
     a74:	74 72                	je     ae8 <.debug_str+0xae8>
     a76:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     a77:	79 00                	jns    a79 <.debug_str+0xa79>
     a79:	4f 50                	rex.WRXB push r8
     a7b:	5f                   	pop    rdi
     a7c:	4c                   	rex.WR
     a7d:	45 55                	rex.RB push r13
     a7f:	00 67 5f             	add    BYTE PTR [rdi+0x5f],ah
     a82:	63 6f 6c             	movsxd ebp,DWORD PTR [rdi+0x6c]
     a85:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     a86:	72 5f                	jb     ae7 <.debug_str+0xae7>
     a88:	74 61                	je     aeb <.debug_str+0xaeb>
     a8a:	62                   	(bad)  
     a8b:	6c                   	ins    BYTE PTR es:[rdi],dx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:437
		switch ( bucket->type ) {
     a8c:	65 00 4f 50          	add    BYTE PTR gs:[rdi+0x50],cl
     a90:	5f                   	pop    rdi
     a91:	4d                   	rex.WRB
     a92:	4f                   	rex.WRXB
     a93:	44                   	rex.R
     a94:	49 00 53 56          	rex.WB add BYTE PTR [r11+0x56],dl
     a98:	43 5f                	rex.XB pop r15
     a9a:	52                   	push   rdx
     a9b:	61                   	(bad)  
     a9c:	74 65                	je     b03 <.debug_str+0xb03>
     a9e:	44 72 6f             	rex.R jb b10 <.debug_str+0xb10>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:439
				if ( memcmp( bucket->ipv._4, address->ipv._4, 4 ) == 0 ) {
     aa1:	70 41                	jo     ae4 <.debug_str+0xae4>
     aa3:	64 64 72 65          	fs fs jb b0c <.debug_str+0xb0c>
     aa7:	73 73                	jae    b1c <.debug_str+0xb1c>
     aa9:	00 73 76             	add    BYTE PTR [rbx+0x76],dh
     aac:	5f                   	pop    rdi
     aad:	72 63                	jb     b12 <.debug_str+0xb12>
     aaf:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     ab0:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     ab1:	50                   	push   rax
     ab2:	61                   	(bad)  
     ab3:	73 73                	jae    b28 <.debug_str+0xb28>
     ab5:	77 6f                	ja     b26 <.debug_str+0xb26>
     ab7:	72 64                	jb     b1d <.debug_str+0xb1d>
     ab9:	00 64 6f 77          	add    BYTE PTR [rdi+rbp*2+0x77],ah
     abd:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     abe:	6c                   	ins    BYTE PTR es:[rdi],dx
     abf:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     ac0:	61                   	(bad)  
     ac1:	64 43 6c             	fs rex.XB ins BYTE PTR es:[rdi],dx
     ac4:	69 65 6e 74 42 6c 6f 	imul   esp,DWORD PTR [rbp+0x6e],0x6f6c4274
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:441
						SVC_RelinkToHead( bucket, hash );
     acb:	63 6b 00             	movsxd ebp,DWORD PTR [rbx+0x0]
     ace:	63 6f 6d             	movsxd ebp,DWORD PTR [rdi+0x6d]
     ad1:	5f                   	pop    rdi
     ad2:	65 72 72             	gs jb  b47 <.debug_str+0xb47>
     ad5:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     ad6:	72 45                	jb     b1d <.debug_str+0xb1d>
     ad8:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     ad9:	74 65                	je     b40 <.debug_str+0xb40>
     adb:	72 65                	jb     b42 <.debug_str+0xb42>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:443
					return bucket;
     add:	64 00 63 6f          	add    BYTE PTR fs:[rbx+0x6f],ah
     ae1:	6d                   	ins    DWORD PTR es:[rdi],dx
     ae2:	5f                   	pop    rdi
     ae3:	73 76                	jae    b5b <.debug_str+0xb5b>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:448
				if ( memcmp( bucket->ipv._6, address->ipv._6, 16 ) == 0 ) {
     ae5:	5f                   	pop    rdi
     ae6:	72 75                	jb     b5d <.debug_str+0xb5d>
     ae8:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     ae9:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     aea:	69 6e 67 00 74 69 6d 	imul   ebp,DWORD PTR [rsi+0x67],0x6d697400
     af1:	65 5f                	gs pop rdi
     af3:	62 61                	(bad)  
     af5:	63 6b 65             	movsxd ebp,DWORD PTR [rbx+0x65]
     af8:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     af9:	64 00 73 76          	add    BYTE PTR fs:[rbx+0x76],dh
     afd:	5f                   	pop    rdi
     afe:	74 69                	je     b69 <.debug_str+0xb69>
     b00:	6d                   	ins    DWORD PTR es:[rdi],dx
     b01:	65 6f                	outs   dx,DWORD PTR gs:[rsi]
     b03:	75 74                	jne    b79 <.debug_str+0xb79>
     b05:	00 64 6f 77          	add    BYTE PTR [rdi+rbp*2+0x77],ah
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:449
					if ( n > 8 ) {
     b09:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     b0a:	6c                   	ins    BYTE PTR es:[rdi],dx
     b0b:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     b0c:	61                   	(bad)  
     b0d:	64 42 6c             	fs rex.X ins BYTE PTR es:[rdi],dx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:450
						SVC_RelinkToHead( bucket, hash );
     b10:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     b11:	63 6b 53             	movsxd ebp,DWORD PTR [rbx+0x53]
     b14:	69 7a 65 00 64 72 6f 	imul   edi,DWORD PTR [rdx+0x65],0x6f726400
     b1b:	70 70                	jo     b8d <.debug_str+0xb8d>
     b1d:	65 64 00 74 72 44    	gs add BYTE PTR fs:[rdx+rsi*2+0x44],dh
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:452
					return bucket;
     b23:	75 72                	jne    b97 <.debug_str+0xb97>
     b25:	61                   	(bad)  
     b26:	74 69                	je     b91 <.debug_str+0xb91>
     b28:	6f                   	outs   dx,DWORD PTR ds:[rsi]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:457
				return &dummy;
     b29:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     b2a:	00 5f 49             	add    BYTE PTR [rdi+0x49],bl
     b2d:	4f 5f                	rex.WRXB pop r15
     b2f:	73 61                	jae    b92 <.debug_str+0xb92>
     b31:	76 65                	jbe    b98 <.debug_str+0xb98>
     b33:	5f                   	pop    rdi
     b34:	62 61                	(bad)  
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:445
				break;
     b36:	73 65                	jae    b9d <.debug_str+0xb9d>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:454
				break;
     b38:	00 77 6f             	add    BYTE PTR [rdi+0x6f],dh
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:436 (discriminator 2)
	for ( bucket = bucketHashes[ hash ], n = 0; bucket; bucket = bucket->next, n++ ) {
     b3b:	72 6c                	jb     ba9 <.debug_str+0xba9>
     b3d:	64 5f                	fs pop rdi
     b3f:	6d                   	ins    DWORD PTR es:[rdi],dx
     b40:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     b41:	64 65 6c             	fs gs ins BYTE PTR es:[rdi],dx
     b44:	00 4f 50             	add    BYTE PTR [rdi+0x50],cl
     b47:	5f                   	pop    rdi
     b48:	52                   	push   rdx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:436 (discriminator 1)
     b49:	53                   	push   rbx
     b4a:	48                   	rex.W
     b4b:	49 00 63 6f          	rex.WB add BYTE PTR [r11+0x6f],spl
     b4f:	6d                   	ins    DWORD PTR es:[rdi],dx
     b50:	5f                   	pop    rdi
     b51:	76 65                	jbe    bb8 <.debug_str+0xbb8>
     b53:	72 73                	jb     bc8 <.debug_str+0xbc8>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:461
	for ( i = 0; i < MAX_BUCKETS; i++ ) {
     b55:	69 6f 6e 00 4f 50 5f 	imul   ebp,DWORD PTR [rdi+0x6e],0x5f504f00
     b5c:	52                   	push   rdx
     b5d:	53                   	push   rbx
     b5e:	48 55                	rex.W push rbp
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:464
		if ( start >= MAX_BUCKETS )
     b60:	00 6c 61 73          	add    BYTE PTR [rcx+riz*2+0x73],ch
     b64:	74 43                	je     ba9 <.debug_str+0xba9>
     b66:	6c                   	ins    BYTE PTR es:[rdi],dx
     b67:	75 73                	jne    bdc <.debug_str+0xbdc>
     b69:	74 65                	je     bd0 <.debug_str+0xbd0>
     b6b:	72 00                	jb     b6d <.debug_str+0xb6d>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:465
			start = 0;
     b6d:	63 6c 69 65          	movsxd ebp,DWORD PTR [rcx+rbp*2+0x65]
     b71:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     b72:	74 00                	je     b74 <.debug_str+0xb74>
     b74:	64 6f                	outs   dx,DWORD PTR fs:[rsi]
     b76:	77 6e                	ja     be6 <.debug_str+0xbe6>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:466
		bucket = &buckets[ start++ ];
     b78:	6c                   	ins    BYTE PTR es:[rdi],dx
     b79:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     b7a:	61                   	(bad)  
     b7b:	64 00 53 56          	add    BYTE PTR fs:[rbx+0x56],dl
     b7f:	5f                   	pop    rdi
     b80:	53                   	push   rbx
     b81:	65 6e                	outs   dx,BYTE PTR gs:[rsi]
     b83:	64 51                	fs push rcx
     b85:	75 65                	jne    bec <.debug_str+0xbec>
     b87:	75 65                	jne    bee <.debug_str+0xbee>
     b89:	64 50                	fs push rax
     b8b:	61                   	(bad)  
     b8c:	63 6b 65             	movsxd ebp,DWORD PTR [rbx+0x65]
     b8f:	74 73                	je     c04 <.debug_str+0xc04>
     b91:	00 70 6c             	add    BYTE PTR [rax+0x6c],dh
     b94:	61                   	(bad)  
     b95:	79 65                	jns    bfc <.debug_str+0xbfc>
     b97:	72 4c                	jb     be5 <.debug_str+0xbe5>
     b99:	65 6e                	outs   dx,BYTE PTR gs:[rsi]
     b9b:	67 74 68             	addr32 je c06 <.debug_str+0xc06>
     b9e:	00 4f 50             	add    BYTE PTR [rdi+0x50],cl
     ba1:	5f                   	pop    rdi
     ba2:	4d                   	rex.WRB
     ba3:	41 58                	pop    r8
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:467
		interval = now - bucket->rate.lastTime;
     ba5:	00 6f 72             	add    BYTE PTR [rdi+0x72],ch
     ba8:	69 67 69 6e 32 00 72 	imul   esp,DWORD PTR [rdi+0x69],0x7200326e
     baf:	61                   	(bad)  
     bb0:	74 65                	je     c17 <.debug_str+0xc17>
     bb2:	4c 69 6d 69 74 5f 74 	imul   r13,QWORD PTR [rbp+0x69],0x745f74
     bb9:	00 
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:470
		if ( bucket->type != NA_BAD && (unsigned)interval > ( bucket->rate.burst * period ) ) {
     bba:	61                   	(bad)  
     bbb:	6d                   	ins    DWORD PTR es:[rdi],dx
     bbc:	6d                   	ins    DWORD PTR es:[rdi],dx
     bbd:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     bbe:	00 64 65 6c          	add    BYTE PTR [rbp+riz*2+0x6c],ah
     bc2:	74 61                	je     c25 <.debug_str+0xc25>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:470 (discriminator 1)
     bc4:	5f                   	pop    rdi
     bc5:	61                   	(bad)  
     bc6:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     bc7:	67 6c                	ins    BYTE PTR es:[edi],dx
     bc9:	65 73 00             	gs jae bcc <.debug_str+0xbcc>
     bcc:	54                   	push   rsp
     bcd:	4b 5f                	rex.WXB pop r15
     bcf:	4c 54                	rex.WR push rsp
     bd1:	45 00 4f 50          	add    BYTE PTR [r15+0x50],r9b
     bd5:	5f                   	pop    rdi
     bd6:	43 56                	rex.XB push r14
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:471
			if ( bucket->prev != NULL ) {
     bd8:	46                   	rex.RX
     bd9:	49 00 53 53          	rex.WB add BYTE PTR [r11+0x53],dl
     bdd:	5f                   	pop    rdi
     bde:	44                   	rex.R
     bdf:	45                   	rex.RB
     be0:	41                   	rex.B
     be1:	44 00 5f 77          	add    BYTE PTR [rdi+0x77],r11b
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:472
				bucket->prev->next = bucket->next;
     be5:	69 64 65 5f 64 61 74 	imul   esp,DWORD PTR [rbp+riz*2+0x5f],0x61746164
     bec:	61 
     bed:	00 63 6f             	add    BYTE PTR [rbx+0x6f],ah
     bf0:	6d                   	ins    DWORD PTR es:[rdi],dx
     bf1:	5f                   	pop    rdi
     bf2:	66 72 61             	data16 jb c56 <.debug_str+0xc56>
     bf5:	6d                   	ins    DWORD PTR es:[rdi],dx
     bf6:	65 54                	gs push rsp
     bf8:	69 6d 65 00 62 6f 62 	imul   ebp,DWORD PTR [rbp+0x65],0x626f6200
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:474
				bucketHashes[ bucket->hash ] = bucket->next;
     bff:	43 79 63             	rex.XB jns c65 <.debug_str+0xc65>
     c02:	6c                   	ins    BYTE PTR es:[rdi],dx
     c03:	65 00 4e 41          	add    BYTE PTR gs:[rsi+0x41],cl
     c07:	5f                   	pop    rdi
     c08:	42 52                	rex.X push rdx
     c0a:	4f                   	rex.WRXB
     c0b:	41                   	rex.B
     c0c:	44                   	rex.R
     c0d:	43                   	rex.XB
     c0e:	41 53                	push   r11
     c10:	54                   	push   rsp
     c11:	00 4e 41             	add    BYTE PTR [rsi+0x41],cl
     c14:	5f                   	pop    rdi
     c15:	4d 55                	rex.WRB push r13
     c17:	4c 54                	rex.WR push rsp
     c19:	49                   	rex.WB
     c1a:	43                   	rex.XB
     c1b:	41 53                	push   r11
     c1d:	54                   	push   rsp
     c1e:	36 00 49 54          	add    BYTE PTR ss:[rcx+0x54],cl
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:477
			if ( bucket->next != NULL ) {
     c22:	5f                   	pop    rdi
     c23:	57                   	push   rdi
     c24:	45                   	rex.RB
     c25:	41 50                	push   r8
     c27:	4f                   	rex.WRXB
     c28:	4e 00 62 61          	rex.WRX add BYTE PTR [rdx+0x61],r12b
     c2c:	73 65                	jae    c93 <.debug_str+0xc93>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:478
				bucket->next->prev = bucket->prev;
     c2e:	6c                   	ins    BYTE PTR es:[rdi],dx
     c2f:	69 6e 65 55 73 65 64 	imul   ebp,DWORD PTR [rsi+0x65],0x64657355
     c36:	00 63 6f             	add    BYTE PTR [rbx+0x6f],ah
     c39:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     c3a:	66 69 67 73 74 72    	imul   sp,WORD PTR [rdi+0x73],0x7274
     c40:	69 6e 67 73 00 65 78 	imul   ebp,DWORD PTR [rsi+0x67],0x78650073
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:481
			bucket->type = NA_BAD;
     c47:	70 69                	jo     cb2 <.debug_str+0xcb2>
     c49:	72 65                	jb     cb0 <.debug_str+0xcb0>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:484
		if ( bucket->type == NA_BAD ) {
     c4b:	64 52                	fs push rdx
     c4d:	65 6d                	gs ins DWORD PTR es:[rdi],dx
     c4f:	61                   	(bad)  
     c50:	69 6e 64 65 72 00 6e 	imul   ebp,DWORD PTR [rsi+0x64],0x6e007265
     c57:	65 78 74             	gs js  cce <.debug_str+0xcce>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:485
			bucket->type = address->type;
     c5a:	45 6e                	rex.RB outs dx,BYTE PTR ds:[rsi]
     c5c:	74 69                	je     cc7 <.debug_str+0xcc7>
     c5e:	74 79                	je     cd9 <.debug_str+0xcd9>
     c60:	49 6e                	rex.WB outs dx,BYTE PTR ds:[rsi]
     c62:	57                   	push   rdi
     c63:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     c64:	72 6c                	jb     cd2 <.debug_str+0xcd2>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:486
			switch ( address->type ) {
     c66:	64 53                	fs push rbx
     c68:	65 63 74 6f 72       	movsxd esi,DWORD PTR gs:[rdi+rbp*2+0x72]
     c6d:	00 64 6f 77          	add    BYTE PTR [rdi+rbp*2+0x77],ah
     c71:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     c72:	6c                   	ins    BYTE PTR es:[rdi],dx
     c73:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     c74:	61                   	(bad)  
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:491
				default: break;
     c75:	64 45                	fs rex.RB
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:487
				case NA_IP:  Com_Memcpy( bucket->ipv._4, address->ipv._4, 4 );  break;
     c77:	4f                   	rex.WRXB
     c78:	46 00 6e 65          	rex.RX add BYTE PTR [rsi+0x65],r13b
     c7c:	74 61                	je     cdf <.debug_str+0xcdf>
     c7e:	64 72 5f             	fs jb  ce0 <.debug_str+0xce0>
     c81:	74 00                	je     c83 <.debug_str+0xc83>
     c83:	47                   	rex.RXB
     c84:	41                   	rex.B
     c85:	4d                   	rex.WRB
     c86:	45 5f                	rex.RB pop r15
     c88:	43                   	rex.XB
     c89:	4c                   	rex.WR
     c8a:	49                   	rex.WB
     c8b:	45                   	rex.RB
     c8c:	4e 54                	rex.WRX push rsp
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:489
				case NA_IP6: Com_Memcpy( bucket->ipv._6, address->ipv._6, 16 ); break;
     c8e:	5f                   	pop    rdi
     c8f:	55                   	push   rbp
     c90:	53                   	push   rbx
     c91:	45 52                	rex.RB push r10
     c93:	49                   	rex.WB
     c94:	4e                   	rex.WRX
     c95:	46                   	rex.RX
     c96:	4f 5f                	rex.WRXB pop r15
     c98:	43                   	rex.XB
     c99:	48                   	rex.W
     c9a:	41                   	rex.B
     c9b:	4e                   	rex.WRX
     c9c:	47                   	rex.RXB
     c9d:	45                   	rex.RB
     c9e:	44 00 73 6e          	add    BYTE PTR [rbx+0x6e],r14b
     ca2:	61                   	(bad)  
     ca3:	70 46                	jo     ceb <.debug_str+0xceb>
     ca5:	72 61                	jb     d08 <.debug_str+0xd08>
     ca7:	6d                   	ins    DWORD PTR es:[rdi],dx
     ca8:	65 73 00             	gs jae cab <.debug_str+0xcab>
     cab:	6f                   	outs   dx,DWORD PTR ds:[rsi]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:494
			bucket->rate.lastTime = now;
     cac:	76 65                	jbe    d13 <.debug_str+0xd13>
     cae:	72 66                	jb     d16 <.debug_str+0xd16>
     cb0:	6c                   	ins    BYTE PTR es:[rdi],dx
     cb1:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     cb2:	77 65                	ja     d19 <.debug_str+0xd19>
     cb4:	64 00 73 69          	add    BYTE PTR fs:[rbx+0x69],dh
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:495
			bucket->rate.burst = 0;
     cb8:	67 6e                	outs   dx,BYTE PTR ds:[esi]
     cba:	67 61                	addr32 (bad) 
     cbc:	6d                   	ins    DWORD PTR es:[rdi],dx
     cbd:	00 73 79             	add    BYTE PTR [rbx+0x79],dh
     cc0:	73 74                	jae    d36 <.debug_str+0xd36>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:496
			bucket->hash = hash;
     cc2:	65 6d                	gs ins DWORD PTR es:[rdi],dx
     cc4:	43 61                	rex.XB (bad) 
     cc6:	6c                   	ins    BYTE PTR es:[rdi],dx
     cc7:	6c                   	ins    BYTE PTR es:[rdi],dx
     cc8:	00 65 78             	add    BYTE PTR [rbp+0x78],ah
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:497
			bucket->toxic = 0;
     ccb:	61                   	(bad)  
     ccc:	63 74 44 61          	movsxd esi,DWORD PTR [rsp+rax*2+0x61]
     cd0:	74 61                	je     d33 <.debug_str+0xd33>
     cd2:	4c                   	rex.WR
     cd3:	65 6e                	outs   dx,BYTE PTR gs:[rsi]
     cd5:	67 74 68             	addr32 je d40 <.debug_str+0xd40>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:500
			bucket->next = bucketHashes[ hash ];
     cd8:	00 6f 70             	add    BYTE PTR [rdi+0x70],ch
     cdb:	53                   	push   rbx
     cdc:	74 61                	je     d3f <.debug_str+0xd3f>
     cde:	63 6b 00             	movsxd ebp,DWORD PTR [rbx+0x0]
     ce1:	66 72 61             	data16 jb d45 <.debug_str+0xd45>
     ce4:	6d                   	ins    DWORD PTR es:[rdi],dx
     ce5:	65 73 00             	gs jae ce8 <.debug_str+0xce8>
     ce8:	63 6f 6d             	movsxd ebp,DWORD PTR [rdi+0x6d]
     ceb:	5f                   	pop    rdi
     cec:	74 69                	je     d57 <.debug_str+0xd57>
     cee:	6d                   	ins    DWORD PTR es:[rdi],dx
     cef:	65 73 63             	gs jae d55 <.debug_str+0xd55>
     cf2:	61                   	(bad)  
     cf3:	6c                   	ins    BYTE PTR es:[rdi],dx
     cf4:	65 00 76 61          	add    BYTE PTR gs:[rsi+0x61],dh
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:501
			if ( bucketHashes[ hash ] != NULL ) {
     cf8:	6c                   	ins    BYTE PTR es:[rdi],dx
     cf9:	75 65                	jne    d60 <.debug_str+0xd60>
     cfb:	00 47 41             	add    BYTE PTR [rdi+0x41],al
     cfe:	4d                   	rex.WRB
     cff:	45 5f                	rex.RB pop r15
     d01:	43                   	rex.XB
     d02:	4c                   	rex.WR
     d03:	49                   	rex.WB
     d04:	45                   	rex.RB
     d05:	4e 54                	rex.WRX push rsp
     d07:	5f                   	pop    rdi
     d08:	43                   	rex.XB
     d09:	4f                   	rex.WRXB
     d0a:	4d                   	rex.WRB
     d0b:	4d                   	rex.WRB
     d0c:	41                   	rex.B
     d0d:	4e                   	rex.WRX
     d0e:	44 00 4e 41          	add    BYTE PTR [rsi+0x41],r9b
     d12:	5f                   	pop    rdi
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:502
				bucketHashes[ hash ]->prev = bucket;
     d13:	42                   	rex.X
     d14:	4f 54                	rex.WRXB push r12
     d16:	00 61 72             	add    BYTE PTR [rcx+0x72],ah
     d19:	65 61                	gs (bad) 
     d1b:	62                   	(bad)  
     d1c:	69 74 73 00 73 79 6d 	imul   esi,DWORD PTR [rbx+rsi*2+0x0],0x4e6d7973
     d23:	4e 
     d24:	61                   	(bad)  
     d25:	6d                   	ins    DWORD PTR es:[rdi],dx
     d26:	65 00 64 61 74       	add    BYTE PTR gs:[rcx+riz*2+0x74],ah
     d2b:	61                   	(bad)  
     d2c:	4c                   	rex.WR
     d2d:	65 6e                	outs   dx,BYTE PTR gs:[rsi]
     d2f:	67 74 68             	addr32 je d9a <.debug_str+0xd9a>
     d32:	00 47 41             	add    BYTE PTR [rdi+0x41],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:505
			bucket->prev = NULL;
     d35:	4d                   	rex.WRB
     d36:	45 5f                	rex.RB pop r15
     d38:	43                   	rex.XB
     d39:	4c                   	rex.WR
     d3a:	49                   	rex.WB
     d3b:	45                   	rex.RB
     d3c:	4e 54                	rex.WRX push rsp
     d3e:	5f                   	pop    rdi
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:506
			bucketHashes[ hash ] = bucket;
     d3f:	43                   	rex.XB
     d40:	4f                   	rex.WRXB
     d41:	4e                   	rex.WRX
     d42:	4e                   	rex.WRX
     d43:	45                   	rex.RB
     d44:	43 54                	rex.XB push r12
     d46:	00 61 72             	add    BYTE PTR [rcx+0x72],ah
     d49:	65 61                	gs (bad) 
     d4b:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     d4c:	75 6d                	jne    dbb <.debug_str+0xdbb>
     d4e:	00 72 65             	add    BYTE PTR [rdx+0x65],dh
     d51:	61                   	(bad)  
     d52:	64 63 6f 75          	movsxd ebp,DWORD PTR fs:[rdi+0x75]
     d56:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     d57:	74 00                	je     d59 <.debug_str+0xd59>
     d59:	74 72                	je     dcd <.debug_str+0xdcd>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:508
			return bucket;
     d5b:	54                   	push   rsp
     d5c:	69 6d 65 00 72 61 74 	imul   ebp,DWORD PTR [rbp+0x65],0x74617200
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:461 (discriminator 2)
	for ( i = 0; i < MAX_BUCKETS; i++ ) {
     d63:	65 4d 73 65          	gs rex.WRB jae dcc <.debug_str+0xdcc>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:461 (discriminator 1)
     d67:	63 00                	movsxd eax,DWORD PTR [rax]
     d69:	63 6f 6d             	movsxd ebp,DWORD PTR [rdi+0x6d]
     d6c:	5f                   	pop    rdi
     d6d:	6a 6f                	push   0x6f
     d6f:	75 72                	jne    de3 <.debug_str+0xde3>
     d71:	6e                   	outs   dx,BYTE PTR ds:[rsi]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:513
	return NULL;
     d72:	61                   	(bad)  
     d73:	6c                   	ins    BYTE PTR es:[rdi],dx
     d74:	44 61                	rex.R (bad) 
     d76:	74 61                	je     dd9 <.debug_str+0xdd9>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:514
}
     d78:	46 69 6c 65 00 74 69 	imul   r13d,DWORD PTR [rbp+r12*2+0x0],0x656d6974
     d7f:	6d 65 
SVC_RateLimit():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:522
qboolean SVC_RateLimit( rateLimit_t *bucket, int burst, int period ) {
     d81:	5f                   	pop    rdi
     d82:	67 61                	addr32 (bad) 
     d84:	6d                   	ins    DWORD PTR es:[rdi],dx
     d85:	65 00 64 61 74       	add    BYTE PTR gs:[rcx+riz*2+0x74],ah
     d8a:	61                   	(bad)  
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:523
	int now = Sys_Milliseconds();
     d8b:	41 6c                	rex.B ins BYTE PTR es:[rdi],dx
     d8d:	6c                   	ins    BYTE PTR es:[rdi],dx
     d8e:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     d8f:	63 00                	movsxd eax,DWORD PTR [rax]
     d91:	6c                   	ins    BYTE PTR es:[rdi],dx
     d92:	61                   	(bad)  
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:524
	int interval = now - bucket->lastTime;
     d93:	73 74                	jae    e09 <.debug_str+0xe09>
     d95:	43 6c                	rex.XB ins BYTE PTR es:[rdi],dx
     d97:	69 65 6e 74 43 6f 6d 	imul   esp,DWORD PTR [rbp+0x6e],0x6d6f4374
     d9e:	6d                   	ins    DWORD PTR es:[rdi],dx
     d9f:	61                   	(bad)  
     da0:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     da1:	64 53                	fs push rbx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:525
	int expired = interval / period;
     da3:	74 72                	je     e17 <.debug_str+0xe17>
     da5:	69 6e 67 00 66 72 61 	imul   ebp,DWORD PTR [rsi+0x67],0x61726600
     dac:	67 6d                	ins    DWORD PTR es:[edi],dx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:526
	int expiredRemainder = interval % period;
     dae:	65 6e                	outs   dx,BYTE PTR gs:[rsi]
     db0:	74 53                	je     e05 <.debug_str+0xe05>
     db2:	65 71 75             	gs jno e2a <.debug_str+0xe2a>
     db5:	65 6e                	outs   dx,BYTE PTR gs:[rsi]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:528
	if ( expired > bucket->burst || interval < 0 ) {
     db7:	63 65 00             	movsxd esp,DWORD PTR [rbp+0x0]
     dba:	69 6e 74 65 67 65 72 	imul   ebp,DWORD PTR [rsi+0x74],0x72656765
     dc1:	00 64 6f 77          	add    BYTE PTR [rdi+rbp*2+0x77],ah
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:528 (discriminator 1)
     dc5:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     dc6:	6c                   	ins    BYTE PTR es:[rdi],dx
     dc7:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     dc8:	61                   	(bad)  
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:529
		bucket->burst = 0;
     dc9:	64 53                	fs push rbx
     dcb:	69 7a 65 00 6e 65 74 	imul   edi,DWORD PTR [rdx+0x65],0x74656e00
     dd2:	63 68 61             	movsxd ebp,DWORD PTR [rax+0x61]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:530
		bucket->lastTime = now;
     dd5:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     dd6:	5f                   	pop    rdi
     dd7:	62                   	(bad)  
     dd8:	75 66                	jne    e40 <.debug_str+0xe40>
     dda:	66 65 72 5f          	data16 gs jb e3d <.debug_str+0xe3d>
     dde:	73 00                	jae    de0 <.debug_str+0xde0>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:532
		bucket->burst -= expired;
     de0:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     de1:	65 74 63             	gs je  e47 <.debug_str+0xe47>
     de4:	68 61 6e 5f 62       	push   0x625f6e61
     de9:	75 66                	jne    e51 <.debug_str+0xe51>
     deb:	66 65 72 5f          	data16 gs jb e4e <.debug_str+0xe4e>
     def:	74 00                	je     df1 <.debug_str+0xdf1>
     df1:	74 69                	je     e5c <.debug_str+0xe5c>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:533
		bucket->lastTime = now - expiredRemainder;
     df3:	6d                   	ins    DWORD PTR es:[rdi],dx
     df4:	65 6f                	outs   dx,DWORD PTR gs:[rsi]
     df6:	75 74                	jne    e6c <.debug_str+0xe6c>
     df8:	43 6f                	rex.XB outs dx,DWORD PTR ds:[rsi]
     dfa:	75 6e                	jne    e6a <.debug_str+0xe6a>
     dfc:	74 00                	je     dfe <.debug_str+0xdfe>
     dfe:	64 6c                	fs ins BYTE PTR es:[rdi],dx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:536
	if ( bucket->burst < burst ) {
     e00:	6c                   	ins    BYTE PTR es:[rdi],dx
     e01:	48 61                	rex.W (bad) 
     e03:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     e04:	64 6c                	fs ins BYTE PTR es:[rdi],dx
     e06:	65 00 47 41          	add    BYTE PTR gs:[rdi+0x41],al
     e0a:	4d                   	rex.WRB
     e0b:	45 5f                	rex.RB pop r15
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:537
		bucket->burst++;
     e0d:	43                   	rex.XB
     e0e:	4f                   	rex.WRXB
     e0f:	4e 53                	rex.WRX push rbx
     e11:	4f                   	rex.WRXB
     e12:	4c                   	rex.WR
     e13:	45 5f                	rex.RB pop r15
     e15:	43                   	rex.XB
     e16:	4f                   	rex.WRXB
     e17:	4d                   	rex.WRB
     e18:	4d                   	rex.WRB
     e19:	41                   	rex.B
     e1a:	4e                   	rex.WRX
     e1b:	44 00 54 52 5f       	add    BYTE PTR [rdx+rdx*2+0x5f],r10b
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:538
		return qfalse;
     e20:	53                   	push   rbx
     e21:	49                   	rex.WB
     e22:	4e                   	rex.WRX
     e23:	45 00 6c 69 6e       	add    BYTE PTR [r9+rbp*2+0x6e],r13b
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:541
	return qtrue;
     e28:	6b 65 64 00          	imul   esp,DWORD PTR [rbp+0x64],0x0
SVC_RateDrop():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:550
static void SVC_RateDrop( leakyBucket_t *bucket, int burst ) {
     e2c:	49 54                	rex.WB push r12
     e2e:	5f                   	pop    rdi
     e2f:	50                   	push   rax
     e30:	45 52                	rex.RB push r10
     e32:	53                   	push   rbx
     e33:	49 53                	rex.WB push r11
     e35:	54                   	push   rsp
     e36:	41                   	rex.B
     e37:	4e 54                	rex.WRX push rsp
     e39:	5f                   	pop    rdi
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:551
	if ( bucket != NULL ) {
     e3a:	50                   	push   rax
     e3b:	4f 57                	rex.WRXB push r15
     e3d:	45 52                	rex.RB push r10
     e3f:	55                   	push   rbp
     e40:	50                   	push   rax
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:552
		if ( bucket->toxic < 10000 )
     e41:	00 49 54             	add    BYTE PTR [rcx+0x54],cl
     e44:	5f                   	pop    rdi
     e45:	41 52                	push   r10
     e47:	4d                   	rex.WRB
     e48:	4f 52                	rex.WRXB push r10
     e4a:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
     e4d:	74 69                	je     eb8 <.debug_str+0xeb8>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:553
			++bucket->toxic;
     e4f:	6d                   	ins    DWORD PTR es:[rdi],dx
     e50:	65 7a 6f             	gs jp  ec2 <.debug_str+0xec2>
     e53:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     e54:	65 00 4f 50          	add    BYTE PTR gs:[rdi+0x50],cl
     e58:	5f                   	pop    rdi
     e59:	43                   	rex.XB
     e5a:	41                   	rex.B
     e5b:	4c                   	rex.WR
     e5c:	4c 00 74 72 61       	rex.WR add BYTE PTR [rdx+rsi*2+0x61],r14b
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:554
		bucket->rate.burst = burst * bucket->toxic;
     e61:	6a 65                	push   0x65
     e63:	63 74 6f 72          	movsxd esi,DWORD PTR [rdi+rbp*2+0x72]
     e67:	79 5f                	jns    ec8 <.debug_str+0xec8>
     e69:	74 00                	je     e6b <.debug_str+0xe6b>
     e6b:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     e6c:	74 68                	je     ed6 <.debug_str+0xed6>
     e6e:	65 72 45             	gs jb  eb6 <.debug_str+0xeb6>
     e71:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     e72:	74 69                	je     edd <.debug_str+0xedd>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:555
		bucket->rate.lastTime = Sys_Milliseconds();
     e74:	74 79                	je     eef <.debug_str+0xeef>
     e76:	4e 75 6d             	rex.WRX jne ee6 <.debug_str+0xee6>
     e79:	32 00                	xor    al,BYTE PTR [rax]
     e7b:	64 6c                	fs ins BYTE PTR es:[rdi],dx
     e7d:	6c                   	ins    BYTE PTR es:[rdi],dx
     e7e:	53                   	push   rbx
     e7f:	79 73                	jns    ef4 <.debug_str+0xef4>
     e81:	63 61 6c             	movsxd esp,DWORD PTR [rcx+0x6c]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:557
}
     e84:	6c                   	ins    BYTE PTR es:[rdi],dx
SVC_RateRestoreBurst():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:565
static void SVC_RateRestoreBurst( leakyBucket_t *bucket ) {
     e85:	5f                   	pop    rdi
     e86:	74 00                	je     e88 <.debug_str+0xe88>
     e88:	63 76 61             	movsxd esi,DWORD PTR [rsi+0x61]
     e8b:	72 56                	jb     ee3 <.debug_str+0xee3>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:566
	if ( bucket != NULL ) {
     e8d:	61                   	(bad)  
     e8e:	6c                   	ins    BYTE PTR es:[rdi],dx
     e8f:	69 64 61 74 6f 72 5f 	imul   esp,DWORD PTR [rcx+riz*2+0x74],0x745f726f
     e96:	74 
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:567
		if ( bucket->rate.burst > 0 ) {
     e97:	00 63 6c             	add    BYTE PTR [rbx+0x6c],ah
     e9a:	75 73                	jne    f0f <.debug_str+0xf0f>
     e9c:	74 65                	je     f03 <.debug_str+0xf03>
     e9e:	72 6e                	jb     f0e <.debug_str+0xf0e>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:568
			bucket->rate.burst--;
     ea0:	75 6d                	jne    f0f <.debug_str+0xf0f>
     ea2:	73 00                	jae    ea4 <.debug_str+0xea4>
     ea4:	72 65                	jb     f0b <.debug_str+0xf0b>
     ea6:	73 74                	jae    f1c <.debug_str+0xf1c>
     ea8:	61                   	(bad)  
     ea9:	72 74                	jb     f1f <.debug_str+0xf1f>
     eab:	54                   	push   rsp
     eac:	69 6d 65 00 74 69 6d 	imul   ebp,DWORD PTR [rbp+0x65],0x6d697400
SVC_RateRestoreToxic():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:579
static void SVC_RateRestoreToxic( leakyBucket_t *bucket ) {
     eb3:	65 5f                	gs pop rdi
     eb5:	66 72 6f             	data16 jb f27 <.debug_str+0xf27>
     eb8:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     eb9:	74 65                	je     f20 <.debug_str+0xf20>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:580
	if ( bucket != NULL ) {
     ebb:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     ebc:	64 00 74 69 6d       	add    BYTE PTR fs:[rcx+rbp*2+0x6d],dh
     ec1:	65 32 00             	xor    al,BYTE PTR gs:[rax]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:581
		if ( bucket->toxic > 0 ) {
     ec4:	63 73 55             	movsxd esi,DWORD PTR [rbx+0x55]
     ec7:	70 64                	jo     f2d <.debug_str+0xf2d>
     ec9:	61                   	(bad)  
     eca:	74 65                	je     f31 <.debug_str+0xf31>
     ecc:	64 00 4f 50          	add    BYTE PTR fs:[rdi+0x50],cl
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:582
			bucket->toxic--;
     ed0:	5f                   	pop    rdi
     ed1:	55                   	push   rbp
     ed2:	4e                   	rex.WRX
     ed3:	44                   	rex.R
     ed4:	45                   	rex.RB
     ed5:	46 00 73 76          	rex.RX add BYTE PTR [rbx+0x76],r14b
     ed9:	45 6e                	rex.RB outs dx,BYTE PTR ds:[rsi]
     edb:	74 69                	je     f46 <.debug_str+0xf46>
     edd:	74 69                	je     f48 <.debug_str+0xf48>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:585
}
     edf:	65 73 00             	gs jae ee2 <.debug_str+0xee2>
SVC_RateLimitAddress():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:595
qboolean SVC_RateLimitAddress( const netadr_t *from, int burst, int period ) {
     ee2:	64 61                	fs (bad) 
     ee4:	74 61                	je     f47 <.debug_str+0xf47>
     ee6:	4d 61                	rex.WRB (bad) 
     ee8:	73 6b                	jae    f55 <.debug_str+0xf55>
     eea:	00 67 61             	add    BYTE PTR [rdi+0x61],ah
     eed:	6d                   	ins    DWORD PTR es:[rdi],dx
     eee:	65 73 74             	gs jae f65 <.debug_str+0xf65>
     ef1:	61                   	(bad)  
     ef2:	74 65                	je     f59 <.debug_str+0xf59>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:596
	leakyBucket_t *bucket = SVC_BucketForAddress( from, burst, period );
     ef4:	5f                   	pop    rdi
     ef5:	72 61                	jb     f58 <.debug_str+0xf58>
     ef7:	74 65                	je     f5e <.debug_str+0xf5e>
     ef9:	00 73 65             	add    BYTE PTR [rbx+0x65],dh
     efc:	72 76                	jb     f74 <.debug_str+0xf74>
     efe:	65 72 54             	gs jb  f55 <.debug_str+0xf55>
     f01:	69 6d 65 00 6c 69 6e 	imul   ebp,DWORD PTR [rbp+0x65],0x6e696c00
     f08:	6b 63 6f 75          	imul   esp,DWORD PTR [rbx+0x6f],0x75
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:598
	return bucket ? SVC_RateLimit( &bucket->rate, burst, period ) : qtrue;
     f0c:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     f0d:	74 00                	je     f0f <.debug_str+0xf0f>
     f0f:	63 72 63             	movsxd esi,DWORD PTR [rdx+0x63]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:598 (discriminator 1)
     f12:	33 32                	xor    esi,DWORD PTR [rdx]
     f14:	73 75                	jae    f8b <.debug_str+0xf8b>
     f16:	6d                   	ins    DWORD PTR es:[rdi],dx
     f17:	00 4f 50             	add    BYTE PTR [rdi+0x50],cl
     f1a:	5f                   	pop    rdi
     f1b:	42 52                	rex.X push rdx
     f1d:	45                   	rex.RB
     f1e:	41                   	rex.B
     f1f:	4b 00 73 74          	rex.WXB add BYTE PTR [r11+0x74],sil
     f23:	64 65 72 72          	fs gs jb f99 <.debug_str+0xf99>
     f27:	00 71 62             	add    BYTE PTR [rcx+0x62],dh
     f2a:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     f2b:	6f                   	outs   dx,DWORD PTR ds:[rsi]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:598 (discriminator 2)
     f2c:	6c                   	ins    BYTE PTR es:[rdi],dx
     f2d:	65 61                	gs (bad) 
     f2f:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     f30:	00 6c 61 74          	add    BYTE PTR [rcx+riz*2+0x74],ch
SVC_RateRestoreBurstAddress():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:609
void SVC_RateRestoreBurstAddress( const netadr_t *from, int burst, int period ) {
     f34:	63 68 65             	movsxd ebp,DWORD PTR [rax+0x65]
     f37:	64 53                	fs push rbx
     f39:	74 72                	je     fad <.debug_str+0xfad>
     f3b:	69 6e 67 00 6e 61 6d 	imul   ebp,DWORD PTR [rsi+0x67],0x6d616e00
     f42:	65 00 6a 75          	add    BYTE PTR gs:[rdx+0x75],ch
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:610
	leakyBucket_t *bucket = SVC_BucketForAddress( from, burst, period );
     f46:	6d                   	ins    DWORD PTR es:[rdi],dx
     f47:	70 70                	jo     fb9 <.debug_str+0xfb9>
     f49:	61                   	(bad)  
     f4a:	64 5f                	fs pop rdi
     f4c:	66 72 61             	data16 jb fb0 <.debug_str+0xfb0>
     f4f:	6d                   	ins    DWORD PTR es:[rdi],dx
     f50:	65 00 67 69          	add    BYTE PTR gs:[rdi+0x69],ah
     f54:	54                   	push   rsp
     f55:	61                   	(bad)  
     f56:	67 00 53 56          	add    BYTE PTR [ebx+0x56],dl
     f5a:	43 5f                	rex.XB pop r15
     f5c:	52                   	push   rdx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:612
	SVC_RateRestoreBurst( bucket );
     f5d:	61                   	(bad)  
     f5e:	74 65                	je     fc5 <.debug_str+0xfc5>
     f60:	4c 69 6d 69 74 41 64 	imul   r13,QWORD PTR [rbp+0x69],0x64644174
     f67:	64 
     f68:	72 65                	jb     fcf <.debug_str+0xfcf>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:613
}
     f6a:	73 73                	jae    fdf <.debug_str+0xfdf>
SVC_RateRestoreToxicAddress():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:623
void SVC_RateRestoreToxicAddress( const netadr_t *from, int burst, int period ) {
     f6c:	00 4f 50             	add    BYTE PTR [rdi+0x50],cl
     f6f:	5f                   	pop    rdi
     f70:	41 52                	push   r10
     f72:	47 00 5f 49          	rex.RXB add BYTE PTR [r15+0x49],r11b
     f76:	4f 5f                	rex.WRXB pop r15
     f78:	73 61                	jae    fdb <.debug_str+0xfdb>
     f7a:	76 65                	jbe    fe1 <.debug_str+0xfe1>
     f7c:	5f                   	pop    rdi
     f7d:	65 6e                	outs   dx,BYTE PTR gs:[rsi]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:624
	leakyBucket_t *bucket = SVC_BucketForAddress( from, burst, period );
     f7f:	64 00 64 6f 77       	add    BYTE PTR fs:[rdi+rbp*2+0x77],ah
     f84:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     f85:	6c                   	ins    BYTE PTR es:[rdi],dx
     f86:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     f87:	61                   	(bad)  
     f88:	64 43 6f             	rex.XB outs dx,DWORD PTR fs:[rsi]
     f8b:	75 6e                	jne    ffb <.debug_str+0xffb>
     f8d:	74 00                	je     f8f <.debug_str+0xf8f>
     f8f:	73 69                	jae    ffa <.debug_str+0xffa>
     f91:	6e                   	outs   dx,BYTE PTR ds:[rsi]
     f92:	67 6c                	ins    BYTE PTR es:[edi],dx
     f94:	65 43 6c             	gs rex.XB ins BYTE PTR es:[rdi],dx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:626
	SVC_RateRestoreToxic( bucket );
     f97:	69 65 6e 74 00 65 78 	imul   esp,DWORD PTR [rbp+0x6e],0x78650074
     f9e:	70 69                	jo     1009 <.debug_str+0x1009>
     fa0:	72 65                	jb     1007 <.debug_str+0x1007>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:627
}
     fa2:	64 00 56 4d          	add    BYTE PTR fs:[rsi+0x4d],dl
SVC_RateDropAddress():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:635
void SVC_RateDropAddress( const netadr_t *from, int burst, int period ) {
     fa6:	5f                   	pop    rdi
     fa7:	47                   	rex.RXB
     fa8:	41                   	rex.B
     fa9:	4d                   	rex.WRB
     faa:	45 00 64 6c 53       	add    BYTE PTR [r12+rbp*2+0x53],r12b
     faf:	74 61                	je     1012 <.debug_str+0x1012>
     fb1:	72 74                	jb     1027 <.debug_str+0x1027>
     fb3:	00 53 56             	add    BYTE PTR [rbx+0x56],dl
     fb6:	43 5f                	rex.XB pop r15
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:636
	leakyBucket_t *bucket = SVC_BucketForAddress( from, burst, period );
     fb8:	42 75 63             	rex.X jne 101e <.debug_str+0x101e>
     fbb:	6b 65 74 46          	imul   esp,DWORD PTR [rbp+0x74],0x46
     fbf:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     fc0:	72 41                	jb     1003 <.debug_str+0x1003>
     fc2:	64 64 72 65          	fs fs jb 102b <.debug_str+0x102b>
     fc6:	73 73                	jae    103b <.debug_str+0x103b>
     fc8:	00 6a 75             	add    BYTE PTR [rdx+0x75],ch
     fcb:	6d                   	ins    DWORD PTR es:[rdi],dx
     fcc:	70 54                	jo     1022 <.debug_str+0x1022>
     fce:	61                   	(bad)  
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:638
	SVC_RateDrop( bucket, burst );
     fcf:	62                   	(bad)  
     fd0:	6c                   	ins    BYTE PTR es:[rdi],dx
     fd1:	65 54                	gs push rsp
     fd3:	61                   	(bad)  
     fd4:	72 67                	jb     103d <.debug_str+0x103d>
     fd6:	65 74 73             	gs je  104c <.debug_str+0x104c>
     fd9:	00 73 76             	add    BYTE PTR [rbx+0x76],dh
     fdc:	5f                   	pop    rdi
     fdd:	6d                   	ins    DWORD PTR es:[rdi],dx
     fde:	61                   	(bad)  
     fdf:	73 74                	jae    1055 <.debug_str+0x1055>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:639
}
     fe1:	65 72 00             	gs jb  fe4 <.debug_str+0xfe4>
SVC_Status():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:651
static void SVC_Status( const netadr_t *from ) {
     fe4:	73 74                	jae    105a <.debug_str+0x105a>
     fe6:	64 6f                	outs   dx,DWORD PTR fs:[rsi]
     fe8:	75 74                	jne    105e <.debug_str+0x105e>
     fea:	00 66 70             	add    BYTE PTR [rsi+0x70],ah
     fed:	5f                   	pop    rdi
     fee:	6f                   	outs   dx,DWORD PTR ds:[rsi]
     fef:	66 66 73 65          	data16 data16 jae 1058 <.debug_str+0x1058>
     ff3:	74 00                	je     ff5 <.debug_str+0xff5>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:670
	if ( SVC_RateLimitAddress( from, 10, 1000 ) ) {
     ff5:	4f 50                	rex.WRXB push r8
     ff7:	5f                   	pop    rdi
     ff8:	4d                   	rex.WRB
     ff9:	4f                   	rex.WRXB
     ffa:	44 55                	rex.R push rbp
     ffc:	00 70 65             	add    BYTE PTR [rax+0x65],dh
     fff:	72 73                	jb     1074 <.debug_str+0x1074>
    1001:	69 73 74 61 6e 74 00 	imul   esi,DWORD PTR [rbx+0x74],0x746e61
    1008:	73 76                	jae    1080 <.debug_str+0x1080>
    100a:	5f                   	pop    rdi
    100b:	68 6f 73 74 6e       	push   0x6e74736f
    1010:	61                   	(bad)  
    1011:	6d                   	ins    DWORD PTR es:[rdi],dx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:671
		if ( com_developer->integer ) {
    1012:	65 00 67 70          	add    BYTE PTR gs:[rdi+0x70],ah
    1016:	5f                   	pop    rdi
    1017:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    1018:	66 66 73 65          	data16 data16 jae 1081 <.debug_str+0x1081>
    101c:	74 00                	je     101e <.debug_str+0x101e>
    101e:	74 6f                	je     108f <.debug_str+0x108f>
    1020:	78 69                	js     108b <.debug_str+0x108b>
    1022:	63 00                	movsxd eax,DWORD PTR [rax]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:672
			Com_Printf( "SVC_Status: rate limit from %s exceeded, dropping request\n",
    1024:	54                   	push   rsp
    1025:	52                   	push   rdx
    1026:	5f                   	pop    rdi
    1027:	49                   	rex.WB
    1028:	4e 54                	rex.WRX push rsp
    102a:	45 52                	rex.RB push r10
    102c:	50                   	push   rax
    102d:	4f                   	rex.WRXB
    102e:	4c                   	rex.WR
    102f:	41 54                	push   r12
    1031:	45 00 62 75          	add    BYTE PTR [r10+0x75],r12b
    1035:	63 6b 65             	movsxd ebp,DWORD PTR [rbx+0x65]
    1038:	74 48                	je     1082 <.debug_str+0x1082>
    103a:	61                   	(bad)  
    103b:	73 68                	jae    10a5 <.debug_str+0x10a5>
    103d:	65 73 00             	gs jae 1040 <.debug_str+0x1040>
    1040:	65 6e                	outs   dx,BYTE PTR gs:[rsi]
    1042:	74 69                	je     10ad <.debug_str+0x10ad>
    1044:	74 79                	je     10bf <.debug_str+0x10bf>
    1046:	53                   	push   rbx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:675
		return;
    1047:	74 61                	je     10aa <.debug_str+0x10aa>
    1049:	74 65                	je     10b0 <.debug_str+0x10b0>
    104b:	5f                   	pop    rdi
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:680
	if ( SVC_RateLimit( &outboundRateLimit, 10, 100 ) ) {
    104c:	73 00                	jae    104e <.debug_str+0x104e>
    104e:	65 6e                	outs   dx,BYTE PTR gs:[rsi]
    1050:	74 69                	je     10bb <.debug_str+0x10bb>
    1052:	74 79                	je     10cd <.debug_str+0x10cd>
    1054:	53                   	push   rbx
    1055:	74 61                	je     10b8 <.debug_str+0x10b8>
    1057:	74 65                	je     10be <.debug_str+0x10be>
    1059:	5f                   	pop    rdi
    105a:	74 00                	je     105c <.debug_str+0x105c>
    105c:	74 69                	je     10c7 <.debug_str+0x10c7>
    105e:	6d                   	ins    DWORD PTR es:[rdi],dx
    105f:	65 56                	gs push rsi
    1061:	61                   	(bad)  
    1062:	6c                   	ins    BYTE PTR es:[rdi],dx
    1063:	00 6f 75             	add    BYTE PTR [rdi+0x75],ch
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:681
		Com_DPrintf( "SVC_Status: rate limit exceeded, dropping request\n" );
    1066:	74 67                	je     10cf <.debug_str+0x10cf>
    1068:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    1069:	69 6e 67 53 65 71 75 	imul   ebp,DWORD PTR [rsi+0x67],0x75716553
    1070:	65 6e                	outs   dx,BYTE PTR gs:[rsi]
    1072:	63 65 00             	movsxd esp,DWORD PTR [rbp+0x0]
    1075:	4f 50                	rex.WRXB push r8
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:682
		return;
    1077:	5f                   	pop    rdi
    1078:	43                   	rex.XB
    1079:	4f                   	rex.WRXB
    107a:	4e 53                	rex.WRX push rbx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:686
	if ( strlen( Cmd_Argv( 1 ) ) > 128 )
    107c:	54                   	push   rsp
    107d:	00 63 6d             	add    BYTE PTR [rbx+0x6d],ah
    1080:	64 5f                	fs pop rdi
    1082:	61                   	(bad)  
    1083:	75 78                	jne    10fd <.debug_str+0x10fd>
    1085:	00 43 53             	add    BYTE PTR [rbx+0x53],al
    1088:	5f                   	pop    rdi
    1089:	43                   	rex.XB
    108a:	4f                   	rex.WRXB
    108b:	4e                   	rex.WRX
    108c:	4e                   	rex.WRX
    108d:	45                   	rex.RB
    108e:	43 54                	rex.XB push r12
    1090:	45                   	rex.RB
    1091:	44 00 72 69          	add    BYTE PTR [rdx+0x69],r14b
    1095:	67 68 74 6d 6f 76    	addr32 push 0x766f6d74
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:689
	Q_strncpyz( infostring, Cvar_InfoString( CVAR_SERVERINFO, NULL ), sizeof( infostring ) );
    109b:	65 00 72 65          	add    BYTE PTR gs:[rdx+0x65],dh
    109f:	6c                   	ins    BYTE PTR es:[rdi],dx
    10a0:	69 61 62 6c 65 41 63 	imul   esp,DWORD PTR [rcx+0x62],0x6341656c
    10a7:	6b 6e 6f 77          	imul   ebp,DWORD PTR [rsi+0x6f],0x77
    10ab:	6c                   	ins    BYTE PTR es:[rdi],dx
    10ac:	65 64 67 65 00 70 6d 	gs fs add BYTE PTR gs:[eax+0x6d],dh
    10b3:	5f                   	pop    rdi
    10b4:	74 79                	je     112f <.debug_str+0x112f>
    10b6:	70 65                	jo     111d <.debug_str+0x111d>
    10b8:	00 65 6e             	add    BYTE PTR [rbp+0x6e],ah
    10bb:	74 73                	je     1130 <.debug_str+0x1130>
    10bd:	00 73 68             	add    BYTE PTR [rbx+0x68],dh
    10c0:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    10c1:	72 74                	jb     1137 <.debug_str+0x1137>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:693
	Info_SetValueForKey( infostring, "challenge", Cmd_Argv( 1 ) );
    10c3:	20 75 6e             	and    BYTE PTR [rbp+0x6e],dh
    10c6:	73 69                	jae    1131 <.debug_str+0x1131>
    10c8:	67 6e                	outs   dx,BYTE PTR ds:[esi]
    10ca:	65 64 20 69 6e       	gs and BYTE PTR fs:[rcx+0x6e],ch
    10cf:	74 00                	je     10d1 <.debug_str+0x10d1>
    10d1:	63 6c 61 73          	movsxd ebp,DWORD PTR [rcx+riz*2+0x73]
    10d5:	73 6e                	jae    1145 <.debug_str+0x1145>
    10d7:	61                   	(bad)  
    10d8:	6d                   	ins    DWORD PTR es:[rdi],dx
    10d9:	65 00 53 56          	add    BYTE PTR gs:[rbx+0x56],dl
    10dd:	43 5f                	rex.XB pop r15
    10df:	52                   	push   rdx
    10e0:	65 6d                	gs ins DWORD PTR es:[rdi],dx
    10e2:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    10e3:	74 65                	je     114a <.debug_str+0x114a>
    10e5:	43 6f                	rex.XB outs dx,DWORD PTR ds:[rsi]
    10e7:	6d                   	ins    DWORD PTR es:[rdi],dx
    10e8:	6d                   	ins    DWORD PTR es:[rdi],dx
    10e9:	61                   	(bad)  
    10ea:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    10eb:	64 00 73 69          	add    BYTE PTR fs:[rbx+0x69],dh
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:695
	s = status;
    10ef:	67 6e                	outs   dx,BYTE PTR ds:[esi]
    10f1:	65 64 20 63 68       	gs and BYTE PTR fs:[rbx+0x68],ah
    10f6:	61                   	(bad)  
    10f7:	72 00                	jb     10f9 <.debug_str+0x10f9>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:696
	status[0] = '\0';
    10f9:	73 6f                	jae    116a <.debug_str+0x116a>
    10fb:	63 6b 00             	movsxd ebp,DWORD PTR [rbx+0x0]
    10fe:	64 61                	fs (bad) 
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:697
	statusLength = strlen( infostring ) + 16; // strlen( "statusResponse\n\n" )
    1100:	6d                   	ins    DWORD PTR es:[rdi],dx
    1101:	61                   	(bad)  
    1102:	67 65 50             	addr32 gs push rax
    1105:	69 74 63 68 00 73 74 	imul   esi,DWORD PTR [rbx+riz*2+0x68],0x61747300
    110c:	61 
    110d:	72 74                	jb     1183 <.debug_str+0x1183>
    110f:	00 68 75             	add    BYTE PTR [rax+0x75],ch
    1112:	6d                   	ins    DWORD PTR es:[rdi],dx
    1113:	61                   	(bad)  
    1114:	6e                   	outs   dx,BYTE PTR ds:[rsi]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:699
	for ( i = 0 ; i < sv_maxclients->integer ; i++ ) {
    1115:	73 00                	jae    1117 <.debug_str+0x1117>
    1117:	4f 50                	rex.WRXB push r8
    1119:	5f                   	pop    rdi
    111a:	4e                   	rex.WRX
    111b:	45                   	rex.RB
    111c:	46 00 53 56          	rex.RX add BYTE PTR [rbx+0x56],r10b
    1120:	43 5f                	rex.XB pop r15
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:700
		cl = &svs.clients[i];
    1122:	53                   	push   rbx
    1123:	74 61                	je     1186 <.debug_str+0x1186>
    1125:	74 75                	je     119c <.debug_str+0x119c>
    1127:	73 00                	jae    1129 <.debug_str+0x1129>
    1129:	73 6e                	jae    1199 <.debug_str+0x1199>
    112b:	61                   	(bad)  
    112c:	70 73                	jo     11a1 <.debug_str+0x11a1>
    112e:	68 6f 74 46 72       	push   0x7246746f
    1133:	61                   	(bad)  
    1134:	6d                   	ins    DWORD PTR es:[rdi],dx
    1135:	65 00 73 74          	add    BYTE PTR gs:[rbx+0x74],dh
    1139:	61                   	(bad)  
    113a:	74 75                	je     11b1 <.debug_str+0x11b1>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:701
		if ( cl->state >= CS_CONNECTED ) {
    113c:	73 00                	jae    113e <.debug_str+0x113e>
    113e:	72 65                	jb     11a5 <.debug_str+0x11a5>
    1140:	6c                   	ins    BYTE PTR es:[rdi],dx
    1141:	69 61 62 6c 65 43 6f 	imul   esp,DWORD PTR [rcx+0x62],0x6f43656c
    1148:	6d                   	ins    DWORD PTR es:[rdi],dx
    1149:	6d                   	ins    DWORD PTR es:[rdi],dx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:703
			ps = SV_GameClientNum( i );
    114a:	61                   	(bad)  
    114b:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    114c:	64 73 00             	fs jae 114f <.debug_str+0x114f>
    114f:	73 76                	jae    11c7 <.debug_str+0x11c7>
    1151:	5f                   	pop    rdi
    1152:	72 65                	jb     11b9 <.debug_str+0x11b9>
    1154:	63 6f 6e             	movsxd ebp,DWORD PTR [rdi+0x6e]
    1157:	6e                   	outs   dx,BYTE PTR ds:[rsi]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:705
				ps->persistant[ PERS_SCORE ], cl->ping, cl->name );
    1158:	65 63 74 6c 69       	movsxd esi,DWORD PTR gs:[rsp+rbp*2+0x69]
    115d:	6d                   	ins    DWORD PTR es:[rdi],dx
    115e:	69 74 00 63 6f 75 6e 	imul   esi,DWORD PTR [rax+rax*1+0x63],0x746e756f
    1165:	74 
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:704
			playerLength = Com_sprintf( player, sizeof( player ), "%i %i \"%s\"\n", 
    1166:	00 4f 50             	add    BYTE PTR [rdi+0x50],cl
    1169:	5f                   	pop    rdi
    116a:	42                   	rex.X
    116b:	4f 52                	rex.WRXB push r10
    116d:	00 73 74             	add    BYTE PTR [rbx+0x74],dh
    1170:	61                   	(bad)  
    1171:	74 75                	je     11e8 <.debug_str+0x11e8>
    1173:	73 4c                	jae    11c1 <.debug_str+0x11c1>
    1175:	65 6e                	outs   dx,BYTE PTR gs:[rsi]
    1177:	67 74 68             	addr32 je 11e2 <.debug_str+0x11e2>
    117a:	00 67 65             	add    BYTE PTR [rdi+0x65],ah
    117d:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    117e:	74 69                	je     11e9 <.debug_str+0x11e9>
    1180:	74 69                	je     11eb <.debug_str+0x11eb>
    1182:	65 73 00             	gs jae 1185 <.debug_str+0x1185>
    1185:	68 61 73 68 49       	push   0x49687361
    118a:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    118b:	64 65 78 00          	fs gs js 118f <.debug_str+0x118f>
    118f:	61                   	(bad)  
    1190:	64 64 72 65          	fs fs jb 11f9 <.debug_str+0x11f9>
    1194:	73 73                	jae    1209 <.debug_str+0x1209>
    1196:	00 5f 5f             	add    BYTE PTR [rdi+0x5f],bl
    1199:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    119a:	66 66 36 34 5f       	data16 data16 ss xor al,0x5f
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:707
			if ( statusLength + playerLength >= MAX_PACKETLEN-4 )
    119f:	74 00                	je     11a1 <.debug_str+0x11a1>
    11a1:	76 65                	jbe    1208 <.debug_str+0x1208>
    11a3:	63 33                	movsxd esi,DWORD PTR [rbx]
    11a5:	5f                   	pop    rdi
    11a6:	74 00                	je     11a8 <.debug_str+0x11a8>
    11a8:	5f                   	pop    rdi
    11a9:	49                   	rex.WB
    11aa:	4f 5f                	rex.WRXB pop r15
    11ac:	72 65                	jb     1213 <.debug_str+0x1213>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:710
			s = Q_stradd( s, player );
    11ae:	61                   	(bad)  
    11af:	64 5f                	fs pop rdi
    11b1:	62 61                	(bad)  
    11b3:	73 65                	jae    121a <.debug_str+0x121a>
    11b5:	00 5f 6f             	add    BYTE PTR [rdi+0x6f],bl
    11b8:	66 66 73 65          	data16 data16 jae 1221 <.debug_str+0x1221>
    11bc:	74 00                	je     11be <.debug_str+0x11be>
    11be:	73 74                	jae    1234 <.debug_str+0x1234>
    11c0:	72 69                	jb     122b <.debug_str+0x122b>
    11c2:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    11c3:	67 00 6e 65          	add    BYTE PTR [esi+0x65],ch
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:711
			statusLength += playerLength;
    11c7:	74 61                	je     122a <.debug_str+0x122a>
    11c9:	64 72 74             	fs jb  1240 <.debug_str+0x1240>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:699 (discriminator 2)
	for ( i = 0 ; i < sv_maxclients->integer ; i++ ) {
    11cc:	79 70                	jns    123e <.debug_str+0x123e>
    11ce:	65 5f                	gs pop rdi
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:699 (discriminator 1)
    11d0:	74 00                	je     11d2 <.debug_str+0x11d2>
    11d2:	73 74                	jae    1248 <.debug_str+0x1248>
    11d4:	61                   	(bad)  
    11d5:	74 65                	je     123c <.debug_str+0x123c>
    11d7:	00 5f 49             	add    BYTE PTR [rdi+0x49],bl
    11da:	4f 5f                	rex.WRXB pop r15
    11dc:	62                   	(bad)  
    11dd:	75 66                	jne    1245 <.debug_str+0x1245>
    11df:	5f                   	pop    rdi
    11e0:	65 6e                	outs   dx,BYTE PTR gs:[rsi]
    11e2:	64 00 65 54          	add    BYTE PTR fs:[rbp+0x54],ah
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:715 (discriminator 1)
	NET_OutOfBandPrint( NS_SERVER, from, "statusResponse\n%s\n%s", infostring, status );
    11e6:	79 70                	jns    1258 <.debug_str+0x1258>
    11e8:	65 00 73 74          	add    BYTE PTR gs:[rbx+0x74],dh
    11ec:	61                   	(bad)  
    11ed:	74 73                	je     1262 <.debug_str+0x1262>
    11ef:	00 73 76             	add    BYTE PTR [rbx+0x76],dh
    11f2:	5f                   	pop    rdi
    11f3:	6b 69 6c 6c          	imul   ebp,DWORD PTR [rcx+0x6c],0x6c
    11f7:	73 65                	jae    125e <.debug_str+0x125e>
    11f9:	72 76                	jb     1271 <.debug_str+0x1271>
    11fb:	65 72 00             	gs jb  11fe <.debug_str+0x11fe>
    11fe:	73 76                	jae    1276 <.debug_str+0x1276>
    1200:	5f                   	pop    rdi
    1201:	6c                   	ins    BYTE PTR es:[rdi],dx
    1202:	65 76 65             	gs jbe 126a <.debug_str+0x126a>
    1205:	6c                   	ins    BYTE PTR es:[rdi],dx
    1206:	54                   	push   rsp
    1207:	69 6d 65 52 65 73 65 	imul   ebp,DWORD PTR [rbp+0x65],0x65736552
    120e:	74 00                	je     1210 <.debug_str+0x1210>
    1210:	4f 50                	rex.WRXB push r8
    1212:	5f                   	pop    rdi
    1213:	4c 53                	rex.WR push rbx
    1215:	48 00 63 76          	rex.W add BYTE PTR [rbx+0x76],spl
    1219:	61                   	(bad)  
    121a:	72 47                	jb     1263 <.debug_str+0x1263>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:675
		return;
    121c:	72 6f                	jb     128d <.debug_str+0x128d>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:687
		return;
    121e:	75 70                	jne    1290 <.debug_str+0x1290>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:716
}
    1220:	5f                   	pop    rdi
SVC_Info():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:727
static void SVC_Info( const netadr_t *from ) {
    1221:	74 00                	je     1223 <.debug_str+0x1223>
    1223:	5f                   	pop    rdi
    1224:	6d                   	ins    DWORD PTR es:[rdi],dx
    1225:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    1226:	64 65 00 5f 49       	fs add BYTE PTR gs:[rdi+0x49],bl
    122b:	4f 5f                	rex.WRXB pop r15
    122d:	77 72                	ja     12a1 <.debug_str+0x12a1>
    122f:	69 74 65 5f 62 61 73 	imul   esi,DWORD PTR [rbp+riz*2+0x5f],0x65736162
    1236:	65 
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:740
	if ( SVC_RateLimitAddress( from, 10, 1000 ) ) {
    1237:	00 6f 77             	add    BYTE PTR [rdi+0x77],ch
    123a:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    123b:	65 72 4e             	gs jb  128c <.debug_str+0x128c>
    123e:	75 6d                	jne    12ad <.debug_str+0x12ad>
    1240:	00 69 6e             	add    BYTE PTR [rcx+0x6e],ch
    1243:	73 74                	jae    12b9 <.debug_str+0x12b9>
    1245:	72 75                	jb     12bc <.debug_str+0x12bc>
    1247:	63 74 69 6f          	movsxd esi,DWORD PTR [rcx+rbp*2+0x6f]
    124b:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    124c:	50                   	push   rax
    124d:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    124e:	69 6e 74 65 72 73 00 	imul   ebp,DWORD PTR [rsi+0x74],0x737265
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:741
		if ( com_developer->integer ) {
    1255:	47                   	rex.RXB
    1256:	41                   	rex.B
    1257:	4d                   	rex.WRB
    1258:	45 5f                	rex.RB pop r15
    125a:	52                   	push   rdx
    125b:	55                   	push   rbp
    125c:	4e 5f                	rex.WRX pop rdi
    125e:	46 52                	rex.RX push rdx
    1260:	41                   	rex.B
    1261:	4d                   	rex.WRB
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:742
			Com_Printf( "SVC_Info: rate limit from %s exceeded, dropping request\n",
    1262:	45 00 66 75          	add    BYTE PTR [r14+0x75],r12b
    1266:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    1267:	63 00                	movsxd eax,DWORD PTR [rax]
    1269:	43 50                	rex.XB push r8
    126b:	55                   	push   rbp
    126c:	5f                   	pop    rdi
    126d:	46 6c                	rex.RX ins BYTE PTR es:[rdi],dx
    126f:	61                   	(bad)  
    1270:	67 73 00             	addr32 jae 1273 <.debug_str+0x1273>
    1273:	63 6f 6d             	movsxd ebp,DWORD PTR [rdi+0x6d]
    1276:	5f                   	pop    rdi
    1277:	74 6f                	je     12e8 <.debug_str+0x12e8>
    1279:	6b 65 6e 74          	imul   esp,DWORD PTR [rbp+0x6e],0x74
    127d:	79 70                	jns    12ef <.debug_str+0x12ef>
    127f:	65 00 53 56          	add    BYTE PTR gs:[rbx+0x56],dl
    1283:	5f                   	pop    rdi
    1284:	46 6c                	rex.RX ins BYTE PTR es:[rdi],dx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:745
		return;
    1286:	75 73                	jne    12fb <.debug_str+0x12fb>
    1288:	68 52 65 64 69       	push   0x69646552
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:750
	if ( SVC_RateLimit( &outboundRateLimit, 10, 100 ) ) {
    128d:	72 65                	jb     12f4 <.debug_str+0x12f4>
    128f:	63 74 00 63          	movsxd esi,DWORD PTR [rax+rax*1+0x63]
    1293:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    1294:	6c                   	ins    BYTE PTR es:[rdi],dx
    1295:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    1296:	72 4d                	jb     12e5 <.debug_str+0x12e5>
    1298:	61                   	(bad)  
    1299:	67 65 6e             	outs   dx,BYTE PTR gs:[esi]
    129c:	74 61                	je     12ff <.debug_str+0x12ff>
    129e:	00 73 76             	add    BYTE PTR [rbx+0x76],dh
    12a1:	5f                   	pop    rdi
    12a2:	66 6c                	data16 ins BYTE PTR es:[rdi],dx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:751
		Com_DPrintf( "SVC_Info: rate limit exceeded, dropping request\n" );
    12a4:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    12a5:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    12a6:	64 50                	fs push rax
    12a8:	72 6f                	jb     1319 <.debug_str+0x1319>
    12aa:	74 65                	je     1311 <.debug_str+0x1311>
    12ac:	63 74 00 4f          	movsxd esi,DWORD PTR [rax+rax*1+0x4f]
    12b0:	50                   	push   rax
    12b1:	5f                   	pop    rdi
    12b2:	4c 54                	rex.WR push rsp
    12b4:	46 00 43 53          	rex.RX add BYTE PTR [rbx+0x53],r8b
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:752
		return;
    12b8:	5f                   	pop    rdi
    12b9:	41                   	rex.B
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:761
	if ( strlen( Cmd_Argv( 1 ) ) > 128 )
    12ba:	43 54                	rex.XB push r12
    12bc:	49 56                	rex.WB push r14
    12be:	45 00 4e 53          	add    BYTE PTR [r14+0x53],r9b
    12c2:	5f                   	pop    rdi
    12c3:	43                   	rex.XB
    12c4:	4c                   	rex.WR
    12c5:	49                   	rex.WB
    12c6:	45                   	rex.RB
    12c7:	4e 54                	rex.WRX push rsp
    12c9:	00 4f 50             	add    BYTE PTR [rdi+0x50],cl
    12cc:	5f                   	pop    rdi
    12cd:	4c 54                	rex.WR push rsp
    12cf:	55                   	push   rbp
    12d0:	00 74 69 6d          	add    BYTE PTR [rcx+rbp*2+0x6d],dh
    12d4:	65 00 71 74          	add    BYTE PTR gs:[rcx+0x74],dh
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:765
	count = humans = 0;
    12d8:	72 75                	jb     134f <.debug_str+0x134f>
    12da:	65 00 75 6e          	add    BYTE PTR gs:[rbp+0x6e],dh
    12de:	73 65                	jae    1345 <.debug_str+0x1345>
    12e0:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    12e1:	74 42                	je     1325 <.debug_str+0x1325>
    12e3:	75 66                	jne    134b <.debug_str+0x134b>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:766
	for ( i = sv_privateClients->integer ; i < sv_maxclients->integer ; i++ ) {
    12e5:	66 65 72 00          	data16 gs jb 12e9 <.debug_str+0x12e9>
    12e9:	63 75 72             	movsxd esi,DWORD PTR [rbp+0x72]
    12ec:	73 69                	jae    1357 <.debug_str+0x1357>
    12ee:	7a 65                	jp     1355 <.debug_str+0x1355>
    12f0:	00 76 61             	add    BYTE PTR [rsi+0x61],dh
    12f3:	6c                   	ins    BYTE PTR es:[rdi],dx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:767
		if ( svs.clients[i].state >= CS_CONNECTED ) {
    12f4:	69 64 00 73 76 5f 63 	imul   esp,DWORD PTR [rax+rax*1+0x73],0x6c635f76
    12fb:	6c 
    12fc:	69 65 6e 74 54 4c 44 	imul   esp,DWORD PTR [rbp+0x6e],0x444c5474
    1303:	00 53 56             	add    BYTE PTR [rbx+0x56],dl
    1306:	5f                   	pop    rdi
    1307:	52                   	push   rdx
    1308:	65 73 74             	gs jae 137f <.debug_str+0x137f>
    130b:	61                   	(bad)  
    130c:	72 74                	jb     1382 <.debug_str+0x1382>
    130e:	00 6c 6f 6e          	add    BYTE PTR [rdi+rbp*2+0x6e],ch
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:768
			count++;
    1312:	67 20 69 6e          	and    BYTE PTR [ecx+0x6e],ch
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:769
			if (svs.clients[i].netchan.remoteAddress.type != NA_BOT) {
    1316:	74 00                	je     1318 <.debug_str+0x1318>
    1318:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    1319:	65 74 63             	gs je  137f <.debug_str+0x137f>
    131c:	68 61 6e 5f 65       	push   0x655f6e61
    1321:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    1322:	64 5f                	fs pop rdi
    1324:	71 75                	jno    139b <.debug_str+0x139b>
    1326:	65 75 65             	gs jne 138e <.debug_str+0x138e>
    1329:	00 54 4b 5f          	add    BYTE PTR [rbx+rcx*2+0x5f],dl
    132d:	47                   	rex.RXB
    132e:	45                   	rex.RB
    132f:	4e                   	rex.WRX
    1330:	45                   	rex.RB
    1331:	47                   	rex.RXB
    1332:	49                   	rex.WB
    1333:	43 00 63 68          	rex.XB add BYTE PTR [r11+0x68],spl
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:770
				humans++;
    1337:	65 63 6b 73          	movsxd ebp,DWORD PTR gs:[rbx+0x73]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:766 (discriminator 2)
	for ( i = sv_privateClients->integer ; i < sv_maxclients->integer ; i++ ) {
    133b:	75 6d                	jne    13aa <.debug_str+0x13aa>
    133d:	46                   	rex.RX
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:766 (discriminator 1)
    133e:	65 65 64 53          	gs gs fs push rbx
    1342:	65 72 76             	gs jb  13bb <.debug_str+0x13bb>
    1345:	65 72 49             	gs jb  1391 <.debug_str+0x1391>
    1348:	64 00 76 69          	add    BYTE PTR fs:[rsi+0x69],dh
    134c:	65 77 61             	gs ja  13b0 <.debug_str+0x13b0>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:775
	infostring[0] = '\0';
    134f:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    1350:	67 6c                	ins    BYTE PTR es:[edi],dx
    1352:	65 73 00             	gs jae 1355 <.debug_str+0x1355>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:779
	Info_SetValueForKey( infostring, "challenge", Cmd_Argv(1) );
    1355:	73 65                	jae    13bc <.debug_str+0x13bc>
    1357:	72 76                	jb     13cf <.debug_str+0x13cf>
    1359:	65 72 5f             	gs jb  13bb <.debug_str+0x13bb>
    135c:	74 00                	je     135e <.debug_str+0x135e>
    135e:	5f                   	pop    rdi
    135f:	49                   	rex.WB
    1360:	4f 5f                	rex.WRXB pop r15
    1362:	6d                   	ins    DWORD PTR es:[rdi],dx
    1363:	61                   	(bad)  
    1364:	72 6b                	jb     13d1 <.debug_str+0x13d1>
    1366:	65 72 00             	gs jb  1369 <.debug_str+0x1369>
    1369:	72 65                	jb     13d0 <.debug_str+0x13d0>
    136b:	73 74                	jae    13e1 <.debug_str+0x13e1>
    136d:	61                   	(bad)  
    136e:	72 74                	jb     13e4 <.debug_str+0x13e4>
    1370:	65 64 53             	gs fs push rbx
    1373:	65 72 76             	gs jb  13ec <.debug_str+0x13ec>
    1376:	65 72 49             	gs jb  13c2 <.debug_str+0x13c2>
    1379:	64 00 6d 61          	add    BYTE PTR fs:[rbp+0x61],ch
    137d:	73 74                	jae    13f3 <.debug_str+0x13f3>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:781
	Info_SetValueForKey( infostring, "protocol", com_protocol->string );
    137f:	65 72 52             	gs jb  13d4 <.debug_str+0x13d4>
    1382:	65 73 6f             	gs jae 13f4 <.debug_str+0x13f4>
    1385:	6c                   	ins    BYTE PTR es:[rdi],dx
    1386:	76 65                	jbe    13ed <.debug_str+0x13ed>
    1388:	54                   	push   rsp
    1389:	69 6d 65 00 70 6c 61 	imul   ebp,DWORD PTR [rbp+0x65],0x616c7000
    1390:	79 65                	jns    13f7 <.debug_str+0x13f7>
    1392:	72 53                	jb     13e7 <.debug_str+0x13e7>
    1394:	74 61                	je     13f7 <.debug_str+0x13f7>
    1396:	74 65                	je     13fd <.debug_str+0x13fd>
    1398:	5f                   	pop    rdi
    1399:	73 00                	jae    139b <.debug_str+0x139b>
    139b:	70 6c                	jo     1409 <.debug_str+0x1409>
    139d:	61                   	(bad)  
    139e:	79 65                	jns    1405 <.debug_str+0x1405>
    13a0:	72 53                	jb     13f5 <.debug_str+0x13f5>
    13a2:	74 61                	je     1405 <.debug_str+0x1405>
    13a4:	74 65                	je     140b <.debug_str+0x140b>
    13a6:	5f                   	pop    rdi
    13a7:	74 00                	je     13a9 <.debug_str+0x13a9>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:782
	Info_SetValueForKey( infostring, "hostname", sv_hostname->string );
    13a9:	6d                   	ins    DWORD PTR es:[rdi],dx
    13aa:	73 65                	jae    1411 <.debug_str+0x1411>
    13ac:	63 00                	movsxd eax,DWORD PTR [rax]
    13ae:	73 6e                	jae    141e <.debug_str+0x141e>
    13b0:	61                   	(bad)  
    13b1:	70 73                	jo     1426 <.debug_str+0x1426>
    13b3:	68 6f 74 4d 73       	push   0x734d746f
    13b8:	65 63 00             	movsxd eax,DWORD PTR gs:[rax]
    13bb:	66 6f                	outs   dx,WORD PTR ds:[rsi]
    13bd:	72 77                	jb     1436 <.debug_str+0x1436>
    13bf:	61                   	(bad)  
    13c0:	72 64                	jb     1426 <.debug_str+0x1426>
    13c2:	6d                   	ins    DWORD PTR es:[rdi],dx
    13c3:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    13c4:	76 65                	jbe    142b <.debug_str+0x142b>
    13c6:	00 43 53             	add    BYTE PTR [rbx+0x53],al
    13c9:	5f                   	pop    rdi
    13ca:	50                   	push   rax
    13cb:	52                   	push   rdx
    13cc:	49                   	rex.WB
    13cd:	4d                   	rex.WRB
    13ce:	45                   	rex.RB
    13cf:	44 00 73 76          	add    BYTE PTR [rbx+0x76],r14b
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:783
	Info_SetValueForKey( infostring, "mapname", sv_mapname->string );
    13d3:	5f                   	pop    rdi
    13d4:	70 72                	jo     1448 <.debug_str+0x1448>
    13d6:	69 76 61 74 65 43 6c 	imul   esi,DWORD PTR [rsi+0x61],0x6c436574
    13dd:	69 65 6e 74 73 00 6a 	imul   esp,DWORD PTR [rbp+0x6e],0x6a007374
    13e4:	75 73                	jne    1459 <.debug_str+0x1459>
    13e6:	74 43                	je     142b <.debug_str+0x142b>
    13e8:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    13e9:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    13ea:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    13eb:	65 63 74 65 64       	movsxd esi,DWORD PTR gs:[rbp+riz*2+0x64]
    13f0:	00 69 6e             	add    BYTE PTR [rcx+0x6e],ch
    13f3:	74 70                	je     1465 <.debug_str+0x1465>
    13f5:	74 72                	je     1469 <.debug_str+0x1469>
    13f7:	5f                   	pop    rdi
    13f8:	74 00                	je     13fa <.debug_str+0x13fa>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:784
	Info_SetValueForKey( infostring, "clients", va("%i", count) );
    13fa:	66 72 61             	data16 jb 145e <.debug_str+0x145e>
    13fd:	67 6d                	ins    DWORD PTR es:[edi],dx
    13ff:	65 6e                	outs   dx,BYTE PTR gs:[rsi]
    1401:	74 42                	je     1445 <.debug_str+0x1445>
    1403:	75 66                	jne    146b <.debug_str+0x146b>
    1405:	66 65 72 00          	data16 gs jb 1409 <.debug_str+0x1409>
    1409:	54                   	push   rsp
    140a:	4b 5f                	rex.WXB pop r15
    140c:	45                   	rex.RB
    140d:	4f                   	rex.WRXB
    140e:	46 00 75 69          	rex.RX add BYTE PTR [rbp+0x69],r14b
    1412:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    1413:	74 33                	je     1448 <.debug_str+0x1448>
    1415:	32 5f 74             	xor    bl,BYTE PTR [rdi+0x74]
    1418:	00 63 75             	add    BYTE PTR [rbx+0x75],ah
    141b:	72 72                	jb     148f <.debug_str+0x148f>
    141d:	65 6e                	outs   dx,BYTE PTR gs:[rsi]
    141f:	74 4f                	je     1470 <.debug_str+0x1470>
    1421:	72 69                	jb     148c <.debug_str+0x148c>
    1423:	67 69 6e 00 67 65 6e 	imul   ebp,DWORD PTR [esi+0x0],0x746e6567
    142a:	74 
    142b:	69 74 79 00 53 56 43 	imul   esi,DWORD PTR [rcx+rdi*2+0x0],0x5f435653
    1432:	5f 
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:785
	Info_SetValueForKey(infostring, "g_humanplayers", va("%i", humans));
    1433:	52                   	push   rdx
    1434:	61                   	(bad)  
    1435:	74 65                	je     149c <.debug_str+0x149c>
    1437:	44 72 6f             	rex.R jb 14a9 <.debug_str+0x14a9>
    143a:	70 00                	jo     143c <.debug_str+0x143c>
    143c:	5f                   	pop    rdi
    143d:	49                   	rex.WB
    143e:	4f 5f                	rex.WRXB pop r15
    1440:	63 6f 64             	movsxd ebp,DWORD PTR [rdi+0x64]
    1443:	65 63 76 74          	movsxd esi,DWORD PTR gs:[rsi+0x74]
    1447:	00 56 4d             	add    BYTE PTR [rsi+0x4d],dl
    144a:	5f                   	pop    rdi
    144b:	43                   	rex.XB
    144c:	4f 55                	rex.WRXB push r13
    144e:	4e 54                	rex.WRX push rsp
    1450:	00 64 61 6d          	add    BYTE PTR [rcx+riz*2+0x6d],ah
    1454:	61                   	(bad)  
    1455:	67 65 43 6f          	rex.XB outs dx,DWORD PTR gs:[esi]
    1459:	75 6e                	jne    14c9 <.debug_str+0x14c9>
    145b:	74 00                	je     145d <.debug_str+0x145d>
    145d:	69 6e 74 65 72 76 61 	imul   ebp,DWORD PTR [rsi+0x74],0x61767265
    1464:	6c                   	ins    BYTE PTR es:[rdi],dx
    1465:	00 63 6f             	add    BYTE PTR [rbx+0x6f],ah
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:786
	Info_SetValueForKey( infostring, "sv_maxclients", 
    1468:	6c                   	ins    BYTE PTR es:[rdi],dx
    1469:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    146a:	72 43                	jb     14af <.debug_str+0x14af>
    146c:	79 61                	jns    14cf <.debug_str+0x14cf>
    146e:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    146f:	00 53 56             	add    BYTE PTR [rbx+0x56],dl
    1472:	5f                   	pop    rdi
    1473:	43 68 65 63 6b 54    	rex.XB push 0x546b6365
    1479:	69 6d 65 6f 75 74 73 	imul   ebp,DWORD PTR [rbp+0x65],0x7374756f
    1480:	00 63 75             	add    BYTE PTR [rbx+0x75],ah
    1483:	72 72                	jb     14f7 <.debug_str+0x14f7>
    1485:	46 72 61             	rex.RX jb 14e9 <.debug_str+0x14e9>
    1488:	6d                   	ins    DWORD PTR es:[rdi],dx
    1489:	65 00 6c 6f 6e       	add    BYTE PTR gs:[rdi+rbp*2+0x6e],ch
    148e:	67 20 64 6f 75       	and    BYTE PTR [edi+ebp*2+0x75],ah
    1493:	62                   	(bad)  
    1494:	6c                   	ins    BYTE PTR es:[rdi],dx
    1495:	65 00 76 65          	add    BYTE PTR gs:[rsi+0x65],dh
    1499:	6c                   	ins    BYTE PTR es:[rdi],dx
    149a:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    149b:	63 69 74             	movsxd ebp,DWORD PTR [rcx+0x74]
    149e:	79 00                	jns    14a0 <.debug_str+0x14a0>
    14a0:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    14a1:	75 6d                	jne    1510 <.debug_str+0x1510>
    14a3:	5f                   	pop    rdi
    14a4:	65 6e                	outs   dx,BYTE PTR gs:[rsi]
    14a6:	74 69                	je     1511 <.debug_str+0x1511>
    14a8:	74 69                	je     1513 <.debug_str+0x1513>
    14aa:	65 73 00             	gs jae 14ad <.debug_str+0x14ad>
    14ad:	68 61 73 68 50       	push   0x50687361
    14b2:	72 65                	jb     1519 <.debug_str+0x1519>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:788
	Info_SetValueForKey( infostring, "gametype", va("%i", sv_gametype->integer ) );
    14b4:	76 00                	jbe    14b6 <.debug_str+0x14b6>
    14b6:	67 65 6e             	outs   dx,BYTE PTR gs:[esi]
    14b9:	65 72 69             	gs jb  1525 <.debug_str+0x1525>
    14bc:	63 31                	movsxd esi,DWORD PTR [rcx]
    14be:	00 74 6f 6b          	add    BYTE PTR [rdi+rbp*2+0x6b],dh
    14c2:	65 6e                	outs   dx,BYTE PTR gs:[rsi]
    14c4:	54                   	push   rsp
    14c5:	79 70                	jns    1537 <.debug_str+0x1537>
    14c7:	65 5f                	gs pop rdi
    14c9:	74 00                	je     14cb <.debug_str+0x14cb>
    14cb:	6c                   	ins    BYTE PTR es:[rdi],dx
    14cc:	61                   	(bad)  
    14cd:	73 74                	jae    1543 <.debug_str+0x1543>
    14cf:	43 6f                	rex.XB outs dx,DWORD PTR ds:[rsi]
    14d1:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    14d2:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    14d3:	65 63 74 54 69       	movsxd esi,DWORD PTR gs:[rsp+rdx*2+0x69]
    14d8:	6d                   	ins    DWORD PTR es:[rdi],dx
    14d9:	65 00 77 6f          	add    BYTE PTR gs:[rdi+0x6f],dh
    14dd:	72 6c                	jb     154b <.debug_str+0x154b>
    14df:	64 53                	fs push rbx
    14e1:	65 63 74 6f 72       	movsxd esi,DWORD PTR gs:[rdi+rbp*2+0x72]
    14e6:	00 53 53             	add    BYTE PTR [rbx+0x53],dl
    14e9:	5f                   	pop    rdi
    14ea:	47                   	rex.RXB
    14eb:	41                   	rex.B
    14ec:	4d                   	rex.WRB
    14ed:	45 00 67 69          	add    BYTE PTR [r15+0x69],r12b
    14f1:	54                   	push   rsp
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:789
	Info_SetValueForKey( infostring, "pure", va("%i", sv_pure->integer ) );
    14f2:	79 70                	jns    1564 <.debug_str+0x1564>
    14f4:	65 00 76 65          	add    BYTE PTR gs:[rsi+0x65],dh
    14f8:	63 34 5f             	movsxd esi,DWORD PTR [rdi+rbx*2]
    14fb:	74 00                	je     14fd <.debug_str+0x14fd>
    14fd:	6c                   	ins    BYTE PTR es:[rdi],dx
    14fe:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    14ff:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    1500:	67 20 75 6e          	and    BYTE PTR [ebp+0x6e],dh
    1504:	73 69                	jae    156f <.debug_str+0x156f>
    1506:	67 6e                	outs   dx,BYTE PTR ds:[esi]
    1508:	65 64 20 69 6e       	gs and BYTE PTR fs:[rcx+0x6e],ch
    150d:	74 00                	je     150f <.debug_str+0x150f>
    150f:	4f 50                	rex.WRXB push r8
    1511:	5f                   	pop    rdi
    1512:	41                   	rex.B
    1513:	44                   	rex.R
    1514:	44                   	rex.R
    1515:	46 00 67 61          	rex.RX add BYTE PTR [rdi+0x61],r12b
    1519:	6d                   	ins    DWORD PTR es:[rdi],dx
    151a:	65 43 6c             	gs rex.XB ins BYTE PTR es:[rdi],dx
    151d:	69 65 6e 74 73 00 64 	imul   esp,DWORD PTR [rbp+0x6e],0x64007374
    1524:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    1525:	77 6e                	ja     1595 <.debug_str+0x1595>
    1527:	6c                   	ins    BYTE PTR es:[rdi],dx
    1528:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    1529:	61                   	(bad)  
    152a:	64 42 6c             	fs rex.X ins BYTE PTR es:[rdi],dx
    152d:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    152e:	63 6b 73             	movsxd ebp,DWORD PTR [rbx+0x73]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:790
	Info_SetValueForKey(infostring, "g_needpass", va("%d", Cvar_VariableIntegerValue("g_needpass")));
    1531:	00 63 76             	add    BYTE PTR [rbx+0x76],ah
    1534:	61                   	(bad)  
    1535:	72 5f                	jb     1596 <.debug_str+0x1596>
    1537:	73 00                	jae    1539 <.debug_str+0x1539>
    1539:	63 76 61             	movsxd esi,DWORD PTR [rsi+0x61]
    153c:	72 5f                	jb     159d <.debug_str+0x159d>
    153e:	74 00                	je     1540 <.debug_str+0x1540>
    1540:	63 6c 5f 74          	movsxd ebp,DWORD PTR [rdi+rbx*2+0x74]
    1544:	69 74 6c 65 00 72 65 	imul   esi,DWORD PTR [rsp+rbp*2+0x65],0x61657200
    154b:	61 
    154c:	73 6f                	jae    15bd <.debug_str+0x15bd>
    154e:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    154f:	00 4f 50             	add    BYTE PTR [rdi+0x50],cl
    1552:	5f                   	pop    rdi
    1553:	4e                   	rex.WRX
    1554:	45 00 70 69          	add    BYTE PTR [r8+0x69],r14b
    1558:	63 6b 75             	movsxd ebp,DWORD PTR [rbx+0x75]
    155b:	70 5f                	jo     15bc <.debug_str+0x15bc>
    155d:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    155e:	61                   	(bad)  
    155f:	6d                   	ins    DWORD PTR es:[rdi],dx
    1560:	65 00 63 68          	add    BYTE PTR gs:[rbx+0x68],ah
    1564:	61                   	(bad)  
    1565:	72 00                	jb     1567 <.debug_str+0x1567>
    1567:	71 75                	jno    15de <.debug_str+0x15de>
    1569:	61                   	(bad)  
    156a:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    156b:	74 69                	je     15d6 <.debug_str+0x15d6>
    156d:	74 79                	je     15e8 <.debug_str+0x15e8>
    156f:	00 67 72             	add    BYTE PTR [rdi+0x72],ah
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:791
	gamedir = Cvar_VariableString( "fs_game" );
    1572:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    1573:	75 6e                	jne    15e3 <.debug_str+0x15e3>
    1575:	64 45 6e             	rex.RB outs dx,BYTE PTR fs:[rsi]
    1578:	74 69                	je     15e3 <.debug_str+0x15e3>
    157a:	74 79                	je     15f5 <.debug_str+0x15f5>
    157c:	4e 75 6d             	rex.WRX jne 15ec <.debug_str+0x15ec>
    157f:	00 54 4b 5f          	add    BYTE PTR [rbx+rcx*2+0x5f],dl
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:792
	if( *gamedir ) {
    1583:	45 51                	rex.RB push r9
    1585:	00 73 74             	add    BYTE PTR [rbx+0x74],dh
    1588:	64 69 6e 00 69 6e 73 	imul   ebp,DWORD PTR fs:[rsi+0x0],0x74736e69
    158f:	74 
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:793
		Info_SetValueForKey( infostring, "game", gamedir );
    1590:	72 75                	jb     1607 <.debug_str+0x1607>
    1592:	63 74 69 6f          	movsxd esi,DWORD PTR [rcx+rbp*2+0x6f]
    1596:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    1597:	43 6f                	rex.XB outs dx,DWORD PTR ds:[rsi]
    1599:	75 6e                	jne    1609 <.debug_str+0x1609>
    159b:	74 00                	je     159d <.debug_str+0x159d>
    159d:	72 63                	jb     1602 <.debug_str+0x1602>
    159f:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    15a0:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    15a1:	50                   	push   rax
    15a2:	61                   	(bad)  
    15a3:	73 73                	jae    1618 <.debug_str+0x1618>
    15a5:	77 6f                	ja     1616 <.debug_str+0x1616>
    15a7:	72 64                	jb     160d <.debug_str+0x160d>
    15a9:	32 00                	xor    al,BYTE PTR [rax]
    15ab:	65 78 74             	gs js  1622 <.debug_str+0x1622>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:796
	NET_OutOfBandPrint( NS_SERVER, from, "infoResponse\n%s", infostring );
    15ae:	65 72 6e             	gs jb  161f <.debug_str+0x161f>
    15b1:	61                   	(bad)  
    15b2:	6c                   	ins    BYTE PTR es:[rdi],dx
    15b3:	45 76 65             	rex.RB jbe 161b <.debug_str+0x161b>
    15b6:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    15b7:	74 54                	je     160d <.debug_str+0x160d>
    15b9:	69 6d 65 00 5f 49 4f 	imul   ebp,DWORD PTR [rbp+0x65],0x4f495f00
    15c0:	5f                   	pop    rdi
    15c1:	62                   	(bad)  
    15c2:	75 66                	jne    162a <.debug_str+0x162a>
    15c4:	5f                   	pop    rdi
    15c5:	62 61                	(bad)  
    15c7:	73 65                	jae    162e <.debug_str+0x162e>
    15c9:	00 67 69             	add    BYTE PTR [rdi+0x69],ah
    15cc:	74 65                	je     1633 <.debug_str+0x1633>
    15ce:	6d                   	ins    DWORD PTR es:[rdi],dx
    15cf:	5f                   	pop    rdi
    15d0:	73 00                	jae    15d2 <.debug_str+0x15d2>
    15d2:	43 56                	rex.XB push r14
    15d4:	5f                   	pop    rdi
    15d5:	4d                   	rex.WRB
    15d6:	41 58                	pop    r8
    15d8:	00 75 6e             	add    BYTE PTR [rbp+0x6e],dh
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:745
		return;
    15db:	73 65                	jae    1642 <.debug_str+0x1642>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:797
}
    15dd:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    15de:	74 46                	je     1626 <.debug_str+0x1626>
SV_FlushRedirect():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:808
{
    15e0:	72 61                	jb     1643 <.debug_str+0x1643>
    15e2:	67 6d                	ins    DWORD PTR es:[edi],dx
    15e4:	65 6e                	outs   dx,BYTE PTR gs:[rsi]
    15e6:	74 53                	je     163b <.debug_str+0x163b>
    15e8:	74 61                	je     164b <.debug_str+0x164b>
    15ea:	72 74                	jb     1660 <.debug_str+0x1660>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:809
	if ( *outputbuf )
    15ec:	00 65 6e             	add    BYTE PTR [rbp+0x6e],ah
    15ef:	74 69                	je     165a <.debug_str+0x165a>
    15f1:	74 79                	je     166c <.debug_str+0x166c>
    15f3:	45 76 65             	rex.RB jbe 165b <.debug_str+0x165b>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:811
		NET_OutOfBandPrint( NS_SERVER, &redirectAddress, "print\n%s", outputbuf );
    15f6:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    15f7:	74 53                	je     164c <.debug_str+0x164c>
    15f9:	65 71 75             	gs jno 1671 <.debug_str+0x1671>
    15fc:	65 6e                	outs   dx,BYTE PTR gs:[rsi]
    15fe:	63 65 00             	movsxd esp,DWORD PTR [rbp+0x0]
    1601:	49 54                	rex.WB push r12
    1603:	5f                   	pop    rdi
    1604:	50                   	push   rax
    1605:	4f 57                	rex.WRXB push r15
    1607:	45 52                	rex.RB push r10
    1609:	55                   	push   rbp
    160a:	50                   	push   rax
    160b:	00 5f 49             	add    BYTE PTR [rdi+0x49],bl
    160e:	4f 5f                	rex.WRXB pop r15
    1610:	72 65                	jb     1677 <.debug_str+0x1677>
    1612:	61                   	(bad)  
    1613:	64 5f                	fs pop rdi
    1615:	65 6e                	outs   dx,BYTE PTR gs:[rsi]
    1617:	64 00 61 78          	add    BYTE PTR fs:[rcx+0x78],ah
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:813
}
    161b:	69 73 44 65 66 61 75 	imul   esi,DWORD PTR [rbx+0x44],0x75616665
SVC_RemoteCommand():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:825
static void SVC_RemoteCommand( const netadr_t *from ) {
    1622:	6c                   	ins    BYTE PTR es:[rdi],dx
    1623:	74 00                	je     1625 <.debug_str+0x1625>
    1625:	6d                   	ins    DWORD PTR es:[rdi],dx
    1626:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    1627:	64 69 66 69 65 64 00 	imul   esp,DWORD PTR fs:[rsi+0x69],0x68006465
    162e:	68 
    162f:	61                   	(bad)  
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:834
	if ( SVC_RateLimitAddress( from, 10, 1000 ) ) {
    1630:	73 68                	jae    169a <.debug_str+0x169a>
    1632:	00 64 6c 6c          	add    BYTE PTR [rsp+rbp*2+0x6c],ah
    1636:	53                   	push   rbx
    1637:	79 73                	jns    16ac <.debug_str+0x16ac>
    1639:	63 61 6c             	movsxd esp,DWORD PTR [rcx+0x6c]
    163c:	6c                   	ins    BYTE PTR es:[rdi],dx
    163d:	00 53 56             	add    BYTE PTR [rbx+0x56],dl
    1640:	5f                   	pop    rdi
    1641:	46 72 61             	rex.RX jb 16a5 <.debug_str+0x16a5>
    1644:	6d                   	ins    DWORD PTR es:[rdi],dx
    1645:	65 4d 73 65          	gs rex.WRB jae 16ae <.debug_str+0x16ae>
    1649:	63 00                	movsxd eax,DWORD PTR [rax]
    164b:	5f                   	pop    rdi
    164c:	49                   	rex.WB
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:835
		if ( com_developer->integer ) {
    164d:	4f 5f                	rex.WRXB pop r15
    164f:	46                   	rex.RX
    1650:	49                   	rex.WB
    1651:	4c                   	rex.WR
    1652:	45 00 67 69          	add    BYTE PTR [r15+0x69],r12b
    1656:	74 65                	je     16bd <.debug_str+0x16bd>
    1658:	6d                   	ins    DWORD PTR es:[rdi],dx
    1659:	5f                   	pop    rdi
    165a:	74 00                	je     165c <.debug_str+0x165c>
    165c:	63 6f 6c             	movsxd ebp,DWORD PTR [rdi+0x6c]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:836
			Com_Printf( "SVC_RemoteCommand: rate limit from %s exceeded, dropping request\n",
    165f:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    1660:	72 57                	jb     16b9 <.debug_str+0x16b9>
    1662:	68 69 74 65 00       	push   0x657469
    1667:	6c                   	ins    BYTE PTR es:[rdi],dx
    1668:	61                   	(bad)  
    1669:	73 74                	jae    16df <.debug_str+0x16df>
    166b:	53                   	push   rbx
    166c:	65 6e                	outs   dx,BYTE PTR gs:[rsi]
    166e:	74 53                	je     16c3 <.debug_str+0x16c3>
    1670:	69 7a 65 00 63 6f 6c 	imul   edi,DWORD PTR [rdx+0x65],0x6c6f6300
    1677:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    1678:	72 4d                	jb     16c7 <.debug_str+0x16c7>
    167a:	64 47 72 65          	fs rex.RXB jb 16e3 <.debug_str+0x16e3>
    167e:	79 00                	jns    1680 <.debug_str+0x1680>
    1680:	5f                   	pop    rdi
    1681:	49                   	rex.WB
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:839
		return;
    1682:	4f 5f                	rex.WRXB pop r15
    1684:	77 69                	ja     16ef <.debug_str+0x16ef>
    1686:	64 65 5f             	fs gs pop rdi
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:842
	pw = Cmd_Argv( 1 );
    1689:	64 61                	fs (bad) 
    168b:	74 61                	je     16ee <.debug_str+0x16ee>
    168d:	00 6d 65             	add    BYTE PTR [rbp+0x65],ch
    1690:	73 73                	jae    1705 <.debug_str+0x1705>
    1692:	61                   	(bad)  
    1693:	67 65 41 63 6b 65    	movsxd ebp,DWORD PTR gs:[r11d+0x65]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:843
	if ( ( sv_rconPassword->string[0] && strcmp( pw, sv_rconPassword->string ) == 0 ) ||
    1699:	64 00 74 7a 6e       	add    BYTE PTR fs:[rdx+rdi*2+0x6e],dh
    169e:	61                   	(bad)  
    169f:	6d                   	ins    DWORD PTR es:[rdi],dx
    16a0:	65 00 65 6e          	add    BYTE PTR gs:[rbp+0x6e],ah
    16a4:	74 72                	je     1718 <.debug_str+0x1718>
    16a6:	79 50                	jns    16f8 <.debug_str+0x16f8>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:843 (discriminator 1)
    16a8:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    16a9:	69 6e 74 00 63 6f 6d 	imul   ebp,DWORD PTR [rsi+0x74],0x6d6f6300
    16b0:	70 69                	jo     171b <.debug_str+0x171b>
    16b2:	6c                   	ins    BYTE PTR es:[rdi],dx
    16b3:	65 64 00 47 41       	gs add BYTE PTR fs:[rdi+0x41],al
    16b8:	4d                   	rex.WRB
    16b9:	45 5f                	rex.RB pop r15
    16bb:	43                   	rex.XB
    16bc:	4c                   	rex.WR
    16bd:	49                   	rex.WB
    16be:	45                   	rex.RB
    16bf:	4e 54                	rex.WRX push rsp
    16c1:	5f                   	pop    rdi
    16c2:	44                   	rex.R
    16c3:	49 53                	rex.WB push r11
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:844 (discriminator 3)
		( rconPassword2[0] && strcmp( pw, rconPassword2 ) == 0 ) ) {
    16c5:	43                   	rex.XB
    16c6:	4f                   	rex.WRXB
    16c7:	4e                   	rex.WRX
    16c8:	4e                   	rex.WRX
    16c9:	45                   	rex.RB
    16ca:	43 54                	rex.XB push r12
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:843 (discriminator 3)
	if ( ( sv_rconPassword->string[0] && strcmp( pw, sv_rconPassword->string ) == 0 ) ||
    16cc:	00 54 4b 5f          	add    BYTE PTR [rbx+rcx*2+0x5f],dl
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:844
		( rconPassword2[0] && strcmp( pw, rconPassword2 ) == 0 ) ) {
    16d0:	47 54                	rex.RXB push r12
    16d2:	00 61 70             	add    BYTE PTR [rcx+0x70],ah
    16d5:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    16d6:	73 00                	jae    16d8 <.debug_str+0x16d8>
    16d8:	68 61 73 68 4e       	push   0x4e687361
    16dd:	65 78 74             	gs js  1754 <.debug_str+0x1754>
    16e0:	00 63 6f             	add    BYTE PTR [rbx+0x6f],ah
    16e3:	6c                   	ins    BYTE PTR es:[rdi],dx
    16e4:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    16e5:	72 44                	jb     172b <.debug_str+0x172b>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:845
		valid = qtrue;
    16e7:	6b 47 72 65          	imul   eax,DWORD PTR [rdi+0x72],0x65
    16eb:	79 00                	jns    16ed <.debug_str+0x16ed>
    16ed:	63 6c 69 65          	movsxd ebp,DWORD PTR [rcx+rbp*2+0x65]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:846
		Com_Printf( "Rcon from %s: %s\n", NET_AdrToString( from ), Cmd_ArgsFrom( 2 ) );
    16f1:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    16f2:	74 53                	je     1747 <.debug_str+0x1747>
    16f4:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    16f5:	61                   	(bad)  
    16f6:	70 73                	jo     176b <.debug_str+0x176b>
    16f8:	68 6f 74 5f 74       	push   0x745f746f
    16fd:	00 6d 6f             	add    BYTE PTR [rbp+0x6f],ch
    1700:	64 65 6c             	fs gs ins BYTE PTR es:[rdi],dx
    1703:	69 6e 64 65 78 32 00 	imul   ebp,DWORD PTR [rsi+0x64],0x327865
    170a:	66 69 6c 65 48 61 6e 	imul   bp,WORD PTR [rbp+riz*2+0x48],0x6e61
    1711:	64 6c                	fs ins BYTE PTR es:[rdi],dx
    1713:	65 5f                	gs pop rdi
    1715:	74 00                	je     1717 <.debug_str+0x1717>
    1717:	69 73 4c 41 4e 41 64 	imul   esi,DWORD PTR [rbx+0x4c],0x64414e41
    171e:	64 72 65             	fs jb  1786 <.debug_str+0x1786>
    1721:	73 73                	jae    1796 <.debug_str+0x1796>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:849
		if ( SVC_RateLimit( &bucket, 10, 1000 ) ) {
    1723:	00 76 6d             	add    BYTE PTR [rsi+0x6d],dh
    1726:	5f                   	pop    rdi
    1727:	73 00                	jae    1729 <.debug_str+0x1729>
    1729:	76 6d                	jbe    1798 <.debug_str+0x1798>
    172b:	5f                   	pop    rdi
    172c:	74 00                	je     172e <.debug_str+0x172e>
    172e:	63 6c 69 65          	movsxd ebp,DWORD PTR [rcx+rbp*2+0x65]
    1732:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    1733:	74 43                	je     1778 <.debug_str+0x1778>
    1735:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    1736:	6d                   	ins    DWORD PTR es:[rdi],dx
    1737:	6d                   	ins    DWORD PTR es:[rdi],dx
    1738:	61                   	(bad)  
    1739:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    173a:	64 53                	fs push rbx
    173c:	74 72                	je     17b0 <.debug_str+0x17b0>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:850
			Com_DPrintf( "SVC_RemoteCommand: rate limit exceeded, dropping request\n" );
    173e:	69 6e 67 00 63 6f 6d 	imul   ebp,DWORD PTR [rsi+0x67],0x6d6f6300
    1745:	5f                   	pop    rdi
    1746:	61                   	(bad)  
    1747:	66 66 69 6e 69 74 79 	data16 imul bp,WORD PTR [rsi+0x69],0x7974
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:851
			return;
    174e:	4d 61                	rex.WRB (bad) 
    1750:	73 6b                	jae    17bd <.debug_str+0x17bd>
    1752:	00 63 6f             	add    BYTE PTR [rbx+0x6f],ah
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:854
		valid = qfalse;
    1755:	6c                   	ins    BYTE PTR es:[rdi],dx
    1756:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    1757:	72 4c                	jb     17a5 <.debug_str+0x17a5>
    1759:	74 47                	je     17a2 <.debug_str+0x17a2>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:855
		Com_Printf( "Bad rcon from %s: %s\n", NET_AdrToString( from ), Cmd_ArgsFrom( 2 ) );
    175b:	72 65                	jb     17c2 <.debug_str+0x17c2>
    175d:	79 00                	jns    175f <.debug_str+0x175f>
    175f:	73 76                	jae    17d7 <.debug_str+0x17d7>
    1761:	5f                   	pop    rdi
    1762:	66 69 6c 74 65 72 00 	imul   bp,WORD PTR [rsp+rsi*2+0x65],0x72
    1769:	5f                   	pop    rdi
    176a:	5f                   	pop    rdi
    176b:	70 61                	jo     17ce <.debug_str+0x17ce>
    176d:	64 35 00 54 4b 5f    	fs xor eax,0x5f4b5400
    1773:	53                   	push   rbx
    1774:	43                   	rex.XB
    1775:	4f 50                	rex.WRXB push r8
    1777:	45 5f                	rex.RB pop r15
    1779:	4f 50                	rex.WRXB push r8
    177b:	45                   	rex.RB
    177c:	4e 00 63 6f          	rex.WRX add BYTE PTR [rbx+0x6f],r12b
    1780:	6d                   	ins    DWORD PTR es:[rdi],dx
    1781:	5f                   	pop    rdi
    1782:	70 72                	jo     17f6 <.debug_str+0x17f6>
    1784:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    1785:	74 6f                	je     17f6 <.debug_str+0x17f6>
    1787:	63 6f 6c             	movsxd ebp,DWORD PTR [rdi+0x6c]
    178a:	00 77 65             	add    BYTE PTR [rdi+0x65],dh
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:859
	redirectAddress = *from;
    178d:	61                   	(bad)  
    178e:	70 6f                	jo     17ff <.debug_str+0x17ff>
    1790:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    1791:	00 43 56             	add    BYTE PTR [rbx+0x56],al
    1794:	5f                   	pop    rdi
    1795:	46 53                	rex.RX push rbx
    1797:	50                   	push   rax
    1798:	41 54                	push   r12
    179a:	48 00 72 65          	rex.W add BYTE PTR [rdx+0x65],sil
    179e:	64 69 72 65 63 74 41 	imul   esi,DWORD PTR fs:[rdx+0x65],0x64417463
    17a5:	64 
    17a6:	64 72 65             	fs jb  180e <.debug_str+0x180e>
    17a9:	73 73                	jae    181e <.debug_str+0x181e>
    17ab:	00 6e 75             	add    BYTE PTR [rsi+0x75],ch
    17ae:	6d                   	ins    DWORD PTR es:[rdi],dx
    17af:	43 6c                	rex.XB ins BYTE PTR es:[rdi],dx
    17b1:	75 73                	jne    1826 <.debug_str+0x1826>
    17b3:	74 65                	je     181a <.debug_str+0x181a>
    17b5:	72 73                	jb     182a <.debug_str+0x182a>
    17b7:	00 5f 6d             	add    BYTE PTR [rdi+0x6d],bl
    17ba:	61                   	(bad)  
    17bb:	72 6b                	jb     1828 <.debug_str+0x1828>
    17bd:	65 72 73             	gs jb  1833 <.debug_str+0x1833>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:860
	Com_BeginRedirect( sv_outputbuf, sizeof( sv_outputbuf ), SV_FlushRedirect );
    17c0:	00 53 56             	add    BYTE PTR [rbx+0x56],dl
    17c3:	5f                   	pop    rdi
    17c4:	43 68 65 63 6b 50    	rex.XB push 0x506b6365
    17ca:	61                   	(bad)  
    17cb:	75 73                	jne    1840 <.debug_str+0x1840>
    17cd:	65 64 00 53 56       	gs add BYTE PTR fs:[rbx+0x56],dl
    17d2:	5f                   	pop    rdi
    17d3:	52                   	push   rdx
    17d4:	61                   	(bad)  
    17d5:	74 65                	je     183c <.debug_str+0x183c>
    17d7:	4d 73 65             	rex.WRB jae 183f <.debug_str+0x183f>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:862
	if ( !sv_rconPassword->string[0] && !rconPassword2[0] ) {
    17da:	63 00                	movsxd eax,DWORD PTR [rax]
    17dc:	62                   	(bad)  
    17dd:	75 63                	jne    1842 <.debug_str+0x1842>
    17df:	6b 65 74 00          	imul   esp,DWORD PTR [rbp+0x74],0x0
    17e3:	70 6d                	jo     1852 <.debug_str+0x1852>
    17e5:	5f                   	pop    rdi
    17e6:	66 6c                	data16 ins BYTE PTR es:[rdi],dx
    17e8:	61                   	(bad)  
    17e9:	67 73 00             	addr32 jae 17ec <.debug_str+0x17ec>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:862 (discriminator 1)
    17ec:	66 72 65             	data16 jb 1854 <.debug_str+0x1854>
    17ef:	65 53                	gs push rbx
    17f1:	74 6f                	je     1862 <.debug_str+0x1862>
    17f3:	72 61                	jb     1856 <.debug_str+0x1856>
    17f5:	67 65 45 6e          	rex.RB outs dx,BYTE PTR gs:[esi]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:863
		Com_Printf( "No rconpassword set on the server.\n" );
    17f9:	74 69                	je     1864 <.debug_str+0x1864>
    17fb:	74 69                	je     1866 <.debug_str+0x1866>
    17fd:	65 73 00             	gs jae 1800 <.debug_str+0x1800>
    1800:	66 73 5f             	data16 jae 1862 <.debug_str+0x1862>
    1803:	72 65                	jb     186a <.debug_str+0x186a>
    1805:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    1806:	72 64                	jb     186c <.debug_str+0x186c>
    1808:	65 72 65             	gs jb  1870 <.debug_str+0x1870>
    180b:	64 00 5f 63          	add    BYTE PTR fs:[rdi+0x63],bl
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:864
	} else if ( !valid ) {
    180f:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    1810:	64 65 63 76 74       	fs movsxd esi,DWORD PTR gs:[rsi+0x74]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:865
		Com_Printf( "Bad rconpassword.\n" );
    1815:	00 4f 50             	add    BYTE PTR [rdi+0x50],cl
    1818:	5f                   	pop    rdi
    1819:	53                   	push   rbx
    181a:	45 58                	rex.RB pop r8
    181c:	38 00                	cmp    BYTE PTR [rax],al
    181e:	64 6f                	outs   dx,DWORD PTR fs:[rsi]
    1820:	75 62                	jne    1884 <.debug_str+0x1884>
    1822:	6c                   	ins    BYTE PTR es:[rdi],dx
    1823:	65 00 63 61          	add    BYTE PTR gs:[rbx+0x61],ah
    1827:	6c                   	ins    BYTE PTR es:[rdi],dx
    1828:	6c                   	ins    BYTE PTR es:[rdi],dx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:871
		cmd_aux = Cmd_Cmd();
    1829:	4c                   	rex.WR
    182a:	65 76 65             	gs jbe 1892 <.debug_str+0x1892>
    182d:	6c                   	ins    BYTE PTR es:[rdi],dx
    182e:	00 73 6f             	add    BYTE PTR [rbx+0x6f],dh
    1831:	75 6e                	jne    18a1 <.debug_str+0x18a1>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:872
		while ( *cmd_aux && *cmd_aux <= ' ' ) // skip whitespace
    1833:	64 73 00             	fs jae 1836 <.debug_str+0x1836>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:873
			cmd_aux++;
    1836:	73 76                	jae    18ae <.debug_str+0x18ae>
    1838:	5f                   	pop    rdi
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:872
		while ( *cmd_aux && *cmd_aux <= ' ' ) // skip whitespace
    1839:	70 61                	jo     189c <.debug_str+0x189c>
    183b:	75 73                	jne    18b0 <.debug_str+0x18b0>
    183d:	65 64 00 71 70       	gs add BYTE PTR fs:[rcx+0x70],dh
    1842:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    1843:	72 74                	jb     18b9 <.debug_str+0x18b9>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:872 (discriminator 1)
    1845:	00 66 72             	add    BYTE PTR [rsi+0x72],ah
    1848:	61                   	(bad)  
    1849:	6d                   	ins    DWORD PTR es:[rdi],dx
    184a:	65 4e 75 6d          	gs rex.WRX jne 18bb <.debug_str+0x18bb>
    184e:	00 73 79             	add    BYTE PTR [rbx+0x79],dh
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:874
		cmd_aux += 4; // "rcon"
    1851:	6d                   	ins    DWORD PTR es:[rdi],dx
    1852:	56                   	push   rsi
    1853:	61                   	(bad)  
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:875
		while ( *cmd_aux == ' ' )
    1854:	6c                   	ins    BYTE PTR es:[rdi],dx
    1855:	75 65                	jne    18bc <.debug_str+0x18bc>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:876
			cmd_aux++;
    1857:	00 73 76             	add    BYTE PTR [rbx+0x76],dh
    185a:	5f                   	pop    rdi
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:875
		while ( *cmd_aux == ' ' )
    185b:	66 70 73             	data16 jo 18d1 <.debug_str+0x18d1>
    185e:	00 64 6f 77          	add    BYTE PTR [rdi+rbp*2+0x77],ah
    1862:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    1863:	6c                   	ins    BYTE PTR es:[rdi],dx
    1864:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    1865:	61                   	(bad)  
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:877
		if ( *cmd_aux == '"' ) {
    1866:	64 58                	fs pop rax
    1868:	6d                   	ins    DWORD PTR es:[rdi],dx
    1869:	69 74 42 6c 6f 63 6b 	imul   esi,DWORD PTR [rdx+rax*2+0x6c],0x6b636f
    1870:	00 
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:878
			cmd_aux++;
    1871:	56                   	push   rsi
    1872:	4d 5f                	rex.WRB pop r15
    1874:	55                   	push   rbp
    1875:	49 00 64 65 6d       	rex.WB add BYTE PTR [r13+riz*2+0x6d],spl
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:880
				cmd_aux++;
    187a:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    187b:	5f                   	pop    rdi
    187c:	70 72                	jo     18f0 <.debug_str+0x18f0>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:879
			while ( *cmd_aux && *cmd_aux != '"' ) // quoted password
    187e:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    187f:	74 6f                	je     18f0 <.debug_str+0x18f0>
    1881:	63 6f 6c             	movsxd ebp,DWORD PTR [rdi+0x6c]
    1884:	73 00                	jae    1886 <.debug_str+0x1886>
    1886:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    1887:	70 53                	jo     18dc <.debug_str+0x18dc>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:879 (discriminator 1)
    1889:	74 61                	je     18ec <.debug_str+0x18ec>
    188b:	63 6b 54             	movsxd ebp,DWORD PTR [rbx+0x54]
    188e:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    188f:	70 00                	jo     1891 <.debug_str+0x1891>
    1891:	65 6e                	outs   dx,BYTE PTR gs:[rsi]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:881
			if ( *cmd_aux == '"' )
    1893:	74 69                	je     18fe <.debug_str+0x18fe>
    1895:	74 79                	je     1910 <.debug_str+0x1910>
    1897:	53                   	push   rbx
    1898:	68 61 72 65 64       	push   0x64657261
    189d:	5f                   	pop    rdi
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:882
				cmd_aux++;
    189e:	74 00                	je     18a0 <.debug_str+0x18a0>
    18a0:	49 54                	rex.WB push r12
    18a2:	5f                   	pop    rdi
    18a3:	41                   	rex.B
    18a4:	4d                   	rex.WRB
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:885
				cmd_aux++;
    18a5:	4d                   	rex.WRB
    18a6:	4f 00 73 65          	rex.WRXB add BYTE PTR [r11+0x65],r14b
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:884
			while ( *cmd_aux && *cmd_aux != ' ' ) // password
    18aa:	72 76                	jb     1922 <.debug_str+0x1922>
    18ac:	65 72 53             	gs jb  1902 <.debug_str+0x1902>
    18af:	74 61                	je     1912 <.debug_str+0x1912>
    18b1:	74 69                	je     191c <.debug_str+0x191c>
    18b3:	63 5f 74             	movsxd ebx,DWORD PTR [rdi+0x74]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:884 (discriminator 1)
    18b6:	00 73 70             	add    BYTE PTR [rbx+0x70],dh
    18b9:	65 65 64 00 73 76    	gs gs add BYTE PTR fs:[rbx+0x76],dh
    18bf:	5f                   	pop    rdi
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:887 (discriminator 1)
		while ( *cmd_aux == ' ' )
    18c0:	6d                   	ins    DWORD PTR es:[rdi],dx
    18c1:	61                   	(bad)  
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:888
			cmd_aux++;
    18c2:	78 52                	js     1916 <.debug_str+0x1916>
    18c4:	61                   	(bad)  
    18c5:	74 65                	je     192c <.debug_str+0x192c>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:887
		while ( *cmd_aux == ' ' )
    18c7:	00 67 72             	add    BYTE PTR [rdi+0x72],ah
    18ca:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    18cb:	75 70                	jne    193d <.debug_str+0x193d>
    18cd:	00 49 54             	add    BYTE PTR [rcx+0x54],cl
    18d0:	5f                   	pop    rdi
    18d1:	42                   	rex.X
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:890
		Cmd_ExecuteString( cmd_aux );
    18d2:	41                   	rex.B
    18d3:	44 00 5f 5f          	add    BYTE PTR [rdi+0x5f],r11b
    18d7:	69 6e 74 33 32 5f 74 	imul   ebp,DWORD PTR [rsi+0x74],0x745f3233
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:893
	Com_EndRedirect();
    18de:	00 4f 50             	add    BYTE PTR [rdi+0x50],cl
    18e1:	5f                   	pop    rdi
    18e2:	50                   	push   rax
    18e3:	55                   	push   rbp
    18e4:	53                   	push   rbx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:839
		return;
    18e5:	48 00 5f 5f          	rex.W add BYTE PTR [rdi+0x5f],bl
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:894
}
    18e9:	75 69                	jne    1954 <.debug_str+0x1954>
    18eb:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    18ec:	74 33                	je     1921 <.debug_str+0x1921>
    18ee:	32 5f 74             	xor    bl,BYTE PTR [rdi+0x74]
SV_ConnectionlessPacket():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:907
static void SV_ConnectionlessPacket( const netadr_t *from, msg_t *msg ) {
    18f1:	00 64 61 74          	add    BYTE PTR [rcx+riz*2+0x74],ah
    18f5:	61                   	(bad)  
    18f6:	00 53 56             	add    BYTE PTR [rbx+0x56],dl
    18f9:	43 5f                	rex.XB pop r15
    18fb:	52                   	push   rdx
    18fc:	61                   	(bad)  
    18fd:	74 65                	je     1964 <.debug_str+0x1964>
    18ff:	4c 69 6d 69 74 00 43 	imul   r13,QWORD PTR [rbp+0x69],0x53430074
    1906:	53 
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:911
	MSG_BeginReadingOOB( msg );
    1907:	5f                   	pop    rdi
    1908:	5a                   	pop    rdx
    1909:	4f                   	rex.WRXB
    190a:	4d                   	rex.WRB
    190b:	42                   	rex.X
    190c:	49                   	rex.WB
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:912
	MSG_ReadLong( msg );		// skip the -1 marker
    190d:	45 00 5f 5f          	add    BYTE PTR [r15+0x5f],r11b
    1911:	64 61                	fs (bad) 
    1913:	79 6c                	jns    1981 <.debug_str+0x1981>
    1915:	69 67 68 74 00 63 6f 	imul   esp,DWORD PTR [rdi+0x68],0x6f630074
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:914
	if ( !memcmp( "connect ", msg->data + 4, 8 ) ) {
    191c:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    191d:	73 74                	jae    1993 <.debug_str+0x1993>
    191f:	61                   	(bad)  
    1920:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    1921:	74 4c                	je     196f <.debug_str+0x196f>
    1923:	69 67 68 74 00 4f 50 	imul   esp,DWORD PTR [rdi+0x68],0x504f0074
    192a:	5f                   	pop    rdi
    192b:	4a 55                	rex.WX push rbp
    192d:	4d 50                	rex.WRB push r8
    192f:	00 54 4b 5f          	add    BYTE PTR [rbx+rcx*2+0x5f],dl
    1933:	4c 54                	rex.WR push rsp
    1935:	00 62 6d             	add    BYTE PTR [rdx+0x6d],ah
    1938:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    1939:	64 65 6c             	fs gs ins BYTE PTR es:[rdi],dx
    193c:	00 73 76             	add    BYTE PTR [rbx+0x76],dh
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:915
		if ( msg->cursize > MAX_INFO_STRING*2 ) { // if we assume 200% compression ratio on userinfo
    193f:	5f                   	pop    rdi
    1940:	70 72                	jo     19b4 <.debug_str+0x19b4>
    1942:	69 76 61 74 65 50 61 	imul   esi,DWORD PTR [rsi+0x61],0x61506574
    1949:	73 73                	jae    19be <.debug_str+0x19be>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:916
			if ( com_developer->integer ) {
    194b:	77 6f                	ja     19bc <.debug_str+0x19bc>
    194d:	72 64                	jb     19b3 <.debug_str+0x19b3>
    194f:	00 6d 69             	add    BYTE PTR [rbp+0x69],ch
    1952:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    1953:	73 00                	jae    1955 <.debug_str+0x1955>
    1955:	72 65                	jb     19bc <.debug_str+0x19bc>
    1957:	73 74                	jae    19cd <.debug_str+0x19cd>
    1959:	61                   	(bad)  
    195a:	72 74                	jb     19d0 <.debug_str+0x19d0>
    195c:	69 6e 67 00 77 6f 72 	imul   ebp,DWORD PTR [rsi+0x67],0x726f7700
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:917
				Com_Printf( "%s : connect packet is too long - %i\n", NET_AdrToString( from ), msg->cursize );
    1963:	6c                   	ins    BYTE PTR es:[rdi],dx
    1964:	64 53                	fs push rbx
    1966:	65 63 74 6f 72       	movsxd esi,DWORD PTR gs:[rdi+rbp*2+0x72]
    196b:	5f                   	pop    rdi
    196c:	73 00                	jae    196e <.debug_str+0x196e>
    196e:	4f 50                	rex.WRXB push r8
    1970:	5f                   	pop    rdi
    1971:	4c                   	rex.WR
    1972:	4f                   	rex.WRXB
    1973:	43                   	rex.XB
    1974:	41                   	rex.B
    1975:	4c 00 6d 65          	rex.WR add BYTE PTR [rbp+0x65],r13b
    1979:	73 73                	jae    19ee <.debug_str+0x19ee>
    197b:	61                   	(bad)  
    197c:	67 65 53             	addr32 gs push rbx
    197f:	69 7a 65 00 73 76 5f 	imul   edi,DWORD PTR [rdx+0x65],0x5f767300
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:919
			return;
    1986:	73 68                	jae    19f0 <.debug_str+0x19f0>
    1988:	75 74                	jne    19fe <.debug_str+0x19fe>
    198a:	64 6f                	outs   dx,DWORD PTR fs:[rsi]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:921
		Huff_Decompress( msg, 12 );
    198c:	77 6e                	ja     19fc <.debug_str+0x19fc>
    198e:	00 62 72             	add    BYTE PTR [rdx+0x72],ah
    1991:	65 61                	gs (bad) 
    1993:	6b 46 75 6e          	imul   eax,DWORD PTR [rsi+0x75],0x6e
    1997:	63 74 69 6f          	movsxd esi,DWORD PTR [rcx+rbp*2+0x6f]
    199b:	6e                   	outs   dx,BYTE PTR ds:[rsi]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:924
	s = MSG_ReadStringLine( msg );
    199c:	00 66 6f             	add    BYTE PTR [rsi+0x6f],ah
    199f:	72 63                	jb     1a04 <.debug_str+0x1a04>
    19a1:	65 44 61             	gs rex.R (bad) 
    19a4:	74 61                	je     1a07 <.debug_str+0x1a07>
    19a6:	4d 61                	rex.WRB (bad) 
    19a8:	73 6b                	jae    1a15 <.debug_str+0x1a15>
    19aa:	00 62 67             	add    BYTE PTR [rdx+0x67],ah
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:925
	Cmd_TokenizeString( s );
    19ad:	5f                   	pop    rdi
    19ae:	69 74 65 6d 6c 69 73 	imul   esi,DWORD PTR [rbp+riz*2+0x6d],0x7473696c
    19b5:	74 
    19b6:	00 6e 65             	add    BYTE PTR [rsi+0x65],ch
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:927
	c = Cmd_Argv(0);
    19b9:	74 63                	je     1a1e <.debug_str+0x1a1e>
    19bb:	68 61 6e 5f 74       	push   0x745f6e61
    19c0:	00 64 65 6c          	add    BYTE PTR [rbp+riz*2+0x6c],ah
    19c4:	74 61                	je     1a27 <.debug_str+0x1a27>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:929
	if ( com_developer->integer ) {
    19c6:	4d                   	rex.WRB
    19c7:	65 73 73             	gs jae 1a3d <.debug_str+0x1a3d>
    19ca:	61                   	(bad)  
    19cb:	67 65 00 56 4d       	add    BYTE PTR gs:[esi+0x4d],dl
    19d0:	5f                   	pop    rdi
    19d1:	43                   	rex.XB
    19d2:	47                   	rex.RXB
    19d3:	41                   	rex.B
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:930
		Com_Printf( "SV packet %s : %s\n", NET_AdrToString( from ), c );
    19d4:	4d                   	rex.WRB
    19d5:	45 00 5f 66          	add    BYTE PTR [r15+0x66],r11b
    19d9:	72 65                	jb     1a40 <.debug_str+0x1a40>
    19db:	65 72 65             	gs jb  1a43 <.debug_str+0x1a43>
    19de:	73 5f                	jae    1a3f <.debug_str+0x1a3f>
    19e0:	62                   	(bad)  
    19e1:	75 66                	jne    1a49 <.debug_str+0x1a49>
    19e3:	00 47 4e             	add    BYTE PTR [rdi+0x4e],al
    19e6:	55                   	push   rbp
    19e7:	20 43 31             	and    BYTE PTR [rbx+0x31],al
    19ea:	37                   	(bad)  
    19eb:	20 38                	and    BYTE PTR [rax],bh
    19ed:	2e 33 2e             	xor    ebp,DWORD PTR cs:[rsi]
    19f0:	30 20                	xor    BYTE PTR [rax],ah
    19f2:	2d 6d 74 75 6e       	sub    eax,0x6e75746d
    19f7:	65 3d 67 65 6e 65    	gs cmp eax,0x656e6567
    19fd:	72 69                	jb     1a68 <.debug_str+0x1a68>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:933
	if ( !Q_stricmp(c, "rcon") ) {
    19ff:	63 20                	movsxd esp,DWORD PTR [rax]
    1a01:	2d 6d 61 72 63       	sub    eax,0x6372616d
    1a06:	68 3d 78 38 36       	push   0x3638783d
    1a0b:	2d 36 34 20 2d       	sub    eax,0x2d203436
    1a10:	67 20 2d 4f 30 00 65 	and    BYTE PTR [eip+0x6500304f],ch        # 65004a66 <dlNextRound.8083+0x64f2207e>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:934
		SVC_RemoteCommand( from );
    1a17:	46 6c                	rex.RX ins BYTE PTR es:[rdi],dx
    1a19:	61                   	(bad)  
    1a1a:	67 73 00             	addr32 jae 1a1d <.debug_str+0x1a1d>
    1a1d:	4f 50                	rex.WRXB push r8
    1a1f:	5f                   	pop    rdi
    1a20:	4c                   	rex.WR
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:935
		return;
    1a21:	4f                   	rex.WRXB
    1a22:	41                   	rex.B
    1a23:	44 31 00             	xor    DWORD PTR [rax],r8d
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:938
	if ( !com_sv_running->integer ) {
    1a26:	4f 50                	rex.WRXB push r8
    1a28:	5f                   	pop    rdi
    1a29:	4c                   	rex.WR
    1a2a:	4f                   	rex.WRXB
    1a2b:	41                   	rex.B
    1a2c:	44 32 00             	xor    r8b,BYTE PTR [rax]
    1a2f:	4f 50                	rex.WRXB push r8
    1a31:	5f                   	pop    rdi
    1a32:	4c                   	rex.WR
    1a33:	4f                   	rex.WRXB
    1a34:	41                   	rex.B
    1a35:	44 34 00             	rex.R xor al,0x0
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:942
	if (!Q_stricmp(c, "getstatus")) {
    1a38:	6c                   	ins    BYTE PTR es:[rdi],dx
    1a39:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    1a3a:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    1a3b:	67 20 6c 6f 6e       	and    BYTE PTR [edi+ebp*2+0x6e],ch
    1a40:	67 20 75 6e          	and    BYTE PTR [ebp+0x6e],dh
    1a44:	73 69                	jae    1aaf <.debug_str+0x1aaf>
    1a46:	67 6e                	outs   dx,BYTE PTR ds:[esi]
    1a48:	65 64 20 69 6e       	gs and BYTE PTR fs:[rcx+0x6e],ch
    1a4d:	74 00                	je     1a4f <.debug_str+0x1a4f>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:943
		SVC_Status( from );
    1a4f:	67 61                	addr32 (bad) 
    1a51:	6d                   	ins    DWORD PTR es:[rdi],dx
    1a52:	65 73 74             	gs jae 1ac9 <.debug_str+0x1ac9>
    1a55:	61                   	(bad)  
    1a56:	74 65                	je     1abd <.debug_str+0x1abd>
    1a58:	4d                   	rex.WRB
    1a59:	65 73 73             	gs jae 1acf <.debug_str+0x1acf>
    1a5c:	61                   	(bad)  
    1a5d:	67 65 4e 75 6d       	addr32 gs rex.WRX jne 1acf <.debug_str+0x1acf>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:944
	} else if (!Q_stricmp(c, "getinfo")) {
    1a62:	00 6e 65             	add    BYTE PTR [rsi+0x65],ch
    1a65:	74 63                	je     1aca <.debug_str+0x1aca>
    1a67:	68 61 6e 00 5f       	push   0x5f006e61
    1a6c:	63 75 72             	movsxd esi,DWORD PTR [rbp+0x72]
    1a6f:	5f                   	pop    rdi
    1a70:	63 6f 6c             	movsxd ebp,DWORD PTR [rdi+0x6c]
    1a73:	75 6d                	jne    1ae2 <.debug_str+0x1ae2>
    1a75:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    1a76:	00 73 76             	add    BYTE PTR [rbx+0x76],dh
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:945
		SVC_Info( from );
    1a79:	5f                   	pop    rdi
    1a7a:	72 65                	jb     1ae1 <.debug_str+0x1ae1>
    1a7c:	66 65 72 65          	data16 gs jb 1ae5 <.debug_str+0x1ae5>
    1a80:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    1a81:	63 65 64             	movsxd esp,DWORD PTR [rbp+0x64]
    1a84:	50                   	push   rax
    1a85:	61                   	(bad)  
    1a86:	6b 4e 61 6d          	imul   ecx,DWORD PTR [rsi+0x61],0x6d
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:946
	} else if (!Q_stricmp(c, "getchallenge")) {
    1a8a:	65 73 00             	gs jae 1a8d <.debug_str+0x1a8d>
    1a8d:	6c                   	ins    BYTE PTR es:[rdi],dx
    1a8e:	65 61                	gs (bad) 
    1a90:	6b 79 42 75          	imul   edi,DWORD PTR [rcx+0x42],0x75
    1a94:	63 6b 65             	movsxd ebp,DWORD PTR [rbx+0x65]
    1a97:	74 5f                	je     1af8 <.debug_str+0x1af8>
    1a99:	73 00                	jae    1a9b <.debug_str+0x1a9b>
    1a9b:	43 53                	rex.XB push r11
    1a9d:	5f                   	pop    rdi
    1a9e:	46 52                	rex.RX push rdx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:947
		SV_GetChallenge( from );
    1aa0:	45                   	rex.RB
    1aa1:	45 00 53 56          	add    BYTE PTR [r11+0x56],r10b
    1aa5:	43 5f                	rex.XB pop r15
    1aa7:	48 61                	rex.W (bad) 
    1aa9:	73 68                	jae    1b13 <.debug_str+0x1b13>
    1aab:	46 6f                	rex.RX outs dx,DWORD PTR ds:[rsi]
    1aad:	72 41                	jb     1af0 <.debug_str+0x1af0>
    1aaf:	64 64 72 65          	fs fs jb 1b18 <.debug_str+0x1b18>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:948
	} else if (!Q_stricmp(c, "connect")) {
    1ab3:	73 73                	jae    1b28 <.debug_str+0x1b28>
    1ab5:	00 54 4b 5f          	add    BYTE PTR [rbx+rcx*2+0x5f],dl
    1ab9:	4f 52                	rex.WRXB push r10
    1abb:	00 53 53             	add    BYTE PTR [rbx+0x53],dl
    1abe:	5f                   	pop    rdi
    1abf:	4c                   	rex.WR
    1ac0:	4f                   	rex.WRXB
    1ac1:	41                   	rex.B
    1ac2:	44                   	rex.R
    1ac3:	49                   	rex.WB
    1ac4:	4e                   	rex.WRX
    1ac5:	47 00 6c 61 73       	add    BYTE PTR [r9+r12*2+0x73],r13b
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:949
		SV_DirectConnect( from );
    1aca:	74 55                	je     1b21 <.debug_str+0x1b21>
    1acc:	73 65                	jae    1b33 <.debug_str+0x1b33>
    1ace:	72 63                	jb     1b33 <.debug_str+0x1b33>
    1ad0:	6d                   	ins    DWORD PTR es:[rdi],dx
    1ad1:	64 00 64 65 6c       	add    BYTE PTR fs:[rbp+riz*2+0x6c],ah
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:951
	} else if (!Q_stricmp(c, "ipAuthorize")) {
    1ad6:	74 61                	je     1b39 <.debug_str+0x1b39>
    1ad8:	54                   	push   rsp
    1ad9:	00 73 76             	add    BYTE PTR [rbx+0x76],dh
    1adc:	5f                   	pop    rdi
    1add:	67 61                	addr32 (bad) 
    1adf:	6d                   	ins    DWORD PTR es:[rdi],dx
    1ae0:	65 74 79             	gs je  1b5c <.debug_str+0x1b5c>
    1ae3:	70 65                	jo     1b4a <.debug_str+0x1b4a>
    1ae5:	00 73 79             	add    BYTE PTR [rbx+0x79],dh
    1ae8:	6d                   	ins    DWORD PTR es:[rdi],dx
    1ae9:	62                   	(bad)  
    1aea:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    1aeb:	6c                   	ins    BYTE PTR es:[rdi],dx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:954
	} else if (!Q_stricmp(c, "disconnect")) {
    1aec:	73 00                	jae    1aee <.debug_str+0x1aee>
    1aee:	54                   	push   rsp
    1aef:	52                   	push   rdx
    1af0:	5f                   	pop    rdi
    1af1:	4c                   	rex.WR
    1af2:	49                   	rex.WB
    1af3:	4e                   	rex.WRX
    1af4:	45                   	rex.RB
    1af5:	41 52                	push   r10
    1af7:	5f                   	pop    rdi
    1af8:	53                   	push   rbx
    1af9:	54                   	push   rsp
    1afa:	4f 50                	rex.WRXB push r8
    1afc:	00 53 56             	add    BYTE PTR [rbx+0x56],dl
    1aff:	43 5f                	rex.XB pop r15
    1b01:	52                   	push   rdx
    1b02:	61                   	(bad)  
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:959
		if ( com_developer->integer ) {
    1b03:	74 65                	je     1b6a <.debug_str+0x1b6a>
    1b05:	52                   	push   rdx
    1b06:	65 73 74             	gs jae 1b7d <.debug_str+0x1b7d>
    1b09:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    1b0a:	72 65                	jb     1b71 <.debug_str+0x1b71>
    1b0c:	42 75 72             	rex.X jne 1b81 <.debug_str+0x1b81>
    1b0f:	73 74                	jae    1b85 <.debug_str+0x1b85>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:960
			Com_Printf( "bad connectionless packet from %s:\n%s\n",
    1b11:	00 5f 49             	add    BYTE PTR [rdi+0x49],bl
    1b14:	4f 5f                	rex.WRXB pop r15
    1b16:	62 61                	(bad)  
    1b18:	63 6b 75             	movsxd ebp,DWORD PTR [rbx+0x75]
    1b1b:	70 5f                	jo     1b7c <.debug_str+0x1b7c>
    1b1d:	62 61                	(bad)  
    1b1f:	73 65                	jae    1b86 <.debug_str+0x1b86>
    1b21:	00 73 79             	add    BYTE PTR [rbx+0x79],dh
    1b24:	73 63                	jae    1b89 <.debug_str+0x1b89>
    1b26:	61                   	(bad)  
    1b27:	6c                   	ins    BYTE PTR es:[rdi],dx
    1b28:	6c                   	ins    BYTE PTR es:[rdi],dx
    1b29:	5f                   	pop    rdi
    1b2a:	74 00                	je     1b2c <.debug_str+0x1b2c>
    1b2c:	63 68 61             	movsxd ebp,DWORD PTR [rax+0x61]
    1b2f:	6c                   	ins    BYTE PTR es:[rdi],dx
    1b30:	6c                   	ins    BYTE PTR es:[rdi],dx
    1b31:	65 6e                	outs   dx,BYTE PTR gs:[rsi]
    1b33:	67 65 00 5f 49       	add    BYTE PTR gs:[edi+0x49],bl
    1b38:	4f 5f                	rex.WRXB pop r15
    1b3a:	72 65                	jb     1ba1 <.debug_str+0x1ba1>
    1b3c:	61                   	(bad)  
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:919
			return;
    1b3d:	64 5f                	fs pop rdi
    1b3f:	70 74                	jo     1bb5 <.debug_str+0x1bb5>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:964
}
    1b41:	72 00                	jb     1b43 <.debug_str+0x1b43>
    1b43:	70 65                	jo     1baa <.debug_str+0x1baa>
    1b45:	72 69                	jb     1bb0 <.debug_str+0x1bb0>
    1b47:	6f                   	outs   dx,DWORD PTR ds:[rsi]
SV_PacketEvent():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:973
void SV_PacketEvent( const netadr_t *from, msg_t *msg ) {
    1b48:	64 00 4f 50          	add    BYTE PTR fs:[rdi+0x50],cl
    1b4c:	5f                   	pop    rdi
    1b4d:	47                   	rex.RXB
    1b4e:	45                   	rex.RB
    1b4f:	46 00 4f 50          	rex.RX add BYTE PTR [rdi+0x50],r9b
    1b53:	5f                   	pop    rdi
    1b54:	47                   	rex.RXB
    1b55:	45                   	rex.RB
    1b56:	49 00 70 6c          	rex.WB add BYTE PTR [r8+0x6c],sil
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:978
	if ( msg->cursize < 6 ) // too short for anything
    1b5a:	61                   	(bad)  
    1b5b:	79 65                	jns    1bc2 <.debug_str+0x1bc2>
    1b5d:	72 00                	jb     1b5f <.debug_str+0x1b5f>
    1b5f:	73 6e                	jae    1bcf <.debug_str+0x1bcf>
    1b61:	61                   	(bad)  
    1b62:	70 73                	jo     1bd7 <.debug_str+0x1bd7>
    1b64:	68 6f 74 45 6e       	push   0x6e45746f
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:982
	if ( *(int32_t *)msg->data == -1 ) {
    1b69:	74 69                	je     1bd4 <.debug_str+0x1bd4>
    1b6b:	74 69                	je     1bd6 <.debug_str+0x1bd6>
    1b6d:	65 73 00             	gs jae 1b70 <.debug_str+0x1b70>
    1b70:	4f 50                	rex.WRXB push r8
    1b72:	5f                   	pop    rdi
    1b73:	45 51                	rex.RB push r9
    1b75:	46 00 4f 50          	rex.RX add BYTE PTR [rdi+0x50],r9b
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:983
		SV_ConnectionlessPacket( from, msg );
    1b79:	5f                   	pop    rdi
    1b7a:	47                   	rex.RXB
    1b7b:	45 55                	rex.RB push r13
    1b7d:	00 5f 66             	add    BYTE PTR [rdi+0x66],bl
    1b80:	72 65                	jb     1be7 <.debug_str+0x1be7>
    1b82:	65 72 65             	gs jb  1bea <.debug_str+0x1bea>
    1b85:	73 5f                	jae    1be6 <.debug_str+0x1be6>
    1b87:	6c                   	ins    BYTE PTR es:[rdi],dx
    1b88:	69 73 74 00 4f 50 5f 	imul   esi,DWORD PTR [rbx+0x74],0x5f504f00
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:987
	if ( sv.state == SS_DEAD ) {
    1b8f:	43 56                	rex.XB push r14
    1b91:	49                   	rex.WB
    1b92:	46 00 73 76          	rex.RX add BYTE PTR [rbx+0x76],r14b
    1b96:	5f                   	pop    rdi
    1b97:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    1b98:	75 74                	jne    1c0e <.debug_str+0x1c0e>
    1b9a:	70 75                	jo     1c11 <.debug_str+0x1c11>
    1b9c:	74 62                	je     1c00 <.debug_str+0x1c00>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:993
	MSG_BeginReadingOOB( msg );
    1b9e:	75 66                	jne    1c06 <.debug_str+0x1c06>
    1ba0:	00 65 76             	add    BYTE PTR [rbp+0x76],ah
    1ba3:	65 6e                	outs   dx,BYTE PTR gs:[rsi]
    1ba5:	74 50                	je     1bf7 <.debug_str+0x1bf7>
    1ba7:	61                   	(bad)  
    1ba8:	72 6d                	jb     1c17 <.debug_str+0x1c17>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:994
	MSG_ReadLong( msg ); // sequence number
    1baa:	73 00                	jae    1bac <.debug_str+0x1bac>
    1bac:	63 6f 64             	movsxd ebp,DWORD PTR [rdi+0x64]
    1baf:	65 42 61             	gs rex.X (bad) 
    1bb2:	73 65                	jae    1c19 <.debug_str+0x1c19>
    1bb4:	00 43 56             	add    BYTE PTR [rbx+0x56],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:995
	qport = MSG_ReadShort( msg ) & 0xffff;
    1bb7:	5f                   	pop    rdi
    1bb8:	49                   	rex.WB
    1bb9:	4e 54                	rex.WRX push rsp
    1bbb:	45                   	rex.RB
    1bbc:	47                   	rex.RXB
    1bbd:	45 52                	rex.RB push r10
    1bbf:	00 74 69 6d          	add    BYTE PTR [rcx+rbp*2+0x6d],dh
    1bc3:	65 7a 6f             	gs jp  1c35 <.debug_str+0x1c35>
    1bc6:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    1bc7:	65 00 63 6f          	add    BYTE PTR gs:[rbx+0x6f],ah
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:998
	for (i=0, cl=svs.clients ; i < sv_maxclients->integer ; i++,cl++) {
    1bcb:	6d                   	ins    DWORD PTR es:[rdi],dx
    1bcc:	5f                   	pop    rdi
    1bcd:	63 61 6d             	movsxd esp,DWORD PTR [rcx+0x6d]
    1bd0:	65 72 61             	gs jb  1c34 <.debug_str+0x1c34>
    1bd3:	4d 6f                	rex.WRB outs dx,DWORD PTR ds:[rsi]
    1bd5:	64 65 00 4f 50       	fs add BYTE PTR gs:[rdi+0x50],cl
    1bda:	5f                   	pop    rdi
    1bdb:	44                   	rex.R
    1bdc:	49 56                	rex.WB push r14
    1bde:	46 00 6e 61          	rex.RX add BYTE PTR [rsi+0x61],r13b
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:999
		if (cl->state == CS_FREE) {
    1be2:	72 67                	jb     1c4b <.debug_str+0x1c4b>
    1be4:	73 00                	jae    1be6 <.debug_str+0x1be6>
    1be6:	4f 50                	rex.WRXB push r8
    1be8:	5f                   	pop    rdi
    1be9:	44                   	rex.R
    1bea:	49 56                	rex.WB push r14
    1bec:	49 00 7a 6f          	rex.WB add BYTE PTR [r10+0x6f],dil
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1002
		if ( !NET_CompareBaseAdr( from, &cl->netchan.remoteAddress ) ) {
    1bf0:	6d                   	ins    DWORD PTR es:[rdi],dx
    1bf1:	62                   	(bad)  
    1bf2:	69 65 70 6f 69 6e 74 	imul   esp,DWORD PTR [rbp+0x70],0x746e696f
    1bf9:	00 63 6f             	add    BYTE PTR [rbx+0x6f],ah
    1bfc:	6c                   	ins    BYTE PTR es:[rdi],dx
    1bfd:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    1bfe:	72 47                	jb     1c47 <.debug_str+0x1c47>
    1c00:	72 65                	jb     1c67 <.debug_str+0x1c67>
    1c02:	65 6e                	outs   dx,BYTE PTR gs:[rsi]
    1c04:	00 4f 50             	add    BYTE PTR [rdi+0x50],cl
    1c07:	5f                   	pop    rdi
    1c08:	44                   	rex.R
    1c09:	49 56                	rex.WB push r14
    1c0b:	55                   	push   rbp
    1c0c:	00 5f 6f             	add    BYTE PTR [rdi+0x6f],bl
    1c0f:	6c                   	ins    BYTE PTR es:[rdi],dx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1007
		if (cl->netchan.qport != qport) {
    1c10:	64 5f                	fs pop rdi
    1c12:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    1c13:	66 66 73 65          	data16 data16 jae 1c7c <.debug_str+0x1c7c>
    1c17:	74 00                	je     1c19 <.debug_str+0x1c19>
    1c19:	62                   	(bad)  
    1c1a:	75 74                	jne    1c90 <.debug_str+0x1c90>
    1c1c:	74 6f                	je     1c8d <.debug_str+0x1c8d>
    1c1e:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    1c1f:	73 00                	jae    1c21 <.debug_str+0x1c21>
    1c21:	6d                   	ins    DWORD PTR es:[rdi],dx
    1c22:	6f                   	outs   dx,DWORD PTR ds:[rsi]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1012
		if (SV_Netchan_Process(cl, msg)) {
    1c23:	76 65                	jbe    1c8a <.debug_str+0x1c8a>
    1c25:	6d                   	ins    DWORD PTR es:[rdi],dx
    1c26:	65 6e                	outs   dx,BYTE PTR gs:[rsi]
    1c28:	74 44                	je     1c6e <.debug_str+0x1c6e>
    1c2a:	69 72 00 6d 6f 64 65 	imul   esi,DWORD PTR [rdx+0x0],0x65646f6d
    1c31:	6c                   	ins    BYTE PTR es:[rdi],dx
    1c32:	69 6e 64 65 78 00 6c 	imul   ebp,DWORD PTR [rsi+0x64],0x6c007865
    1c39:	6f                   	outs   dx,DWORD PTR ds:[rsi]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1016
			if (cl->netchan.remoteAddress.port != from->port) {
    1c3a:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    1c3b:	67 20 6c 6f 6e       	and    BYTE PTR [edi+ebp*2+0x6e],ch
    1c40:	67 20 69 6e          	and    BYTE PTR [ecx+0x6e],ch
    1c44:	74 00                	je     1c46 <.debug_str+0x1c46>
    1c46:	63 6f 6d             	movsxd ebp,DWORD PTR [rdi+0x6d]
    1c49:	5f                   	pop    rdi
    1c4a:	76 69                	jbe    1cb5 <.debug_str+0x1cb5>
    1c4c:	65 77 6c             	gs ja  1cbb <.debug_str+0x1cbb>
    1c4f:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    1c50:	67 00 70 6f          	add    BYTE PTR [eax+0x6f],dh
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1017
				Com_Printf( "SV_PacketEvent: fixing up a translated port\n" );
    1c54:	72 74                	jb     1cca <.debug_str+0x1cca>
    1c56:	00 53 56             	add    BYTE PTR [rbx+0x56],dl
    1c59:	5f                   	pop    rdi
    1c5a:	41                   	rex.B
    1c5b:	64 64 53             	fs fs push rbx
    1c5e:	65 72 76             	gs jb  1cd7 <.debug_str+0x1cd7>
    1c61:	65 72 43             	gs jb  1ca7 <.debug_str+0x1ca7>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1018
				cl->netchan.remoteAddress.port = from->port;
    1c64:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    1c65:	6d                   	ins    DWORD PTR es:[rdi],dx
    1c66:	6d                   	ins    DWORD PTR es:[rdi],dx
    1c67:	61                   	(bad)  
    1c68:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    1c69:	64 00 5f 66          	add    BYTE PTR fs:[rdi+0x66],bl
    1c6d:	6c                   	ins    BYTE PTR es:[rdi],dx
    1c6e:	61                   	(bad)  
    1c6f:	67 73 32             	addr32 jae 1ca4 <.debug_str+0x1ca4>
    1c72:	00 4f 50             	add    BYTE PTR [rdi+0x50],cl
    1c75:	5f                   	pop    rdi
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1023
			if (cl->state != CS_ZOMBIE) {
    1c76:	50                   	push   rax
    1c77:	4f 50                	rex.WRXB push r8
    1c79:	00 54 4b 5f          	add    BYTE PTR [rbx+rcx*2+0x5f],dl
    1c7d:	47 54                	rex.RXB push r12
    1c7f:	45 00 62 61          	add    BYTE PTR [r10+0x61],r12b
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1024
				cl->lastPacketTime = svs.time;	// don't timeout
    1c83:	73 65                	jae    1cea <.debug_str+0x1cea>
    1c85:	6c                   	ins    BYTE PTR es:[rdi],dx
    1c86:	69 6e 65 00 76 6d 46 	imul   ebp,DWORD PTR [rsi+0x65],0x466d7600
    1c8d:	75 6e                	jne    1cfd <.debug_str+0x1cfd>
    1c8f:	63 5f 74             	movsxd ebx,DWORD PTR [rdi+0x74]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1025
				SV_ExecuteClientMessage( cl, msg );
    1c92:	00 76 6d             	add    BYTE PTR [rsi+0x6d],dh
    1c95:	46 75 6e             	rex.RX jne 1d06 <.debug_str+0x1d06>
    1c98:	63 5f 75             	movsxd ebx,DWORD PTR [rdi+0x75]
    1c9b:	00 56 4d             	add    BYTE PTR [rsi+0x4d],dl
    1c9e:	5f                   	pop    rdi
    1c9f:	42                   	rex.X
    1ca0:	41                   	rex.B
    1ca1:	44 00 67 61          	add    BYTE PTR [rdi+0x61],r12b
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1027
			return;
    1ca5:	6d                   	ins    DWORD PTR es:[rdi],dx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1000
			continue;
    1ca6:	65 43 6c             	gs rex.XB ins BYTE PTR es:[rdi],dx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1003
			continue;
    1ca9:	69 65 6e 74 53 69 7a 	imul   esp,DWORD PTR [rbp+0x6e],0x7a695374
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:998 (discriminator 2)
	for (i=0, cl=svs.clients ; i < sv_maxclients->integer ; i++,cl++) {
    1cb0:	65 00 62 75          	add    BYTE PTR gs:[rdx+0x75],ah
    1cb4:	72 73                	jb     1d29 <.debug_str+0x1d29>
    1cb6:	74 00                	je     1cb8 <.debug_str+0x1cb8>
    1cb8:	75 73                	jne    1d2d <.debug_str+0x1d2d>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:998 (discriminator 1)
    1cba:	65 72 69             	gs jb  1d26 <.debug_str+0x1d26>
    1cbd:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    1cbe:	66 6f                	outs   dx,WORD PTR ds:[rsi]
    1cc0:	00 4e 41             	add    BYTE PTR [rsi+0x41],cl
    1cc3:	5f                   	pop    rdi
    1cc4:	4c                   	rex.WR
    1cc5:	4f                   	rex.WRXB
    1cc6:	4f 50                	rex.WRXB push r8
    1cc8:	42                   	rex.X
    1cc9:	41                   	rex.B
    1cca:	43                   	rex.XB
    1ccb:	4b 00 63 6f          	rex.WXB add BYTE PTR [r11+0x6f],spl
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:979
		return;
    1ccf:	6d                   	ins    DWORD PTR es:[rdi],dx
    1cd0:	5f                   	pop    rdi
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:988
		return;
    1cd1:	62                   	(bad)  
    1cd2:	6c                   	ins    BYTE PTR es:[rdi],dx
    1cd3:	6f                   	outs   dx,DWORD PTR ds:[rsi]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1027
			return;
    1cd4:	6f                   	outs   dx,DWORD PTR ds:[rsi]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1030
}
    1cd5:	64 00 62 72          	add    BYTE PTR fs:[rdx+0x72],ah
SV_CalcPings():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1040
static void SV_CalcPings( void ) {
    1cd9:	65 61                	gs (bad) 
    1cdb:	6b 43 6f 75          	imul   eax,DWORD PTR [rbx+0x6f],0x75
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1047
	for (i=0 ; i < sv_maxclients->integer ; i++) {
    1cdf:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    1ce0:	74 00                	je     1ce2 <.debug_str+0x1ce2>
    1ce2:	73 79                	jae    1d5d <.debug_str+0x1d5d>
    1ce4:	73 5f                	jae    1d45 <.debug_str+0x1d45>
    1ce6:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    1ce7:	65 72 72             	gs jb  1d5c <.debug_str+0x1d5c>
    1cea:	00 6f 6c             	add    BYTE PTR [rdi+0x6c],ch
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1048
		cl = &svs.clients[i];
    1ced:	64 53                	fs push rbx
    1cef:	65 72 76             	gs jb  1d68 <.debug_str+0x1d68>
    1cf2:	65 72 54             	gs jb  1d49 <.debug_str+0x1d49>
    1cf5:	69 6d 65 00 47 41 4d 	imul   ebp,DWORD PTR [rbp+0x65],0x4d414700
    1cfc:	45 5f                	rex.RB pop r15
    1cfe:	43                   	rex.XB
    1cff:	4c                   	rex.WR
    1d00:	49                   	rex.WB
    1d01:	45                   	rex.RB
    1d02:	4e 54                	rex.WRX push rsp
    1d04:	5f                   	pop    rdi
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1049
		if ( cl->state != CS_ACTIVE ) {
    1d05:	42                   	rex.X
    1d06:	45                   	rex.RB
    1d07:	47                   	rex.RXB
    1d08:	49                   	rex.WB
    1d09:	4e 00 70 6d          	rex.WRX add BYTE PTR [rax+0x6d],r14b
    1d0d:	5f                   	pop    rdi
    1d0e:	74 69                	je     1d79 <.debug_str+0x1d79>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1050
			cl->ping = 999;
    1d10:	6d                   	ins    DWORD PTR es:[rdi],dx
    1d11:	65 00 73 76          	add    BYTE PTR gs:[rbx+0x76],dh
    1d15:	45 6e                	rex.RB outs dx,BYTE PTR ds:[rsi]
    1d17:	74 69                	je     1d82 <.debug_str+0x1d82>
    1d19:	74 79                	je     1d94 <.debug_str+0x1d94>
    1d1b:	5f                   	pop    rdi
    1d1c:	73 00                	jae    1d1e <.debug_str+0x1d1e>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1051
			continue;
    1d1e:	73 76                	jae    1d96 <.debug_str+0x1d96>
    1d20:	45 6e                	rex.RB outs dx,BYTE PTR ds:[rsi]
    1d22:	74 69                	je     1d8d <.debug_str+0x1d8d>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1053
		if ( !cl->gentity ) {
    1d24:	74 79                	je     1d9f <.debug_str+0x1d9f>
    1d26:	5f                   	pop    rdi
    1d27:	74 00                	je     1d29 <.debug_str+0x1d29>
    1d29:	63 6c 69 65          	movsxd ebp,DWORD PTR [rcx+rbp*2+0x65]
    1d2d:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    1d2e:	74 53                	je     1d83 <.debug_str+0x1d83>
    1d30:	74 61                	je     1d93 <.debug_str+0x1d93>
    1d32:	74 65                	je     1d99 <.debug_str+0x1d99>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1054
			cl->ping = 999;
    1d34:	5f                   	pop    rdi
    1d35:	74 00                	je     1d37 <.debug_str+0x1d37>
    1d37:	64 65 73 63          	fs gs jae 1d9e <.debug_str+0x1d9e>
    1d3b:	72 69                	jb     1da6 <.debug_str+0x1da6>
    1d3d:	70 74                	jo     1db3 <.debug_str+0x1db3>
    1d3f:	69 6f 6e 00 6d 61 70 	imul   ebp,DWORD PTR [rdi+0x6e],0x70616d00
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1057
		if ( cl->netchan.remoteAddress.type == NA_BOT ) {
    1d46:	4e 61                	rex.WRX (bad) 
    1d48:	6d                   	ins    DWORD PTR es:[rdi],dx
    1d49:	65 00 71 66          	add    BYTE PTR gs:[rcx+0x66],dh
    1d4d:	61                   	(bad)  
    1d4e:	6c                   	ins    BYTE PTR es:[rdi],dx
    1d4f:	73 65                	jae    1db6 <.debug_str+0x1db6>
    1d51:	00 6f 72             	add    BYTE PTR [rdi+0x72],ch
    1d54:	69 67 69 6e 00 74 6f 	imul   esp,DWORD PTR [rdi+0x69],0x6f74006e
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1058
			cl->ping = 0;
    1d5b:	72 73                	jb     1dd0 <.debug_str+0x1dd0>
    1d5d:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    1d5e:	41 6e                	rex.B outs dx,BYTE PTR ds:[rsi]
    1d60:	69 6d 00 62 67 5f 6e 	imul   ebp,DWORD PTR [rbp+0x0],0x6e5f6762
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1059
			continue;
    1d67:	75 6d                	jne    1dd6 <.debug_str+0x1dd6>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1062
		total = 0;
    1d69:	49 74 65             	rex.WB je 1dd1 <.debug_str+0x1dd1>
    1d6c:	6d                   	ins    DWORD PTR es:[rdi],dx
    1d6d:	73 00                	jae    1d6f <.debug_str+0x1d6f>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1063
		count = 0;
    1d6f:	73 76                	jae    1de7 <.debug_str+0x1de7>
    1d71:	5f                   	pop    rdi
    1d72:	73 65                	jae    1dd9 <.debug_str+0x1dd9>
    1d74:	72 76                	jb     1dec <.debug_str+0x1dec>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1064
		for ( j = 0 ; j < PACKET_BACKUP ; j++ ) {
    1d76:	65 72 69             	gs jb  1de2 <.debug_str+0x1de2>
    1d79:	64 00 73 76          	add    BYTE PTR fs:[rbx+0x76],dh
    1d7d:	5f                   	pop    rdi
    1d7e:	6d                   	ins    DWORD PTR es:[rdi],dx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1065
			if ( cl->frames[j].messageAcked == 0 ) {
    1d7f:	61                   	(bad)  
    1d80:	78 63                	js     1de5 <.debug_str+0x1de5>
    1d82:	6c                   	ins    BYTE PTR es:[rdi],dx
    1d83:	69 65 6e 74 73 00 43 	imul   esp,DWORD PTR [rbp+0x6e],0x43007374
    1d8a:	56                   	push   rsi
    1d8b:	5f                   	pop    rdi
    1d8c:	4e                   	rex.WRX
    1d8d:	4f                   	rex.WRXB
    1d8e:	4e                   	rex.WRX
    1d8f:	45 00 63 6c          	add    BYTE PTR [r11+0x6c],r12b
    1d93:	5f                   	pop    rdi
    1d94:	63 64 6b 65          	movsxd esp,DWORD PTR [rbx+rbp*2+0x65]
    1d98:	79 00                	jns    1d9a <.debug_str+0x1d9a>
    1d9a:	4f 50                	rex.WRXB push r8
    1d9c:	5f                   	pop    rdi
    1d9d:	53                   	push   rbx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1068
			delta = cl->frames[j].messageAcked - cl->frames[j].messageSent;
    1d9e:	55                   	push   rbp
    1d9f:	42                   	rex.X
    1da0:	46 00 42 4f          	rex.RX add BYTE PTR [rdx+0x4f],r8b
    1da4:	54                   	push   rsp
    1da5:	41                   	rex.B
    1da6:	49 5f                	rex.WB pop r15
    1da8:	53                   	push   rbx
    1da9:	54                   	push   rsp
    1daa:	41 52                	push   r10
    1dac:	54                   	push   rsp
    1dad:	5f                   	pop    rdi
    1dae:	46 52                	rex.RX push rdx
    1db0:	41                   	rex.B
    1db1:	4d                   	rex.WRB
    1db2:	45 00 73 76          	add    BYTE PTR [r11+0x76],r14b
    1db6:	5f                   	pop    rdi
    1db7:	6d                   	ins    DWORD PTR es:[rdi],dx
    1db8:	61                   	(bad)  
    1db9:	70 43                	jo     1dfe <.debug_str+0x1dfe>
    1dbb:	68 65 63 6b 73       	push   0x736b6365
    1dc0:	75 6d                	jne    1e2f <.debug_str+0x1e2f>
    1dc2:	00 43 56             	add    BYTE PTR [rbx+0x56],al
    1dc5:	5f                   	pop    rdi
    1dc6:	46                   	rex.RX
    1dc7:	4c                   	rex.WR
    1dc8:	4f                   	rex.WRXB
    1dc9:	41 54                	push   r12
    1dcb:	00 73 6e             	add    BYTE PTR [rbx+0x6e],dh
    1dce:	61                   	(bad)  
    1dcf:	70 73                	jo     1e44 <.debug_str+0x1e44>
    1dd1:	68 6f 74 46 72       	push   0x7246746f
    1dd6:	61                   	(bad)  
    1dd7:	6d                   	ins    DWORD PTR es:[rdi],dx
    1dd8:	65 5f                	gs pop rdi
    1dda:	73 00                	jae    1ddc <.debug_str+0x1ddc>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1069
			count++;
    1ddc:	73 6e                	jae    1e4c <.debug_str+0x1e4c>
    1dde:	61                   	(bad)  
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1070
			total += delta;
    1ddf:	70 73                	jo     1e54 <.debug_str+0x1e54>
    1de1:	68 6f 74 46 72       	push   0x7246746f
    1de6:	61                   	(bad)  
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1066
				continue;
    1de7:	6d                   	ins    DWORD PTR es:[rdi],dx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1064 (discriminator 2)
		for ( j = 0 ; j < PACKET_BACKUP ; j++ ) {
    1de8:	65 5f                	gs pop rdi
    1dea:	74 00                	je     1dec <.debug_str+0x1dec>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1064 (discriminator 1)
    1dec:	70 75                	jo     1e63 <.debug_str+0x1e63>
    1dee:	72 65                	jb     1e55 <.debug_str+0x1e55>
    1df0:	41 75 74             	rex.B jne 1e67 <.debug_str+0x1e67>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1072
		if (!count) {
    1df3:	68 65 6e 74 69       	push   0x69746e65
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1073
			cl->ping = 999;
    1df8:	63 00                	movsxd eax,DWORD PTR [rax]
    1dfa:	75 6e                	jne    1e6a <.debug_str+0x1e6a>
    1dfc:	73 65                	jae    1e63 <.debug_str+0x1e63>
    1dfe:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    1dff:	74 4c                	je     1e4d <.debug_str+0x1e4d>
    1e01:	65 6e                	outs   dx,BYTE PTR gs:[rsi]
    1e03:	67 74 68             	addr32 je 1e6e <.debug_str+0x1e6e>
    1e06:	00 65 76             	add    BYTE PTR [rbp+0x76],ah
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1075
			cl->ping = total/count;
    1e09:	65 6e                	outs   dx,BYTE PTR gs:[rsi]
    1e0b:	74 73                	je     1e80 <.debug_str+0x1e80>
    1e0d:	00 75 6e             	add    BYTE PTR [rbp+0x6e],dh
    1e10:	73 69                	jae    1e7b <.debug_str+0x1e7b>
    1e12:	67 6e                	outs   dx,BYTE PTR ds:[esi]
    1e14:	65 64 20 69 6e       	gs and BYTE PTR fs:[rcx+0x6e],ch
    1e19:	74 00                	je     1e1b <.debug_str+0x1e1b>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1076
			if ( cl->ping > 999 ) {
    1e1b:	63 6f 64             	movsxd ebp,DWORD PTR [rdi+0x64]
    1e1e:	65 53                	gs push rbx
    1e20:	69 7a 65 00 64 75 6d 	imul   edi,DWORD PTR [rdx+0x65],0x6d756400
    1e27:	6d                   	ins    DWORD PTR es:[rdi],dx
    1e28:	79 00                	jns    1e2a <.debug_str+0x1e2a>
    1e2a:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    1e2b:	70 63                	jo     1e90 <.debug_str+0x1e90>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1077
				cl->ping = 999;
    1e2d:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    1e2e:	64 65 5f             	fs gs pop rdi
    1e31:	69 6e 66 6f 5f 73 00 	imul   ebp,DWORD PTR [rsi+0x66],0x735f6f
    1e38:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    1e39:	74 68                	je     1ea3 <.debug_str+0x1ea3>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1082
		ps = SV_GameClientNum( i );
    1e3b:	65 72 45             	gs jb  1e83 <.debug_str+0x1e83>
    1e3e:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    1e3f:	74 69                	je     1eaa <.debug_str+0x1eaa>
    1e41:	74 79                	je     1ebc <.debug_str+0x1ebc>
    1e43:	4e 75 6d             	rex.WRX jne 1eb3 <.debug_str+0x1eb3>
    1e46:	00 6c 65 61          	add    BYTE PTR [rbp+riz*2+0x61],ch
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1083
		ps->ping = cl->ping;
    1e4a:	6b 79 42 75          	imul   edi,DWORD PTR [rcx+0x42],0x75
    1e4e:	63 6b 65             	movsxd ebp,DWORD PTR [rbx+0x65]
    1e51:	74 5f                	je     1eb2 <.debug_str+0x1eb2>
    1e53:	74 00                	je     1e55 <.debug_str+0x1e55>
    1e55:	49 54                	rex.WB push r12
    1e57:	5f                   	pop    rdi
    1e58:	54                   	push   rsp
    1e59:	45                   	rex.RB
    1e5a:	41                   	rex.B
    1e5b:	4d 00 63 6f          	rex.WRB add BYTE PTR [r11+0x6f],r12b
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1047 (discriminator 2)
	for (i=0 ; i < sv_maxclients->integer ; i++) {
    1e5f:	64 65 2f             	fs gs (bad) 
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1047 (discriminator 1)
    1e62:	73 65                	jae    1ec9 <.debug_str+0x1ec9>
    1e64:	72 76                	jb     1edc <.debug_str+0x1edc>
    1e66:	65 72 2f             	gs jb  1e98 <.debug_str+0x1e98>
    1e69:	73 76                	jae    1ee1 <.debug_str+0x1ee1>
    1e6b:	5f                   	pop    rdi
    1e6c:	6d                   	ins    DWORD PTR es:[rdi],dx
    1e6d:	61                   	(bad)  
    1e6e:	69 6e 2e 63 00 6f 70 	imul   ebp,DWORD PTR [rsi+0x2e],0x706f0063
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1085
}
    1e75:	63 6f 64             	movsxd ebp,DWORD PTR [rdi+0x64]
SV_CheckTimeouts():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1100
static void SV_CheckTimeouts( void ) {
    1e78:	65 5f                	gs pop rdi
    1e7a:	69 6e 66 6f 5f 74 00 	imul   ebp,DWORD PTR [rsi+0x66],0x745f6f
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1106
	droppoint = svs.time - 1000 * sv_timeout->integer;
    1e81:	73 68                	jae    1eeb <.debug_str+0x1eeb>
    1e83:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    1e84:	72 74                	jb     1efa <.debug_str+0x1efa>
    1e86:	20 69 6e             	and    BYTE PTR [rcx+0x6e],ch
    1e89:	74 00                	je     1e8b <.debug_str+0x1e8b>
    1e8b:	6c                   	ins    BYTE PTR es:[rdi],dx
    1e8c:	61                   	(bad)  
    1e8d:	73 74                	jae    1f03 <.debug_str+0x1f03>
    1e8f:	53                   	push   rbx
    1e90:	65 6e                	outs   dx,BYTE PTR gs:[rsi]
    1e92:	74 54                	je     1ee8 <.debug_str+0x1ee8>
    1e94:	69 6d 65 00 43 56 47 	imul   ebp,DWORD PTR [rbp+0x65],0x47564300
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1107
	zombiepoint = svs.time - 1000 * sv_zombietime->integer;
    1e9b:	5f                   	pop    rdi
    1e9c:	53                   	push   rbx
    1e9d:	45 52                	rex.RB push r10
    1e9f:	56                   	push   rsi
    1ea0:	45 52                	rex.RB push r10
    1ea2:	00 73 76             	add    BYTE PTR [rbx+0x76],dh
    1ea5:	5f                   	pop    rdi
    1ea6:	7a 6f                	jp     1f17 <.debug_str+0x1f17>
    1ea8:	6d                   	ins    DWORD PTR es:[rdi],dx
    1ea9:	62                   	(bad)  
    1eaa:	69 65 74 69 6d 65 00 	imul   esp,DWORD PTR [rbp+0x74],0x656d69
    1eb1:	70 72                	jo     1f25 <.debug_str+0x1f25>
    1eb3:	65 76 00             	gs jbe 1eb6 <.debug_str+0x1eb6>
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1109
	for ( i = 0, cl = svs.clients ; i < sv_maxclients->integer ; i++, cl++ ) {
    1eb6:	5f                   	pop    rdi
    1eb7:	76 74                	jbe    1f2d <.debug_str+0x1f2d>
    1eb9:	61                   	(bad)  
    1eba:	62                   	(bad)  
    1ebb:	6c                   	ins    BYTE PTR es:[rdi],dx
    1ebc:	65 5f                	gs pop rdi
    1ebe:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    1ebf:	66 66 73 65          	data16 data16 jae 1f28 <.debug_str+0x1f28>
    1ec3:	74 00                	je     1ec5 <.debug_str+0x1ec5>
    1ec5:	66 72 61             	data16 jb 1f29 <.debug_str+0x1f29>
    1ec8:	6d                   	ins    DWORD PTR es:[rdi],dx
    1ec9:	65 00 6c 61 73       	add    BYTE PTR gs:[rcx+riz*2+0x73],ch
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1110
		if ( cl->state == CS_FREE ) {
    1ece:	74 50                	je     1f20 <.debug_str+0x1f20>
    1ed0:	61                   	(bad)  
    1ed1:	63 6b 65             	movsxd ebp,DWORD PTR [rbx+0x65]
    1ed4:	74 54                	je     1f2a <.debug_str+0x1f2a>
    1ed6:	69 6d 65 00 64 61 6d 	imul   ebp,DWORD PTR [rbp+0x65],0x6d616400
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1114
		if ( cl->lastPacketTime - svs.time > 0 ) {
    1edd:	61                   	(bad)  
    1ede:	67 65 59             	addr32 gs pop rcx
    1ee1:	61                   	(bad)  
    1ee2:	77 00                	ja     1ee4 <.debug_str+0x1ee4>
    1ee4:	53                   	push   rbx
    1ee5:	56                   	push   rsi
    1ee6:	5f                   	pop    rdi
    1ee7:	46 72 61             	rex.RX jb 1f4b <.debug_str+0x1f4b>
    1eea:	6d                   	ins    DWORD PTR es:[rdi],dx
    1eeb:	65 00 70 72          	add    BYTE PTR gs:[rax+0x72],dh
    1eef:	6f                   	outs   dx,DWORD PTR ds:[rsi]
    1ef0:	66 69 6c 65 43 6f 75 	imul   bp,WORD PTR [rbp+riz*2+0x43],0x756f
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1115
			cl->lastPacketTime = svs.time;
    1ef7:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    1ef8:	74 00                	je     1efa <.debug_str+0x1efa>
    1efa:	77 65                	ja     1f61 <.debug_str+0x1f61>
    1efc:	61                   	(bad)  
    1efd:	70 6f                	jo     1f6e <.debug_str+0x1f6e>
    1eff:	6e                   	outs   dx,BYTE PTR ds:[rsi]
    1f00:	54                   	push   rsp
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1118
		if ( cl->state == CS_ZOMBIE && cl->lastPacketTime - zombiepoint < 0 ) {
    1f01:	69 6d 65 00 76 61 6c 	imul   ebp,DWORD PTR [rbp+0x65],0x6c617600
    1f08:	69 64 61 74 6f 72 00 	imul   esp,DWORD PTR [rcx+riz*2+0x74],0x7200726f
    1f0f:	72 
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1118 (discriminator 1)
    1f10:	61                   	(bad)  
    1f11:	74 65                	je     1f78 <.debug_str+0x1f78>
    1f13:	00 6d 61             	add    BYTE PTR [rbp+0x61],ch
    1f16:	78 62                	js     1f7a <SV_CheckTimeouts+0x104>
    1f18:	69 74 73 00 66 72 61 	imul   esi,DWORD PTR [rbx+rsi*2+0x0],0x67617266
    1f1f:	67 
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1120
			Com_DPrintf( "Going from CS_ZOMBIE to CS_FREE for client %d\n", i );
    1f20:	6d                   	ins    DWORD PTR es:[rdi],dx
    1f21:	65 6e                	outs   dx,BYTE PTR gs:[rsi]
    1f23:	74 4c                	je     1f71 <.debug_str+0x1f71>
    1f25:	65 6e                	outs   dx,BYTE PTR gs:[rsi]
    1f27:	67 74 68             	addr32 je 1f92 <SV_CheckTimeouts+0x11c>
    1f2a:	00 4f 50             	add    BYTE PTR [rdi+0x50],cl
    1f2d:	5f                   	pop    rdi
    1f2e:	53                   	push   rbx
    1f2f:	54                   	push   rsp
    1f30:	4f 52                	rex.WRXB push r10
    1f32:	45 31 00             	xor    DWORD PTR [r8],r8d
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1121
			cl->state = CS_FREE;	// can now be reused
    1f35:	4f 50                	rex.WRXB push r8
    1f37:	5f                   	pop    rdi
    1f38:	53                   	push   rbx
    1f39:	54                   	push   rsp
    1f3a:	4f 52                	rex.WRXB push r10
    1f3c:	45 32 00             	xor    r8b,BYTE PTR [r8]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1122
			continue;
    1f3f:	4f 50                	rex.WRXB push r8
    1f41:	5f                   	pop    rdi
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1124
		if ( cl->justConnected && svs.time - cl->lastPacketTime > 4000 ) {
    1f42:	53                   	push   rbx
    1f43:	54                   	push   rsp
    1f44:	4f 52                	rex.WRXB push r10
    1f46:	45 34 00             	rex.RB xor al,0x0
    1f49:	66 6c                	data16 ins BYTE PTR es:[rdi],dx
    1f4b:	61                   	(bad)  
    1f4c:	67 73 00             	addr32 jae 1f4f <.debug_str+0x1f4f>
    1f4f:	67 6f                	outs   dx,DWORD PTR ds:[esi]
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1124 (discriminator 1)
    1f51:	74 43                	je     1f96 <SV_CheckTimeouts+0x120>
    1f53:	50                   	push   rax
    1f54:	00 53 56             	add    BYTE PTR [rbx+0x56],dl
    1f57:	5f                   	pop    rdi
    1f58:	4d 61                	rex.WRB (bad) 
    1f5a:	73 74                	jae    1fd0 <SV_CheckTimeouts+0x15a>
    1f5c:	65 72 53             	gs jb  1fb2 <SV_CheckTimeouts+0x13c>
    1f5f:	68 75 74 64 6f       	push   0x6f647475
    1f64:	77 6e                	ja     1fd4 <SV_CheckTimeouts+0x15e>
    1f66:	00 54 4b 5f          	add    BYTE PTR [rbx+rcx*2+0x5f],dl
    1f6a:	51                   	push   rcx
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:1126
			SVC_RateDropAddress( &cl->netchan.remoteAddress, 10, 1000 ); // enforce burst with progressive multiplier
    1f6b:	55                   	push   rbp
    1f6c:	4f 54                	rex.WRXB push r12
    1f6e:	45                   	rex.RB
    1f6f:	44 00 70 6f          	add    BYTE PTR [rax+0x6f],r14b
    1f73:	77 65                	ja     1fda <SV_CheckTimeouts+0x164>
    1f75:	72 75                	jb     1fec <SV_CheckTimeouts+0x176>
    1f77:	70 73                	jo     1fec <SV_CheckTimeouts+0x176>
	...

Disassembly of section .comment:

0000000000000000 <.comment>:
SV_ExpandNewlines():
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:81
static const char *SV_ExpandNewlines( const char *in ) {
   0:	00 47 43             	add    BYTE PTR [rdi+0x43],al
   3:	43 3a 20             	rex.XB cmp spl,BYTE PTR [r8]
   6:	28 44 65 62          	sub    BYTE PTR [rbp+riz*2+0x62],al
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:85
	l = 0;
   a:	69 61 6e 20 38 2e 33 	imul   esp,DWORD PTR [rcx+0x6e],0x332e3820
/media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e/code/server/sv_main.c:87
		if ( *in == '\n' ) {
  11:	2e 30 2d 36 29 20 38 	xor    BYTE PTR cs:[rip+0x38202936],ch        # 3820294e <dlNextRound.8083+0x3811ff66>
  18:	2e 33 2e             	xor    ebp,DWORD PTR cs:[rsi]
  1b:	30 00                	xor    BYTE PTR [rax],al

Disassembly of section .eh_frame:

0000000000000000 <.eh_frame>:
   0:	14 00                	adc    al,0x0
   2:	00 00                	add    BYTE PTR [rax],al
   4:	00 00                	add    BYTE PTR [rax],al
   6:	00 00                	add    BYTE PTR [rax],al
   8:	01 7a 52             	add    DWORD PTR [rdx+0x52],edi
   b:	00 01                	add    BYTE PTR [rcx],al
   d:	78 10                	js     1f <.eh_frame+0x1f>
   f:	01 1b                	add    DWORD PTR [rbx],ebx
  11:	0c 07                	or     al,0x7
  13:	08 90 01 00 00 1c    	or     BYTE PTR [rax+0x1c000001],dl
  19:	00 00                	add    BYTE PTR [rax],al
  1b:	00 1c 00             	add    BYTE PTR [rax+rax*1],bl
  1e:	00 00                	add    BYTE PTR [rax],al
  20:	00 00                	add    BYTE PTR [rax],al
  22:	00 00                	add    BYTE PTR [rax],al
  24:	99                   	cdq    
  25:	00 00                	add    BYTE PTR [rax],al
  27:	00 00                	add    BYTE PTR [rax],al
  29:	41 0e                	rex.B (bad) 
  2b:	10 86 02 43 0d 06    	adc    BYTE PTR [rsi+0x60d4302],al
  31:	02 94 0c 07 08 00 00 	add    dl,BYTE PTR [rsp+rcx*1+0x807]
  38:	1c 00                	sbb    al,0x0
  3a:	00 00                	add    BYTE PTR [rax],al
  3c:	3c 00                	cmp    al,0x0
  3e:	00 00                	add    BYTE PTR [rax],al
  40:	00 00                	add    BYTE PTR [rax],al
  42:	00 00                	add    BYTE PTR [rax],al
  44:	54                   	push   rsp
  45:	01 00                	add    DWORD PTR [rax],eax
  47:	00 00                	add    BYTE PTR [rax],al
  49:	41 0e                	rex.B (bad) 
  4b:	10 86 02 43 0d 06    	adc    BYTE PTR [rsi+0x60d4302],al
  51:	03 4f 01             	add    ecx,DWORD PTR [rdi+0x1]
  54:	0c 07                	or     al,0x7
  56:	08 00                	or     BYTE PTR [rax],al
  58:	1c 00                	sbb    al,0x0
  5a:	00 00                	add    BYTE PTR [rax],al
  5c:	5c                   	pop    rsp
  5d:	00 00                	add    BYTE PTR [rax],al
  5f:	00 00                	add    BYTE PTR [rax],al
  61:	00 00                	add    BYTE PTR [rax],al
  63:	00 c0                	add    al,al
  65:	01 00                	add    DWORD PTR [rax],eax
  67:	00 00                	add    BYTE PTR [rax],al
  69:	41 0e                	rex.B (bad) 
  6b:	10 86 02 43 0d 06    	adc    BYTE PTR [rsi+0x60d4302],al
  71:	03 bb 01 0c 07 08    	add    edi,DWORD PTR [rbx+0x8070c01]
  77:	00 1c 00             	add    BYTE PTR [rax+rax*1],bl
  7a:	00 00                	add    BYTE PTR [rax],al
  7c:	7c 00                	jl     7e <.eh_frame+0x7e>
  7e:	00 00                	add    BYTE PTR [rax],al
  80:	00 00                	add    BYTE PTR [rax],al
  82:	00 00                	add    BYTE PTR [rax],al
  84:	cf                   	iret   
  85:	04 00                	add    al,0x0
  87:	00 00                	add    BYTE PTR [rax],al
  89:	41 0e                	rex.B (bad) 
  8b:	10 86 02 43 0d 06    	adc    BYTE PTR [rsi+0x60d4302],al
  91:	03 ca                	add    ecx,edx
  93:	04 0c                	add    al,0xc
  95:	07                   	(bad)  
  96:	08 00                	or     BYTE PTR [rax],al
  98:	1c 00                	sbb    al,0x0
  9a:	00 00                	add    BYTE PTR [rax],al
  9c:	9c                   	pushf  
  9d:	00 00                	add    BYTE PTR [rax],al
  9f:	00 00                	add    BYTE PTR [rax],al
  a1:	00 00                	add    BYTE PTR [rax],al
  a3:	00 37                	add    BYTE PTR [rdi],dh
  a5:	00 00                	add    BYTE PTR [rax],al
  a7:	00 00                	add    BYTE PTR [rax],al
  a9:	41 0e                	rex.B (bad) 
  ab:	10 86 02 43 0d 06    	adc    BYTE PTR [rsi+0x60d4302],al
  b1:	72 0c                	jb     bf <.eh_frame+0xbf>
  b3:	07                   	(bad)  
  b4:	08 00                	or     BYTE PTR [rax],al
  b6:	00 00                	add    BYTE PTR [rax],al
  b8:	1c 00                	sbb    al,0x0
  ba:	00 00                	add    BYTE PTR [rax],al
  bc:	bc 00 00 00 00       	mov    esp,0x0
  c1:	00 00                	add    BYTE PTR [rax],al
  c3:	00 ad 00 00 00 00    	add    BYTE PTR [rbp+0x0],ch
  c9:	41 0e                	rex.B (bad) 
  cb:	10 86 02 43 0d 06    	adc    BYTE PTR [rsi+0x60d4302],al
  d1:	02 a8 0c 07 08 00    	add    ch,BYTE PTR [rax+0x8070c]
  d7:	00 1c 00             	add    BYTE PTR [rax+rax*1],bl
  da:	00 00                	add    BYTE PTR [rax],al
  dc:	dc 00                	fadd   QWORD PTR [rax]
  de:	00 00                	add    BYTE PTR [rax],al
  e0:	00 00                	add    BYTE PTR [rax],al
  e2:	00 00                	add    BYTE PTR [rax],al
  e4:	db 00                	fild   DWORD PTR [rax]
  e6:	00 00                	add    BYTE PTR [rax],al
  e8:	00 41 0e             	add    BYTE PTR [rcx+0xe],al
  eb:	10 86 02 43 0d 06    	adc    BYTE PTR [rsi+0x60d4302],al
  f1:	02 d6                	add    dl,dh
  f3:	0c 07                	or     al,0x7
  f5:	08 00                	or     BYTE PTR [rax],al
  f7:	00 1c 00             	add    BYTE PTR [rax+rax*1],bl
  fa:	00 00                	add    BYTE PTR [rax],al
  fc:	fc                   	cld    
  fd:	00 00                	add    BYTE PTR [rax],al
  ff:	00 00                	add    BYTE PTR [rax],al
 101:	00 00                	add    BYTE PTR [rax],al
 103:	00 3e                	add    BYTE PTR [rsi],bh
 105:	03 00                	add    eax,DWORD PTR [rax]
 107:	00 00                	add    BYTE PTR [rax],al
 109:	41 0e                	rex.B (bad) 
 10b:	10 86 02 43 0d 06    	adc    BYTE PTR [rsi+0x60d4302],al
 111:	03 39                	add    edi,DWORD PTR [rcx]
 113:	03 0c 07             	add    ecx,DWORD PTR [rdi+rax*1]
 116:	08 00                	or     BYTE PTR [rax],al
 118:	1c 00                	sbb    al,0x0
 11a:	00 00                	add    BYTE PTR [rax],al
 11c:	1c 01                	sbb    al,0x1
 11e:	00 00                	add    BYTE PTR [rax],al
 120:	00 00                	add    BYTE PTR [rax],al
 122:	00 00                	add    BYTE PTR [rax],al
 124:	b2 00                	mov    dl,0x0
 126:	00 00                	add    BYTE PTR [rax],al
 128:	00 41 0e             	add    BYTE PTR [rcx+0xe],al
 12b:	10 86 02 43 0d 06    	adc    BYTE PTR [rsi+0x60d4302],al
 131:	02 ad 0c 07 08 00    	add    ch,BYTE PTR [rbp+0x8070c]
 137:	00 1c 00             	add    BYTE PTR [rax+rax*1],bl
 13a:	00 00                	add    BYTE PTR [rax],al
 13c:	3c 01                	cmp    al,0x1
 13e:	00 00                	add    BYTE PTR [rax],al
 140:	00 00                	add    BYTE PTR [rax],al
 142:	00 00                	add    BYTE PTR [rax],al
 144:	5a                   	pop    rdx
 145:	00 00                	add    BYTE PTR [rax],al
 147:	00 00                	add    BYTE PTR [rax],al
 149:	41 0e                	rex.B (bad) 
 14b:	10 86 02 43 0d 06    	adc    BYTE PTR [rsi+0x60d4302],al
 151:	02 55 0c             	add    dl,BYTE PTR [rbp+0xc]
 154:	07                   	(bad)  
 155:	08 00                	or     BYTE PTR [rax],al
 157:	00 1c 00             	add    BYTE PTR [rax+rax*1],bl
 15a:	00 00                	add    BYTE PTR [rax],al
 15c:	5c                   	pop    rsp
 15d:	01 00                	add    DWORD PTR [rax],eax
 15f:	00 00                	add    BYTE PTR [rax],al
 161:	00 00                	add    BYTE PTR [rax],al
 163:	00 2e                	add    BYTE PTR [rsi],ch
 165:	00 00                	add    BYTE PTR [rax],al
 167:	00 00                	add    BYTE PTR [rax],al
 169:	41 0e                	rex.B (bad) 
 16b:	10 86 02 43 0d 06    	adc    BYTE PTR [rsi+0x60d4302],al
 171:	69 0c 07 08 00 00 00 	imul   ecx,DWORD PTR [rdi+rax*1],0x8
 178:	1c 00                	sbb    al,0x0
 17a:	00 00                	add    BYTE PTR [rax],al
 17c:	7c 01                	jl     17f <.eh_frame+0x17f>
 17e:	00 00                	add    BYTE PTR [rax],al
 180:	00 00                	add    BYTE PTR [rax],al
 182:	00 00                	add    BYTE PTR [rax],al
 184:	2e 00 00             	add    BYTE PTR cs:[rax],al
 187:	00 00                	add    BYTE PTR [rax],al
 189:	41 0e                	rex.B (bad) 
 18b:	10 86 02 43 0d 06    	adc    BYTE PTR [rsi+0x60d4302],al
 191:	69 0c 07 08 00 00 00 	imul   ecx,DWORD PTR [rdi+rax*1],0x8
 198:	1c 00                	sbb    al,0x0
 19a:	00 00                	add    BYTE PTR [rax],al
 19c:	9c                   	pushf  
 19d:	01 00                	add    DWORD PTR [rax],eax
 19f:	00 00                	add    BYTE PTR [rax],al
 1a1:	00 00                	add    BYTE PTR [rax],al
 1a3:	00 52 00             	add    BYTE PTR [rdx+0x0],dl
 1a6:	00 00                	add    BYTE PTR [rax],al
 1a8:	00 41 0e             	add    BYTE PTR [rcx+0xe],al
 1ab:	10 86 02 43 0d 06    	adc    BYTE PTR [rsi+0x60d4302],al
 1b1:	02 4d 0c             	add    cl,BYTE PTR [rbp+0xc]
 1b4:	07                   	(bad)  
 1b5:	08 00                	or     BYTE PTR [rax],al
 1b7:	00 1c 00             	add    BYTE PTR [rax+rax*1],bl
 1ba:	00 00                	add    BYTE PTR [rax],al
 1bc:	bc 01 00 00 00       	mov    esp,0x1
 1c1:	00 00                	add    BYTE PTR [rax],al
 1c3:	00 39                	add    BYTE PTR [rcx],bh
 1c5:	00 00                	add    BYTE PTR [rax],al
 1c7:	00 00                	add    BYTE PTR [rax],al
 1c9:	41 0e                	rex.B (bad) 
 1cb:	10 86 02 43 0d 06    	adc    BYTE PTR [rsi+0x60d4302],al
 1d1:	74 0c                	je     1df <.eh_frame+0x1df>
 1d3:	07                   	(bad)  
 1d4:	08 00                	or     BYTE PTR [rax],al
 1d6:	00 00                	add    BYTE PTR [rax],al
 1d8:	1c 00                	sbb    al,0x0
 1da:	00 00                	add    BYTE PTR [rax],al
 1dc:	dc 01                	fadd   QWORD PTR [rcx]
 1de:	00 00                	add    BYTE PTR [rax],al
 1e0:	00 00                	add    BYTE PTR [rax],al
 1e2:	00 00                	add    BYTE PTR [rax],al
 1e4:	39 00                	cmp    DWORD PTR [rax],eax
 1e6:	00 00                	add    BYTE PTR [rax],al
 1e8:	00 41 0e             	add    BYTE PTR [rcx+0xe],al
 1eb:	10 86 02 43 0d 06    	adc    BYTE PTR [rsi+0x60d4302],al
 1f1:	74 0c                	je     1ff <.eh_frame+0x1ff>
 1f3:	07                   	(bad)  
 1f4:	08 00                	or     BYTE PTR [rax],al
 1f6:	00 00                	add    BYTE PTR [rax],al
 1f8:	1c 00                	sbb    al,0x0
 1fa:	00 00                	add    BYTE PTR [rax],al
 1fc:	fc                   	cld    
 1fd:	01 00                	add    DWORD PTR [rax],eax
 1ff:	00 00                	add    BYTE PTR [rax],al
 201:	00 00                	add    BYTE PTR [rax],al
 203:	00 3e                	add    BYTE PTR [rsi],bh
 205:	00 00                	add    BYTE PTR [rax],al
 207:	00 00                	add    BYTE PTR [rax],al
 209:	41 0e                	rex.B (bad) 
 20b:	10 86 02 43 0d 06    	adc    BYTE PTR [rsi+0x60d4302],al
 211:	79 0c                	jns    21f <.eh_frame+0x21f>
 213:	07                   	(bad)  
 214:	08 00                	or     BYTE PTR [rax],al
 216:	00 00                	add    BYTE PTR [rax],al
 218:	1c 00                	sbb    al,0x0
 21a:	00 00                	add    BYTE PTR [rax],al
 21c:	1c 02                	sbb    al,0x2
 21e:	00 00                	add    BYTE PTR [rax],al
 220:	00 00                	add    BYTE PTR [rax],al
 222:	00 00                	add    BYTE PTR [rax],al
 224:	3e 02 00             	add    al,BYTE PTR ds:[rax]
 227:	00 00                	add    BYTE PTR [rax],al
 229:	41 0e                	rex.B (bad) 
 22b:	10 86 02 43 0d 06    	adc    BYTE PTR [rsi+0x60d4302],al
 231:	03 39                	add    edi,DWORD PTR [rcx]
 233:	02 0c 07             	add    cl,BYTE PTR [rdi+rax*1]
 236:	08 00                	or     BYTE PTR [rax],al
 238:	1c 00                	sbb    al,0x0
 23a:	00 00                	add    BYTE PTR [rax],al
 23c:	3c 02                	cmp    al,0x2
 23e:	00 00                	add    BYTE PTR [rax],al
 240:	00 00                	add    BYTE PTR [rax],al
 242:	00 00                	add    BYTE PTR [rax],al
 244:	be 03 00 00 00       	mov    esi,0x3
 249:	41 0e                	rex.B (bad) 
 24b:	10 86 02 43 0d 06    	adc    BYTE PTR [rsi+0x60d4302],al
 251:	03 b9 03 0c 07 08    	add    edi,DWORD PTR [rcx+0x8070c03]
 257:	00 1c 00             	add    BYTE PTR [rax+rax*1],bl
 25a:	00 00                	add    BYTE PTR [rax],al
 25c:	5c                   	pop    rsp
 25d:	02 00                	add    al,BYTE PTR [rax]
 25f:	00 00                	add    BYTE PTR [rax],al
 261:	00 00                	add    BYTE PTR [rax],al
 263:	00 3e                	add    BYTE PTR [rsi],bh
 265:	00 00                	add    BYTE PTR [rax],al
 267:	00 00                	add    BYTE PTR [rax],al
 269:	41 0e                	rex.B (bad) 
 26b:	10 86 02 43 0d 06    	adc    BYTE PTR [rsi+0x60d4302],al
 271:	79 0c                	jns    27f <.eh_frame+0x27f>
 273:	07                   	(bad)  
 274:	08 00                	or     BYTE PTR [rax],al
 276:	00 00                	add    BYTE PTR [rax],al
 278:	20 00                	and    BYTE PTR [rax],al
 27a:	00 00                	add    BYTE PTR [rax],al
 27c:	7c 02                	jl     280 <.eh_frame+0x280>
 27e:	00 00                	add    BYTE PTR [rax],al
 280:	00 00                	add    BYTE PTR [rax],al
 282:	00 00                	add    BYTE PTR [rax],al
 284:	d3 02                	rol    DWORD PTR [rdx],cl
 286:	00 00                	add    BYTE PTR [rax],al
 288:	00 41 0e             	add    BYTE PTR [rcx+0xe],al
 28b:	10 86 02 43 0d 06    	adc    BYTE PTR [rsi+0x60d4302],al
 291:	48 83 03 03          	add    QWORD PTR [rbx],0x3
 295:	c6 02 0c             	mov    BYTE PTR [rdx],0xc
 298:	07                   	(bad)  
 299:	08 00                	or     BYTE PTR [rax],al
 29b:	00 20                	add    BYTE PTR [rax],ah
 29d:	00 00                	add    BYTE PTR [rax],al
 29f:	00 a0 02 00 00 00    	add    BYTE PTR [rax+0x2],ah
 2a5:	00 00                	add    BYTE PTR [rax],al
 2a7:	00 58 02             	add    BYTE PTR [rax+0x2],bl
 2aa:	00 00                	add    BYTE PTR [rax],al
 2ac:	00 41 0e             	add    BYTE PTR [rcx+0xe],al
 2af:	10 86 02 43 0d 06    	adc    BYTE PTR [rsi+0x60d4302],al
 2b5:	45 83 03 03          	rex.RB add DWORD PTR [r11],0x3
 2b9:	4e 02 0c 07          	rex.WRX add r9b,BYTE PTR [rdi+r8*1]
 2bd:	08 00                	or     BYTE PTR [rax],al
 2bf:	00 1c 00             	add    BYTE PTR [rax+rax*1],bl
 2c2:	00 00                	add    BYTE PTR [rax],al
 2c4:	c4 02 00 00          	(bad)  
 2c8:	00 00                	add    BYTE PTR [rax],al
 2ca:	00 00                	add    BYTE PTR [rax],al
 2cc:	8f 01                	pop    QWORD PTR [rcx]
 2ce:	00 00                	add    BYTE PTR [rax],al
 2d0:	00 41 0e             	add    BYTE PTR [rcx+0xe],al
 2d3:	10 86 02 43 0d 06    	adc    BYTE PTR [rsi+0x60d4302],al
 2d9:	03 8a 01 0c 07 08    	add    ecx,DWORD PTR [rdx+0x8070c01]
 2df:	00 1c 00             	add    BYTE PTR [rax+rax*1],bl
 2e2:	00 00                	add    BYTE PTR [rax],al
 2e4:	e4 02                	in     al,0x2
 2e6:	00 00                	add    BYTE PTR [rax],al
 2e8:	00 00                	add    BYTE PTR [rax],al
 2ea:	00 00                	add    BYTE PTR [rax],al
 2ec:	9f                   	lahf   
 2ed:	01 00                	add    DWORD PTR [rax],eax
 2ef:	00 00                	add    BYTE PTR [rax],al
 2f1:	41 0e                	rex.B (bad) 
 2f3:	10 86 02 43 0d 06    	adc    BYTE PTR [rsi+0x60d4302],al
 2f9:	03 9a 01 0c 07 08    	add    ebx,DWORD PTR [rdx+0x8070c01]
 2ff:	00 1c 00             	add    BYTE PTR [rax+rax*1],bl
 302:	00 00                	add    BYTE PTR [rax],al
 304:	04 03                	add    al,0x3
 306:	00 00                	add    BYTE PTR [rax],al
 308:	00 00                	add    BYTE PTR [rax],al
 30a:	00 00                	add    BYTE PTR [rax],al
 30c:	c2 01 00             	ret    0x1
 30f:	00 00                	add    BYTE PTR [rax],al
 311:	41 0e                	rex.B (bad) 
 313:	10 86 02 43 0d 06    	adc    BYTE PTR [rsi+0x60d4302],al
 319:	03 bd 01 0c 07 08    	add    edi,DWORD PTR [rbp+0x8070c01]
 31f:	00 1c 00             	add    BYTE PTR [rax+rax*1],bl
 322:	00 00                	add    BYTE PTR [rax],al
 324:	24 03                	and    al,0x3
 326:	00 00                	add    BYTE PTR [rax],al
 328:	00 00                	add    BYTE PTR [rax],al
 32a:	00 00                	add    BYTE PTR [rax],al
 32c:	0b 00                	or     eax,DWORD PTR [rax]
 32e:	00 00                	add    BYTE PTR [rax],al
 330:	00 41 0e             	add    BYTE PTR [rcx+0xe],al
 333:	10 86 02 43 0d 06    	adc    BYTE PTR [rsi+0x60d4302],al
 339:	46 0c 07             	rex.RX or al,0x7
 33c:	08 00                	or     BYTE PTR [rax],al
 33e:	00 00                	add    BYTE PTR [rax],al
 340:	1c 00                	sbb    al,0x0
 342:	00 00                	add    BYTE PTR [rax],al
 344:	44 03 00             	add    r8d,DWORD PTR [rax]
 347:	00 00                	add    BYTE PTR [rax],al
 349:	00 00                	add    BYTE PTR [rax],al
 34b:	00 57 00             	add    BYTE PTR [rdi+0x0],dl
 34e:	00 00                	add    BYTE PTR [rax],al
 350:	00 41 0e             	add    BYTE PTR [rcx+0xe],al
 353:	10 86 02 43 0d 06    	adc    BYTE PTR [rsi+0x60d4302],al
 359:	02 52 0c             	add    dl,BYTE PTR [rdx+0xc]
 35c:	07                   	(bad)  
 35d:	08 00                	or     BYTE PTR [rax],al
 35f:	00 1c 00             	add    BYTE PTR [rax+rax*1],bl
 362:	00 00                	add    BYTE PTR [rax],al
 364:	64 03 00             	add    eax,DWORD PTR fs:[rax]
 367:	00 00                	add    BYTE PTR [rax],al
 369:	00 00                	add    BYTE PTR [rax],al
 36b:	00 08                	add    BYTE PTR [rax],cl
 36d:	01 00                	add    DWORD PTR [rax],eax
 36f:	00 00                	add    BYTE PTR [rax],al
 371:	41 0e                	rex.B (bad) 
 373:	10 86 02 43 0d 06    	adc    BYTE PTR [rsi+0x60d4302],al
 379:	03 03                	add    eax,DWORD PTR [rbx]
 37b:	01 0c 07             	add    DWORD PTR [rdi+rax*1],ecx
 37e:	08 00                	or     BYTE PTR [rax],al
 380:	1c 00                	sbb    al,0x0
 382:	00 00                	add    BYTE PTR [rax],al
 384:	84 03                	test   BYTE PTR [rbx],al
 386:	00 00                	add    BYTE PTR [rax],al
 388:	00 00                	add    BYTE PTR [rax],al
 38a:	00 00                	add    BYTE PTR [rax],al
 38c:	d1 00                	rol    DWORD PTR [rax],1
 38e:	00 00                	add    BYTE PTR [rax],al
 390:	00 41 0e             	add    BYTE PTR [rcx+0xe],al
 393:	10 86 02 43 0d 06    	adc    BYTE PTR [rsi+0x60d4302],al
 399:	02 cc                	add    cl,ah
 39b:	0c 07                	or     al,0x7
 39d:	08 00                	or     BYTE PTR [rax],al
 39f:	00 1c 00             	add    BYTE PTR [rax+rax*1],bl
 3a2:	00 00                	add    BYTE PTR [rax],al
 3a4:	a4                   	movs   BYTE PTR es:[rdi],BYTE PTR ds:[rsi]
 3a5:	03 00                	add    eax,DWORD PTR [rax]
 3a7:	00 00                	add    BYTE PTR [rax],al
 3a9:	00 00                	add    BYTE PTR [rax],al
 3ab:	00 b8 03 00 00 00    	add    BYTE PTR [rax+0x3],bh
 3b1:	41 0e                	rex.B (bad) 
 3b3:	10 86 02 43 0d 06    	adc    BYTE PTR [rsi+0x60d4302],al
 3b9:	03 b3 03 0c 07 08    	add    esi,DWORD PTR [rbx+0x8070c03]
 3bf:	00 1c 00             	add    BYTE PTR [rax+rax*1],bl
 3c2:	00 00                	add    BYTE PTR [rax],al
 3c4:	c4 03 00 00          	(bad)  
 3c8:	00 00                	add    BYTE PTR [rax],al
 3ca:	00 00                	add    BYTE PTR [rax],al
 3cc:	aa                   	stos   BYTE PTR es:[rdi],al
 3cd:	00 00                	add    BYTE PTR [rax],al
 3cf:	00 00                	add    BYTE PTR [rax],al
 3d1:	41 0e                	rex.B (bad) 
 3d3:	10 86 02 43 0d 06    	adc    BYTE PTR [rsi+0x60d4302],al
 3d9:	02 a5 0c 07 08 00    	add    ah,BYTE PTR [rbp+0x8070c]
 3df:	00 1c 00             	add    BYTE PTR [rax+rax*1],bl
 3e2:	00 00                	add    BYTE PTR [rax],al
 3e4:	e4 03                	in     al,0x3
 3e6:	00 00                	add    BYTE PTR [rax],al
 3e8:	00 00                	add    BYTE PTR [rax],al
 3ea:	00 00                	add    BYTE PTR [rax],al
 3ec:	0e                   	(bad)  
 3ed:	01 00                	add    DWORD PTR [rax],eax
 3ef:	00 00                	add    BYTE PTR [rax],al
 3f1:	41 0e                	rex.B (bad) 
 3f3:	10 86 02 43 0d 06    	adc    BYTE PTR [rsi+0x60d4302],al
 3f9:	03 09                	add    ecx,DWORD PTR [rcx]
 3fb:	01 0c 07             	add    DWORD PTR [rdi+rax*1],ecx
 3fe:	08 00                	or     BYTE PTR [rax],al
Contents of the .debug_info section:

  Compilation Unit @ offset 0x0:
   Length:        0x3438 (32-bit)
   Version:       4
   Abbrev Offset: 0x0
   Pointer Size:  8
 <0><b>: Abbrev Number: 1 (DW_TAG_compile_unit)
    <c>   DW_AT_producer    : (indirect string, offset: 0x19e4): GNU C17 8.3.0 -mtune=generic -march=x86-64 -g -O0
    <10>   DW_AT_language    : 12	(ANSI C99)
    <11>   DW_AT_name        : (indirect string, offset: 0x1e5d): code/server/sv_main.c
    <15>   DW_AT_comp_dir    : (indirect string, offset: 0x60e): /media/WD3tbUSB3_00/CODE/cpp/__S/workspace/Quake3e
    <19>   DW_AT_low_pc      : 0x0
    <21>   DW_AT_high_pc     : 0x27e3
    <29>   DW_AT_stmt_list   : 0x0
 <1><2d>: Abbrev Number: 2 (DW_TAG_base_type)
    <2e>   DW_AT_byte_size   : 1
    <2f>   DW_AT_encoding    : 8	(unsigned char)
    <30>   DW_AT_name        : (indirect string, offset: 0x74c): unsigned char
 <1><34>: Abbrev Number: 2 (DW_TAG_base_type)
    <35>   DW_AT_byte_size   : 2
    <36>   DW_AT_encoding    : 7	(unsigned)
    <37>   DW_AT_name        : (indirect string, offset: 0x10be): short unsigned int
 <1><3b>: Abbrev Number: 2 (DW_TAG_base_type)
    <3c>   DW_AT_byte_size   : 4
    <3d>   DW_AT_encoding    : 7	(unsigned)
    <3e>   DW_AT_name        : (indirect string, offset: 0x1e0e): unsigned int
 <1><42>: Abbrev Number: 2 (DW_TAG_base_type)
    <43>   DW_AT_byte_size   : 8
    <44>   DW_AT_encoding    : 7	(unsigned)
    <45>   DW_AT_name        : (indirect string, offset: 0x14fd): long unsigned int
 <1><49>: Abbrev Number: 2 (DW_TAG_base_type)
    <4a>   DW_AT_byte_size   : 1
    <4b>   DW_AT_encoding    : 6	(signed char)
    <4c>   DW_AT_name        : (indirect string, offset: 0x10ed): signed char
 <1><50>: Abbrev Number: 2 (DW_TAG_base_type)
    <51>   DW_AT_byte_size   : 2
    <52>   DW_AT_encoding    : 5	(signed)
    <53>   DW_AT_name        : (indirect string, offset: 0x1e81): short int
 <1><57>: Abbrev Number: 3 (DW_TAG_typedef)
    <58>   DW_AT_name        : (indirect string, offset: 0x5ee): __uint16_t
    <5c>   DW_AT_decl_file   : 2
    <5d>   DW_AT_decl_line   : 39
    <5e>   DW_AT_decl_column : 28
    <5f>   DW_AT_type        : <0x34>
 <1><63>: Abbrev Number: 3 (DW_TAG_typedef)
    <64>   DW_AT_name        : (indirect string, offset: 0x18d5): __int32_t
    <68>   DW_AT_decl_file   : 2
    <69>   DW_AT_decl_line   : 40
    <6a>   DW_AT_decl_column : 20
    <6b>   DW_AT_type        : <0x6f>
 <1><6f>: Abbrev Number: 4 (DW_TAG_base_type)
    <70>   DW_AT_byte_size   : 4
    <71>   DW_AT_encoding    : 5	(signed)
    <72>   DW_AT_name        : int
 <1><76>: Abbrev Number: 5 (DW_TAG_const_type)
    <77>   DW_AT_type        : <0x6f>
 <1><7b>: Abbrev Number: 3 (DW_TAG_typedef)
    <7c>   DW_AT_name        : (indirect string, offset: 0x18e7): __uint32_t
    <80>   DW_AT_decl_file   : 2
    <81>   DW_AT_decl_line   : 41
    <82>   DW_AT_decl_column : 22
    <83>   DW_AT_type        : <0x3b>
 <1><87>: Abbrev Number: 2 (DW_TAG_base_type)
    <88>   DW_AT_byte_size   : 8
    <89>   DW_AT_encoding    : 5	(signed)
    <8a>   DW_AT_name        : (indirect string, offset: 0x130f): long int
 <1><8e>: Abbrev Number: 3 (DW_TAG_typedef)
    <8f>   DW_AT_name        : (indirect string, offset: 0x243): __off_t
    <93>   DW_AT_decl_file   : 2
    <94>   DW_AT_decl_line   : 150
    <95>   DW_AT_decl_column : 25
    <96>   DW_AT_type        : <0x87>
 <1><9a>: Abbrev Number: 3 (DW_TAG_typedef)
    <9b>   DW_AT_name        : (indirect string, offset: 0x1197): __off64_t
    <9f>   DW_AT_decl_file   : 2
    <a0>   DW_AT_decl_line   : 151
    <a1>   DW_AT_decl_column : 27
    <a2>   DW_AT_type        : <0x87>
 <1><a6>: Abbrev Number: 6 (DW_TAG_array_type)
    <a7>   DW_AT_type        : <0x6f>
    <ab>   DW_AT_sibling     : <0xb6>
 <2><af>: Abbrev Number: 7 (DW_TAG_subrange_type)
    <b0>   DW_AT_type        : <0x42>
    <b4>   DW_AT_upper_bound : 1
 <2><b5>: Abbrev Number: 0
 <1><b6>: Abbrev Number: 8 (DW_TAG_pointer_type)
    <b7>   DW_AT_byte_size   : 8
 <1><b8>: Abbrev Number: 9 (DW_TAG_pointer_type)
    <b9>   DW_AT_byte_size   : 8
    <ba>   DW_AT_type        : <0xbe>
 <1><be>: Abbrev Number: 2 (DW_TAG_base_type)
    <bf>   DW_AT_byte_size   : 1
    <c0>   DW_AT_encoding    : 6	(signed char)
    <c1>   DW_AT_name        : (indirect string, offset: 0x1562): char
 <1><c5>: Abbrev Number: 5 (DW_TAG_const_type)
    <c6>   DW_AT_type        : <0xbe>
 <1><ca>: Abbrev Number: 2 (DW_TAG_base_type)
    <cb>   DW_AT_byte_size   : 4
    <cc>   DW_AT_encoding    : 4	(float)
    <cd>   DW_AT_name        : (indirect string, offset: 0x78d): float
 <1><d1>: Abbrev Number: 2 (DW_TAG_base_type)
    <d2>   DW_AT_byte_size   : 8
    <d3>   DW_AT_encoding    : 4	(float)
    <d4>   DW_AT_name        : (indirect string, offset: 0x181e): double
 <1><d8>: Abbrev Number: 10 (DW_TAG_variable)
    <d9>   DW_AT_name        : (indirect string, offset: 0xcb6): signgam
    <dd>   DW_AT_decl_file   : 9
    <de>   DW_AT_decl_line   : 773
    <e0>   DW_AT_decl_column : 12
    <e1>   DW_AT_type        : <0x6f>
    <e5>   DW_AT_external    : 1
    <e5>   DW_AT_declaration : 1
 <1><e5>: Abbrev Number: 3 (DW_TAG_typedef)
    <e6>   DW_AT_name        : (indirect string, offset: 0xa00): size_t
    <ea>   DW_AT_decl_file   : 3
    <eb>   DW_AT_decl_line   : 216
    <ec>   DW_AT_decl_column : 23
    <ed>   DW_AT_type        : <0x42>
 <1><f1>: Abbrev Number: 3 (DW_TAG_typedef)
    <f2>   DW_AT_name        : (indirect string, offset: 0x6b6): __gnuc_va_list
    <f6>   DW_AT_decl_file   : 4
    <f7>   DW_AT_decl_line   : 40
    <f8>   DW_AT_decl_column : 27
    <f9>   DW_AT_type        : <0xfd>
 <1><fd>: Abbrev Number: 11 (DW_TAG_typedef)
    <fe>   DW_AT_name        : (indirect string, offset: 0x388): __builtin_va_list
    <102>   DW_AT_type        : <0x106>
 <1><106>: Abbrev Number: 6 (DW_TAG_array_type)
    <107>   DW_AT_type        : <0x116>
    <10b>   DW_AT_sibling     : <0x116>
 <2><10f>: Abbrev Number: 7 (DW_TAG_subrange_type)
    <110>   DW_AT_type        : <0x42>
    <114>   DW_AT_upper_bound : 0
 <2><115>: Abbrev Number: 0
 <1><116>: Abbrev Number: 12 (DW_TAG_structure_type)
    <117>   DW_AT_name        : (indirect string, offset: 0x48f): __va_list_tag
    <11b>   DW_AT_byte_size   : 24
    <11c>   DW_AT_decl_file   : 5
    <11d>   DW_AT_decl_line   : 0
    <11e>   DW_AT_sibling     : <0x153>
 <2><122>: Abbrev Number: 13 (DW_TAG_member)
    <123>   DW_AT_name        : (indirect string, offset: 0x1014): gp_offset
    <127>   DW_AT_decl_file   : 5
    <128>   DW_AT_decl_line   : 0
    <129>   DW_AT_type        : <0x3b>
    <12d>   DW_AT_data_member_location: 0
 <2><12e>: Abbrev Number: 13 (DW_TAG_member)
    <12f>   DW_AT_name        : (indirect string, offset: 0xfeb): fp_offset
    <133>   DW_AT_decl_file   : 5
    <134>   DW_AT_decl_line   : 0
    <135>   DW_AT_type        : <0x3b>
    <139>   DW_AT_data_member_location: 4
 <2><13a>: Abbrev Number: 13 (DW_TAG_member)
    <13b>   DW_AT_name        : (indirect string, offset: 0x1e7): overflow_arg_area
    <13f>   DW_AT_decl_file   : 5
    <140>   DW_AT_decl_line   : 0
    <141>   DW_AT_type        : <0xb6>
    <145>   DW_AT_data_member_location: 8
 <2><146>: Abbrev Number: 13 (DW_TAG_member)
    <147>   DW_AT_name        : (indirect string, offset: 0x235): reg_save_area
    <14b>   DW_AT_decl_file   : 5
    <14c>   DW_AT_decl_line   : 0
    <14d>   DW_AT_type        : <0xb6>
    <151>   DW_AT_data_member_location: 16
 <2><152>: Abbrev Number: 0
 <1><153>: Abbrev Number: 14 (DW_TAG_structure_type)
    <154>   DW_AT_name        : (indirect string, offset: 0x164b): _IO_FILE
    <158>   DW_AT_byte_size   : 216
    <159>   DW_AT_decl_file   : 6
    <15a>   DW_AT_decl_line   : 49
    <15b>   DW_AT_decl_column : 8
    <15c>   DW_AT_sibling     : <0x2da>
 <2><160>: Abbrev Number: 15 (DW_TAG_member)
    <161>   DW_AT_name        : (indirect string, offset: 0x207): _flags
    <165>   DW_AT_decl_file   : 6
    <166>   DW_AT_decl_line   : 51
    <167>   DW_AT_decl_column : 7
    <168>   DW_AT_type        : <0x6f>
    <16c>   DW_AT_data_member_location: 0
 <2><16d>: Abbrev Number: 15 (DW_TAG_member)
    <16e>   DW_AT_name        : (indirect string, offset: 0x1b36): _IO_read_ptr
    <172>   DW_AT_decl_file   : 6
    <173>   DW_AT_decl_line   : 54
    <174>   DW_AT_decl_column : 9
    <175>   DW_AT_type        : <0xb8>
    <179>   DW_AT_data_member_location: 8
 <2><17a>: Abbrev Number: 15 (DW_TAG_member)
    <17b>   DW_AT_name        : (indirect string, offset: 0x160c): _IO_read_end
    <17f>   DW_AT_decl_file   : 6
    <180>   DW_AT_decl_line   : 55
    <181>   DW_AT_decl_column : 9
    <182>   DW_AT_type        : <0xb8>
    <186>   DW_AT_data_member_location: 16
 <2><187>: Abbrev Number: 15 (DW_TAG_member)
    <188>   DW_AT_name        : (indirect string, offset: 0x11a8): _IO_read_base
    <18c>   DW_AT_decl_file   : 6
    <18d>   DW_AT_decl_line   : 56
    <18e>   DW_AT_decl_column : 9
    <18f>   DW_AT_type        : <0xb8>
    <193>   DW_AT_data_member_location: 24
 <2><194>: Abbrev Number: 15 (DW_TAG_member)
    <195>   DW_AT_name        : (indirect string, offset: 0x1229): _IO_write_base
    <199>   DW_AT_decl_file   : 6
    <19a>   DW_AT_decl_line   : 57
    <19b>   DW_AT_decl_column : 9
    <19c>   DW_AT_type        : <0xb8>
    <1a0>   DW_AT_data_member_location: 32
 <2><1a1>: Abbrev Number: 15 (DW_TAG_member)
    <1a2>   DW_AT_name        : (indirect string, offset: 0x8c3): _IO_write_ptr
    <1a6>   DW_AT_decl_file   : 6
    <1a7>   DW_AT_decl_line   : 58
    <1a8>   DW_AT_decl_column : 9
    <1a9>   DW_AT_type        : <0xb8>
    <1ad>   DW_AT_data_member_location: 40
 <2><1ae>: Abbrev Number: 15 (DW_TAG_member)
    <1af>   DW_AT_name        : (indirect string, offset: 0x460): _IO_write_end
    <1b3>   DW_AT_decl_file   : 6
    <1b4>   DW_AT_decl_line   : 59
    <1b5>   DW_AT_decl_column : 9
    <1b6>   DW_AT_type        : <0xb8>
    <1ba>   DW_AT_data_member_location: 48
 <2><1bb>: Abbrev Number: 15 (DW_TAG_member)
    <1bc>   DW_AT_name        : (indirect string, offset: 0x15bd): _IO_buf_base
    <1c0>   DW_AT_decl_file   : 6
    <1c1>   DW_AT_decl_line   : 60
    <1c2>   DW_AT_decl_column : 9
    <1c3>   DW_AT_type        : <0xb8>
    <1c7>   DW_AT_data_member_location: 56
 <2><1c8>: Abbrev Number: 15 (DW_TAG_member)
    <1c9>   DW_AT_name        : (indirect string, offset: 0x11d8): _IO_buf_end
    <1cd>   DW_AT_decl_file   : 6
    <1ce>   DW_AT_decl_line   : 61
    <1cf>   DW_AT_decl_column : 9
    <1d0>   DW_AT_type        : <0xb8>
    <1d4>   DW_AT_data_member_location: 64
 <2><1d5>: Abbrev Number: 15 (DW_TAG_member)
    <1d6>   DW_AT_name        : (indirect string, offset: 0xb2b): _IO_save_base
    <1da>   DW_AT_decl_file   : 6
    <1db>   DW_AT_decl_line   : 64
    <1dc>   DW_AT_decl_column : 9
    <1dd>   DW_AT_type        : <0xb8>
    <1e1>   DW_AT_data_member_location: 72
 <2><1e2>: Abbrev Number: 15 (DW_TAG_member)
    <1e3>   DW_AT_name        : (indirect string, offset: 0x1b12): _IO_backup_base
    <1e7>   DW_AT_decl_file   : 6
    <1e8>   DW_AT_decl_line   : 65
    <1e9>   DW_AT_decl_column : 9
    <1ea>   DW_AT_type        : <0xb8>
    <1ee>   DW_AT_data_member_location: 80
 <2><1ef>: Abbrev Number: 15 (DW_TAG_member)
    <1f0>   DW_AT_name        : (indirect string, offset: 0xf74): _IO_save_end
    <1f4>   DW_AT_decl_file   : 6
    <1f5>   DW_AT_decl_line   : 66
    <1f6>   DW_AT_decl_column : 9
    <1f7>   DW_AT_type        : <0xb8>
    <1fb>   DW_AT_data_member_location: 88
 <2><1fc>: Abbrev Number: 15 (DW_TAG_member)
    <1fd>   DW_AT_name        : (indirect string, offset: 0x17b8): _markers
    <201>   DW_AT_decl_file   : 6
    <202>   DW_AT_decl_line   : 68
    <203>   DW_AT_decl_column : 22
    <204>   DW_AT_type        : <0x2f3>
    <208>   DW_AT_data_member_location: 96
 <2><209>: Abbrev Number: 15 (DW_TAG_member)
    <20a>   DW_AT_name        : (indirect string, offset: 0x6e7): _chain
    <20e>   DW_AT_decl_file   : 6
    <20f>   DW_AT_decl_line   : 70
    <210>   DW_AT_decl_column : 20
    <211>   DW_AT_type        : <0x2f9>
    <215>   DW_AT_data_member_location: 104
 <2><216>: Abbrev Number: 15 (DW_TAG_member)
    <217>   DW_AT_name        : (indirect string, offset: 0x33): _fileno
    <21b>   DW_AT_decl_file   : 6
    <21c>   DW_AT_decl_line   : 72
    <21d>   DW_AT_decl_column : 7
    <21e>   DW_AT_type        : <0x6f>
    <222>   DW_AT_data_member_location: 112
 <2><223>: Abbrev Number: 15 (DW_TAG_member)
    <224>   DW_AT_name        : (indirect string, offset: 0x1c6b): _flags2
    <228>   DW_AT_decl_file   : 6
    <229>   DW_AT_decl_line   : 73
    <22a>   DW_AT_decl_column : 7
    <22b>   DW_AT_type        : <0x6f>
    <22f>   DW_AT_data_member_location: 116
 <2><230>: Abbrev Number: 15 (DW_TAG_member)
    <231>   DW_AT_name        : (indirect string, offset: 0x1c0d): _old_offset
    <235>   DW_AT_decl_file   : 6
    <236>   DW_AT_decl_line   : 74
    <237>   DW_AT_decl_column : 11
    <238>   DW_AT_type        : <0x8e>
    <23c>   DW_AT_data_member_location: 120
 <2><23d>: Abbrev Number: 15 (DW_TAG_member)
    <23e>   DW_AT_name        : (indirect string, offset: 0x1a6b): _cur_column
    <242>   DW_AT_decl_file   : 6
    <243>   DW_AT_decl_line   : 77
    <244>   DW_AT_decl_column : 18
    <245>   DW_AT_type        : <0x34>
    <249>   DW_AT_data_member_location: 128
 <2><24a>: Abbrev Number: 15 (DW_TAG_member)
    <24b>   DW_AT_name        : (indirect string, offset: 0x1eb6): _vtable_offset
    <24f>   DW_AT_decl_file   : 6
    <250>   DW_AT_decl_line   : 78
    <251>   DW_AT_decl_column : 15
    <252>   DW_AT_type        : <0x49>
    <256>   DW_AT_data_member_location: 130
 <2><257>: Abbrev Number: 15 (DW_TAG_member)
    <258>   DW_AT_name        : (indirect string, offset: 0xe8): _shortbuf
    <25c>   DW_AT_decl_file   : 6
    <25d>   DW_AT_decl_line   : 79
    <25e>   DW_AT_decl_column : 8
    <25f>   DW_AT_type        : <0x2ff>
    <263>   DW_AT_data_member_location: 131
 <2><264>: Abbrev Number: 15 (DW_TAG_member)
    <265>   DW_AT_name        : (indirect string, offset: 0x2ef): _lock
    <269>   DW_AT_decl_file   : 6
    <26a>   DW_AT_decl_line   : 81
    <26b>   DW_AT_decl_column : 15
    <26c>   DW_AT_type        : <0x30f>
    <270>   DW_AT_data_member_location: 136
 <2><271>: Abbrev Number: 15 (DW_TAG_member)
    <272>   DW_AT_name        : (indirect string, offset: 0x11b6): _offset
    <276>   DW_AT_decl_file   : 6
    <277>   DW_AT_decl_line   : 89
    <278>   DW_AT_decl_column : 13
    <279>   DW_AT_type        : <0x9a>
    <27d>   DW_AT_data_member_location: 144
 <2><27e>: Abbrev Number: 15 (DW_TAG_member)
    <27f>   DW_AT_name        : (indirect string, offset: 0x180d): _codecvt
    <283>   DW_AT_decl_file   : 6
    <284>   DW_AT_decl_line   : 91
    <285>   DW_AT_decl_column : 23
    <286>   DW_AT_type        : <0x31a>
    <28a>   DW_AT_data_member_location: 152
 <2><28b>: Abbrev Number: 15 (DW_TAG_member)
    <28c>   DW_AT_name        : (indirect string, offset: 0xbe3): _wide_data
    <290>   DW_AT_decl_file   : 6
    <291>   DW_AT_decl_line   : 92
    <292>   DW_AT_decl_column : 25
    <293>   DW_AT_type        : <0x325>
    <297>   DW_AT_data_member_location: 160
 <2><298>: Abbrev Number: 15 (DW_TAG_member)
    <299>   DW_AT_name        : (indirect string, offset: 0x1b7e): _freeres_list
    <29d>   DW_AT_decl_file   : 6
    <29e>   DW_AT_decl_line   : 93
    <29f>   DW_AT_decl_column : 20
    <2a0>   DW_AT_type        : <0x2f9>
    <2a4>   DW_AT_data_member_location: 168
 <2><2a5>: Abbrev Number: 15 (DW_TAG_member)
    <2a6>   DW_AT_name        : (indirect string, offset: 0x19d7): _freeres_buf
    <2aa>   DW_AT_decl_file   : 6
    <2ab>   DW_AT_decl_line   : 94
    <2ac>   DW_AT_decl_column : 9
    <2ad>   DW_AT_type        : <0xb6>
    <2b1>   DW_AT_data_member_location: 176
 <2><2b2>: Abbrev Number: 15 (DW_TAG_member)
    <2b3>   DW_AT_name        : (indirect string, offset: 0x1769): __pad5
    <2b7>   DW_AT_decl_file   : 6
    <2b8>   DW_AT_decl_line   : 95
    <2b9>   DW_AT_decl_column : 10
    <2ba>   DW_AT_type        : <0xe5>
    <2be>   DW_AT_data_member_location: 184
 <2><2bf>: Abbrev Number: 15 (DW_TAG_member)
    <2c0>   DW_AT_name        : (indirect string, offset: 0x1223): _mode
    <2c4>   DW_AT_decl_file   : 6
    <2c5>   DW_AT_decl_line   : 96
    <2c6>   DW_AT_decl_column : 7
    <2c7>   DW_AT_type        : <0x6f>
    <2cb>   DW_AT_data_member_location: 192
 <2><2cc>: Abbrev Number: 15 (DW_TAG_member)
    <2cd>   DW_AT_name        : (indirect string, offset: 0x14): _unused2
    <2d1>   DW_AT_decl_file   : 6
    <2d2>   DW_AT_decl_line   : 98
    <2d3>   DW_AT_decl_column : 8
    <2d4>   DW_AT_type        : <0x32b>
    <2d8>   DW_AT_data_member_location: 196
 <2><2d9>: Abbrev Number: 0
 <1><2da>: Abbrev Number: 3 (DW_TAG_typedef)
    <2db>   DW_AT_name        : (indirect string, offset: 0x97d): FILE
    <2df>   DW_AT_decl_file   : 7
    <2e0>   DW_AT_decl_line   : 7
    <2e1>   DW_AT_decl_column : 25
    <2e2>   DW_AT_type        : <0x153>
 <1><2e6>: Abbrev Number: 16 (DW_TAG_typedef)
    <2e7>   DW_AT_name        : (indirect string, offset: 0x76e): _IO_lock_t
    <2eb>   DW_AT_decl_file   : 6
    <2ec>   DW_AT_decl_line   : 43
    <2ed>   DW_AT_decl_column : 14
 <1><2ee>: Abbrev Number: 17 (DW_TAG_structure_type)
    <2ef>   DW_AT_name        : (indirect string, offset: 0x135e): _IO_marker
    <2f3>   DW_AT_declaration : 1
 <1><2f3>: Abbrev Number: 9 (DW_TAG_pointer_type)
    <2f4>   DW_AT_byte_size   : 8
    <2f5>   DW_AT_type        : <0x2ee>
 <1><2f9>: Abbrev Number: 9 (DW_TAG_pointer_type)
    <2fa>   DW_AT_byte_size   : 8
    <2fb>   DW_AT_type        : <0x153>
 <1><2ff>: Abbrev Number: 6 (DW_TAG_array_type)
    <300>   DW_AT_type        : <0xbe>
    <304>   DW_AT_sibling     : <0x30f>
 <2><308>: Abbrev Number: 7 (DW_TAG_subrange_type)
    <309>   DW_AT_type        : <0x42>
    <30d>   DW_AT_upper_bound : 0
 <2><30e>: Abbrev Number: 0
 <1><30f>: Abbrev Number: 9 (DW_TAG_pointer_type)
    <310>   DW_AT_byte_size   : 8
    <311>   DW_AT_type        : <0x2e6>
 <1><315>: Abbrev Number: 17 (DW_TAG_structure_type)
    <316>   DW_AT_name        : (indirect string, offset: 0x143c): _IO_codecvt
    <31a>   DW_AT_declaration : 1
 <1><31a>: Abbrev Number: 9 (DW_TAG_pointer_type)
    <31b>   DW_AT_byte_size   : 8
    <31c>   DW_AT_type        : <0x315>
 <1><320>: Abbrev Number: 17 (DW_TAG_structure_type)
    <321>   DW_AT_name        : (indirect string, offset: 0x1680): _IO_wide_data
    <325>   DW_AT_declaration : 1
 <1><325>: Abbrev Number: 9 (DW_TAG_pointer_type)
    <326>   DW_AT_byte_size   : 8
    <327>   DW_AT_type        : <0x320>
 <1><32b>: Abbrev Number: 6 (DW_TAG_array_type)
    <32c>   DW_AT_type        : <0xbe>
    <330>   DW_AT_sibling     : <0x33b>
 <2><334>: Abbrev Number: 7 (DW_TAG_subrange_type)
    <335>   DW_AT_type        : <0x42>
    <339>   DW_AT_upper_bound : 19
 <2><33a>: Abbrev Number: 0
 <1><33b>: Abbrev Number: 3 (DW_TAG_typedef)
    <33c>   DW_AT_name        : (indirect string, offset: 0x920): va_list
    <340>   DW_AT_decl_file   : 8
    <341>   DW_AT_decl_line   : 52
    <342>   DW_AT_decl_column : 24
    <343>   DW_AT_type        : <0xf1>
 <1><347>: Abbrev Number: 18 (DW_TAG_variable)
    <348>   DW_AT_name        : (indirect string, offset: 0x1586): stdin
    <34c>   DW_AT_decl_file   : 8
    <34d>   DW_AT_decl_line   : 137
    <34e>   DW_AT_decl_column : 14
    <34f>   DW_AT_type        : <0x353>
    <353>   DW_AT_external    : 1
    <353>   DW_AT_declaration : 1
 <1><353>: Abbrev Number: 9 (DW_TAG_pointer_type)
    <354>   DW_AT_byte_size   : 8
    <355>   DW_AT_type        : <0x2da>
 <1><359>: Abbrev Number: 18 (DW_TAG_variable)
    <35a>   DW_AT_name        : (indirect string, offset: 0xfe4): stdout
    <35e>   DW_AT_decl_file   : 8
    <35f>   DW_AT_decl_line   : 138
    <360>   DW_AT_decl_column : 14
    <361>   DW_AT_type        : <0x353>
    <365>   DW_AT_external    : 1
    <365>   DW_AT_declaration : 1
 <1><365>: Abbrev Number: 18 (DW_TAG_variable)
    <366>   DW_AT_name        : (indirect string, offset: 0xf21): stderr
    <36a>   DW_AT_decl_file   : 8
    <36b>   DW_AT_decl_line   : 139
    <36c>   DW_AT_decl_column : 14
    <36d>   DW_AT_type        : <0x353>
    <371>   DW_AT_external    : 1
    <371>   DW_AT_declaration : 1
 <1><371>: Abbrev Number: 18 (DW_TAG_variable)
    <372>   DW_AT_name        : (indirect string, offset: 0x1ce2): sys_nerr
    <376>   DW_AT_decl_file   : 10
    <377>   DW_AT_decl_line   : 26
    <378>   DW_AT_decl_column : 12
    <379>   DW_AT_type        : <0x6f>
    <37d>   DW_AT_external    : 1
    <37d>   DW_AT_declaration : 1
 <1><37d>: Abbrev Number: 6 (DW_TAG_array_type)
    <37e>   DW_AT_type        : <0x393>
    <382>   DW_AT_sibling     : <0x388>
 <2><386>: Abbrev Number: 19 (DW_TAG_subrange_type)
 <2><387>: Abbrev Number: 0
 <1><388>: Abbrev Number: 5 (DW_TAG_const_type)
    <389>   DW_AT_type        : <0x37d>
 <1><38d>: Abbrev Number: 9 (DW_TAG_pointer_type)
    <38e>   DW_AT_byte_size   : 8
    <38f>   DW_AT_type        : <0xc5>
 <1><393>: Abbrev Number: 5 (DW_TAG_const_type)
    <394>   DW_AT_type        : <0x38d>
 <1><398>: Abbrev Number: 18 (DW_TAG_variable)
    <399>   DW_AT_name        : (indirect string, offset: 0x5d2): sys_errlist
    <39d>   DW_AT_decl_file   : 10
    <39e>   DW_AT_decl_line   : 27
    <39f>   DW_AT_decl_column : 26
    <3a0>   DW_AT_type        : <0x388>
    <3a4>   DW_AT_external    : 1
    <3a4>   DW_AT_declaration : 1
 <1><3a4>: Abbrev Number: 2 (DW_TAG_base_type)
    <3a5>   DW_AT_byte_size   : 8
    <3a6>   DW_AT_encoding    : 5	(signed)
    <3a7>   DW_AT_name        : (indirect string, offset: 0x1c38): long long int
 <1><3ab>: Abbrev Number: 3 (DW_TAG_typedef)
    <3ac>   DW_AT_name        : (indirect string, offset: 0x3cd): int32_t
    <3b0>   DW_AT_decl_file   : 11
    <3b1>   DW_AT_decl_line   : 26
    <3b2>   DW_AT_decl_column : 19
    <3b3>   DW_AT_type        : <0x63>
 <1><3b7>: Abbrev Number: 2 (DW_TAG_base_type)
    <3b8>   DW_AT_byte_size   : 8
    <3b9>   DW_AT_encoding    : 7	(unsigned)
    <3ba>   DW_AT_name        : (indirect string, offset: 0x1a38): long long unsigned int
 <1><3be>: Abbrev Number: 6 (DW_TAG_array_type)
    <3bf>   DW_AT_type        : <0xbe>
    <3c3>   DW_AT_sibling     : <0x3ce>
 <2><3c7>: Abbrev Number: 7 (DW_TAG_subrange_type)
    <3c8>   DW_AT_type        : <0x42>
    <3cc>   DW_AT_upper_bound : 31
 <2><3cd>: Abbrev Number: 0
 <1><3ce>: Abbrev Number: 9 (DW_TAG_pointer_type)
    <3cf>   DW_AT_byte_size   : 8
    <3d0>   DW_AT_type        : <0x3ab>
 <1><3d4>: Abbrev Number: 2 (DW_TAG_base_type)
    <3d5>   DW_AT_byte_size   : 16
    <3d6>   DW_AT_encoding    : 4	(float)
    <3d7>   DW_AT_name        : (indirect string, offset: 0x148b): long double
 <1><3db>: Abbrev Number: 6 (DW_TAG_array_type)
    <3dc>   DW_AT_type        : <0xb8>
    <3e0>   DW_AT_sibling     : <0x3eb>
 <2><3e4>: Abbrev Number: 7 (DW_TAG_subrange_type)
    <3e5>   DW_AT_type        : <0x42>
    <3e9>   DW_AT_upper_bound : 1
 <2><3ea>: Abbrev Number: 0
 <1><3eb>: Abbrev Number: 18 (DW_TAG_variable)
    <3ec>   DW_AT_name        : (indirect string, offset: 0x4db): __tzname
    <3f0>   DW_AT_decl_file   : 12
    <3f1>   DW_AT_decl_line   : 159
    <3f2>   DW_AT_decl_column : 14
    <3f3>   DW_AT_type        : <0x3db>
    <3f7>   DW_AT_external    : 1
    <3f7>   DW_AT_declaration : 1
 <1><3f7>: Abbrev Number: 18 (DW_TAG_variable)
    <3f8>   DW_AT_name        : (indirect string, offset: 0x190f): __daylight
    <3fc>   DW_AT_decl_file   : 12
    <3fd>   DW_AT_decl_line   : 160
    <3fe>   DW_AT_decl_column : 12
    <3ff>   DW_AT_type        : <0x6f>
    <403>   DW_AT_external    : 1
    <403>   DW_AT_declaration : 1
 <1><403>: Abbrev Number: 18 (DW_TAG_variable)
    <404>   DW_AT_name        : (indirect string, offset: 0xe4b): __timezone
    <408>   DW_AT_decl_file   : 12
    <409>   DW_AT_decl_line   : 161
    <40a>   DW_AT_decl_column : 17
    <40b>   DW_AT_type        : <0x87>
    <40f>   DW_AT_external    : 1
    <40f>   DW_AT_declaration : 1
 <1><40f>: Abbrev Number: 18 (DW_TAG_variable)
    <410>   DW_AT_name        : (indirect string, offset: 0x169b): tzname
    <414>   DW_AT_decl_file   : 12
    <415>   DW_AT_decl_line   : 166
    <416>   DW_AT_decl_column : 14
    <417>   DW_AT_type        : <0x3db>
    <41b>   DW_AT_external    : 1
    <41b>   DW_AT_declaration : 1
 <1><41b>: Abbrev Number: 18 (DW_TAG_variable)
    <41c>   DW_AT_name        : (indirect string, offset: 0x5e5): daylight
    <420>   DW_AT_decl_file   : 12
    <421>   DW_AT_decl_line   : 174
    <422>   DW_AT_decl_column : 12
    <423>   DW_AT_type        : <0x6f>
    <427>   DW_AT_external    : 1
    <427>   DW_AT_declaration : 1
 <1><427>: Abbrev Number: 18 (DW_TAG_variable)
    <428>   DW_AT_name        : (indirect string, offset: 0x1bc0): timezone
    <42c>   DW_AT_decl_file   : 12
    <42d>   DW_AT_decl_line   : 175
    <42e>   DW_AT_decl_column : 17
    <42f>   DW_AT_type        : <0x87>
    <433>   DW_AT_external    : 1
    <433>   DW_AT_declaration : 1
 <1><433>: Abbrev Number: 3 (DW_TAG_typedef)
    <434>   DW_AT_name        : (indirect string, offset: 0x1b8): uint16_t
    <438>   DW_AT_decl_file   : 13
    <439>   DW_AT_decl_line   : 25
    <43a>   DW_AT_decl_column : 20
    <43b>   DW_AT_type        : <0x57>
 <1><43f>: Abbrev Number: 3 (DW_TAG_typedef)
    <440>   DW_AT_name        : (indirect string, offset: 0x1410): uint32_t
    <444>   DW_AT_decl_file   : 13
    <445>   DW_AT_decl_line   : 26
    <446>   DW_AT_decl_column : 20
    <447>   DW_AT_type        : <0x7b>
 <1><44b>: Abbrev Number: 3 (DW_TAG_typedef)
    <44c>   DW_AT_name        : (indirect string, offset: 0x13f1): intptr_t
    <450>   DW_AT_decl_file   : 14
    <451>   DW_AT_decl_line   : 87
    <452>   DW_AT_decl_column : 19
    <453>   DW_AT_type        : <0x87>
 <1><457>: Abbrev Number: 3 (DW_TAG_typedef)
    <458>   DW_AT_name        : (indirect string, offset: 0x49d): byte
    <45c>   DW_AT_decl_file   : 15
    <45d>   DW_AT_decl_line   : 185
    <45e>   DW_AT_decl_column : 23
    <45f>   DW_AT_type        : <0x2d>
 <1><463>: Abbrev Number: 5 (DW_TAG_const_type)
    <464>   DW_AT_type        : <0x457>
 <1><468>: Abbrev Number: 20 (DW_TAG_enumeration_type)
    <469>   DW_AT_encoding    : 7	(unsigned)
    <46a>   DW_AT_byte_size   : 4
    <46b>   DW_AT_type        : <0x3b>
    <46f>   DW_AT_decl_file   : 15
    <470>   DW_AT_decl_line   : 187
    <471>   DW_AT_decl_column : 14
    <472>   DW_AT_sibling     : <0x483>
 <2><476>: Abbrev Number: 21 (DW_TAG_enumerator)
    <477>   DW_AT_name        : (indirect string, offset: 0x1d4b): qfalse
    <47b>   DW_AT_const_value : 0
 <2><47c>: Abbrev Number: 21 (DW_TAG_enumerator)
    <47d>   DW_AT_name        : (indirect string, offset: 0x12d6): qtrue
    <481>   DW_AT_const_value : 1
 <2><482>: Abbrev Number: 0
 <1><483>: Abbrev Number: 3 (DW_TAG_typedef)
    <484>   DW_AT_name        : (indirect string, offset: 0xf28): qboolean
    <488>   DW_AT_decl_file   : 15
    <489>   DW_AT_decl_line   : 187
    <48a>   DW_AT_decl_column : 36
    <48b>   DW_AT_type        : <0x468>
 <1><48f>: Abbrev Number: 6 (DW_TAG_array_type)
    <490>   DW_AT_type        : <0x457>
    <494>   DW_AT_sibling     : <0x49f>
 <2><498>: Abbrev Number: 7 (DW_TAG_subrange_type)
    <499>   DW_AT_type        : <0x42>
    <49d>   DW_AT_upper_bound : 3
 <2><49e>: Abbrev Number: 0
 <1><49f>: Abbrev Number: 3 (DW_TAG_typedef)
    <4a0>   DW_AT_name        : (indirect string, offset: 0x170a): fileHandle_t
    <4a4>   DW_AT_decl_file   : 15
    <4a5>   DW_AT_decl_line   : 206
    <4a6>   DW_AT_decl_column : 14
    <4a7>   DW_AT_type        : <0x6f>
 <1><4ab>: Abbrev Number: 22 (DW_TAG_typedef)
    <4ac>   DW_AT_name        : (indirect string, offset: 0x435): vec_t
    <4b0>   DW_AT_decl_file   : 15
    <4b1>   DW_AT_decl_line   : 368
    <4b3>   DW_AT_decl_column : 15
    <4b4>   DW_AT_type        : <0xca>
 <1><4b8>: Abbrev Number: 5 (DW_TAG_const_type)
    <4b9>   DW_AT_type        : <0x4ab>
 <1><4bd>: Abbrev Number: 22 (DW_TAG_typedef)
    <4be>   DW_AT_name        : (indirect string, offset: 0x11a1): vec3_t
    <4c2>   DW_AT_decl_file   : 15
    <4c3>   DW_AT_decl_line   : 370
    <4c5>   DW_AT_decl_column : 15
    <4c6>   DW_AT_type        : <0x4ca>
 <1><4ca>: Abbrev Number: 6 (DW_TAG_array_type)
    <4cb>   DW_AT_type        : <0x4ab>
    <4cf>   DW_AT_sibling     : <0x4da>
 <2><4d3>: Abbrev Number: 7 (DW_TAG_subrange_type)
    <4d4>   DW_AT_type        : <0x42>
    <4d8>   DW_AT_upper_bound : 2
 <2><4d9>: Abbrev Number: 0
 <1><4da>: Abbrev Number: 22 (DW_TAG_typedef)
    <4db>   DW_AT_name        : (indirect string, offset: 0x14f6): vec4_t
    <4df>   DW_AT_decl_file   : 15
    <4e0>   DW_AT_decl_line   : 371
    <4e2>   DW_AT_decl_column : 15
    <4e3>   DW_AT_type        : <0x4e7>
 <1><4e7>: Abbrev Number: 6 (DW_TAG_array_type)
    <4e8>   DW_AT_type        : <0x4ab>
    <4ec>   DW_AT_sibling     : <0x4f7>
 <2><4f0>: Abbrev Number: 7 (DW_TAG_subrange_type)
    <4f1>   DW_AT_type        : <0x42>
    <4f5>   DW_AT_upper_bound : 3
 <2><4f6>: Abbrev Number: 0
 <1><4f7>: Abbrev Number: 6 (DW_TAG_array_type)
    <4f8>   DW_AT_type        : <0x4ab>
    <4fc>   DW_AT_sibling     : <0x50d>
 <2><500>: Abbrev Number: 7 (DW_TAG_subrange_type)
    <501>   DW_AT_type        : <0x42>
    <505>   DW_AT_upper_bound : 161
 <2><506>: Abbrev Number: 7 (DW_TAG_subrange_type)
    <507>   DW_AT_type        : <0x42>
    <50b>   DW_AT_upper_bound : 2
 <2><50c>: Abbrev Number: 0
 <1><50d>: Abbrev Number: 10 (DW_TAG_variable)
    <50e>   DW_AT_name        : (indirect string, offset: 0x35c): bytedirs
    <512>   DW_AT_decl_file   : 15
    <513>   DW_AT_decl_line   : 401
    <515>   DW_AT_decl_column : 15
    <516>   DW_AT_type        : <0x4f7>
    <51a>   DW_AT_external    : 1
    <51a>   DW_AT_declaration : 1
 <1><51a>: Abbrev Number: 10 (DW_TAG_variable)
    <51b>   DW_AT_name        : (indirect string, offset: 0x28): colorBlack
    <51f>   DW_AT_decl_file   : 15
    <520>   DW_AT_decl_line   : 420
    <522>   DW_AT_decl_column : 16
    <523>   DW_AT_type        : <0x4da>
    <527>   DW_AT_external    : 1
    <527>   DW_AT_declaration : 1
 <1><527>: Abbrev Number: 10 (DW_TAG_variable)
    <528>   DW_AT_name        : (indirect string, offset: 0x72a): colorRed
    <52c>   DW_AT_decl_file   : 15
    <52d>   DW_AT_decl_line   : 421
    <52f>   DW_AT_decl_column : 16
    <530>   DW_AT_type        : <0x4da>
    <534>   DW_AT_external    : 1
    <534>   DW_AT_declaration : 1
 <1><534>: Abbrev Number: 10 (DW_TAG_variable)
    <535>   DW_AT_name        : (indirect string, offset: 0x1bfa): colorGreen
    <539>   DW_AT_decl_file   : 15
    <53a>   DW_AT_decl_line   : 422
    <53c>   DW_AT_decl_column : 16
    <53d>   DW_AT_type        : <0x4da>
    <541>   DW_AT_external    : 1
    <541>   DW_AT_declaration : 1
 <1><541>: Abbrev Number: 10 (DW_TAG_variable)
    <542>   DW_AT_name        : (indirect string, offset: 0x6dd): colorBlue
    <546>   DW_AT_decl_file   : 15
    <547>   DW_AT_decl_line   : 423
    <549>   DW_AT_decl_column : 16
    <54a>   DW_AT_type        : <0x4da>
    <54e>   DW_AT_external    : 1
    <54e>   DW_AT_declaration : 1
 <1><54e>: Abbrev Number: 10 (DW_TAG_variable)
    <54f>   DW_AT_name        : (indirect string, offset: 0x8d): colorYellow
    <553>   DW_AT_decl_file   : 15
    <554>   DW_AT_decl_line   : 424
    <556>   DW_AT_decl_column : 16
    <557>   DW_AT_type        : <0x4da>
    <55b>   DW_AT_external    : 1
    <55b>   DW_AT_declaration : 1
 <1><55b>: Abbrev Number: 10 (DW_TAG_variable)
    <55c>   DW_AT_name        : (indirect string, offset: 0x1292): colorMagenta
    <560>   DW_AT_decl_file   : 15
    <561>   DW_AT_decl_line   : 425
    <563>   DW_AT_decl_column : 16
    <564>   DW_AT_type        : <0x4da>
    <568>   DW_AT_external    : 1
    <568>   DW_AT_declaration : 1
 <1><568>: Abbrev Number: 10 (DW_TAG_variable)
    <569>   DW_AT_name        : (indirect string, offset: 0x1466): colorCyan
    <56d>   DW_AT_decl_file   : 15
    <56e>   DW_AT_decl_line   : 426
    <570>   DW_AT_decl_column : 16
    <571>   DW_AT_type        : <0x4da>
    <575>   DW_AT_external    : 1
    <575>   DW_AT_declaration : 1
 <1><575>: Abbrev Number: 10 (DW_TAG_variable)
    <576>   DW_AT_name        : (indirect string, offset: 0x165c): colorWhite
    <57a>   DW_AT_decl_file   : 15
    <57b>   DW_AT_decl_line   : 427
    <57d>   DW_AT_decl_column : 16
    <57e>   DW_AT_type        : <0x4da>
    <582>   DW_AT_external    : 1
    <582>   DW_AT_declaration : 1
 <1><582>: Abbrev Number: 10 (DW_TAG_variable)
    <583>   DW_AT_name        : (indirect string, offset: 0x1753): colorLtGrey
    <587>   DW_AT_decl_file   : 15
    <588>   DW_AT_decl_line   : 428
    <58a>   DW_AT_decl_column : 16
    <58b>   DW_AT_type        : <0x4da>
    <58f>   DW_AT_external    : 1
    <58f>   DW_AT_declaration : 1
 <1><58f>: Abbrev Number: 10 (DW_TAG_variable)
    <590>   DW_AT_name        : (indirect string, offset: 0x1674): colorMdGrey
    <594>   DW_AT_decl_file   : 15
    <595>   DW_AT_decl_line   : 429
    <597>   DW_AT_decl_column : 16
    <598>   DW_AT_type        : <0x4da>
    <59c>   DW_AT_external    : 1
    <59c>   DW_AT_declaration : 1
 <1><59c>: Abbrev Number: 10 (DW_TAG_variable)
    <59d>   DW_AT_name        : (indirect string, offset: 0x16e1): colorDkGrey
    <5a1>   DW_AT_decl_file   : 15
    <5a2>   DW_AT_decl_line   : 430
    <5a4>   DW_AT_decl_column : 16
    <5a5>   DW_AT_type        : <0x4da>
    <5a9>   DW_AT_external    : 1
    <5a9>   DW_AT_declaration : 1
 <1><5a9>: Abbrev Number: 6 (DW_TAG_array_type)
    <5aa>   DW_AT_type        : <0x4b8>
    <5ae>   DW_AT_sibling     : <0x5bf>
 <2><5b2>: Abbrev Number: 7 (DW_TAG_subrange_type)
    <5b3>   DW_AT_type        : <0x42>
    <5b7>   DW_AT_upper_bound : 63
 <2><5b8>: Abbrev Number: 7 (DW_TAG_subrange_type)
    <5b9>   DW_AT_type        : <0x42>
    <5bd>   DW_AT_upper_bound : 3
 <2><5be>: Abbrev Number: 0
 <1><5bf>: Abbrev Number: 5 (DW_TAG_const_type)
    <5c0>   DW_AT_type        : <0x5a9>
 <1><5c4>: Abbrev Number: 10 (DW_TAG_variable)
    <5c5>   DW_AT_name        : (indirect string, offset: 0xa80): g_color_table
    <5c9>   DW_AT_decl_file   : 15
    <5ca>   DW_AT_decl_line   : 454
    <5cc>   DW_AT_decl_column : 21
    <5cd>   DW_AT_type        : <0x5bf>
    <5d1>   DW_AT_external    : 1
    <5d1>   DW_AT_declaration : 1
 <1><5d1>: Abbrev Number: 10 (DW_TAG_variable)
    <5d2>   DW_AT_name        : (indirect string, offset: 0x37c): vec3_origin
    <5d6>   DW_AT_decl_file   : 15
    <5d7>   DW_AT_decl_line   : 465
    <5d9>   DW_AT_decl_column : 15
    <5da>   DW_AT_type        : <0x4bd>
    <5de>   DW_AT_external    : 1
    <5de>   DW_AT_declaration : 1
 <1><5de>: Abbrev Number: 6 (DW_TAG_array_type)
    <5df>   DW_AT_type        : <0x4ab>
    <5e3>   DW_AT_sibling     : <0x5f4>
 <2><5e7>: Abbrev Number: 7 (DW_TAG_subrange_type)
    <5e8>   DW_AT_type        : <0x42>
    <5ec>   DW_AT_upper_bound : 2
 <2><5ed>: Abbrev Number: 7 (DW_TAG_subrange_type)
    <5ee>   DW_AT_type        : <0x42>
    <5f2>   DW_AT_upper_bound : 2
 <2><5f3>: Abbrev Number: 0
 <1><5f4>: Abbrev Number: 10 (DW_TAG_variable)
    <5f5>   DW_AT_name        : (indirect string, offset: 0x1619): axisDefault
    <5f9>   DW_AT_decl_file   : 15
    <5fa>   DW_AT_decl_line   : 466
    <5fc>   DW_AT_decl_column : 15
    <5fd>   DW_AT_type        : <0x5de>
    <601>   DW_AT_external    : 1
    <601>   DW_AT_declaration : 1
 <1><601>: Abbrev Number: 23 (DW_TAG_enumeration_type)
    <602>   DW_AT_encoding    : 7	(unsigned)
    <603>   DW_AT_byte_size   : 4
    <604>   DW_AT_type        : <0x3b>
    <608>   DW_AT_decl_file   : 15
    <609>   DW_AT_decl_line   : 714
    <60b>   DW_AT_decl_column : 14
    <60c>   DW_AT_sibling     : <0x671>
 <2><610>: Abbrev Number: 21 (DW_TAG_enumerator)
    <611>   DW_AT_name        : (indirect string, offset: 0x132a): TK_GENEGIC
    <615>   DW_AT_const_value : 0
 <2><616>: Abbrev Number: 21 (DW_TAG_enumerator)
    <617>   DW_AT_name        : (indirect string, offset: 0x547): TK_STRING
    <61b>   DW_AT_const_value : 1
 <2><61c>: Abbrev Number: 21 (DW_TAG_enumerator)
    <61d>   DW_AT_name        : (indirect string, offset: 0x1f67): TK_QUOTED
    <621>   DW_AT_const_value : 2
 <2><622>: Abbrev Number: 21 (DW_TAG_enumerator)
    <623>   DW_AT_name        : (indirect string, offset: 0x1580): TK_EQ
    <627>   DW_AT_const_value : 3
 <2><628>: Abbrev Number: 21 (DW_TAG_enumerator)
    <629>   DW_AT_name        : (indirect string, offset: 0x9dd): TK_NEQ
    <62d>   DW_AT_const_value : 4
 <2><62e>: Abbrev Number: 21 (DW_TAG_enumerator)
    <62f>   DW_AT_name        : (indirect string, offset: 0x16cd): TK_GT
    <633>   DW_AT_const_value : 5
 <2><634>: Abbrev Number: 21 (DW_TAG_enumerator)
    <635>   DW_AT_name        : (indirect string, offset: 0x1c7a): TK_GTE
    <639>   DW_AT_const_value : 6
 <2><63a>: Abbrev Number: 21 (DW_TAG_enumerator)
    <63b>   DW_AT_name        : (indirect string, offset: 0x1930): TK_LT
    <63f>   DW_AT_const_value : 7
 <2><640>: Abbrev Number: 21 (DW_TAG_enumerator)
    <641>   DW_AT_name        : (indirect string, offset: 0xbcc): TK_LTE
    <645>   DW_AT_const_value : 8
 <2><646>: Abbrev Number: 21 (DW_TAG_enumerator)
    <647>   DW_AT_name        : (indirect string, offset: 0x7db): TK_MATCH
    <64b>   DW_AT_const_value : 9
 <2><64c>: Abbrev Number: 21 (DW_TAG_enumerator)
    <64d>   DW_AT_name        : (indirect string, offset: 0x1ab6): TK_OR
    <651>   DW_AT_const_value : 10
 <2><652>: Abbrev Number: 21 (DW_TAG_enumerator)
    <653>   DW_AT_name        : (indirect string, offset: 0x709): TK_AND
    <657>   DW_AT_const_value : 11
 <2><658>: Abbrev Number: 21 (DW_TAG_enumerator)
    <659>   DW_AT_name        : (indirect string, offset: 0x1770): TK_SCOPE_OPEN
    <65d>   DW_AT_const_value : 12
 <2><65e>: Abbrev Number: 21 (DW_TAG_enumerator)
    <65f>   DW_AT_name        : (indirect string, offset: 0x937): TK_SCOPE_CLOSE
    <663>   DW_AT_const_value : 13
 <2><664>: Abbrev Number: 21 (DW_TAG_enumerator)
    <665>   DW_AT_name        : (indirect string, offset: 0x49): TK_NEWLINE
    <669>   DW_AT_const_value : 14
 <2><66a>: Abbrev Number: 21 (DW_TAG_enumerator)
    <66b>   DW_AT_name        : (indirect string, offset: 0x1409): TK_EOF
    <66f>   DW_AT_const_value : 15
 <2><670>: Abbrev Number: 0
 <1><671>: Abbrev Number: 22 (DW_TAG_typedef)
    <672>   DW_AT_name        : (indirect string, offset: 0x14bf): tokenType_t
    <676>   DW_AT_decl_file   : 15
    <677>   DW_AT_decl_line   : 731
    <679>   DW_AT_decl_column : 3
    <67a>   DW_AT_type        : <0x601>
 <1><67e>: Abbrev Number: 10 (DW_TAG_variable)
    <67f>   DW_AT_name        : (indirect string, offset: 0x1273): com_tokentype
    <683>   DW_AT_decl_file   : 15
    <684>   DW_AT_decl_line   : 733
    <686>   DW_AT_decl_column : 20
    <687>   DW_AT_type        : <0x671>
    <68b>   DW_AT_external    : 1
    <68b>   DW_AT_declaration : 1
 <1><68b>: Abbrev Number: 6 (DW_TAG_array_type)
    <68c>   DW_AT_type        : <0xbe>
    <690>   DW_AT_sibling     : <0x69c>
 <2><694>: Abbrev Number: 24 (DW_TAG_subrange_type)
    <695>   DW_AT_type        : <0x42>
    <699>   DW_AT_upper_bound : 1023
 <2><69b>: Abbrev Number: 0
 <1><69c>: Abbrev Number: 6 (DW_TAG_array_type)
    <69d>   DW_AT_type        : <0x463>
    <6a1>   DW_AT_sibling     : <0x6ac>
 <2><6a5>: Abbrev Number: 7 (DW_TAG_subrange_type)
    <6a6>   DW_AT_type        : <0x42>
    <6aa>   DW_AT_upper_bound : 255
 <2><6ab>: Abbrev Number: 0
 <1><6ac>: Abbrev Number: 5 (DW_TAG_const_type)
    <6ad>   DW_AT_type        : <0x69c>
 <1><6b1>: Abbrev Number: 10 (DW_TAG_variable)
    <6b2>   DW_AT_name        : (indirect string, offset: 0x890): locase
    <6b6>   DW_AT_decl_file   : 15
    <6b7>   DW_AT_decl_line   : 791
    <6b9>   DW_AT_decl_column : 19
    <6ba>   DW_AT_type        : <0x6ac>
    <6be>   DW_AT_external    : 1
    <6be>   DW_AT_declaration : 1
 <1><6be>: Abbrev Number: 22 (DW_TAG_typedef)
    <6bf>   DW_AT_name        : (indirect string, offset: 0x1b22): syscall_t
    <6c3>   DW_AT_decl_file   : 15
    <6c4>   DW_AT_decl_line   : 842
    <6c6>   DW_AT_decl_column : 20
    <6c7>   DW_AT_type        : <0x6cb>
 <1><6cb>: Abbrev Number: 9 (DW_TAG_pointer_type)
    <6cc>   DW_AT_byte_size   : 8
    <6cd>   DW_AT_type        : <0x6d1>
 <1><6d1>: Abbrev Number: 25 (DW_TAG_subroutine_type)
    <6d2>   DW_AT_prototyped  : 1
    <6d2>   DW_AT_type        : <0x44b>
    <6d6>   DW_AT_sibling     : <0x6e0>
 <2><6da>: Abbrev Number: 26 (DW_TAG_formal_parameter)
    <6db>   DW_AT_type        : <0x6e0>
 <2><6df>: Abbrev Number: 0
 <1><6e0>: Abbrev Number: 9 (DW_TAG_pointer_type)
    <6e1>   DW_AT_byte_size   : 8
    <6e2>   DW_AT_type        : <0x44b>
 <1><6e6>: Abbrev Number: 22 (DW_TAG_typedef)
    <6e7>   DW_AT_name        : (indirect string, offset: 0xe7b): dllSyscall_t
    <6eb>   DW_AT_decl_file   : 15
    <6ec>   DW_AT_decl_line   : 843
    <6ee>   DW_AT_decl_column : 26
    <6ef>   DW_AT_type        : <0x6f3>
 <1><6f3>: Abbrev Number: 9 (DW_TAG_pointer_type)
    <6f4>   DW_AT_byte_size   : 8
    <6f5>   DW_AT_type        : <0x6f9>
 <1><6f9>: Abbrev Number: 25 (DW_TAG_subroutine_type)
    <6fa>   DW_AT_prototyped  : 1
    <6fa>   DW_AT_type        : <0x44b>
    <6fe>   DW_AT_sibling     : <0x709>
 <2><702>: Abbrev Number: 26 (DW_TAG_formal_parameter)
    <703>   DW_AT_type        : <0x44b>
 <2><707>: Abbrev Number: 27 (DW_TAG_unspecified_parameters)
 <2><708>: Abbrev Number: 0
 <1><709>: Abbrev Number: 23 (DW_TAG_enumeration_type)
    <70a>   DW_AT_encoding    : 7	(unsigned)
    <70b>   DW_AT_byte_size   : 4
    <70c>   DW_AT_type        : <0x3b>
    <710>   DW_AT_decl_file   : 15
    <711>   DW_AT_decl_line   : 931
    <713>   DW_AT_decl_column : 14
    <714>   DW_AT_sibling     : <0x737>
 <2><718>: Abbrev Number: 21 (DW_TAG_enumerator)
    <719>   DW_AT_name        : (indirect string, offset: 0x1d89): CV_NONE
    <71d>   DW_AT_const_value : 0
 <2><71e>: Abbrev Number: 21 (DW_TAG_enumerator)
    <71f>   DW_AT_name        : (indirect string, offset: 0x1dc3): CV_FLOAT
    <723>   DW_AT_const_value : 1
 <2><724>: Abbrev Number: 21 (DW_TAG_enumerator)
    <725>   DW_AT_name        : (indirect string, offset: 0x1bb5): CV_INTEGER
    <729>   DW_AT_const_value : 2
 <2><72a>: Abbrev Number: 21 (DW_TAG_enumerator)
    <72b>   DW_AT_name        : (indirect string, offset: 0x1792): CV_FSPATH
    <72f>   DW_AT_const_value : 3
 <2><730>: Abbrev Number: 21 (DW_TAG_enumerator)
    <731>   DW_AT_name        : (indirect string, offset: 0x15d2): CV_MAX
    <735>   DW_AT_const_value : 4
 <2><736>: Abbrev Number: 0
 <1><737>: Abbrev Number: 22 (DW_TAG_typedef)
    <738>   DW_AT_name        : (indirect string, offset: 0xe88): cvarValidator_t
    <73c>   DW_AT_decl_file   : 15
    <73d>   DW_AT_decl_line   : 937
    <73f>   DW_AT_decl_column : 3
    <740>   DW_AT_type        : <0x709>
 <1><744>: Abbrev Number: 23 (DW_TAG_enumeration_type)
    <745>   DW_AT_encoding    : 7	(unsigned)
    <746>   DW_AT_byte_size   : 4
    <747>   DW_AT_type        : <0x3b>
    <74b>   DW_AT_decl_file   : 15
    <74c>   DW_AT_decl_line   : 939
    <74e>   DW_AT_decl_column : 14
    <74f>   DW_AT_sibling     : <0x76c>
 <2><753>: Abbrev Number: 21 (DW_TAG_enumerator)
    <754>   DW_AT_name        : (indirect string, offset: 0x779): CVG_NONE
    <758>   DW_AT_const_value : 0
 <2><759>: Abbrev Number: 21 (DW_TAG_enumerator)
    <75a>   DW_AT_name        : (indirect string, offset: 0x32b): CVG_RENDERER
    <75e>   DW_AT_const_value : 1
 <2><75f>: Abbrev Number: 21 (DW_TAG_enumerator)
    <760>   DW_AT_name        : (indirect string, offset: 0x1e98): CVG_SERVER
    <764>   DW_AT_const_value : 2
 <2><765>: Abbrev Number: 21 (DW_TAG_enumerator)
    <766>   DW_AT_name        : (indirect string, offset: 0x701): CVG_MAX
    <76a>   DW_AT_const_value : 3
 <2><76b>: Abbrev Number: 0
 <1><76c>: Abbrev Number: 22 (DW_TAG_typedef)
    <76d>   DW_AT_name        : (indirect string, offset: 0x1217): cvarGroup_t
    <771>   DW_AT_decl_file   : 15
    <772>   DW_AT_decl_line   : 944
    <774>   DW_AT_decl_column : 3
    <775>   DW_AT_type        : <0x744>
 <1><779>: Abbrev Number: 22 (DW_TAG_typedef)
    <77a>   DW_AT_name        : (indirect string, offset: 0x1539): cvar_t
    <77e>   DW_AT_decl_file   : 15
    <77f>   DW_AT_decl_line   : 947
    <781>   DW_AT_decl_column : 23
    <782>   DW_AT_type        : <0x786>
 <1><786>: Abbrev Number: 28 (DW_TAG_structure_type)
    <787>   DW_AT_name        : (indirect string, offset: 0x1532): cvar_s
    <78b>   DW_AT_byte_size   : 120
    <78c>   DW_AT_decl_file   : 15
    <78d>   DW_AT_decl_line   : 949
    <78f>   DW_AT_decl_column : 8
    <790>   DW_AT_sibling     : <0x89f>
 <2><794>: Abbrev Number: 29 (DW_TAG_member)
    <795>   DW_AT_name        : (indirect string, offset: 0xf3f): name
    <799>   DW_AT_decl_file   : 15
    <79a>   DW_AT_decl_line   : 950
    <79c>   DW_AT_decl_column : 9
    <79d>   DW_AT_type        : <0xb8>
    <7a1>   DW_AT_data_member_location: 0
 <2><7a2>: Abbrev Number: 29 (DW_TAG_member)
    <7a3>   DW_AT_name        : (indirect string, offset: 0x11be): string
    <7a7>   DW_AT_decl_file   : 15
    <7a8>   DW_AT_decl_line   : 951
    <7aa>   DW_AT_decl_column : 9
    <7ab>   DW_AT_type        : <0xb8>
    <7af>   DW_AT_data_member_location: 8
 <2><7b0>: Abbrev Number: 29 (DW_TAG_member)
    <7b1>   DW_AT_name        : (indirect string, offset: 0x8f4): resetString
    <7b5>   DW_AT_decl_file   : 15
    <7b6>   DW_AT_decl_line   : 952
    <7b8>   DW_AT_decl_column : 9
    <7b9>   DW_AT_type        : <0xb8>
    <7bd>   DW_AT_data_member_location: 16
 <2><7be>: Abbrev Number: 29 (DW_TAG_member)
    <7bf>   DW_AT_name        : (indirect string, offset: 0xf31): latchedString
    <7c3>   DW_AT_decl_file   : 15
    <7c4>   DW_AT_decl_line   : 953
    <7c6>   DW_AT_decl_column : 9
    <7c7>   DW_AT_type        : <0xb8>
    <7cb>   DW_AT_data_member_location: 24
 <2><7cc>: Abbrev Number: 29 (DW_TAG_member)
    <7cd>   DW_AT_name        : (indirect string, offset: 0x1f49): flags
    <7d1>   DW_AT_decl_file   : 15
    <7d2>   DW_AT_decl_line   : 954
    <7d4>   DW_AT_decl_column : 8
    <7d5>   DW_AT_type        : <0x6f>
    <7d9>   DW_AT_data_member_location: 32
 <2><7da>: Abbrev Number: 29 (DW_TAG_member)
    <7db>   DW_AT_name        : (indirect string, offset: 0x1625): modified
    <7df>   DW_AT_decl_file   : 15
    <7e0>   DW_AT_decl_line   : 955
    <7e2>   DW_AT_decl_column : 11
    <7e3>   DW_AT_type        : <0x483>
    <7e7>   DW_AT_data_member_location: 36
 <2><7e8>: Abbrev Number: 29 (DW_TAG_member)
    <7e9>   DW_AT_name        : (indirect string, offset: 0x551): modificationCount
    <7ed>   DW_AT_decl_file   : 15
    <7ee>   DW_AT_decl_line   : 956
    <7f0>   DW_AT_decl_column : 8
    <7f1>   DW_AT_type        : <0x6f>
    <7f5>   DW_AT_data_member_location: 40
 <2><7f6>: Abbrev Number: 29 (DW_TAG_member)
    <7f7>   DW_AT_name        : (indirect string, offset: 0xcf6): value
    <7fb>   DW_AT_decl_file   : 15
    <7fc>   DW_AT_decl_line   : 957
    <7fe>   DW_AT_decl_column : 9
    <7ff>   DW_AT_type        : <0xca>
    <803>   DW_AT_data_member_location: 44
 <2><804>: Abbrev Number: 29 (DW_TAG_member)
    <805>   DW_AT_name        : (indirect string, offset: 0xdba): integer
    <809>   DW_AT_decl_file   : 15
    <80a>   DW_AT_decl_line   : 958
    <80c>   DW_AT_decl_column : 8
    <80d>   DW_AT_type        : <0x6f>
    <811>   DW_AT_data_member_location: 48
 <2><812>: Abbrev Number: 29 (DW_TAG_member)
    <813>   DW_AT_name        : (indirect string, offset: 0x1f05): validator
    <817>   DW_AT_decl_file   : 15
    <818>   DW_AT_decl_line   : 959
    <81a>   DW_AT_decl_column : 18
    <81b>   DW_AT_type        : <0x737>
    <81f>   DW_AT_data_member_location: 52
 <2><820>: Abbrev Number: 29 (DW_TAG_member)
    <821>   DW_AT_name        : (indirect string, offset: 0x1950): mins
    <825>   DW_AT_decl_file   : 15
    <826>   DW_AT_decl_line   : 960
    <828>   DW_AT_decl_column : 9
    <829>   DW_AT_type        : <0xb8>
    <82d>   DW_AT_data_member_location: 56
 <2><82e>: Abbrev Number: 29 (DW_TAG_member)
    <82f>   DW_AT_name        : (indirect string, offset: 0x5be): maxs
    <833>   DW_AT_decl_file   : 15
    <834>   DW_AT_decl_line   : 961
    <836>   DW_AT_decl_column : 9
    <837>   DW_AT_type        : <0xb8>
    <83b>   DW_AT_data_member_location: 64
 <2><83c>: Abbrev Number: 29 (DW_TAG_member)
    <83d>   DW_AT_name        : (indirect string, offset: 0x1d37): description
    <841>   DW_AT_decl_file   : 15
    <842>   DW_AT_decl_line   : 962
    <844>   DW_AT_decl_column : 9
    <845>   DW_AT_type        : <0xb8>
    <849>   DW_AT_data_member_location: 72
 <2><84a>: Abbrev Number: 29 (DW_TAG_member)
    <84b>   DW_AT_name        : (indirect string, offset: 0x220): next
    <84f>   DW_AT_decl_file   : 15
    <850>   DW_AT_decl_line   : 964
    <852>   DW_AT_decl_column : 11
    <853>   DW_AT_type        : <0x89f>
    <857>   DW_AT_data_member_location: 80
 <2><858>: Abbrev Number: 29 (DW_TAG_member)
    <859>   DW_AT_name        : (indirect string, offset: 0x1eb1): prev
    <85d>   DW_AT_decl_file   : 15
    <85e>   DW_AT_decl_line   : 965
    <860>   DW_AT_decl_column : 11
    <861>   DW_AT_type        : <0x89f>
    <865>   DW_AT_data_member_location: 88
 <2><866>: Abbrev Number: 29 (DW_TAG_member)
    <867>   DW_AT_name        : (indirect string, offset: 0x16d8): hashNext
    <86b>   DW_AT_decl_file   : 15
    <86c>   DW_AT_decl_line   : 966
    <86e>   DW_AT_decl_column : 11
    <86f>   DW_AT_type        : <0x89f>
    <873>   DW_AT_data_member_location: 96
 <2><874>: Abbrev Number: 29 (DW_TAG_member)
    <875>   DW_AT_name        : (indirect string, offset: 0x14ad): hashPrev
    <879>   DW_AT_decl_file   : 15
    <87a>   DW_AT_decl_line   : 967
    <87c>   DW_AT_decl_column : 11
    <87d>   DW_AT_type        : <0x89f>
    <881>   DW_AT_data_member_location: 104
 <2><882>: Abbrev Number: 29 (DW_TAG_member)
    <883>   DW_AT_name        : (indirect string, offset: 0x1185): hashIndex
    <887>   DW_AT_decl_file   : 15
    <888>   DW_AT_decl_line   : 968
    <88a>   DW_AT_decl_column : 8
    <88b>   DW_AT_type        : <0x6f>
    <88f>   DW_AT_data_member_location: 112
 <2><890>: Abbrev Number: 29 (DW_TAG_member)
    <891>   DW_AT_name        : (indirect string, offset: 0x18c8): group
    <895>   DW_AT_decl_file   : 15
    <896>   DW_AT_decl_line   : 969
    <898>   DW_AT_decl_column : 14
    <899>   DW_AT_type        : <0x76c>
    <89d>   DW_AT_data_member_location: 116
 <2><89e>: Abbrev Number: 0
 <1><89f>: Abbrev Number: 9 (DW_TAG_pointer_type)
    <8a0>   DW_AT_byte_size   : 8
    <8a1>   DW_AT_type        : <0x779>
 <1><8a5>: Abbrev Number: 6 (DW_TAG_array_type)
    <8a6>   DW_AT_type        : <0xbe>
    <8aa>   DW_AT_sibling     : <0x8b5>
 <2><8ae>: Abbrev Number: 7 (DW_TAG_subrange_type)
    <8af>   DW_AT_type        : <0x42>
    <8b3>   DW_AT_upper_bound : 255
 <2><8b4>: Abbrev Number: 0
 <1><8b5>: Abbrev Number: 30 (DW_TAG_structure_type)
    <8b6>   DW_AT_name        : (indirect string, offset: 0x138d): playerState_s
    <8ba>   DW_AT_byte_size   : 468
    <8bc>   DW_AT_decl_file   : 15
    <8bd>   DW_AT_decl_line   : 1152
    <8bf>   DW_AT_decl_column : 16
    <8c0>   DW_AT_sibling     : <0xb44>
 <2><8c4>: Abbrev Number: 29 (DW_TAG_member)
    <8c5>   DW_AT_name        : (indirect string, offset: 0x9f): commandTime
    <8c9>   DW_AT_decl_file   : 15
    <8ca>   DW_AT_decl_line   : 1153
    <8cc>   DW_AT_decl_column : 8
    <8cd>   DW_AT_type        : <0x6f>
    <8d1>   DW_AT_data_member_location: 0
 <2><8d2>: Abbrev Number: 29 (DW_TAG_member)
    <8d3>   DW_AT_name        : (indirect string, offset: 0x10b1): pm_type
    <8d7>   DW_AT_decl_file   : 15
    <8d8>   DW_AT_decl_line   : 1154
    <8da>   DW_AT_decl_column : 8
    <8db>   DW_AT_type        : <0x6f>
    <8df>   DW_AT_data_member_location: 4
 <2><8e0>: Abbrev Number: 29 (DW_TAG_member)
    <8e1>   DW_AT_name        : (indirect string, offset: 0xbfc): bobCycle
    <8e5>   DW_AT_decl_file   : 15
    <8e6>   DW_AT_decl_line   : 1155
    <8e8>   DW_AT_decl_column : 8
    <8e9>   DW_AT_type        : <0x6f>
    <8ed>   DW_AT_data_member_location: 8
 <2><8ee>: Abbrev Number: 29 (DW_TAG_member)
    <8ef>   DW_AT_name        : (indirect string, offset: 0x17e3): pm_flags
    <8f3>   DW_AT_decl_file   : 15
    <8f4>   DW_AT_decl_line   : 1156
    <8f6>   DW_AT_decl_column : 8
    <8f7>   DW_AT_type        : <0x6f>
    <8fb>   DW_AT_data_member_location: 12
 <2><8fc>: Abbrev Number: 29 (DW_TAG_member)
    <8fd>   DW_AT_name        : (indirect string, offset: 0x1d0b): pm_time
    <901>   DW_AT_decl_file   : 15
    <902>   DW_AT_decl_line   : 1157
    <904>   DW_AT_decl_column : 8
    <905>   DW_AT_type        : <0x6f>
    <909>   DW_AT_data_member_location: 16
 <2><90a>: Abbrev Number: 29 (DW_TAG_member)
    <90b>   DW_AT_name        : (indirect string, offset: 0x1d52): origin
    <90f>   DW_AT_decl_file   : 15
    <910>   DW_AT_decl_line   : 1159
    <912>   DW_AT_decl_column : 10
    <913>   DW_AT_type        : <0x4bd>
    <917>   DW_AT_data_member_location: 20
 <2><918>: Abbrev Number: 29 (DW_TAG_member)
    <919>   DW_AT_name        : (indirect string, offset: 0x1497): velocity
    <91d>   DW_AT_decl_file   : 15
    <91e>   DW_AT_decl_line   : 1160
    <920>   DW_AT_decl_column : 10
    <921>   DW_AT_type        : <0x4bd>
    <925>   DW_AT_data_member_location: 32
 <2><926>: Abbrev Number: 29 (DW_TAG_member)
    <927>   DW_AT_name        : (indirect string, offset: 0x1efa): weaponTime
    <92b>   DW_AT_decl_file   : 15
    <92c>   DW_AT_decl_line   : 1161
    <92e>   DW_AT_decl_column : 8
    <92f>   DW_AT_type        : <0x6f>
    <933>   DW_AT_data_member_location: 44
 <2><934>: Abbrev Number: 29 (DW_TAG_member)
    <935>   DW_AT_name        : (indirect string, offset: 0x323): gravity
    <939>   DW_AT_decl_file   : 15
    <93a>   DW_AT_decl_line   : 1162
    <93c>   DW_AT_decl_column : 8
    <93d>   DW_AT_type        : <0x6f>
    <941>   DW_AT_data_member_location: 48
 <2><942>: Abbrev Number: 29 (DW_TAG_member)
    <943>   DW_AT_name        : (indirect string, offset: 0x18b7): speed
    <947>   DW_AT_decl_file   : 15
    <948>   DW_AT_decl_line   : 1163
    <94a>   DW_AT_decl_column : 8
    <94b>   DW_AT_type        : <0x6f>
    <94f>   DW_AT_data_member_location: 52
 <2><950>: Abbrev Number: 29 (DW_TAG_member)
    <951>   DW_AT_name        : (indirect string, offset: 0xbbf): delta_angles
    <955>   DW_AT_decl_file   : 15
    <956>   DW_AT_decl_line   : 1164
    <958>   DW_AT_decl_column : 8
    <959>   DW_AT_type        : <0xb44>
    <95d>   DW_AT_data_member_location: 56
 <2><95e>: Abbrev Number: 29 (DW_TAG_member)
    <95f>   DW_AT_name        : (indirect string, offset: 0x1570): groundEntityNum
    <963>   DW_AT_decl_file   : 15
    <964>   DW_AT_decl_line   : 1167
    <966>   DW_AT_decl_column : 8
    <967>   DW_AT_type        : <0x6f>
    <96b>   DW_AT_data_member_location: 68
 <2><96c>: Abbrev Number: 29 (DW_TAG_member)
    <96d>   DW_AT_name        : (indirect string, offset: 0x4d1): legsTimer
    <971>   DW_AT_decl_file   : 15
    <972>   DW_AT_decl_line   : 1169
    <974>   DW_AT_decl_column : 8
    <975>   DW_AT_type        : <0x6f>
    <979>   DW_AT_data_member_location: 72
 <2><97a>: Abbrev Number: 29 (DW_TAG_member)
    <97b>   DW_AT_name        : (indirect string, offset: 0x9ac): legsAnim
    <97f>   DW_AT_decl_file   : 15
    <980>   DW_AT_decl_line   : 1170
    <982>   DW_AT_decl_column : 8
    <983>   DW_AT_type        : <0x6f>
    <987>   DW_AT_data_member_location: 76
 <2><988>: Abbrev Number: 29 (DW_TAG_member)
    <989>   DW_AT_name        : (indirect string, offset: 0x144): torsoTimer
    <98d>   DW_AT_decl_file   : 15
    <98e>   DW_AT_decl_line   : 1172
    <990>   DW_AT_decl_column : 8
    <991>   DW_AT_type        : <0x6f>
    <995>   DW_AT_data_member_location: 80
 <2><996>: Abbrev Number: 29 (DW_TAG_member)
    <997>   DW_AT_name        : (indirect string, offset: 0x1d59): torsoAnim
    <99b>   DW_AT_decl_file   : 15
    <99c>   DW_AT_decl_line   : 1173
    <99e>   DW_AT_decl_column : 8
    <99f>   DW_AT_type        : <0x6f>
    <9a3>   DW_AT_data_member_location: 84
 <2><9a4>: Abbrev Number: 29 (DW_TAG_member)
    <9a5>   DW_AT_name        : (indirect string, offset: 0x1c21): movementDir
    <9a9>   DW_AT_decl_file   : 15
    <9aa>   DW_AT_decl_line   : 1175
    <9ac>   DW_AT_decl_column : 8
    <9ad>   DW_AT_type        : <0x6f>
    <9b1>   DW_AT_data_member_location: 88
 <2><9b2>: Abbrev Number: 29 (DW_TAG_member)
    <9b3>   DW_AT_name        : (indirect string, offset: 0x954): grapplePoint
    <9b7>   DW_AT_decl_file   : 15
    <9b8>   DW_AT_decl_line   : 1180
    <9ba>   DW_AT_decl_column : 10
    <9bb>   DW_AT_type        : <0x4bd>
    <9bf>   DW_AT_data_member_location: 92
 <2><9c0>: Abbrev Number: 29 (DW_TAG_member)
    <9c1>   DW_AT_name        : (indirect string, offset: 0x1a16): eFlags
    <9c5>   DW_AT_decl_file   : 15
    <9c6>   DW_AT_decl_line   : 1182
    <9c8>   DW_AT_decl_column : 8
    <9c9>   DW_AT_type        : <0x6f>
    <9cd>   DW_AT_data_member_location: 104
 <2><9ce>: Abbrev Number: 29 (DW_TAG_member)
    <9cf>   DW_AT_name        : (indirect string, offset: 0x4fd): eventSequence
    <9d3>   DW_AT_decl_file   : 15
    <9d4>   DW_AT_decl_line   : 1184
    <9d6>   DW_AT_decl_column : 8
    <9d7>   DW_AT_type        : <0x6f>
    <9db>   DW_AT_data_member_location: 108
 <2><9dc>: Abbrev Number: 29 (DW_TAG_member)
    <9dd>   DW_AT_name        : (indirect string, offset: 0x1e07): events
    <9e1>   DW_AT_decl_file   : 15
    <9e2>   DW_AT_decl_line   : 1185
    <9e4>   DW_AT_decl_column : 8
    <9e5>   DW_AT_type        : <0xa6>
    <9e9>   DW_AT_data_member_location: 112
 <2><9ea>: Abbrev Number: 29 (DW_TAG_member)
    <9eb>   DW_AT_name        : (indirect string, offset: 0x1ba1): eventParms
    <9ef>   DW_AT_decl_file   : 15
    <9f0>   DW_AT_decl_line   : 1186
    <9f2>   DW_AT_decl_column : 8
    <9f3>   DW_AT_type        : <0xa6>
    <9f7>   DW_AT_data_member_location: 120
 <2><9f8>: Abbrev Number: 29 (DW_TAG_member)
    <9f9>   DW_AT_name        : (indirect string, offset: 0x2d3): externalEvent
    <9fd>   DW_AT_decl_file   : 15
    <9fe>   DW_AT_decl_line   : 1188
    <a00>   DW_AT_decl_column : 8
    <a01>   DW_AT_type        : <0x6f>
    <a05>   DW_AT_data_member_location: 128
 <2><a06>: Abbrev Number: 29 (DW_TAG_member)
    <a07>   DW_AT_name        : (indirect string, offset: 0x20e): externalEventParm
    <a0b>   DW_AT_decl_file   : 15
    <a0c>   DW_AT_decl_line   : 1189
    <a0e>   DW_AT_decl_column : 8
    <a0f>   DW_AT_type        : <0x6f>
    <a13>   DW_AT_data_member_location: 132
 <2><a14>: Abbrev Number: 29 (DW_TAG_member)
    <a15>   DW_AT_name        : (indirect string, offset: 0x15ab): externalEventTime
    <a19>   DW_AT_decl_file   : 15
    <a1a>   DW_AT_decl_line   : 1190
    <a1c>   DW_AT_decl_column : 8
    <a1d>   DW_AT_type        : <0x6f>
    <a21>   DW_AT_data_member_location: 136
 <2><a22>: Abbrev Number: 29 (DW_TAG_member)
    <a23>   DW_AT_name        : (indirect string, offset: 0x916): clientNum
    <a27>   DW_AT_decl_file   : 15
    <a28>   DW_AT_decl_line   : 1192
    <a2a>   DW_AT_decl_column : 8
    <a2b>   DW_AT_type        : <0x6f>
    <a2f>   DW_AT_data_member_location: 140
 <2><a30>: Abbrev Number: 29 (DW_TAG_member)
    <a31>   DW_AT_name        : (indirect string, offset: 0x178b): weapon
    <a35>   DW_AT_decl_file   : 15
    <a36>   DW_AT_decl_line   : 1193
    <a38>   DW_AT_decl_column : 8
    <a39>   DW_AT_type        : <0x6f>
    <a3d>   DW_AT_data_member_location: 144
 <2><a3e>: Abbrev Number: 29 (DW_TAG_member)
    <a3f>   DW_AT_name        : (indirect string, offset: 0x138): weaponstate
    <a43>   DW_AT_decl_file   : 15
    <a44>   DW_AT_decl_line   : 1194
    <a46>   DW_AT_decl_column : 8
    <a47>   DW_AT_type        : <0x6f>
    <a4b>   DW_AT_data_member_location: 148
 <2><a4c>: Abbrev Number: 29 (DW_TAG_member)
    <a4d>   DW_AT_name        : (indirect string, offset: 0x134a): viewangles
    <a51>   DW_AT_decl_file   : 15
    <a52>   DW_AT_decl_line   : 1196
    <a54>   DW_AT_decl_column : 10
    <a55>   DW_AT_type        : <0x4bd>
    <a59>   DW_AT_data_member_location: 152
 <2><a5a>: Abbrev Number: 29 (DW_TAG_member)
    <a5b>   DW_AT_name        : (indirect string, offset: 0x351): viewheight
    <a5f>   DW_AT_decl_file   : 15
    <a60>   DW_AT_decl_line   : 1197
    <a62>   DW_AT_decl_column : 8
    <a63>   DW_AT_type        : <0x6f>
    <a67>   DW_AT_data_member_location: 164
 <2><a68>: Abbrev Number: 29 (DW_TAG_member)
    <a69>   DW_AT_name        : (indirect string, offset: 0x338): damageEvent
    <a6d>   DW_AT_decl_file   : 15
    <a6e>   DW_AT_decl_line   : 1200
    <a70>   DW_AT_decl_column : 8
    <a71>   DW_AT_type        : <0x6f>
    <a75>   DW_AT_data_member_location: 168
 <2><a76>: Abbrev Number: 29 (DW_TAG_member)
    <a77>   DW_AT_name        : (indirect string, offset: 0x1eda): damageYaw
    <a7b>   DW_AT_decl_file   : 15
    <a7c>   DW_AT_decl_line   : 1201
    <a7e>   DW_AT_decl_column : 8
    <a7f>   DW_AT_type        : <0x6f>
    <a83>   DW_AT_data_member_location: 172
 <2><a84>: Abbrev Number: 29 (DW_TAG_member)
    <a85>   DW_AT_name        : (indirect string, offset: 0x10fe): damagePitch
    <a89>   DW_AT_decl_file   : 15
    <a8a>   DW_AT_decl_line   : 1202
    <a8c>   DW_AT_decl_column : 8
    <a8d>   DW_AT_type        : <0x6f>
    <a91>   DW_AT_data_member_location: 176
 <2><a92>: Abbrev Number: 29 (DW_TAG_member)
    <a93>   DW_AT_name        : (indirect string, offset: 0x1451): damageCount
    <a97>   DW_AT_decl_file   : 15
    <a98>   DW_AT_decl_line   : 1203
    <a9a>   DW_AT_decl_column : 8
    <a9b>   DW_AT_type        : <0x6f>
    <a9f>   DW_AT_data_member_location: 180
 <2><aa0>: Abbrev Number: 29 (DW_TAG_member)
    <aa1>   DW_AT_name        : (indirect string, offset: 0x11ea): stats
    <aa5>   DW_AT_decl_file   : 15
    <aa6>   DW_AT_decl_line   : 1205
    <aa8>   DW_AT_decl_column : 8
    <aa9>   DW_AT_type        : <0xb54>
    <aad>   DW_AT_data_member_location: 184
 <2><aae>: Abbrev Number: 29 (DW_TAG_member)
    <aaf>   DW_AT_name        : (indirect string, offset: 0xffd): persistant
    <ab3>   DW_AT_decl_file   : 15
    <ab4>   DW_AT_decl_line   : 1206
    <ab6>   DW_AT_decl_column : 8
    <ab7>   DW_AT_type        : <0xb54>
    <abb>   DW_AT_data_member_location: 248
 <2><abc>: Abbrev Number: 31 (DW_TAG_member)
    <abd>   DW_AT_name        : (indirect string, offset: 0x1f71): powerups
    <ac1>   DW_AT_decl_file   : 15
    <ac2>   DW_AT_decl_line   : 1207
    <ac4>   DW_AT_decl_column : 8
    <ac5>   DW_AT_type        : <0xb54>
    <ac9>   DW_AT_data_member_location: 312
 <2><acb>: Abbrev Number: 31 (DW_TAG_member)
    <acc>   DW_AT_name        : (indirect string, offset: 0xbba): ammo
    <ad0>   DW_AT_decl_file   : 15
    <ad1>   DW_AT_decl_line   : 1208
    <ad3>   DW_AT_decl_column : 8
    <ad4>   DW_AT_type        : <0xb54>
    <ad8>   DW_AT_data_member_location: 376
 <2><ada>: Abbrev Number: 31 (DW_TAG_member)
    <adb>   DW_AT_name        : (indirect string, offset: 0x14b6): generic1
    <adf>   DW_AT_decl_file   : 15
    <ae0>   DW_AT_decl_line   : 1210
    <ae2>   DW_AT_decl_column : 8
    <ae3>   DW_AT_type        : <0x6f>
    <ae7>   DW_AT_data_member_location: 440
 <2><ae9>: Abbrev Number: 31 (DW_TAG_member)
    <aea>   DW_AT_name        : (indirect string, offset: 0x1dd): loopSound
    <aee>   DW_AT_decl_file   : 15
    <aef>   DW_AT_decl_line   : 1211
    <af1>   DW_AT_decl_column : 8
    <af2>   DW_AT_type        : <0x6f>
    <af6>   DW_AT_data_member_location: 444
 <2><af8>: Abbrev Number: 31 (DW_TAG_member)
    <af9>   DW_AT_name        : (indirect string, offset: 0x4a2): jumppad_ent
    <afd>   DW_AT_decl_file   : 15
    <afe>   DW_AT_decl_line   : 1212
    <b00>   DW_AT_decl_column : 8
    <b01>   DW_AT_type        : <0x6f>
    <b05>   DW_AT_data_member_location: 448
 <2><b07>: Abbrev Number: 31 (DW_TAG_member)
    <b08>   DW_AT_name        : (indirect string, offset: 0x7a5): ping
    <b0c>   DW_AT_decl_file   : 15
    <b0d>   DW_AT_decl_line   : 1215
    <b0f>   DW_AT_decl_column : 8
    <b10>   DW_AT_type        : <0x6f>
    <b14>   DW_AT_data_member_location: 452
 <2><b16>: Abbrev Number: 31 (DW_TAG_member)
    <b17>   DW_AT_name        : (indirect string, offset: 0xf2): pmove_framecount
    <b1b>   DW_AT_decl_file   : 15
    <b1c>   DW_AT_decl_line   : 1216
    <b1e>   DW_AT_decl_column : 8
    <b1f>   DW_AT_type        : <0x6f>
    <b23>   DW_AT_data_member_location: 456
 <2><b25>: Abbrev Number: 31 (DW_TAG_member)
    <b26>   DW_AT_name        : (indirect string, offset: 0xf44): jumppad_frame
    <b2a>   DW_AT_decl_file   : 15
    <b2b>   DW_AT_decl_line   : 1217
    <b2d>   DW_AT_decl_column : 8
    <b2e>   DW_AT_type        : <0x6f>
    <b32>   DW_AT_data_member_location: 460
 <2><b34>: Abbrev Number: 31 (DW_TAG_member)
    <b35>   DW_AT_name        : (indirect string, offset: 0x15ed): entityEventSequence
    <b39>   DW_AT_decl_file   : 15
    <b3a>   DW_AT_decl_line   : 1218
    <b3c>   DW_AT_decl_column : 8
    <b3d>   DW_AT_type        : <0x6f>
    <b41>   DW_AT_data_member_location: 464
 <2><b43>: Abbrev Number: 0
 <1><b44>: Abbrev Number: 6 (DW_TAG_array_type)
    <b45>   DW_AT_type        : <0x6f>
    <b49>   DW_AT_sibling     : <0xb54>
 <2><b4d>: Abbrev Number: 7 (DW_TAG_subrange_type)
    <b4e>   DW_AT_type        : <0x42>
    <b52>   DW_AT_upper_bound : 2
 <2><b53>: Abbrev Number: 0
 <1><b54>: Abbrev Number: 6 (DW_TAG_array_type)
    <b55>   DW_AT_type        : <0x6f>
    <b59>   DW_AT_sibling     : <0xb64>
 <2><b5d>: Abbrev Number: 7 (DW_TAG_subrange_type)
    <b5e>   DW_AT_type        : <0x42>
    <b62>   DW_AT_upper_bound : 15
 <2><b63>: Abbrev Number: 0
 <1><b64>: Abbrev Number: 22 (DW_TAG_typedef)
    <b65>   DW_AT_name        : (indirect string, offset: 0x139b): playerState_t
    <b69>   DW_AT_decl_file   : 15
    <b6a>   DW_AT_decl_line   : 1219
    <b6c>   DW_AT_decl_column : 3
    <b6d>   DW_AT_type        : <0x8b5>
 <1><b71>: Abbrev Number: 28 (DW_TAG_structure_type)
    <b72>   DW_AT_name        : (indirect string, offset: 0x520): usercmd_s
    <b76>   DW_AT_byte_size   : 24
    <b77>   DW_AT_decl_file   : 15
    <b78>   DW_AT_decl_line   : 1252
    <b7a>   DW_AT_decl_column : 16
    <b7b>   DW_AT_sibling     : <0xbe2>
 <2><b7f>: Abbrev Number: 29 (DW_TAG_member)
    <b80>   DW_AT_name        : (indirect string, offset: 0xefa): serverTime
    <b84>   DW_AT_decl_file   : 15
    <b85>   DW_AT_decl_line   : 1253
    <b87>   DW_AT_decl_column : 9
    <b88>   DW_AT_type        : <0x6f>
    <b8c>   DW_AT_data_member_location: 0
 <2><b8d>: Abbrev Number: 29 (DW_TAG_member)
    <b8e>   DW_AT_name        : (indirect string, offset: 0x4e4): angles
    <b92>   DW_AT_decl_file   : 15
    <b93>   DW_AT_decl_line   : 1254
    <b95>   DW_AT_decl_column : 9
    <b96>   DW_AT_type        : <0xb44>
    <b9a>   DW_AT_data_member_location: 4
 <2><b9b>: Abbrev Number: 29 (DW_TAG_member)
    <b9c>   DW_AT_name        : (indirect string, offset: 0x1c19): buttons
    <ba0>   DW_AT_decl_file   : 15
    <ba1>   DW_AT_decl_line   : 1255
    <ba3>   DW_AT_decl_column : 9
    <ba4>   DW_AT_type        : <0x6f>
    <ba8>   DW_AT_data_member_location: 16
 <2><ba9>: Abbrev Number: 29 (DW_TAG_member)
    <baa>   DW_AT_name        : (indirect string, offset: 0x178b): weapon
    <bae>   DW_AT_decl_file   : 15
    <baf>   DW_AT_decl_line   : 1256
    <bb1>   DW_AT_decl_column : 9
    <bb2>   DW_AT_type        : <0x457>
    <bb6>   DW_AT_data_member_location: 20
 <2><bb7>: Abbrev Number: 29 (DW_TAG_member)
    <bb8>   DW_AT_name        : (indirect string, offset: 0x13bb): forwardmove
    <bbc>   DW_AT_decl_file   : 15
    <bbd>   DW_AT_decl_line   : 1257
    <bbf>   DW_AT_decl_column : 14
    <bc0>   DW_AT_type        : <0x49>
    <bc4>   DW_AT_data_member_location: 21
 <2><bc5>: Abbrev Number: 29 (DW_TAG_member)
    <bc6>   DW_AT_name        : (indirect string, offset: 0x1093): rightmove
    <bca>   DW_AT_decl_file   : 15
    <bcb>   DW_AT_decl_line   : 1257
    <bcd>   DW_AT_decl_column : 27
    <bce>   DW_AT_type        : <0x49>
    <bd2>   DW_AT_data_member_location: 22
 <2><bd3>: Abbrev Number: 29 (DW_TAG_member)
    <bd4>   DW_AT_name        : (indirect string, offset: 0x71): upmove
    <bd8>   DW_AT_decl_file   : 15
    <bd9>   DW_AT_decl_line   : 1257
    <bdb>   DW_AT_decl_column : 38
    <bdc>   DW_AT_type        : <0x49>
    <be0>   DW_AT_data_member_location: 23
 <2><be1>: Abbrev Number: 0
 <1><be2>: Abbrev Number: 22 (DW_TAG_typedef)
    <be3>   DW_AT_name        : (indirect string, offset: 0x52a): usercmd_t
    <be7>   DW_AT_decl_file   : 15
    <be8>   DW_AT_decl_line   : 1258
    <bea>   DW_AT_decl_column : 3
    <beb>   DW_AT_type        : <0xb71>
 <1><bef>: Abbrev Number: 23 (DW_TAG_enumeration_type)
    <bf0>   DW_AT_encoding    : 7	(unsigned)
    <bf1>   DW_AT_byte_size   : 4
    <bf2>   DW_AT_type        : <0x3b>
    <bf6>   DW_AT_decl_file   : 15
    <bf7>   DW_AT_decl_line   : 1265
    <bf9>   DW_AT_decl_column : 14
    <bfa>   DW_AT_sibling     : <0xc23>
 <2><bfe>: Abbrev Number: 21 (DW_TAG_enumerator)
    <bff>   DW_AT_name        : (indirect string, offset: 0x2e1): TR_STATIONARY
    <c03>   DW_AT_const_value : 0
 <2><c04>: Abbrev Number: 21 (DW_TAG_enumerator)
    <c05>   DW_AT_name        : (indirect string, offset: 0x1024): TR_INTERPOLATE
    <c09>   DW_AT_const_value : 1
 <2><c0a>: Abbrev Number: 21 (DW_TAG_enumerator)
    <c0b>   DW_AT_name        : (indirect string, offset: 0xcd): TR_LINEAR
    <c0f>   DW_AT_const_value : 2
 <2><c10>: Abbrev Number: 21 (DW_TAG_enumerator)
    <c11>   DW_AT_name        : (indirect string, offset: 0x1aee): TR_LINEAR_STOP
    <c15>   DW_AT_const_value : 3
 <2><c16>: Abbrev Number: 21 (DW_TAG_enumerator)
    <c17>   DW_AT_name        : (indirect string, offset: 0xe1d): TR_SINE
    <c1b>   DW_AT_const_value : 4
 <2><c1c>: Abbrev Number: 21 (DW_TAG_enumerator)
    <c1d>   DW_AT_name        : (indirect string, offset: 0x4ae): TR_GRAVITY
    <c21>   DW_AT_const_value : 5
 <2><c22>: Abbrev Number: 0
 <1><c23>: Abbrev Number: 22 (DW_TAG_typedef)
    <c24>   DW_AT_name        : (indirect string, offset: 0x946): trType_t
    <c28>   DW_AT_decl_file   : 15
    <c29>   DW_AT_decl_line   : 1272
    <c2b>   DW_AT_decl_column : 3
    <c2c>   DW_AT_type        : <0xbef>
 <1><c30>: Abbrev Number: 32 (DW_TAG_structure_type)
    <c31>   DW_AT_byte_size   : 36
    <c32>   DW_AT_decl_file   : 15
    <c33>   DW_AT_decl_line   : 1274
    <c35>   DW_AT_decl_column : 9
    <c36>   DW_AT_sibling     : <0xc81>
 <2><c3a>: Abbrev Number: 29 (DW_TAG_member)
    <c3b>   DW_AT_name        : (indirect string, offset: 0xd7): trType
    <c3f>   DW_AT_decl_file   : 15
    <c40>   DW_AT_decl_line   : 1275
    <c42>   DW_AT_decl_column : 11
    <c43>   DW_AT_type        : <0xc23>
    <c47>   DW_AT_data_member_location: 0
 <2><c48>: Abbrev Number: 29 (DW_TAG_member)
    <c49>   DW_AT_name        : (indirect string, offset: 0xd59): trTime
    <c4d>   DW_AT_decl_file   : 15
    <c4e>   DW_AT_decl_line   : 1276
    <c50>   DW_AT_decl_column : 7
    <c51>   DW_AT_type        : <0x6f>
    <c55>   DW_AT_data_member_location: 4
 <2><c56>: Abbrev Number: 29 (DW_TAG_member)
    <c57>   DW_AT_name        : (indirect string, offset: 0xb20): trDuration
    <c5b>   DW_AT_decl_file   : 15
    <c5c>   DW_AT_decl_line   : 1277
    <c5e>   DW_AT_decl_column : 7
    <c5f>   DW_AT_type        : <0x6f>
    <c63>   DW_AT_data_member_location: 8
 <2><c64>: Abbrev Number: 29 (DW_TAG_member)
    <c65>   DW_AT_name        : (indirect string, offset: 0x2a7): trBase
    <c69>   DW_AT_decl_file   : 15
    <c6a>   DW_AT_decl_line   : 1278
    <c6c>   DW_AT_decl_column : 9
    <c6d>   DW_AT_type        : <0x4bd>
    <c71>   DW_AT_data_member_location: 12
 <2><c72>: Abbrev Number: 29 (DW_TAG_member)
    <c73>   DW_AT_name        : (indirect string, offset: 0x8bb): trDelta
    <c77>   DW_AT_decl_file   : 15
    <c78>   DW_AT_decl_line   : 1279
    <c7a>   DW_AT_decl_column : 9
    <c7b>   DW_AT_type        : <0x4bd>
    <c7f>   DW_AT_data_member_location: 24
 <2><c80>: Abbrev Number: 0
 <1><c81>: Abbrev Number: 22 (DW_TAG_typedef)
    <c82>   DW_AT_name        : (indirect string, offset: 0xe5e): trajectory_t
    <c86>   DW_AT_decl_file   : 15
    <c87>   DW_AT_decl_line   : 1280
    <c89>   DW_AT_decl_column : 3
    <c8a>   DW_AT_type        : <0xc30>
 <1><c8e>: Abbrev Number: 28 (DW_TAG_structure_type)
    <c8f>   DW_AT_name        : (indirect string, offset: 0x1040): entityState_s
    <c93>   DW_AT_byte_size   : 208
    <c94>   DW_AT_decl_file   : 15
    <c95>   DW_AT_decl_line   : 1289
    <c97>   DW_AT_decl_column : 16
    <c98>   DW_AT_sibling     : <0xe25>
 <2><c9c>: Abbrev Number: 29 (DW_TAG_member)
    <c9d>   DW_AT_name        : (indirect string, offset: 0x803): number
    <ca1>   DW_AT_decl_file   : 15
    <ca2>   DW_AT_decl_line   : 1290
    <ca4>   DW_AT_decl_column : 7
    <ca5>   DW_AT_type        : <0x6f>
    <ca9>   DW_AT_data_member_location: 0
 <2><caa>: Abbrev Number: 29 (DW_TAG_member)
    <cab>   DW_AT_name        : (indirect string, offset: 0x11e4): eType
    <caf>   DW_AT_decl_file   : 15
    <cb0>   DW_AT_decl_line   : 1291
    <cb2>   DW_AT_decl_column : 7
    <cb3>   DW_AT_type        : <0x6f>
    <cb7>   DW_AT_data_member_location: 4
 <2><cb8>: Abbrev Number: 29 (DW_TAG_member)
    <cb9>   DW_AT_name        : (indirect string, offset: 0x1a16): eFlags
    <cbd>   DW_AT_decl_file   : 15
    <cbe>   DW_AT_decl_line   : 1292
    <cc0>   DW_AT_decl_column : 7
    <cc1>   DW_AT_type        : <0x6f>
    <cc5>   DW_AT_data_member_location: 8
 <2><cc6>: Abbrev Number: 33 (DW_TAG_member)
    <cc7>   DW_AT_name        : pos
    <ccb>   DW_AT_decl_file   : 15
    <ccc>   DW_AT_decl_line   : 1294
    <cce>   DW_AT_decl_column : 15
    <ccf>   DW_AT_type        : <0xc81>
    <cd3>   DW_AT_data_member_location: 12
 <2><cd4>: Abbrev Number: 29 (DW_TAG_member)
    <cd5>   DW_AT_name        : (indirect string, offset: 0x16d3): apos
    <cd9>   DW_AT_decl_file   : 15
    <cda>   DW_AT_decl_line   : 1295
    <cdc>   DW_AT_decl_column : 15
    <cdd>   DW_AT_type        : <0xc81>
    <ce1>   DW_AT_data_member_location: 48
 <2><ce2>: Abbrev Number: 29 (DW_TAG_member)
    <ce3>   DW_AT_name        : (indirect string, offset: 0x12d1): time
    <ce7>   DW_AT_decl_file   : 15
    <ce8>   DW_AT_decl_line   : 1297
    <cea>   DW_AT_decl_column : 7
    <ceb>   DW_AT_type        : <0x6f>
    <cef>   DW_AT_data_member_location: 84
 <2><cf0>: Abbrev Number: 29 (DW_TAG_member)
    <cf1>   DW_AT_name        : (indirect string, offset: 0xebe): time2
    <cf5>   DW_AT_decl_file   : 15
    <cf6>   DW_AT_decl_line   : 1298
    <cf8>   DW_AT_decl_column : 7
    <cf9>   DW_AT_type        : <0x6f>
    <cfd>   DW_AT_data_member_location: 88
 <2><cfe>: Abbrev Number: 29 (DW_TAG_member)
    <cff>   DW_AT_name        : (indirect string, offset: 0x1d52): origin
    <d03>   DW_AT_decl_file   : 15
    <d04>   DW_AT_decl_line   : 1300
    <d06>   DW_AT_decl_column : 9
    <d07>   DW_AT_type        : <0x4bd>
    <d0b>   DW_AT_data_member_location: 92
 <2><d0c>: Abbrev Number: 29 (DW_TAG_member)
    <d0d>   DW_AT_name        : (indirect string, offset: 0xba6): origin2
    <d11>   DW_AT_decl_file   : 15
    <d12>   DW_AT_decl_line   : 1301
    <d14>   DW_AT_decl_column : 9
    <d15>   DW_AT_type        : <0x4bd>
    <d19>   DW_AT_data_member_location: 104
 <2><d1a>: Abbrev Number: 29 (DW_TAG_member)
    <d1b>   DW_AT_name        : (indirect string, offset: 0x4e4): angles
    <d1f>   DW_AT_decl_file   : 15
    <d20>   DW_AT_decl_line   : 1303
    <d22>   DW_AT_decl_column : 9
    <d23>   DW_AT_type        : <0x4bd>
    <d27>   DW_AT_data_member_location: 116
 <2><d28>: Abbrev Number: 29 (DW_TAG_member)
    <d29>   DW_AT_name        : (indirect string, offset: 0x22d): angles2
    <d2d>   DW_AT_decl_file   : 15
    <d2e>   DW_AT_decl_line   : 1304
    <d30>   DW_AT_decl_column : 9
    <d31>   DW_AT_type        : <0x4bd>
    <d35>   DW_AT_data_member_location: 128
 <2><d36>: Abbrev Number: 29 (DW_TAG_member)
    <d37>   DW_AT_name        : (indirect string, offset: 0x1e38): otherEntityNum
    <d3b>   DW_AT_decl_file   : 15
    <d3c>   DW_AT_decl_line   : 1306
    <d3e>   DW_AT_decl_column : 7
    <d3f>   DW_AT_type        : <0x6f>
    <d43>   DW_AT_data_member_location: 140
 <2><d44>: Abbrev Number: 29 (DW_TAG_member)
    <d45>   DW_AT_name        : (indirect string, offset: 0xe6b): otherEntityNum2
    <d49>   DW_AT_decl_file   : 15
    <d4a>   DW_AT_decl_line   : 1307
    <d4c>   DW_AT_decl_column : 7
    <d4d>   DW_AT_type        : <0x6f>
    <d51>   DW_AT_data_member_location: 144
 <2><d52>: Abbrev Number: 29 (DW_TAG_member)
    <d53>   DW_AT_name        : (indirect string, offset: 0x1570): groundEntityNum
    <d57>   DW_AT_decl_file   : 15
    <d58>   DW_AT_decl_line   : 1309
    <d5a>   DW_AT_decl_column : 7
    <d5b>   DW_AT_type        : <0x6f>
    <d5f>   DW_AT_data_member_location: 148
 <2><d60>: Abbrev Number: 29 (DW_TAG_member)
    <d61>   DW_AT_name        : (indirect string, offset: 0x191a): constantLight
    <d65>   DW_AT_decl_file   : 15
    <d66>   DW_AT_decl_line   : 1311
    <d68>   DW_AT_decl_column : 7
    <d69>   DW_AT_type        : <0x6f>
    <d6d>   DW_AT_data_member_location: 152
 <2><d6e>: Abbrev Number: 29 (DW_TAG_member)
    <d6f>   DW_AT_name        : (indirect string, offset: 0x1dd): loopSound
    <d73>   DW_AT_decl_file   : 15
    <d74>   DW_AT_decl_line   : 1312
    <d76>   DW_AT_decl_column : 7
    <d77>   DW_AT_type        : <0x6f>
    <d7b>   DW_AT_data_member_location: 156
 <2><d7c>: Abbrev Number: 29 (DW_TAG_member)
    <d7d>   DW_AT_name        : (indirect string, offset: 0x1c2d): modelindex
    <d81>   DW_AT_decl_file   : 15
    <d82>   DW_AT_decl_line   : 1314
    <d84>   DW_AT_decl_column : 7
    <d85>   DW_AT_type        : <0x6f>
    <d89>   DW_AT_data_member_location: 160
 <2><d8a>: Abbrev Number: 29 (DW_TAG_member)
    <d8b>   DW_AT_name        : (indirect string, offset: 0x16fe): modelindex2
    <d8f>   DW_AT_decl_file   : 15
    <d90>   DW_AT_decl_line   : 1315
    <d92>   DW_AT_decl_column : 7
    <d93>   DW_AT_type        : <0x6f>
    <d97>   DW_AT_data_member_location: 164
 <2><d98>: Abbrev Number: 29 (DW_TAG_member)
    <d99>   DW_AT_name        : (indirect string, offset: 0x916): clientNum
    <d9d>   DW_AT_decl_file   : 15
    <d9e>   DW_AT_decl_line   : 1316
    <da0>   DW_AT_decl_column : 7
    <da1>   DW_AT_type        : <0x6f>
    <da5>   DW_AT_data_member_location: 168
 <2><da6>: Abbrev Number: 29 (DW_TAG_member)
    <da7>   DW_AT_name        : (indirect string, offset: 0x1ec5): frame
    <dab>   DW_AT_decl_file   : 15
    <dac>   DW_AT_decl_line   : 1317
    <dae>   DW_AT_decl_column : 7
    <daf>   DW_AT_type        : <0x6f>
    <db3>   DW_AT_data_member_location: 172
 <2><db4>: Abbrev Number: 29 (DW_TAG_member)
    <db5>   DW_AT_name        : (indirect string, offset: 0x103): solid
    <db9>   DW_AT_decl_file   : 15
    <dba>   DW_AT_decl_line   : 1319
    <dbc>   DW_AT_decl_column : 7
    <dbd>   DW_AT_type        : <0x6f>
    <dc1>   DW_AT_data_member_location: 176
 <2><dc2>: Abbrev Number: 29 (DW_TAG_member)
    <dc3>   DW_AT_name        : (indirect string, offset: 0x6): event
    <dc7>   DW_AT_decl_file   : 15
    <dc8>   DW_AT_decl_line   : 1321
    <dca>   DW_AT_decl_column : 7
    <dcb>   DW_AT_type        : <0x6f>
    <dcf>   DW_AT_data_member_location: 180
 <2><dd0>: Abbrev Number: 29 (DW_TAG_member)
    <dd1>   DW_AT_name        : (indirect string, offset: 0x534): eventParm
    <dd5>   DW_AT_decl_file   : 15
    <dd6>   DW_AT_decl_line   : 1322
    <dd8>   DW_AT_decl_column : 7
    <dd9>   DW_AT_type        : <0x6f>
    <ddd>   DW_AT_data_member_location: 184
 <2><dde>: Abbrev Number: 29 (DW_TAG_member)
    <ddf>   DW_AT_name        : (indirect string, offset: 0x1f71): powerups
    <de3>   DW_AT_decl_file   : 15
    <de4>   DW_AT_decl_line   : 1325
    <de6>   DW_AT_decl_column : 7
    <de7>   DW_AT_type        : <0x6f>
    <deb>   DW_AT_data_member_location: 188
 <2><dec>: Abbrev Number: 29 (DW_TAG_member)
    <ded>   DW_AT_name        : (indirect string, offset: 0x178b): weapon
    <df1>   DW_AT_decl_file   : 15
    <df2>   DW_AT_decl_line   : 1326
    <df4>   DW_AT_decl_column : 7
    <df5>   DW_AT_type        : <0x6f>
    <df9>   DW_AT_data_member_location: 192
 <2><dfa>: Abbrev Number: 29 (DW_TAG_member)
    <dfb>   DW_AT_name        : (indirect string, offset: 0x9ac): legsAnim
    <dff>   DW_AT_decl_file   : 15
    <e00>   DW_AT_decl_line   : 1327
    <e02>   DW_AT_decl_column : 7
    <e03>   DW_AT_type        : <0x6f>
    <e07>   DW_AT_data_member_location: 196
 <2><e08>: Abbrev Number: 29 (DW_TAG_member)
    <e09>   DW_AT_name        : (indirect string, offset: 0x1d59): torsoAnim
    <e0d>   DW_AT_decl_file   : 15
    <e0e>   DW_AT_decl_line   : 1328
    <e10>   DW_AT_decl_column : 7
    <e11>   DW_AT_type        : <0x6f>
    <e15>   DW_AT_data_member_location: 200
 <2><e16>: Abbrev Number: 29 (DW_TAG_member)
    <e17>   DW_AT_name        : (indirect string, offset: 0x14b6): generic1
    <e1b>   DW_AT_decl_file   : 15
    <e1c>   DW_AT_decl_line   : 1330
    <e1e>   DW_AT_decl_column : 7
    <e1f>   DW_AT_type        : <0x6f>
    <e23>   DW_AT_data_member_location: 204
 <2><e24>: Abbrev Number: 0
 <1><e25>: Abbrev Number: 22 (DW_TAG_typedef)
    <e26>   DW_AT_name        : (indirect string, offset: 0x104e): entityState_t
    <e2a>   DW_AT_decl_file   : 15
    <e2b>   DW_AT_decl_line   : 1331
    <e2d>   DW_AT_decl_column : 3
    <e2e>   DW_AT_type        : <0xc8e>
 <1><e32>: Abbrev Number: 6 (DW_TAG_array_type)
    <e33>   DW_AT_type        : <0xbe>
    <e37>   DW_AT_sibling     : <0xe42>
 <2><e3b>: Abbrev Number: 7 (DW_TAG_subrange_type)
    <e3c>   DW_AT_type        : <0x42>
    <e40>   DW_AT_upper_bound : 63
 <2><e41>: Abbrev Number: 0
 <1><e42>: Abbrev Number: 34 (DW_TAG_structure_type)
    <e43>   DW_AT_byte_size   : 48
    <e44>   DW_AT_decl_file   : 16
    <e45>   DW_AT_decl_line   : 61
    <e46>   DW_AT_decl_column : 9
    <e47>   DW_AT_sibling     : <0xec1>
 <2><e4b>: Abbrev Number: 15 (DW_TAG_member)
    <e4c>   DW_AT_name        : (indirect string, offset: 0x7f5): allowoverflow
    <e50>   DW_AT_decl_file   : 16
    <e51>   DW_AT_decl_line   : 62
    <e52>   DW_AT_decl_column : 11
    <e53>   DW_AT_type        : <0x483>
    <e57>   DW_AT_data_member_location: 0
 <2><e58>: Abbrev Number: 15 (DW_TAG_member)
    <e59>   DW_AT_name        : (indirect string, offset: 0xcab): overflowed
    <e5d>   DW_AT_decl_file   : 16
    <e5e>   DW_AT_decl_line   : 63
    <e5f>   DW_AT_decl_column : 11
    <e60>   DW_AT_type        : <0x483>
    <e64>   DW_AT_data_member_location: 4
 <2><e65>: Abbrev Number: 35 (DW_TAG_member)
    <e66>   DW_AT_name        : oob
    <e6a>   DW_AT_decl_file   : 16
    <e6b>   DW_AT_decl_line   : 64
    <e6c>   DW_AT_decl_column : 11
    <e6d>   DW_AT_type        : <0x483>
    <e71>   DW_AT_data_member_location: 8
 <2><e72>: Abbrev Number: 15 (DW_TAG_member)
    <e73>   DW_AT_name        : (indirect string, offset: 0x18f2): data
    <e77>   DW_AT_decl_file   : 16
    <e78>   DW_AT_decl_line   : 65
    <e79>   DW_AT_decl_column : 8
    <e7a>   DW_AT_type        : <0xec1>
    <e7e>   DW_AT_data_member_location: 16
 <2><e7f>: Abbrev Number: 15 (DW_TAG_member)
    <e80>   DW_AT_name        : (indirect string, offset: 0x80a): maxsize
    <e84>   DW_AT_decl_file   : 16
    <e85>   DW_AT_decl_line   : 66
    <e86>   DW_AT_decl_column : 7
    <e87>   DW_AT_type        : <0x6f>
    <e8b>   DW_AT_data_member_location: 24
 <2><e8c>: Abbrev Number: 15 (DW_TAG_member)
    <e8d>   DW_AT_name        : (indirect string, offset: 0x1f14): maxbits
    <e91>   DW_AT_decl_file   : 16
    <e92>   DW_AT_decl_line   : 67
    <e93>   DW_AT_decl_column : 7
    <e94>   DW_AT_type        : <0x6f>
    <e98>   DW_AT_data_member_location: 28
 <2><e99>: Abbrev Number: 15 (DW_TAG_member)
    <e9a>   DW_AT_name        : (indirect string, offset: 0x12e9): cursize
    <e9e>   DW_AT_decl_file   : 16
    <e9f>   DW_AT_decl_line   : 68
    <ea0>   DW_AT_decl_column : 7
    <ea1>   DW_AT_type        : <0x6f>
    <ea5>   DW_AT_data_member_location: 32
 <2><ea6>: Abbrev Number: 15 (DW_TAG_member)
    <ea7>   DW_AT_name        : (indirect string, offset: 0xd4f): readcount
    <eab>   DW_AT_decl_file   : 16
    <eac>   DW_AT_decl_line   : 69
    <ead>   DW_AT_decl_column : 7
    <eae>   DW_AT_type        : <0x6f>
    <eb2>   DW_AT_data_member_location: 36
 <2><eb3>: Abbrev Number: 35 (DW_TAG_member)
    <eb4>   DW_AT_name        : bit
    <eb8>   DW_AT_decl_file   : 16
    <eb9>   DW_AT_decl_line   : 70
    <eba>   DW_AT_decl_column : 7
    <ebb>   DW_AT_type        : <0x6f>
    <ebf>   DW_AT_data_member_location: 40
 <2><ec0>: Abbrev Number: 0
 <1><ec1>: Abbrev Number: 9 (DW_TAG_pointer_type)
    <ec2>   DW_AT_byte_size   : 8
    <ec3>   DW_AT_type        : <0x457>
 <1><ec7>: Abbrev Number: 3 (DW_TAG_typedef)
    <ec8>   DW_AT_name        : (indirect string, offset: 0x43): msg_t
    <ecc>   DW_AT_decl_file   : 16
    <ecd>   DW_AT_decl_line   : 71
    <ece>   DW_AT_decl_column : 3
    <ecf>   DW_AT_type        : <0xe42>
 <1><ed3>: Abbrev Number: 20 (DW_TAG_enumeration_type)
    <ed4>   DW_AT_encoding    : 7	(unsigned)
    <ed5>   DW_AT_byte_size   : 4
    <ed6>   DW_AT_type        : <0x3b>
    <eda>   DW_AT_decl_file   : 16
    <edb>   DW_AT_decl_line   : 159
    <edc>   DW_AT_decl_column : 14
    <edd>   DW_AT_sibling     : <0xf12>
 <2><ee1>: Abbrev Number: 21 (DW_TAG_enumerator)
    <ee2>   DW_AT_name        : (indirect string, offset: 0x5a5): NA_BAD
    <ee6>   DW_AT_const_value : 0
 <2><ee7>: Abbrev Number: 21 (DW_TAG_enumerator)
    <ee8>   DW_AT_name        : (indirect string, offset: 0xd10): NA_BOT
    <eec>   DW_AT_const_value : 1
 <2><eed>: Abbrev Number: 21 (DW_TAG_enumerator)
    <eee>   DW_AT_name        : (indirect string, offset: 0x1cc1): NA_LOOPBACK
    <ef2>   DW_AT_const_value : 2
 <2><ef3>: Abbrev Number: 21 (DW_TAG_enumerator)
    <ef4>   DW_AT_name        : (indirect string, offset: 0xc05): NA_BROADCAST
    <ef8>   DW_AT_const_value : 3
 <2><ef9>: Abbrev Number: 21 (DW_TAG_enumerator)
    <efa>   DW_AT_name        : (indirect string, offset: 0x116): NA_IP
    <efe>   DW_AT_const_value : 4
 <2><eff>: Abbrev Number: 21 (DW_TAG_enumerator)
    <f00>   DW_AT_name        : (indirect string, offset: 0x3ef): NA_IP6
    <f04>   DW_AT_const_value : 5
 <2><f05>: Abbrev Number: 21 (DW_TAG_enumerator)
    <f06>   DW_AT_name        : (indirect string, offset: 0xc12): NA_MULTICAST6
    <f0a>   DW_AT_const_value : 6
 <2><f0b>: Abbrev Number: 21 (DW_TAG_enumerator)
    <f0c>   DW_AT_name        : (indirect string, offset: 0x11c): NA_UNSPEC
    <f10>   DW_AT_const_value : 7
 <2><f11>: Abbrev Number: 0
 <1><f12>: Abbrev Number: 3 (DW_TAG_typedef)
    <f13>   DW_AT_name        : (indirect string, offset: 0x11c5): netadrtype_t
    <f17>   DW_AT_decl_file   : 16
    <f18>   DW_AT_decl_line   : 170
    <f19>   DW_AT_decl_column : 3
    <f1a>   DW_AT_type        : <0xed3>
 <1><f1e>: Abbrev Number: 20 (DW_TAG_enumeration_type)
    <f1f>   DW_AT_encoding    : 7	(unsigned)
    <f20>   DW_AT_byte_size   : 4
    <f21>   DW_AT_type        : <0x3b>
    <f25>   DW_AT_decl_file   : 16
    <f26>   DW_AT_decl_line   : 173
    <f27>   DW_AT_decl_column : 14
    <f28>   DW_AT_sibling     : <0xf39>
 <2><f2c>: Abbrev Number: 21 (DW_TAG_enumerator)
    <f2d>   DW_AT_name        : (indirect string, offset: 0x12c0): NS_CLIENT
    <f31>   DW_AT_const_value : 0
 <2><f32>: Abbrev Number: 21 (DW_TAG_enumerator)
    <f33>   DW_AT_name        : (indirect string, offset: 0x5b4): NS_SERVER
    <f37>   DW_AT_const_value : 1
 <2><f38>: Abbrev Number: 0
 <1><f39>: Abbrev Number: 3 (DW_TAG_typedef)
    <f3a>   DW_AT_name        : (indirect string, offset: 0xa4e): netsrc_t
    <f3e>   DW_AT_decl_file   : 16
    <f3f>   DW_AT_decl_line   : 176
    <f40>   DW_AT_decl_column : 3
    <f41>   DW_AT_type        : <0xf1e>
 <1><f45>: Abbrev Number: 36 (DW_TAG_union_type)
    <f46>   DW_AT_byte_size   : 16
    <f47>   DW_AT_decl_file   : 16
    <f48>   DW_AT_decl_line   : 183
    <f49>   DW_AT_decl_column : 2
    <f4a>   DW_AT_sibling     : <0xf65>
 <2><f4e>: Abbrev Number: 37 (DW_TAG_member)
    <f4f>   DW_AT_name        : _4
    <f52>   DW_AT_decl_file   : 16
    <f53>   DW_AT_decl_line   : 184
    <f54>   DW_AT_decl_column : 8
    <f55>   DW_AT_type        : <0x48f>
 <2><f59>: Abbrev Number: 37 (DW_TAG_member)
    <f5a>   DW_AT_name        : _6
    <f5d>   DW_AT_decl_file   : 16
    <f5e>   DW_AT_decl_line   : 186
    <f5f>   DW_AT_decl_column : 8
    <f60>   DW_AT_type        : <0xf65>
 <2><f64>: Abbrev Number: 0
 <1><f65>: Abbrev Number: 6 (DW_TAG_array_type)
    <f66>   DW_AT_type        : <0x457>
    <f6a>   DW_AT_sibling     : <0xf75>
 <2><f6e>: Abbrev Number: 7 (DW_TAG_subrange_type)
    <f6f>   DW_AT_type        : <0x42>
    <f73>   DW_AT_upper_bound : 15
 <2><f74>: Abbrev Number: 0
 <1><f75>: Abbrev Number: 34 (DW_TAG_structure_type)
    <f76>   DW_AT_byte_size   : 32
    <f77>   DW_AT_decl_file   : 16
    <f78>   DW_AT_decl_line   : 181
    <f79>   DW_AT_decl_column : 9
    <f7a>   DW_AT_sibling     : <0xfb3>
 <2><f7e>: Abbrev Number: 15 (DW_TAG_member)
    <f7f>   DW_AT_name        : (indirect string, offset: 0x5c3): type
    <f83>   DW_AT_decl_file   : 16
    <f84>   DW_AT_decl_line   : 182
    <f85>   DW_AT_decl_column : 15
    <f86>   DW_AT_type        : <0xf12>
    <f8a>   DW_AT_data_member_location: 0
 <2><f8b>: Abbrev Number: 35 (DW_TAG_member)
    <f8c>   DW_AT_name        : ipv
    <f90>   DW_AT_decl_file   : 16
    <f91>   DW_AT_decl_line   : 188
    <f92>   DW_AT_decl_column : 4
    <f93>   DW_AT_type        : <0xf45>
    <f97>   DW_AT_data_member_location: 4
 <2><f98>: Abbrev Number: 15 (DW_TAG_member)
    <f99>   DW_AT_name        : (indirect string, offset: 0x1c52): port
    <f9d>   DW_AT_decl_file   : 16
    <f9e>   DW_AT_decl_line   : 189
    <f9f>   DW_AT_decl_column : 11
    <fa0>   DW_AT_type        : <0x433>
    <fa4>   DW_AT_data_member_location: 20
 <2><fa5>: Abbrev Number: 15 (DW_TAG_member)
    <fa6>   DW_AT_name        : (indirect string, offset: 0x733): scope_id
    <faa>   DW_AT_decl_file   : 16
    <fab>   DW_AT_decl_line   : 191
    <fac>   DW_AT_decl_column : 16
    <fad>   DW_AT_type        : <0x42>
    <fb1>   DW_AT_data_member_location: 24
 <2><fb2>: Abbrev Number: 0
 <1><fb3>: Abbrev Number: 3 (DW_TAG_typedef)
    <fb4>   DW_AT_name        : (indirect string, offset: 0xc7a): netadr_t
    <fb8>   DW_AT_decl_file   : 16
    <fb9>   DW_AT_decl_line   : 193
    <fba>   DW_AT_decl_column : 3
    <fbb>   DW_AT_type        : <0xf75>
 <1><fbf>: Abbrev Number: 5 (DW_TAG_const_type)
    <fc0>   DW_AT_type        : <0xfb3>
 <1><fc4>: Abbrev Number: 38 (DW_TAG_structure_type)
    <fc5>   DW_AT_byte_size   : 32864
    <fc7>   DW_AT_decl_file   : 16
    <fc8>   DW_AT_decl_line   : 234
    <fc9>   DW_AT_decl_column : 9
    <fca>   DW_AT_sibling     : <0x10c8>
 <2><fce>: Abbrev Number: 15 (DW_TAG_member)
    <fcf>   DW_AT_name        : (indirect string, offset: 0x10f9): sock
    <fd3>   DW_AT_decl_file   : 16
    <fd4>   DW_AT_decl_line   : 235
    <fd5>   DW_AT_decl_column : 11
    <fd6>   DW_AT_type        : <0xf39>
    <fda>   DW_AT_data_member_location: 0
 <2><fdb>: Abbrev Number: 15 (DW_TAG_member)
    <fdc>   DW_AT_name        : (indirect string, offset: 0xb18): dropped
    <fe0>   DW_AT_decl_file   : 16
    <fe1>   DW_AT_decl_line   : 237
    <fe2>   DW_AT_decl_column : 8
    <fe3>   DW_AT_type        : <0x6f>
    <fe7>   DW_AT_data_member_location: 4
 <2><fe8>: Abbrev Number: 15 (DW_TAG_member)
    <fe9>   DW_AT_name        : (indirect string, offset: 0x835): remoteAddress
    <fed>   DW_AT_decl_file   : 16
    <fee>   DW_AT_decl_line   : 239
    <fef>   DW_AT_decl_column : 11
    <ff0>   DW_AT_type        : <0xfb3>
    <ff4>   DW_AT_data_member_location: 8
 <2><ff5>: Abbrev Number: 15 (DW_TAG_member)
    <ff6>   DW_AT_name        : (indirect string, offset: 0x1840): qport
    <ffa>   DW_AT_decl_file   : 16
    <ffb>   DW_AT_decl_line   : 240
    <ffc>   DW_AT_decl_column : 8
    <ffd>   DW_AT_type        : <0x6f>
    <1001>   DW_AT_data_member_location: 40
 <2><1002>: Abbrev Number: 15 (DW_TAG_member)
    <1003>   DW_AT_name        : (indirect string, offset: 0x8da): incomingSequence
    <1007>   DW_AT_decl_file   : 16
    <1008>   DW_AT_decl_line   : 243
    <1009>   DW_AT_decl_column : 8
    <100a>   DW_AT_type        : <0x6f>
    <100e>   DW_AT_data_member_location: 44
 <2><100f>: Abbrev Number: 15 (DW_TAG_member)
    <1010>   DW_AT_name        : (indirect string, offset: 0x1064): outgoingSequence
    <1014>   DW_AT_decl_file   : 16
    <1015>   DW_AT_decl_line   : 244
    <1016>   DW_AT_decl_column : 8
    <1017>   DW_AT_type        : <0x6f>
    <101b>   DW_AT_data_member_location: 48
 <2><101c>: Abbrev Number: 15 (DW_TAG_member)
    <101d>   DW_AT_name        : (indirect string, offset: 0xda9): fragmentSequence
    <1021>   DW_AT_decl_file   : 16
    <1022>   DW_AT_decl_line   : 247
    <1023>   DW_AT_decl_column : 8
    <1024>   DW_AT_type        : <0x6f>
    <1028>   DW_AT_data_member_location: 52
 <2><1029>: Abbrev Number: 15 (DW_TAG_member)
    <102a>   DW_AT_name        : (indirect string, offset: 0x1f1c): fragmentLength
    <102e>   DW_AT_decl_file   : 16
    <102f>   DW_AT_decl_line   : 248
    <1030>   DW_AT_decl_column : 8
    <1031>   DW_AT_type        : <0x6f>
    <1035>   DW_AT_data_member_location: 56
 <2><1036>: Abbrev Number: 15 (DW_TAG_member)
    <1037>   DW_AT_name        : (indirect string, offset: 0x13fa): fragmentBuffer
    <103b>   DW_AT_decl_file   : 16
    <103c>   DW_AT_decl_line   : 249
    <103d>   DW_AT_decl_column : 8
    <103e>   DW_AT_type        : <0x10c8>
    <1042>   DW_AT_data_member_location: 60
 <2><1043>: Abbrev Number: 39 (DW_TAG_member)
    <1044>   DW_AT_name        : (indirect string, offset: 0x8a2): unsentFragments
    <1048>   DW_AT_decl_file   : 16
    <1049>   DW_AT_decl_line   : 253
    <104a>   DW_AT_decl_column : 11
    <104b>   DW_AT_type        : <0x483>
    <104f>   DW_AT_data_member_location: 16444
 <2><1051>: Abbrev Number: 39 (DW_TAG_member)
    <1052>   DW_AT_name        : (indirect string, offset: 0x15d9): unsentFragmentStart
    <1056>   DW_AT_decl_file   : 16
    <1057>   DW_AT_decl_line   : 254
    <1058>   DW_AT_decl_column : 8
    <1059>   DW_AT_type        : <0x6f>
    <105d>   DW_AT_data_member_location: 16448
 <2><105f>: Abbrev Number: 39 (DW_TAG_member)
    <1060>   DW_AT_name        : (indirect string, offset: 0x1dfa): unsentLength
    <1064>   DW_AT_decl_file   : 16
    <1065>   DW_AT_decl_line   : 255
    <1066>   DW_AT_decl_column : 8
    <1067>   DW_AT_type        : <0x6f>
    <106b>   DW_AT_data_member_location: 16452
 <2><106d>: Abbrev Number: 31 (DW_TAG_member)
    <106e>   DW_AT_name        : (indirect string, offset: 0x12dc): unsentBuffer
    <1072>   DW_AT_decl_file   : 16
    <1073>   DW_AT_decl_line   : 256
    <1075>   DW_AT_decl_column : 8
    <1076>   DW_AT_type        : <0x10c8>
    <107a>   DW_AT_data_member_location: 16456
 <2><107c>: Abbrev Number: 31 (DW_TAG_member)
    <107d>   DW_AT_name        : (indirect string, offset: 0x1b2c): challenge
    <1081>   DW_AT_decl_file   : 16
    <1082>   DW_AT_decl_line   : 258
    <1084>   DW_AT_decl_column : 8
    <1085>   DW_AT_type        : <0x6f>
    <1089>   DW_AT_data_member_location: 32840
 <2><108b>: Abbrev Number: 31 (DW_TAG_member)
    <108c>   DW_AT_name        : (indirect string, offset: 0x1e8b): lastSentTime
    <1090>   DW_AT_decl_file   : 16
    <1091>   DW_AT_decl_line   : 259
    <1093>   DW_AT_decl_column : 8
    <1094>   DW_AT_type        : <0x6f>
    <1098>   DW_AT_data_member_location: 32844
 <2><109a>: Abbrev Number: 31 (DW_TAG_member)
    <109b>   DW_AT_name        : (indirect string, offset: 0x1667): lastSentSize
    <109f>   DW_AT_decl_file   : 16
    <10a0>   DW_AT_decl_line   : 260
    <10a2>   DW_AT_decl_column : 8
    <10a3>   DW_AT_type        : <0x6f>
    <10a7>   DW_AT_data_member_location: 32848
 <2><10a9>: Abbrev Number: 31 (DW_TAG_member)
    <10aa>   DW_AT_name        : (indirect string, offset: 0x365): compat
    <10ae>   DW_AT_decl_file   : 16
    <10af>   DW_AT_decl_line   : 262
    <10b1>   DW_AT_decl_column : 11
    <10b2>   DW_AT_type        : <0x483>
    <10b6>   DW_AT_data_member_location: 32852
 <2><10b8>: Abbrev Number: 31 (DW_TAG_member)
    <10b9>   DW_AT_name        : (indirect string, offset: 0x1717): isLANAddress
    <10bd>   DW_AT_decl_file   : 16
    <10be>   DW_AT_decl_line   : 263
    <10c0>   DW_AT_decl_column : 11
    <10c1>   DW_AT_type        : <0x483>
    <10c5>   DW_AT_data_member_location: 32856
 <2><10c7>: Abbrev Number: 0
 <1><10c8>: Abbrev Number: 6 (DW_TAG_array_type)
    <10c9>   DW_AT_type        : <0x457>
    <10cd>   DW_AT_sibling     : <0x10d9>
 <2><10d1>: Abbrev Number: 24 (DW_TAG_subrange_type)
    <10d2>   DW_AT_type        : <0x42>
    <10d6>   DW_AT_upper_bound : 16383
 <2><10d8>: Abbrev Number: 0
 <1><10d9>: Abbrev Number: 22 (DW_TAG_typedef)
    <10da>   DW_AT_name        : (indirect string, offset: 0x19b7): netchan_t
    <10de>   DW_AT_decl_file   : 16
    <10df>   DW_AT_decl_line   : 265
    <10e1>   DW_AT_decl_column : 3
    <10e2>   DW_AT_type        : <0xfc4>
 <1><10e6>: Abbrev Number: 6 (DW_TAG_array_type)
    <10e7>   DW_AT_type        : <0x76>
    <10eb>   DW_AT_sibling     : <0x10f1>
 <2><10ef>: Abbrev Number: 19 (DW_TAG_subrange_type)
 <2><10f0>: Abbrev Number: 0
 <1><10f1>: Abbrev Number: 5 (DW_TAG_const_type)
    <10f2>   DW_AT_type        : <0x10e6>
 <1><10f6>: Abbrev Number: 10 (DW_TAG_variable)
    <10f7>   DW_AT_name        : (indirect string, offset: 0x1877): demo_protocols
    <10fb>   DW_AT_decl_file   : 16
    <10fc>   DW_AT_decl_line   : 292
    <10fe>   DW_AT_decl_column : 18
    <10ff>   DW_AT_type        : <0x10f1>
    <1103>   DW_AT_external    : 1
    <1103>   DW_AT_declaration : 1
 <1><1103>: Abbrev Number: 22 (DW_TAG_typedef)
    <1104>   DW_AT_name        : (indirect string, offset: 0x1729): vm_t
    <1108>   DW_AT_decl_file   : 16
    <1109>   DW_AT_decl_line   : 358
    <110b>   DW_AT_decl_column : 21
    <110c>   DW_AT_type        : <0x1110>
 <1><1110>: Abbrev Number: 14 (DW_TAG_structure_type)
    <1111>   DW_AT_name        : (indirect string, offset: 0x1724): vm_s
    <1115>   DW_AT_byte_size   : 200
    <1116>   DW_AT_decl_file   : 17
    <1117>   DW_AT_decl_line   : 172
    <1118>   DW_AT_decl_column : 8
    <1119>   DW_AT_sibling     : <0x12be>
 <2><111d>: Abbrev Number: 15 (DW_TAG_member)
    <111e>   DW_AT_name        : (indirect string, offset: 0xcbe): systemCall
    <1122>   DW_AT_decl_file   : 17
    <1123>   DW_AT_decl_line   : 174
    <1124>   DW_AT_decl_column : 12
    <1125>   DW_AT_type        : <0x6be>
    <1129>   DW_AT_data_member_location: 0
 <2><112a>: Abbrev Number: 15 (DW_TAG_member)
    <112b>   DW_AT_name        : (indirect string, offset: 0x53e): dataBase
    <112f>   DW_AT_decl_file   : 17
    <1130>   DW_AT_decl_line   : 175
    <1131>   DW_AT_decl_column : 9
    <1132>   DW_AT_type        : <0xec1>
    <1136>   DW_AT_data_member_location: 8
 <2><1137>: Abbrev Number: 15 (DW_TAG_member)
    <1138>   DW_AT_name        : (indirect string, offset: 0xcd9): opStack
    <113c>   DW_AT_decl_file   : 17
    <113d>   DW_AT_decl_line   : 176
    <113e>   DW_AT_decl_column : 12
    <113f>   DW_AT_type        : <0x3ce>
    <1143>   DW_AT_data_member_location: 16
 <2><1144>: Abbrev Number: 15 (DW_TAG_member)
    <1145>   DW_AT_name        : (indirect string, offset: 0x1886): opStackTop
    <1149>   DW_AT_decl_file   : 17
    <114a>   DW_AT_decl_line   : 177
    <114b>   DW_AT_decl_column : 12
    <114c>   DW_AT_type        : <0x3ce>
    <1150>   DW_AT_data_member_location: 24
 <2><1151>: Abbrev Number: 15 (DW_TAG_member)
    <1152>   DW_AT_name        : (indirect string, offset: 0x9d0): programStack
    <1156>   DW_AT_decl_file   : 17
    <1157>   DW_AT_decl_line   : 179
    <1158>   DW_AT_decl_column : 8
    <1159>   DW_AT_type        : <0x6f>
    <115d>   DW_AT_data_member_location: 32
 <2><115e>: Abbrev Number: 15 (DW_TAG_member)
    <115f>   DW_AT_name        : (indirect string, offset: 0x3b6): stackBottom
    <1163>   DW_AT_decl_file   : 17
    <1164>   DW_AT_decl_line   : 180
    <1165>   DW_AT_decl_column : 8
    <1166>   DW_AT_type        : <0x6f>
    <116a>   DW_AT_data_member_location: 36
 <2><116b>: Abbrev Number: 15 (DW_TAG_member)
    <116c>   DW_AT_name        : (indirect string, offset: 0xf3f): name
    <1170>   DW_AT_decl_file   : 17
    <1171>   DW_AT_decl_line   : 184
    <1172>   DW_AT_decl_column : 14
    <1173>   DW_AT_type        : <0x38d>
    <1177>   DW_AT_data_member_location: 40
 <2><1178>: Abbrev Number: 15 (DW_TAG_member)
    <1179>   DW_AT_name        : (indirect string, offset: 0x4c3): index
    <117d>   DW_AT_decl_file   : 17
    <117e>   DW_AT_decl_line   : 185
    <117f>   DW_AT_decl_column : 12
    <1180>   DW_AT_type        : <0x12ec>
    <1184>   DW_AT_data_member_location: 48
 <2><1185>: Abbrev Number: 15 (DW_TAG_member)
    <1186>   DW_AT_name        : (indirect string, offset: 0xdfe): dllHandle
    <118a>   DW_AT_decl_file   : 17
    <118b>   DW_AT_decl_line   : 188
    <118c>   DW_AT_decl_column : 9
    <118d>   DW_AT_type        : <0xb6>
    <1191>   DW_AT_data_member_location: 56
 <2><1192>: Abbrev Number: 15 (DW_TAG_member)
    <1193>   DW_AT_name        : (indirect string, offset: 0x16a2): entryPoint
    <1197>   DW_AT_decl_file   : 17
    <1198>   DW_AT_decl_line   : 189
    <1199>   DW_AT_decl_column : 15
    <119a>   DW_AT_type        : <0x6e6>
    <119e>   DW_AT_data_member_location: 64
 <2><119f>: Abbrev Number: 15 (DW_TAG_member)
    <11a0>   DW_AT_name        : (indirect string, offset: 0x1633): dllSyscall
    <11a4>   DW_AT_decl_file   : 17
    <11a5>   DW_AT_decl_line   : 190
    <11a6>   DW_AT_decl_column : 15
    <11a7>   DW_AT_type        : <0x6e6>
    <11ab>   DW_AT_data_member_location: 72
 <2><11ac>: Abbrev Number: 15 (DW_TAG_member)
    <11ad>   DW_AT_name        : (indirect string, offset: 0xa71): destroy
    <11b1>   DW_AT_decl_file   : 17
    <11b2>   DW_AT_decl_line   : 191
    <11b3>   DW_AT_decl_column : 9
    <11b4>   DW_AT_type        : <0x169d>
    <11b8>   DW_AT_data_member_location: 80
 <2><11b9>: Abbrev Number: 15 (DW_TAG_member)
    <11ba>   DW_AT_name        : (indirect string, offset: 0x16ad): compiled
    <11be>   DW_AT_decl_file   : 17
    <11bf>   DW_AT_decl_line   : 196
    <11c0>   DW_AT_decl_column : 11
    <11c1>   DW_AT_type        : <0x483>
    <11c5>   DW_AT_data_member_location: 88
 <2><11c6>: Abbrev Number: 15 (DW_TAG_member)
    <11c7>   DW_AT_name        : (indirect string, offset: 0x1bac): codeBase
    <11cb>   DW_AT_decl_file   : 17
    <11cc>   DW_AT_decl_line   : 198
    <11cd>   DW_AT_decl_column : 11
    <11ce>   DW_AT_type        : <0x1680>
    <11d2>   DW_AT_data_member_location: 96
 <2><11d3>: Abbrev Number: 15 (DW_TAG_member)
    <11d4>   DW_AT_name        : (indirect string, offset: 0x1e1b): codeSize
    <11d8>   DW_AT_decl_file   : 17
    <11d9>   DW_AT_decl_line   : 199
    <11da>   DW_AT_decl_column : 15
    <11db>   DW_AT_type        : <0x3b>
    <11df>   DW_AT_data_member_location: 104
 <2><11e0>: Abbrev Number: 15 (DW_TAG_member)
    <11e1>   DW_AT_name        : (indirect string, offset: 0x9f5): codeLength
    <11e5>   DW_AT_decl_file   : 17
    <11e6>   DW_AT_decl_line   : 200
    <11e7>   DW_AT_decl_column : 15
    <11e8>   DW_AT_type        : <0x3b>
    <11ec>   DW_AT_data_member_location: 108
 <2><11ed>: Abbrev Number: 15 (DW_TAG_member)
    <11ee>   DW_AT_name        : (indirect string, offset: 0x158c): instructionCount
    <11f2>   DW_AT_decl_file   : 17
    <11f3>   DW_AT_decl_line   : 202
    <11f4>   DW_AT_decl_column : 8
    <11f5>   DW_AT_type        : <0x6f>
    <11f9>   DW_AT_data_member_location: 112
 <2><11fa>: Abbrev Number: 15 (DW_TAG_member)
    <11fb>   DW_AT_name        : (indirect string, offset: 0x1241): instructionPointers
    <11ff>   DW_AT_decl_file   : 17
    <1200>   DW_AT_decl_line   : 203
    <1201>   DW_AT_decl_column : 12
    <1202>   DW_AT_type        : <0x6e0>
    <1206>   DW_AT_data_member_location: 120
 <2><1207>: Abbrev Number: 15 (DW_TAG_member)
    <1208>   DW_AT_name        : (indirect string, offset: 0xee2): dataMask
    <120c>   DW_AT_decl_file   : 17
    <120d>   DW_AT_decl_line   : 205
    <120e>   DW_AT_decl_column : 15
    <120f>   DW_AT_type        : <0x3b>
    <1213>   DW_AT_data_member_location: 128
 <2><1214>: Abbrev Number: 15 (DW_TAG_member)
    <1215>   DW_AT_name        : (indirect string, offset: 0xd28): dataLength
    <1219>   DW_AT_decl_file   : 17
    <121a>   DW_AT_decl_line   : 206
    <121b>   DW_AT_decl_column : 15
    <121c>   DW_AT_type        : <0x3b>
    <1220>   DW_AT_data_member_location: 132
 <2><1221>: Abbrev Number: 15 (DW_TAG_member)
    <1222>   DW_AT_name        : (indirect string, offset: 0xcc9): exactDataLength
    <1226>   DW_AT_decl_file   : 17
    <1227>   DW_AT_decl_line   : 207
    <1228>   DW_AT_decl_column : 15
    <1229>   DW_AT_type        : <0x3b>
    <122d>   DW_AT_data_member_location: 136
 <2><122e>: Abbrev Number: 15 (DW_TAG_member)
    <122f>   DW_AT_name        : (indirect string, offset: 0xd87): dataAlloc
    <1233>   DW_AT_decl_file   : 17
    <1234>   DW_AT_decl_line   : 208
    <1235>   DW_AT_decl_column : 15
    <1236>   DW_AT_type        : <0x3b>
    <123a>   DW_AT_data_member_location: 140
 <2><123b>: Abbrev Number: 15 (DW_TAG_member)
    <123c>   DW_AT_name        : (indirect string, offset: 0x3c2): numSymbols
    <1240>   DW_AT_decl_file   : 17
    <1241>   DW_AT_decl_line   : 210
    <1242>   DW_AT_decl_column : 8
    <1243>   DW_AT_type        : <0x6f>
    <1247>   DW_AT_data_member_location: 144
 <2><1248>: Abbrev Number: 15 (DW_TAG_member)
    <1249>   DW_AT_name        : (indirect string, offset: 0x1ae6): symbols
    <124d>   DW_AT_decl_file   : 17
    <124e>   DW_AT_decl_line   : 211
    <124f>   DW_AT_decl_column : 14
    <1250>   DW_AT_type        : <0x16a3>
    <1254>   DW_AT_data_member_location: 152
 <2><1255>: Abbrev Number: 15 (DW_TAG_member)
    <1256>   DW_AT_name        : (indirect string, offset: 0x1825): callLevel
    <125a>   DW_AT_decl_file   : 17
    <125b>   DW_AT_decl_line   : 213
    <125c>   DW_AT_decl_column : 8
    <125d>   DW_AT_type        : <0x6f>
    <1261>   DW_AT_data_member_location: 160
 <2><1262>: Abbrev Number: 15 (DW_TAG_member)
    <1263>   DW_AT_name        : (indirect string, offset: 0x198f): breakFunction
    <1267>   DW_AT_decl_file   : 17
    <1268>   DW_AT_decl_line   : 214
    <1269>   DW_AT_decl_column : 8
    <126a>   DW_AT_type        : <0x6f>
    <126e>   DW_AT_data_member_location: 164
 <2><126f>: Abbrev Number: 15 (DW_TAG_member)
    <1270>   DW_AT_name        : (indirect string, offset: 0x1cd7): breakCount
    <1274>   DW_AT_decl_file   : 17
    <1275>   DW_AT_decl_line   : 215
    <1276>   DW_AT_decl_column : 8
    <1277>   DW_AT_type        : <0x6f>
    <127b>   DW_AT_data_member_location: 168
 <2><127c>: Abbrev Number: 15 (DW_TAG_member)
    <127d>   DW_AT_name        : (indirect string, offset: 0xfc9): jumpTableTargets
    <1281>   DW_AT_decl_file   : 17
    <1282>   DW_AT_decl_line   : 217
    <1283>   DW_AT_decl_column : 12
    <1284>   DW_AT_type        : <0x3ce>
    <1288>   DW_AT_data_member_location: 176
 <2><1289>: Abbrev Number: 15 (DW_TAG_member)
    <128a>   DW_AT_name        : (indirect string, offset: 0x64b): numJumpTableTargets
    <128e>   DW_AT_decl_file   : 17
    <128f>   DW_AT_decl_line   : 218
    <1290>   DW_AT_decl_column : 8
    <1291>   DW_AT_type        : <0x6f>
    <1295>   DW_AT_data_member_location: 184
 <2><1296>: Abbrev Number: 15 (DW_TAG_member)
    <1297>   DW_AT_name        : (indirect string, offset: 0xf0f): crc32sum
    <129b>   DW_AT_decl_file   : 17
    <129c>   DW_AT_decl_line   : 220
    <129d>   DW_AT_decl_column : 11
    <129e>   DW_AT_type        : <0x43f>
    <12a2>   DW_AT_data_member_location: 188
 <2><12a3>: Abbrev Number: 15 (DW_TAG_member)
    <12a4>   DW_AT_name        : (indirect string, offset: 0x199d): forceDataMask
    <12a8>   DW_AT_decl_file   : 17
    <12a9>   DW_AT_decl_line   : 222
    <12aa>   DW_AT_decl_column : 11
    <12ab>   DW_AT_type        : <0x483>
    <12af>   DW_AT_data_member_location: 192
 <2><12b0>: Abbrev Number: 15 (DW_TAG_member)
    <12b1>   DW_AT_name        : (indirect string, offset: 0x43b): privateFlag
    <12b5>   DW_AT_decl_file   : 17
    <12b6>   DW_AT_decl_line   : 224
    <12b7>   DW_AT_decl_column : 8
    <12b8>   DW_AT_type        : <0x6f>
    <12bc>   DW_AT_data_member_location: 196
 <2><12bd>: Abbrev Number: 0
 <1><12be>: Abbrev Number: 23 (DW_TAG_enumeration_type)
    <12bf>   DW_AT_encoding    : 5	(signed)
    <12c0>   DW_AT_byte_size   : 4
    <12c1>   DW_AT_type        : <0x6f>
    <12c5>   DW_AT_decl_file   : 16
    <12c6>   DW_AT_decl_line   : 376
    <12c8>   DW_AT_decl_column : 14
    <12c9>   DW_AT_sibling     : <0x12ec>
 <2><12cd>: Abbrev Number: 40 (DW_TAG_enumerator)
    <12ce>   DW_AT_name        : (indirect string, offset: 0x1c9c): VM_BAD
    <12d2>   DW_AT_const_value : -1
 <2><12d3>: Abbrev Number: 21 (DW_TAG_enumerator)
    <12d4>   DW_AT_name        : (indirect string, offset: 0xfa4): VM_GAME
    <12d8>   DW_AT_const_value : 0
 <2><12d9>: Abbrev Number: 21 (DW_TAG_enumerator)
    <12da>   DW_AT_name        : (indirect string, offset: 0x19ce): VM_CGAME
    <12de>   DW_AT_const_value : 1
 <2><12df>: Abbrev Number: 21 (DW_TAG_enumerator)
    <12e0>   DW_AT_name        : (indirect string, offset: 0x1871): VM_UI
    <12e4>   DW_AT_const_value : 2
 <2><12e5>: Abbrev Number: 21 (DW_TAG_enumerator)
    <12e6>   DW_AT_name        : (indirect string, offset: 0x1448): VM_COUNT
    <12ea>   DW_AT_const_value : 3
 <2><12eb>: Abbrev Number: 0
 <1><12ec>: Abbrev Number: 22 (DW_TAG_typedef)
    <12ed>   DW_AT_name        : (indirect string, offset: 0x641): vmIndex_t
    <12f1>   DW_AT_decl_file   : 16
    <12f2>   DW_AT_decl_line   : 384
    <12f4>   DW_AT_decl_column : 3
    <12f5>   DW_AT_type        : <0x12be>
 <1><12f9>: Abbrev Number: 9 (DW_TAG_pointer_type)
    <12fa>   DW_AT_byte_size   : 8
    <12fb>   DW_AT_type        : <0x12ff>
 <1><12ff>: Abbrev Number: 41 (DW_TAG_subroutine_type)
    <1300>   DW_AT_prototyped  : 1
 <1><1300>: Abbrev Number: 10 (DW_TAG_variable)
    <1301>   DW_AT_name        : (indirect string, offset: 0x870): cvar_modifiedFlags
    <1305>   DW_AT_decl_file   : 16
    <1306>   DW_AT_decl_line   : 620
    <1308>   DW_AT_decl_column : 14
    <1309>   DW_AT_type        : <0x6f>
    <130d>   DW_AT_external    : 1
    <130d>   DW_AT_declaration : 1
 <1><130d>: Abbrev Number: 10 (DW_TAG_variable)
    <130e>   DW_AT_name        : (indirect string, offset: 0x36c): fs_lastPakIndex
    <1312>   DW_AT_decl_file   : 16
    <1313>   DW_AT_decl_line   : 743
    <1315>   DW_AT_decl_column : 12
    <1316>   DW_AT_type        : <0x6f>
    <131a>   DW_AT_external    : 1
    <131a>   DW_AT_declaration : 1
 <1><131a>: Abbrev Number: 10 (DW_TAG_variable)
    <131b>   DW_AT_name        : (indirect string, offset: 0x1800): fs_reordered
    <131f>   DW_AT_decl_file   : 16
    <1320>   DW_AT_decl_line   : 745
    <1322>   DW_AT_decl_column : 17
    <1323>   DW_AT_type        : <0x483>
    <1327>   DW_AT_external    : 1
    <1327>   DW_AT_declaration : 1
 <1><1327>: Abbrev Number: 6 (DW_TAG_array_type)
    <1328>   DW_AT_type        : <0xbe>
    <132c>   DW_AT_sibling     : <0x1337>
 <2><1330>: Abbrev Number: 7 (DW_TAG_subrange_type)
    <1331>   DW_AT_type        : <0x42>
    <1335>   DW_AT_upper_bound : 33
 <2><1336>: Abbrev Number: 0
 <1><1337>: Abbrev Number: 10 (DW_TAG_variable)
    <1338>   DW_AT_name        : (indirect string, offset: 0x1d91): cl_cdkey
    <133c>   DW_AT_decl_file   : 16
    <133d>   DW_AT_decl_line   : 901
    <133f>   DW_AT_decl_column : 13
    <1340>   DW_AT_type        : <0x1327>
    <1344>   DW_AT_external    : 1
    <1344>   DW_AT_declaration : 1
 <1><1344>: Abbrev Number: 10 (DW_TAG_variable)
    <1345>   DW_AT_name        : (indirect string, offset: 0x1540): cl_title
    <1349>   DW_AT_decl_file   : 16
    <134a>   DW_AT_decl_line   : 904
    <134c>   DW_AT_decl_column : 13
    <134d>   DW_AT_type        : <0x8a5>
    <1351>   DW_AT_external    : 1
    <1351>   DW_AT_declaration : 1
 <1><1351>: Abbrev Number: 10 (DW_TAG_variable)
    <1352>   DW_AT_name        : (indirect string, offset: 0x1269): CPU_Flags
    <1356>   DW_AT_decl_file   : 16
    <1357>   DW_AT_decl_line   : 906
    <1359>   DW_AT_decl_column : 12
    <135a>   DW_AT_type        : <0x6f>
    <135e>   DW_AT_external    : 1
    <135e>   DW_AT_declaration : 1
 <1><135e>: Abbrev Number: 10 (DW_TAG_variable)
    <135f>   DW_AT_name        : (indirect string, offset: 0x481): com_developer
    <1363>   DW_AT_decl_file   : 16
    <1364>   DW_AT_decl_line   : 989
    <1366>   DW_AT_decl_column : 16
    <1367>   DW_AT_type        : <0x89f>
    <136b>   DW_AT_external    : 1
    <136b>   DW_AT_declaration : 1
 <1><136b>: Abbrev Number: 10 (DW_TAG_variable)
    <136c>   DW_AT_name        : (indirect string, offset: 0x1f9): com_dedicated
    <1370>   DW_AT_decl_file   : 16
    <1371>   DW_AT_decl_line   : 990
    <1373>   DW_AT_decl_column : 16
    <1374>   DW_AT_type        : <0x89f>
    <1378>   DW_AT_external    : 1
    <1378>   DW_AT_declaration : 1
 <1><1378>: Abbrev Number: 10 (DW_TAG_variable)
    <1379>   DW_AT_name        : (indirect string, offset: 0x782): com_speeds
    <137d>   DW_AT_decl_file   : 16
    <137e>   DW_AT_decl_line   : 991
    <1380>   DW_AT_decl_column : 16
    <1381>   DW_AT_type        : <0x89f>
    <1385>   DW_AT_external    : 1
    <1385>   DW_AT_declaration : 1
 <1><1385>: Abbrev Number: 10 (DW_TAG_variable)
    <1386>   DW_AT_name        : (indirect string, offset: 0xce8): com_timescale
    <138a>   DW_AT_decl_file   : 16
    <138b>   DW_AT_decl_line   : 992
    <138d>   DW_AT_decl_column : 16
    <138e>   DW_AT_type        : <0x89f>
    <1392>   DW_AT_external    : 1
    <1392>   DW_AT_declaration : 1
 <1><1392>: Abbrev Number: 10 (DW_TAG_variable)
    <1393>   DW_AT_name        : (indirect string, offset: 0x1c46): com_viewlog
    <1397>   DW_AT_decl_file   : 16
    <1398>   DW_AT_decl_line   : 993
    <139a>   DW_AT_decl_column : 16
    <139b>   DW_AT_type        : <0x89f>
    <139f>   DW_AT_external    : 1
    <139f>   DW_AT_declaration : 1
 <1><139f>: Abbrev Number: 10 (DW_TAG_variable)
    <13a0>   DW_AT_name        : (indirect string, offset: 0xb4d): com_version
    <13a4>   DW_AT_decl_file   : 16
    <13a5>   DW_AT_decl_line   : 994
    <13a7>   DW_AT_decl_column : 16
    <13a8>   DW_AT_type        : <0x89f>
    <13ac>   DW_AT_external    : 1
    <13ac>   DW_AT_declaration : 1
 <1><13ac>: Abbrev Number: 10 (DW_TAG_variable)
    <13ad>   DW_AT_name        : (indirect string, offset: 0x1ccd): com_blood
    <13b1>   DW_AT_decl_file   : 16
    <13b2>   DW_AT_decl_line   : 995
    <13b4>   DW_AT_decl_column : 16
    <13b5>   DW_AT_type        : <0x89f>
    <13b9>   DW_AT_external    : 1
    <13b9>   DW_AT_declaration : 1
 <1><13b9>: Abbrev Number: 10 (DW_TAG_variable)
    <13ba>   DW_AT_name        : (indirect string, offset: 0x73c): com_buildScript
    <13be>   DW_AT_decl_file   : 16
    <13bf>   DW_AT_decl_line   : 996
    <13c1>   DW_AT_decl_column : 16
    <13c2>   DW_AT_type        : <0x89f>
    <13c6>   DW_AT_external    : 1
    <13c6>   DW_AT_declaration : 1
 <1><13c6>: Abbrev Number: 10 (DW_TAG_variable)
    <13c7>   DW_AT_name        : (indirect string, offset: 0x7b2): com_journal
    <13cb>   DW_AT_decl_file   : 16
    <13cc>   DW_AT_decl_line   : 997
    <13ce>   DW_AT_decl_column : 16
    <13cf>   DW_AT_type        : <0x89f>
    <13d3>   DW_AT_external    : 1
    <13d3>   DW_AT_declaration : 1
 <1><13d3>: Abbrev Number: 10 (DW_TAG_variable)
    <13d4>   DW_AT_name        : (indirect string, offset: 0x1bc9): com_cameraMode
    <13d8>   DW_AT_decl_file   : 16
    <13d9>   DW_AT_decl_line   : 998
    <13db>   DW_AT_decl_column : 16
    <13dc>   DW_AT_type        : <0x89f>
    <13e0>   DW_AT_external    : 1
    <13e0>   DW_AT_declaration : 1
 <1><13e0>: Abbrev Number: 10 (DW_TAG_variable)
    <13e1>   DW_AT_name        : (indirect string, offset: 0x177e): com_protocol
    <13e5>   DW_AT_decl_file   : 16
    <13e6>   DW_AT_decl_line   : 999
    <13e8>   DW_AT_decl_column : 16
    <13e9>   DW_AT_type        : <0x89f>
    <13ed>   DW_AT_external    : 1
    <13ed>   DW_AT_declaration : 1
 <1><13ed>: Abbrev Number: 10 (DW_TAG_variable)
    <13ee>   DW_AT_name        : (indirect string, offset: 0x1836): sv_paused
    <13f2>   DW_AT_decl_file   : 16
    <13f3>   DW_AT_decl_line   : 1002
    <13f5>   DW_AT_decl_column : 16
    <13f6>   DW_AT_type        : <0x89f>
    <13fa>   DW_AT_external    : 1
    <13fa>   DW_AT_declaration : 1
 <1><13fa>: Abbrev Number: 10 (DW_TAG_variable)
    <13fb>   DW_AT_name        : (indirect string, offset: 0x25b): sv_packetdelay
    <13ff>   DW_AT_decl_file   : 16
    <1400>   DW_AT_decl_line   : 1003
    <1402>   DW_AT_decl_column : 16
    <1403>   DW_AT_type        : <0x89f>
    <1407>   DW_AT_external    : 1
    <1407>   DW_AT_declaration : 1
 <1><1407>: Abbrev Number: 10 (DW_TAG_variable)
    <1408>   DW_AT_name        : (indirect string, offset: 0xadf): com_sv_running
    <140c>   DW_AT_decl_file   : 16
    <140d>   DW_AT_decl_line   : 1004
    <140f>   DW_AT_decl_column : 16
    <1410>   DW_AT_type        : <0x89f>
    <1414>   DW_AT_external    : 1
    <1414>   DW_AT_declaration : 1
 <1><1414>: Abbrev Number: 10 (DW_TAG_variable)
    <1415>   DW_AT_name        : (indirect string, offset: 0x78): vm_rtChecks
    <1419>   DW_AT_decl_file   : 16
    <141a>   DW_AT_decl_line   : 1013
    <141c>   DW_AT_decl_column : 16
    <141d>   DW_AT_type        : <0x89f>
    <1421>   DW_AT_external    : 1
    <1421>   DW_AT_declaration : 1
 <1><1421>: Abbrev Number: 10 (DW_TAG_variable)
    <1422>   DW_AT_name        : (indirect string, offset: 0x1742): com_affinityMask
    <1426>   DW_AT_decl_file   : 16
    <1427>   DW_AT_decl_line   : 1015
    <1429>   DW_AT_decl_column : 16
    <142a>   DW_AT_type        : <0x89f>
    <142e>   DW_AT_external    : 1
    <142e>   DW_AT_declaration : 1
 <1><142e>: Abbrev Number: 10 (DW_TAG_variable)
    <142f>   DW_AT_name        : (indirect string, offset: 0xd7d): time_game
    <1433>   DW_AT_decl_file   : 16
    <1434>   DW_AT_decl_line   : 1019
    <1436>   DW_AT_decl_column : 13
    <1437>   DW_AT_type        : <0x6f>
    <143b>   DW_AT_external    : 1
    <143b>   DW_AT_declaration : 1
 <1><143b>: Abbrev Number: 10 (DW_TAG_variable)
    <143c>   DW_AT_name        : (indirect string, offset: 0xeb0): time_frontend
    <1440>   DW_AT_decl_file   : 16
    <1441>   DW_AT_decl_line   : 1020
    <1443>   DW_AT_decl_column : 13
    <1444>   DW_AT_type        : <0x6f>
    <1448>   DW_AT_external    : 1
    <1448>   DW_AT_declaration : 1
 <1><1448>: Abbrev Number: 10 (DW_TAG_variable)
    <1449>   DW_AT_name        : (indirect string, offset: 0xaee): time_backend
    <144d>   DW_AT_decl_file   : 16
    <144e>   DW_AT_decl_line   : 1021
    <1450>   DW_AT_decl_column : 13
    <1451>   DW_AT_type        : <0x6f>
    <1455>   DW_AT_external    : 1
    <1455>   DW_AT_declaration : 1
 <1><1455>: Abbrev Number: 10 (DW_TAG_variable)
    <1456>   DW_AT_name        : (indirect string, offset: 0xbee): com_frameTime
    <145a>   DW_AT_decl_file   : 16
    <145b>   DW_AT_decl_line   : 1023
    <145d>   DW_AT_decl_column : 13
    <145e>   DW_AT_type        : <0x6f>
    <1462>   DW_AT_external    : 1
    <1462>   DW_AT_declaration : 1
 <1><1462>: Abbrev Number: 10 (DW_TAG_variable)
    <1463>   DW_AT_name        : (indirect string, offset: 0xace): com_errorEntered
    <1467>   DW_AT_decl_file   : 16
    <1468>   DW_AT_decl_line   : 1030
    <146a>   DW_AT_decl_column : 17
    <146b>   DW_AT_type        : <0x483>
    <146f>   DW_AT_external    : 1
    <146f>   DW_AT_declaration : 1
 <1><146f>: Abbrev Number: 10 (DW_TAG_variable)
    <1470>   DW_AT_name        : (indirect string, offset: 0xd69): com_journalDataFile
    <1474>   DW_AT_decl_file   : 16
    <1475>   DW_AT_decl_line   : 1032
    <1477>   DW_AT_decl_column : 21
    <1478>   DW_AT_type        : <0x49f>
    <147c>   DW_AT_external    : 1
    <147c>   DW_AT_declaration : 1
 <1><147c>: Abbrev Number: 10 (DW_TAG_variable)
    <147d>   DW_AT_name        : (indirect string, offset: 0x159d): rconPassword2
    <1481>   DW_AT_decl_file   : 16
    <1482>   DW_AT_decl_line   : 1034
    <1484>   DW_AT_decl_column : 13
    <1485>   DW_AT_type        : <0x8a5>
    <1489>   DW_AT_external    : 1
    <1489>   DW_AT_declaration : 1
 <1><1489>: Abbrev Number: 20 (DW_TAG_enumeration_type)
    <148a>   DW_AT_encoding    : 7	(unsigned)
    <148b>   DW_AT_byte_size   : 4
    <148c>   DW_AT_type        : <0x3b>
    <1490>   DW_AT_decl_file   : 17
    <1491>   DW_AT_decl_line   : 57
    <1492>   DW_AT_decl_column : 14
    <1493>   DW_AT_sibling     : <0x1606>
 <2><1497>: Abbrev Number: 21 (DW_TAG_enumerator)
    <1498>   DW_AT_name        : (indirect string, offset: 0xece): OP_UNDEF
    <149c>   DW_AT_const_value : 0
 <2><149d>: Abbrev Number: 21 (DW_TAG_enumerator)
    <149e>   DW_AT_name        : (indirect string, offset: 0x58a): OP_IGNORE
    <14a2>   DW_AT_const_value : 1
 <2><14a3>: Abbrev Number: 21 (DW_TAG_enumerator)
    <14a4>   DW_AT_name        : (indirect string, offset: 0xf18): OP_BREAK
    <14a8>   DW_AT_const_value : 2
 <2><14a9>: Abbrev Number: 21 (DW_TAG_enumerator)
    <14aa>   DW_AT_name        : (indirect string, offset: 0x84): OP_ENTER
    <14ae>   DW_AT_const_value : 3
 <2><14af>: Abbrev Number: 21 (DW_TAG_enumerator)
    <14b0>   DW_AT_name        : (indirect string, offset: 0x8eb): OP_LEAVE
    <14b4>   DW_AT_const_value : 4
 <2><14b5>: Abbrev Number: 21 (DW_TAG_enumerator)
    <14b6>   DW_AT_name        : (indirect string, offset: 0xe56): OP_CALL
    <14ba>   DW_AT_const_value : 5
 <2><14bb>: Abbrev Number: 21 (DW_TAG_enumerator)
    <14bc>   DW_AT_name        : (indirect string, offset: 0x18df): OP_PUSH
    <14c0>   DW_AT_const_value : 6
 <2><14c1>: Abbrev Number: 21 (DW_TAG_enumerator)
    <14c2>   DW_AT_name        : (indirect string, offset: 0x1c73): OP_POP
    <14c6>   DW_AT_const_value : 7
 <2><14c7>: Abbrev Number: 21 (DW_TAG_enumerator)
    <14c8>   DW_AT_name        : (indirect string, offset: 0x1075): OP_CONST
    <14cc>   DW_AT_const_value : 8
 <2><14cd>: Abbrev Number: 21 (DW_TAG_enumerator)
    <14ce>   DW_AT_name        : (indirect string, offset: 0x196e): OP_LOCAL
    <14d2>   DW_AT_const_value : 9
 <2><14d3>: Abbrev Number: 21 (DW_TAG_enumerator)
    <14d4>   DW_AT_name        : (indirect string, offset: 0x1928): OP_JUMP
    <14d8>   DW_AT_const_value : 10
 <2><14d9>: Abbrev Number: 21 (DW_TAG_enumerator)
    <14da>   DW_AT_name        : (indirect string, offset: 0x99): OP_EQ
    <14de>   DW_AT_const_value : 11
 <2><14df>: Abbrev Number: 21 (DW_TAG_enumerator)
    <14e0>   DW_AT_name        : (indirect string, offset: 0x1550): OP_NE
    <14e4>   DW_AT_const_value : 12
 <2><14e5>: Abbrev Number: 21 (DW_TAG_enumerator)
    <14e6>   DW_AT_name        : (indirect string, offset: 0x5de): OP_LTI
    <14ea>   DW_AT_const_value : 13
 <2><14eb>: Abbrev Number: 21 (DW_TAG_enumerator)
    <14ec>   DW_AT_name        : (indirect string, offset: 0xa40): OP_LEI
    <14f0>   DW_AT_const_value : 14
 <2><14f1>: Abbrev Number: 21 (DW_TAG_enumerator)
    <14f2>   DW_AT_name        : (indirect string, offset: 0x3dc): OP_GTI
    <14f6>   DW_AT_const_value : 15
 <2><14f7>: Abbrev Number: 21 (DW_TAG_enumerator)
    <14f8>   DW_AT_name        : (indirect string, offset: 0x1b51): OP_GEI
    <14fc>   DW_AT_const_value : 16
 <2><14fd>: Abbrev Number: 21 (DW_TAG_enumerator)
    <14fe>   DW_AT_name        : (indirect string, offset: 0x12ca): OP_LTU
    <1502>   DW_AT_const_value : 17
 <2><1503>: Abbrev Number: 21 (DW_TAG_enumerator)
    <1504>   DW_AT_name        : (indirect string, offset: 0xa79): OP_LEU
    <1508>   DW_AT_const_value : 18
 <2><1509>: Abbrev Number: 21 (DW_TAG_enumerator)
    <150a>   DW_AT_name        : (indirect string, offset: 0x3f6): OP_GTU
    <150e>   DW_AT_const_value : 19
 <2><150f>: Abbrev Number: 21 (DW_TAG_enumerator)
    <1510>   DW_AT_name        : (indirect string, offset: 0x1b77): OP_GEU
    <1514>   DW_AT_const_value : 20
 <2><1515>: Abbrev Number: 21 (DW_TAG_enumerator)
    <1516>   DW_AT_name        : (indirect string, offset: 0x1b70): OP_EQF
    <151a>   DW_AT_const_value : 21
 <2><151b>: Abbrev Number: 21 (DW_TAG_enumerator)
    <151c>   DW_AT_name        : (indirect string, offset: 0x1117): OP_NEF
    <1520>   DW_AT_const_value : 22
 <2><1521>: Abbrev Number: 21 (DW_TAG_enumerator)
    <1522>   DW_AT_name        : (indirect string, offset: 0x12af): OP_LTF
    <1526>   DW_AT_const_value : 23
 <2><1527>: Abbrev Number: 21 (DW_TAG_enumerator)
    <1528>   DW_AT_name        : (indirect string, offset: 0xa21): OP_LEF
    <152c>   DW_AT_const_value : 24
 <2><152d>: Abbrev Number: 21 (DW_TAG_enumerator)
    <152e>   DW_AT_name        : (indirect string, offset: 0x3d5): OP_GTF
    <1532>   DW_AT_const_value : 25
 <2><1533>: Abbrev Number: 21 (DW_TAG_enumerator)
    <1534>   DW_AT_name        : (indirect string, offset: 0x1b4a): OP_GEF
    <1538>   DW_AT_const_value : 26
 <2><1539>: Abbrev Number: 21 (DW_TAG_enumerator)
    <153a>   DW_AT_name        : (indirect string, offset: 0x1a1d): OP_LOAD1
    <153e>   DW_AT_const_value : 27
 <2><153f>: Abbrev Number: 21 (DW_TAG_enumerator)
    <1540>   DW_AT_name        : (indirect string, offset: 0x1a26): OP_LOAD2
    <1544>   DW_AT_const_value : 28
 <2><1545>: Abbrev Number: 21 (DW_TAG_enumerator)
    <1546>   DW_AT_name        : (indirect string, offset: 0x1a2f): OP_LOAD4
    <154a>   DW_AT_const_value : 29
 <2><154b>: Abbrev Number: 21 (DW_TAG_enumerator)
    <154c>   DW_AT_name        : (indirect string, offset: 0x1f2b): OP_STORE1
    <1550>   DW_AT_const_value : 30
 <2><1551>: Abbrev Number: 21 (DW_TAG_enumerator)
    <1552>   DW_AT_name        : (indirect string, offset: 0x1f35): OP_STORE2
    <1556>   DW_AT_const_value : 31
 <2><1557>: Abbrev Number: 21 (DW_TAG_enumerator)
    <1558>   DW_AT_name        : (indirect string, offset: 0x1f3f): OP_STORE4
    <155c>   DW_AT_const_value : 32
 <2><155d>: Abbrev Number: 21 (DW_TAG_enumerator)
    <155e>   DW_AT_name        : (indirect string, offset: 0xf6d): OP_ARG
    <1562>   DW_AT_const_value : 33
 <2><1563>: Abbrev Number: 21 (DW_TAG_enumerator)
    <1564>   DW_AT_name        : (indirect string, offset: 0x299): OP_BLOCK_COPY
    <1568>   DW_AT_const_value : 34
 <2><1569>: Abbrev Number: 21 (DW_TAG_enumerator)
    <156a>   DW_AT_name        : (indirect string, offset: 0x1816): OP_SEX8
    <156e>   DW_AT_const_value : 35
 <2><156f>: Abbrev Number: 21 (DW_TAG_enumerator)
    <1570>   DW_AT_name        : (indirect string, offset: 0x3fd): OP_SEX16
    <1574>   DW_AT_const_value : 36
 <2><1575>: Abbrev Number: 21 (DW_TAG_enumerator)
    <1576>   DW_AT_name        : (indirect string, offset: 0x253): OP_NEGI
    <157a>   DW_AT_const_value : 37
 <2><157b>: Abbrev Number: 21 (DW_TAG_enumerator)
    <157c>   DW_AT_name        : (indirect string, offset: 0x7e4): OP_ADD
    <1580>   DW_AT_const_value : 38
 <2><1581>: Abbrev Number: 21 (DW_TAG_enumerator)
    <1582>   DW_AT_name        : (indirect string, offset: 0x843): OP_SUB
    <1586>   DW_AT_const_value : 39
 <2><1587>: Abbrev Number: 21 (DW_TAG_enumerator)
    <1588>   DW_AT_name        : (indirect string, offset: 0x1be6): OP_DIVI
    <158c>   DW_AT_const_value : 40
 <2><158d>: Abbrev Number: 21 (DW_TAG_enumerator)
    <158e>   DW_AT_name        : (indirect string, offset: 0x1c05): OP_DIVU
    <1592>   DW_AT_const_value : 41
 <2><1593>: Abbrev Number: 21 (DW_TAG_enumerator)
    <1594>   DW_AT_name        : (indirect string, offset: 0xa8e): OP_MODI
    <1598>   DW_AT_const_value : 42
 <2><1599>: Abbrev Number: 21 (DW_TAG_enumerator)
    <159a>   DW_AT_name        : (indirect string, offset: 0xff5): OP_MODU
    <159e>   DW_AT_const_value : 43
 <2><159f>: Abbrev Number: 21 (DW_TAG_enumerator)
    <15a0>   DW_AT_name        : (indirect string, offset: 0x68a): OP_MULI
    <15a4>   DW_AT_const_value : 44
 <2><15a5>: Abbrev Number: 21 (DW_TAG_enumerator)
    <15a6>   DW_AT_name        : (indirect string, offset: 0x6a6): OP_MULU
    <15aa>   DW_AT_const_value : 45
 <2><15ab>: Abbrev Number: 21 (DW_TAG_enumerator)
    <15ac>   DW_AT_name        : (indirect string, offset: 0x54): OP_BAND
    <15b0>   DW_AT_const_value : 46
 <2><15b1>: Abbrev Number: 21 (DW_TAG_enumerator)
    <15b2>   DW_AT_name        : (indirect string, offset: 0x1167): OP_BOR
    <15b6>   DW_AT_const_value : 47
 <2><15b7>: Abbrev Number: 21 (DW_TAG_enumerator)
    <15b8>   DW_AT_name        : (indirect string, offset: 0x7aa): OP_BXOR
    <15bc>   DW_AT_const_value : 48
 <2><15bd>: Abbrev Number: 21 (DW_TAG_enumerator)
    <15be>   DW_AT_name        : (indirect string, offset: 0x6ae): OP_BCOM
    <15c2>   DW_AT_const_value : 49
 <2><15c3>: Abbrev Number: 21 (DW_TAG_enumerator)
    <15c4>   DW_AT_name        : (indirect string, offset: 0x1210): OP_LSH
    <15c8>   DW_AT_const_value : 50
 <2><15c9>: Abbrev Number: 21 (DW_TAG_enumerator)
    <15ca>   DW_AT_name        : (indirect string, offset: 0xb45): OP_RSHI
    <15ce>   DW_AT_const_value : 51
 <2><15cf>: Abbrev Number: 21 (DW_TAG_enumerator)
    <15d0>   DW_AT_name        : (indirect string, offset: 0xb59): OP_RSHU
    <15d4>   DW_AT_const_value : 52
 <2><15d5>: Abbrev Number: 21 (DW_TAG_enumerator)
    <15d6>   DW_AT_name        : (indirect string, offset: 0x24b): OP_NEGF
    <15da>   DW_AT_const_value : 53
 <2><15db>: Abbrev Number: 21 (DW_TAG_enumerator)
    <15dc>   DW_AT_name        : (indirect string, offset: 0x150f): OP_ADDF
    <15e0>   DW_AT_const_value : 54
 <2><15e1>: Abbrev Number: 21 (DW_TAG_enumerator)
    <15e2>   DW_AT_name        : (indirect string, offset: 0x1d9a): OP_SUBF
    <15e6>   DW_AT_const_value : 55
 <2><15e7>: Abbrev Number: 21 (DW_TAG_enumerator)
    <15e8>   DW_AT_name        : (indirect string, offset: 0x1bd8): OP_DIVF
    <15ec>   DW_AT_const_value : 56
 <2><15ed>: Abbrev Number: 21 (DW_TAG_enumerator)
    <15ee>   DW_AT_name        : (indirect string, offset: 0x66f): OP_MULF
    <15f2>   DW_AT_const_value : 57
 <2><15f3>: Abbrev Number: 21 (DW_TAG_enumerator)
    <15f4>   DW_AT_name        : (indirect string, offset: 0x1b8c): OP_CVIF
    <15f8>   DW_AT_const_value : 58
 <2><15f9>: Abbrev Number: 21 (DW_TAG_enumerator)
    <15fa>   DW_AT_name        : (indirect string, offset: 0xbd3): OP_CVFI
    <15fe>   DW_AT_const_value : 59
 <2><15ff>: Abbrev Number: 21 (DW_TAG_enumerator)
    <1600>   DW_AT_name        : (indirect string, offset: 0xb9f): OP_MAX
    <1604>   DW_AT_const_value : 60
 <2><1605>: Abbrev Number: 0
 <1><1606>: Abbrev Number: 14 (DW_TAG_structure_type)
    <1607>   DW_AT_name        : (indirect string, offset: 0x7c4): vmSymbol_s
    <160b>   DW_AT_byte_size   : 24
    <160c>   DW_AT_decl_file   : 17
    <160d>   DW_AT_decl_line   : 158
    <160e>   DW_AT_decl_column : 16
    <160f>   DW_AT_sibling     : <0x1648>
 <2><1613>: Abbrev Number: 15 (DW_TAG_member)
    <1614>   DW_AT_name        : (indirect string, offset: 0x220): next
    <1618>   DW_AT_decl_file   : 17
    <1619>   DW_AT_decl_line   : 159
    <161a>   DW_AT_decl_column : 21
    <161b>   DW_AT_type        : <0x1648>
    <161f>   DW_AT_data_member_location: 0
 <2><1620>: Abbrev Number: 15 (DW_TAG_member)
    <1621>   DW_AT_name        : (indirect string, offset: 0x184f): symValue
    <1625>   DW_AT_decl_file   : 17
    <1626>   DW_AT_decl_line   : 160
    <1627>   DW_AT_decl_column : 7
    <1628>   DW_AT_type        : <0x6f>
    <162c>   DW_AT_data_member_location: 8
 <2><162d>: Abbrev Number: 15 (DW_TAG_member)
    <162e>   DW_AT_name        : (indirect string, offset: 0x1eed): profileCount
    <1632>   DW_AT_decl_file   : 17
    <1633>   DW_AT_decl_line   : 161
    <1634>   DW_AT_decl_column : 7
    <1635>   DW_AT_type        : <0x6f>
    <1639>   DW_AT_data_member_location: 12
 <2><163a>: Abbrev Number: 15 (DW_TAG_member)
    <163b>   DW_AT_name        : (indirect string, offset: 0xd20): symName
    <163f>   DW_AT_decl_file   : 17
    <1640>   DW_AT_decl_line   : 162
    <1641>   DW_AT_decl_column : 7
    <1642>   DW_AT_type        : <0x2ff>
    <1646>   DW_AT_data_member_location: 16
 <2><1647>: Abbrev Number: 0
 <1><1648>: Abbrev Number: 9 (DW_TAG_pointer_type)
    <1649>   DW_AT_byte_size   : 8
    <164a>   DW_AT_type        : <0x1606>
 <1><164e>: Abbrev Number: 3 (DW_TAG_typedef)
    <164f>   DW_AT_name        : (indirect string, offset: 0xa07): vmSymbol_t
    <1653>   DW_AT_decl_file   : 17
    <1654>   DW_AT_decl_line   : 163
    <1655>   DW_AT_decl_column : 3
    <1656>   DW_AT_type        : <0x1606>
 <1><165a>: Abbrev Number: 42 (DW_TAG_union_type)
    <165b>   DW_AT_name        : (indirect string, offset: 0x1c93): vmFunc_u
    <165f>   DW_AT_byte_size   : 8
    <1660>   DW_AT_decl_file   : 17
    <1661>   DW_AT_decl_line   : 167
    <1662>   DW_AT_decl_column : 15
    <1663>   DW_AT_sibling     : <0x1680>
 <2><1667>: Abbrev Number: 37 (DW_TAG_member)
    <1668>   DW_AT_name        : ptr
    <166c>   DW_AT_decl_file   : 17
    <166d>   DW_AT_decl_line   : 168
    <166e>   DW_AT_decl_column : 9
    <166f>   DW_AT_type        : <0xec1>
 <2><1673>: Abbrev Number: 43 (DW_TAG_member)
    <1674>   DW_AT_name        : (indirect string, offset: 0x1264): func
    <1678>   DW_AT_decl_file   : 17
    <1679>   DW_AT_decl_line   : 169
    <167a>   DW_AT_decl_column : 9
    <167b>   DW_AT_type        : <0x12f9>
 <2><167f>: Abbrev Number: 0
 <1><1680>: Abbrev Number: 3 (DW_TAG_typedef)
    <1681>   DW_AT_name        : (indirect string, offset: 0x1c8a): vmFunc_t
    <1685>   DW_AT_decl_file   : 17
    <1686>   DW_AT_decl_line   : 170
    <1687>   DW_AT_decl_column : 3
    <1688>   DW_AT_type        : <0x165a>
 <1><168c>: Abbrev Number: 44 (DW_TAG_subroutine_type)
    <168d>   DW_AT_prototyped  : 1
    <168d>   DW_AT_sibling     : <0x1697>
 <2><1691>: Abbrev Number: 26 (DW_TAG_formal_parameter)
    <1692>   DW_AT_type        : <0x1697>
 <2><1696>: Abbrev Number: 0
 <1><1697>: Abbrev Number: 9 (DW_TAG_pointer_type)
    <1698>   DW_AT_byte_size   : 8
    <1699>   DW_AT_type        : <0x1103>
 <1><169d>: Abbrev Number: 9 (DW_TAG_pointer_type)
    <169e>   DW_AT_byte_size   : 8
    <169f>   DW_AT_type        : <0x168c>
 <1><16a3>: Abbrev Number: 9 (DW_TAG_pointer_type)
    <16a4>   DW_AT_byte_size   : 8
    <16a5>   DW_AT_type        : <0x164e>
 <1><16a9>: Abbrev Number: 14 (DW_TAG_structure_type)
    <16aa>   DW_AT_name        : (indirect string, offset: 0x1e2a): opcode_info_s
    <16ae>   DW_AT_byte_size   : 16
    <16af>   DW_AT_decl_file   : 17
    <16b0>   DW_AT_decl_line   : 249
    <16b1>   DW_AT_decl_column : 16
    <16b2>   DW_AT_sibling     : <0x16eb>
 <2><16b6>: Abbrev Number: 15 (DW_TAG_member)
    <16b7>   DW_AT_name        : (indirect string, offset: 0x94f): size
    <16bb>   DW_AT_decl_file   : 17
    <16bc>   DW_AT_decl_line   : 251
    <16bd>   DW_AT_decl_column : 6
    <16be>   DW_AT_type        : <0x6f>
    <16c2>   DW_AT_data_member_location: 0
 <2><16c3>: Abbrev Number: 15 (DW_TAG_member)
    <16c4>   DW_AT_name        : (indirect string, offset: 0x84a): stack
    <16c8>   DW_AT_decl_file   : 17
    <16c9>   DW_AT_decl_line   : 252
    <16ca>   DW_AT_decl_column : 6
    <16cb>   DW_AT_type        : <0x6f>
    <16cf>   DW_AT_data_member_location: 4
 <2><16d0>: Abbrev Number: 15 (DW_TAG_member)
    <16d1>   DW_AT_name        : (indirect string, offset: 0x1be0): nargs
    <16d5>   DW_AT_decl_file   : 17
    <16d6>   DW_AT_decl_line   : 253
    <16d7>   DW_AT_decl_column : 6
    <16d8>   DW_AT_type        : <0x6f>
    <16dc>   DW_AT_data_member_location: 8
 <2><16dd>: Abbrev Number: 15 (DW_TAG_member)
    <16de>   DW_AT_name        : (indirect string, offset: 0x1f49): flags
    <16e2>   DW_AT_decl_file   : 17
    <16e3>   DW_AT_decl_line   : 254
    <16e4>   DW_AT_decl_column : 6
    <16e5>   DW_AT_type        : <0x6f>
    <16e9>   DW_AT_data_member_location: 12
 <2><16ea>: Abbrev Number: 0
 <1><16eb>: Abbrev Number: 3 (DW_TAG_typedef)
    <16ec>   DW_AT_name        : (indirect string, offset: 0x1e73): opcode_info_t
    <16f0>   DW_AT_decl_file   : 17
    <16f1>   DW_AT_decl_line   : 255
    <16f2>   DW_AT_decl_column : 3
    <16f3>   DW_AT_type        : <0x16a9>
 <1><16f7>: Abbrev Number: 6 (DW_TAG_array_type)
    <16f8>   DW_AT_type        : <0x16eb>
    <16fc>   DW_AT_sibling     : <0x1707>
 <2><1700>: Abbrev Number: 7 (DW_TAG_subrange_type)
    <1701>   DW_AT_type        : <0x42>
    <1705>   DW_AT_upper_bound : 59
 <2><1706>: Abbrev Number: 0
 <1><1707>: Abbrev Number: 45 (DW_TAG_variable)
    <1708>   DW_AT_name        : ops
    <170c>   DW_AT_decl_file   : 17
    <170d>   DW_AT_decl_line   : 257
    <170f>   DW_AT_decl_column : 22
    <1710>   DW_AT_type        : <0x16f7>
    <1714>   DW_AT_external    : 1
    <1714>   DW_AT_declaration : 1
 <1><1714>: Abbrev Number: 38 (DW_TAG_structure_type)
    <1715>   DW_AT_byte_size   : 308
    <1717>   DW_AT_decl_file   : 18
    <1718>   DW_AT_decl_line   : 56
    <1719>   DW_AT_decl_column : 9
    <171a>   DW_AT_sibling     : <0x17d8>
 <2><171e>: Abbrev Number: 35 (DW_TAG_member)
    <171f>   DW_AT_name        : s
    <1721>   DW_AT_decl_file   : 18
    <1722>   DW_AT_decl_line   : 57
    <1723>   DW_AT_decl_column : 16
    <1724>   DW_AT_type        : <0xe25>
    <1728>   DW_AT_data_member_location: 0
 <2><1729>: Abbrev Number: 15 (DW_TAG_member)
    <172a>   DW_AT_name        : (indirect string, offset: 0xe25): linked
    <172e>   DW_AT_decl_file   : 18
    <172f>   DW_AT_decl_line   : 59
    <1730>   DW_AT_decl_column : 11
    <1731>   DW_AT_type        : <0x483>
    <1735>   DW_AT_data_member_location: 208
 <2><1736>: Abbrev Number: 15 (DW_TAG_member)
    <1737>   DW_AT_name        : (indirect string, offset: 0xf05): linkcount
    <173b>   DW_AT_decl_file   : 18
    <173c>   DW_AT_decl_line   : 60
    <173d>   DW_AT_decl_column : 8
    <173e>   DW_AT_type        : <0x6f>
    <1742>   DW_AT_data_member_location: 212
 <2><1743>: Abbrev Number: 15 (DW_TAG_member)
    <1744>   DW_AT_name        : (indirect string, offset: 0x5ac): svFlags
    <1748>   DW_AT_decl_file   : 18
    <1749>   DW_AT_decl_line   : 62
    <174a>   DW_AT_decl_column : 8
    <174b>   DW_AT_type        : <0x6f>
    <174f>   DW_AT_data_member_location: 216
 <2><1750>: Abbrev Number: 15 (DW_TAG_member)
    <1751>   DW_AT_name        : (indirect string, offset: 0xf8f): singleClient
    <1755>   DW_AT_decl_file   : 18
    <1756>   DW_AT_decl_line   : 66
    <1757>   DW_AT_decl_column : 8
    <1758>   DW_AT_type        : <0x6f>
    <175c>   DW_AT_data_member_location: 220
 <2><175d>: Abbrev Number: 15 (DW_TAG_member)
    <175e>   DW_AT_name        : (indirect string, offset: 0x1936): bmodel
    <1762>   DW_AT_decl_file   : 18
    <1763>   DW_AT_decl_line   : 68
    <1764>   DW_AT_decl_column : 11
    <1765>   DW_AT_type        : <0x483>
    <1769>   DW_AT_data_member_location: 224
 <2><176a>: Abbrev Number: 15 (DW_TAG_member)
    <176b>   DW_AT_name        : (indirect string, offset: 0x1950): mins
    <176f>   DW_AT_decl_file   : 18
    <1770>   DW_AT_decl_line   : 70
    <1771>   DW_AT_decl_column : 10
    <1772>   DW_AT_type        : <0x4bd>
    <1776>   DW_AT_data_member_location: 228
 <2><1777>: Abbrev Number: 15 (DW_TAG_member)
    <1778>   DW_AT_name        : (indirect string, offset: 0x5be): maxs
    <177c>   DW_AT_decl_file   : 18
    <177d>   DW_AT_decl_line   : 70
    <177e>   DW_AT_decl_column : 16
    <177f>   DW_AT_type        : <0x4bd>
    <1783>   DW_AT_data_member_location: 240
 <2><1784>: Abbrev Number: 15 (DW_TAG_member)
    <1785>   DW_AT_name        : (indirect string, offset: 0x8d1): contents
    <1789>   DW_AT_decl_file   : 18
    <178a>   DW_AT_decl_line   : 71
    <178b>   DW_AT_decl_column : 8
    <178c>   DW_AT_type        : <0x6f>
    <1790>   DW_AT_data_member_location: 252
 <2><1791>: Abbrev Number: 39 (DW_TAG_member)
    <1792>   DW_AT_name        : (indirect string, offset: 0xa47): absmin
    <1796>   DW_AT_decl_file   : 18
    <1797>   DW_AT_decl_line   : 74
    <1798>   DW_AT_decl_column : 10
    <1799>   DW_AT_type        : <0x4bd>
    <179d>   DW_AT_data_member_location: 256
 <2><179f>: Abbrev Number: 39 (DW_TAG_member)
    <17a0>   DW_AT_name        : (indirect string, offset: 0x692): absmax
    <17a4>   DW_AT_decl_file   : 18
    <17a5>   DW_AT_decl_line   : 74
    <17a6>   DW_AT_decl_column : 18
    <17a7>   DW_AT_type        : <0x4bd>
    <17ab>   DW_AT_data_member_location: 268
 <2><17ad>: Abbrev Number: 39 (DW_TAG_member)
    <17ae>   DW_AT_name        : (indirect string, offset: 0x1419): currentOrigin
    <17b2>   DW_AT_decl_file   : 18
    <17b3>   DW_AT_decl_line   : 80
    <17b4>   DW_AT_decl_column : 10
    <17b5>   DW_AT_type        : <0x4bd>
    <17b9>   DW_AT_data_member_location: 280
 <2><17bb>: Abbrev Number: 39 (DW_TAG_member)
    <17bc>   DW_AT_name        : (indirect string, offset: 0x862): currentAngles
    <17c0>   DW_AT_decl_file   : 18
    <17c1>   DW_AT_decl_line   : 81
    <17c2>   DW_AT_decl_column : 10
    <17c3>   DW_AT_type        : <0x4bd>
    <17c7>   DW_AT_data_member_location: 292
 <2><17c9>: Abbrev Number: 39 (DW_TAG_member)
    <17ca>   DW_AT_name        : (indirect string, offset: 0x1238): ownerNum
    <17ce>   DW_AT_decl_file   : 18
    <17cf>   DW_AT_decl_line   : 88
    <17d0>   DW_AT_decl_column : 8
    <17d1>   DW_AT_type        : <0x6f>
    <17d5>   DW_AT_data_member_location: 304
 <2><17d7>: Abbrev Number: 0
 <1><17d8>: Abbrev Number: 3 (DW_TAG_typedef)
    <17d9>   DW_AT_name        : (indirect string, offset: 0x1891): entityShared_t
    <17dd>   DW_AT_decl_file   : 18
    <17de>   DW_AT_decl_line   : 89
    <17df>   DW_AT_decl_column : 3
    <17e0>   DW_AT_type        : <0x1714>
 <1><17e4>: Abbrev Number: 38 (DW_TAG_structure_type)
    <17e5>   DW_AT_byte_size   : 516
    <17e7>   DW_AT_decl_file   : 18
    <17e8>   DW_AT_decl_line   : 94
    <17e9>   DW_AT_decl_column : 9
    <17ea>   DW_AT_sibling     : <0x1805>
 <2><17ee>: Abbrev Number: 35 (DW_TAG_member)
    <17ef>   DW_AT_name        : s
    <17f1>   DW_AT_decl_file   : 18
    <17f2>   DW_AT_decl_line   : 95
    <17f3>   DW_AT_decl_column : 16
    <17f4>   DW_AT_type        : <0xe25>
    <17f8>   DW_AT_data_member_location: 0
 <2><17f9>: Abbrev Number: 35 (DW_TAG_member)
    <17fa>   DW_AT_name        : r
    <17fc>   DW_AT_decl_file   : 18
    <17fd>   DW_AT_decl_line   : 96
    <17fe>   DW_AT_decl_column : 17
    <17ff>   DW_AT_type        : <0x17d8>
    <1803>   DW_AT_data_member_location: 208
 <2><1804>: Abbrev Number: 0
 <1><1805>: Abbrev Number: 3 (DW_TAG_typedef)
    <1806>   DW_AT_name        : (indirect string, offset: 0xa12): sharedEntity_t
    <180a>   DW_AT_decl_file   : 18
    <180b>   DW_AT_decl_line   : 97
    <180c>   DW_AT_decl_column : 3
    <180d>   DW_AT_type        : <0x17e4>
 <1><1811>: Abbrev Number: 23 (DW_TAG_enumeration_type)
    <1812>   DW_AT_encoding    : 7	(unsigned)
    <1813>   DW_AT_byte_size   : 4
    <1814>   DW_AT_type        : <0x3b>
    <1818>   DW_AT_decl_file   : 18
    <1819>   DW_AT_decl_line   : 408
    <181b>   DW_AT_decl_column : 14
    <181c>   DW_AT_sibling     : <0x1869>
 <2><1820>: Abbrev Number: 21 (DW_TAG_enumerator)
    <1821>   DW_AT_name        : (indirect string, offset: 0x516): GAME_INIT
    <1825>   DW_AT_const_value : 0
 <2><1826>: Abbrev Number: 21 (DW_TAG_enumerator)
    <1827>   DW_AT_name        : (indirect string, offset: 0x28b): GAME_SHUTDOWN
    <182b>   DW_AT_const_value : 1
 <2><182c>: Abbrev Number: 21 (DW_TAG_enumerator)
    <182d>   DW_AT_name        : (indirect string, offset: 0xd33): GAME_CLIENT_CONNECT
    <1831>   DW_AT_const_value : 2
 <2><1832>: Abbrev Number: 21 (DW_TAG_enumerator)
    <1833>   DW_AT_name        : (indirect string, offset: 0x1cf9): GAME_CLIENT_BEGIN
    <1837>   DW_AT_const_value : 3
 <2><1838>: Abbrev Number: 21 (DW_TAG_enumerator)
    <1839>   DW_AT_name        : (indirect string, offset: 0xc83): GAME_CLIENT_USERINFO_CHANGED
    <183d>   DW_AT_const_value : 4
 <2><183e>: Abbrev Number: 21 (DW_TAG_enumerator)
    <183f>   DW_AT_name        : (indirect string, offset: 0x16b6): GAME_CLIENT_DISCONNECT
    <1843>   DW_AT_const_value : 5
 <2><1844>: Abbrev Number: 21 (DW_TAG_enumerator)
    <1845>   DW_AT_name        : (indirect string, offset: 0xcfc): GAME_CLIENT_COMMAND
    <1849>   DW_AT_const_value : 6
 <2><184a>: Abbrev Number: 21 (DW_TAG_enumerator)
    <184b>   DW_AT_name        : (indirect string, offset: 0x850): GAME_CLIENT_THINK
    <184f>   DW_AT_const_value : 7
 <2><1850>: Abbrev Number: 21 (DW_TAG_enumerator)
    <1851>   DW_AT_name        : (indirect string, offset: 0x1255): GAME_RUN_FRAME
    <1855>   DW_AT_const_value : 8
 <2><1856>: Abbrev Number: 21 (DW_TAG_enumerator)
    <1857>   DW_AT_name        : (indirect string, offset: 0xe08): GAME_CONSOLE_COMMAND
    <185b>   DW_AT_const_value : 9
 <2><185c>: Abbrev Number: 21 (DW_TAG_enumerator)
    <185d>   DW_AT_name        : (indirect string, offset: 0x1da2): BOTAI_START_FRAME
    <1861>   DW_AT_const_value : 10
 <2><1862>: Abbrev Number: 21 (DW_TAG_enumerator)
    <1863>   DW_AT_name        : (indirect string, offset: 0x9e4): GAME_EXPORT_LAST
    <1867>   DW_AT_const_value : 11
 <2><1868>: Abbrev Number: 0
 <1><1869>: Abbrev Number: 9 (DW_TAG_pointer_type)
    <186a>   DW_AT_byte_size   : 8
    <186b>   DW_AT_type        : <0xb64>
 <1><186f>: Abbrev Number: 23 (DW_TAG_enumeration_type)
    <1870>   DW_AT_encoding    : 7	(unsigned)
    <1871>   DW_AT_byte_size   : 4
    <1872>   DW_AT_type        : <0x3b>
    <1876>   DW_AT_decl_file   : 19
    <1877>   DW_AT_decl_line   : 613
    <1879>   DW_AT_decl_column : 14
    <187a>   DW_AT_sibling     : <0x18b5>
 <2><187e>: Abbrev Number: 21 (DW_TAG_enumerator)
    <187f>   DW_AT_name        : (indirect string, offset: 0x18ce): IT_BAD
    <1883>   DW_AT_const_value : 0
 <2><1884>: Abbrev Number: 21 (DW_TAG_enumerator)
    <1885>   DW_AT_name        : (indirect string, offset: 0xc20): IT_WEAPON
    <1889>   DW_AT_const_value : 1
 <2><188a>: Abbrev Number: 21 (DW_TAG_enumerator)
    <188b>   DW_AT_name        : (indirect string, offset: 0x18a0): IT_AMMO
    <188f>   DW_AT_const_value : 2
 <2><1890>: Abbrev Number: 21 (DW_TAG_enumerator)
    <1891>   DW_AT_name        : (indirect string, offset: 0xe42): IT_ARMOR
    <1895>   DW_AT_const_value : 3
 <2><1896>: Abbrev Number: 21 (DW_TAG_enumerator)
    <1897>   DW_AT_name        : (indirect string, offset: 0x447): IT_HEALTH
    <189b>   DW_AT_const_value : 4
 <2><189c>: Abbrev Number: 21 (DW_TAG_enumerator)
    <189d>   DW_AT_name        : (indirect string, offset: 0x1601): IT_POWERUP
    <18a1>   DW_AT_const_value : 5
 <2><18a2>: Abbrev Number: 21 (DW_TAG_enumerator)
    <18a3>   DW_AT_name        : (indirect string, offset: 0x9b5): IT_HOLDABLE
    <18a7>   DW_AT_const_value : 6
 <2><18a8>: Abbrev Number: 21 (DW_TAG_enumerator)
    <18a9>   DW_AT_name        : (indirect string, offset: 0xe2c): IT_PERSISTANT_POWERUP
    <18ad>   DW_AT_const_value : 7
 <2><18ae>: Abbrev Number: 21 (DW_TAG_enumerator)
    <18af>   DW_AT_name        : (indirect string, offset: 0x1e55): IT_TEAM
    <18b3>   DW_AT_const_value : 8
 <2><18b4>: Abbrev Number: 0
 <1><18b5>: Abbrev Number: 22 (DW_TAG_typedef)
    <18b6>   DW_AT_name        : (indirect string, offset: 0x972): itemType_t
    <18ba>   DW_AT_decl_file   : 19
    <18bb>   DW_AT_decl_line   : 625
    <18bd>   DW_AT_decl_column : 3
    <18be>   DW_AT_type        : <0x186f>
 <1><18c2>: Abbrev Number: 28 (DW_TAG_structure_type)
    <18c3>   DW_AT_name        : (indirect string, offset: 0x15ca): gitem_s
    <18c7>   DW_AT_byte_size   : 96
    <18c8>   DW_AT_decl_file   : 19
    <18c9>   DW_AT_decl_line   : 629
    <18cb>   DW_AT_decl_column : 16
    <18cc>   DW_AT_sibling     : <0x195d>
 <2><18d0>: Abbrev Number: 29 (DW_TAG_member)
    <18d1>   DW_AT_name        : (indirect string, offset: 0x10d1): classname
    <18d5>   DW_AT_decl_file   : 19
    <18d6>   DW_AT_decl_line   : 630
    <18d8>   DW_AT_decl_column : 9
    <18d9>   DW_AT_type        : <0xb8>
    <18dd>   DW_AT_data_member_location: 0
 <2><18de>: Abbrev Number: 29 (DW_TAG_member)
    <18df>   DW_AT_name        : (indirect string, offset: 0x699): pickup_sound
    <18e3>   DW_AT_decl_file   : 19
    <18e4>   DW_AT_decl_line   : 631
    <18e6>   DW_AT_decl_column : 9
    <18e7>   DW_AT_type        : <0xb8>
    <18eb>   DW_AT_data_member_location: 8
 <2><18ec>: Abbrev Number: 29 (DW_TAG_member)
    <18ed>   DW_AT_name        : (indirect string, offset: 0xb39): world_model
    <18f1>   DW_AT_decl_file   : 19
    <18f2>   DW_AT_decl_line   : 632
    <18f4>   DW_AT_decl_column : 9
    <18f5>   DW_AT_type        : <0x195d>
    <18f9>   DW_AT_data_member_location: 16
 <2><18fa>: Abbrev Number: 29 (DW_TAG_member)
    <18fb>   DW_AT_name        : (indirect string, offset: 0x911): icon
    <18ff>   DW_AT_decl_file   : 19
    <1900>   DW_AT_decl_line   : 634
    <1902>   DW_AT_decl_column : 9
    <1903>   DW_AT_type        : <0xb8>
    <1907>   DW_AT_data_member_location: 48
 <2><1908>: Abbrev Number: 29 (DW_TAG_member)
    <1909>   DW_AT_name        : (indirect string, offset: 0x1556): pickup_name
    <190d>   DW_AT_decl_file   : 19
    <190e>   DW_AT_decl_line   : 635
    <1910>   DW_AT_decl_column : 9
    <1911>   DW_AT_type        : <0xb8>
    <1915>   DW_AT_data_member_location: 56
 <2><1916>: Abbrev Number: 29 (DW_TAG_member)
    <1917>   DW_AT_name        : (indirect string, offset: 0x1567): quantity
    <191b>   DW_AT_decl_file   : 19
    <191c>   DW_AT_decl_line   : 637
    <191e>   DW_AT_decl_column : 8
    <191f>   DW_AT_type        : <0x6f>
    <1923>   DW_AT_data_member_location: 64
 <2><1924>: Abbrev Number: 29 (DW_TAG_member)
    <1925>   DW_AT_name        : (indirect string, offset: 0x14ef): giType
    <1929>   DW_AT_decl_file   : 19
    <192a>   DW_AT_decl_line   : 638
    <192c>   DW_AT_decl_column : 14
    <192d>   DW_AT_type        : <0x18b5>
    <1931>   DW_AT_data_member_location: 68
 <2><1932>: Abbrev Number: 29 (DW_TAG_member)
    <1933>   DW_AT_name        : (indirect string, offset: 0xf52): giTag
    <1937>   DW_AT_decl_file   : 19
    <1938>   DW_AT_decl_line   : 640
    <193a>   DW_AT_decl_column : 8
    <193b>   DW_AT_type        : <0x6f>
    <193f>   DW_AT_data_member_location: 72
 <2><1940>: Abbrev Number: 29 (DW_TAG_member)
    <1941>   DW_AT_name        : (indirect string, offset: 0x5f9): precaches
    <1945>   DW_AT_decl_file   : 19
    <1946>   DW_AT_decl_line   : 642
    <1948>   DW_AT_decl_column : 9
    <1949>   DW_AT_type        : <0xb8>
    <194d>   DW_AT_data_member_location: 80
 <2><194e>: Abbrev Number: 29 (DW_TAG_member)
    <194f>   DW_AT_name        : (indirect string, offset: 0x182f): sounds
    <1953>   DW_AT_decl_file   : 19
    <1954>   DW_AT_decl_line   : 643
    <1956>   DW_AT_decl_column : 9
    <1957>   DW_AT_type        : <0xb8>
    <195b>   DW_AT_data_member_location: 88
 <2><195c>: Abbrev Number: 0
 <1><195d>: Abbrev Number: 6 (DW_TAG_array_type)
    <195e>   DW_AT_type        : <0xb8>
    <1962>   DW_AT_sibling     : <0x196d>
 <2><1966>: Abbrev Number: 7 (DW_TAG_subrange_type)
    <1967>   DW_AT_type        : <0x42>
    <196b>   DW_AT_upper_bound : 3
 <2><196c>: Abbrev Number: 0
 <1><196d>: Abbrev Number: 22 (DW_TAG_typedef)
    <196e>   DW_AT_name        : (indirect string, offset: 0x1654): gitem_t
    <1972>   DW_AT_decl_file   : 19
    <1973>   DW_AT_decl_line   : 644
    <1975>   DW_AT_decl_column : 3
    <1976>   DW_AT_type        : <0x18c2>
 <1><197a>: Abbrev Number: 6 (DW_TAG_array_type)
    <197b>   DW_AT_type        : <0x196d>
    <197f>   DW_AT_sibling     : <0x1985>
 <2><1983>: Abbrev Number: 19 (DW_TAG_subrange_type)
 <2><1984>: Abbrev Number: 0
 <1><1985>: Abbrev Number: 10 (DW_TAG_variable)
    <1986>   DW_AT_name        : (indirect string, offset: 0x19ab): bg_itemlist
    <198a>   DW_AT_decl_file   : 19
    <198b>   DW_AT_decl_line   : 647
    <198d>   DW_AT_decl_column : 16
    <198e>   DW_AT_type        : <0x197a>
    <1992>   DW_AT_external    : 1
    <1992>   DW_AT_declaration : 1
 <1><1992>: Abbrev Number: 10 (DW_TAG_variable)
    <1993>   DW_AT_name        : (indirect string, offset: 0x1d63): bg_numItems
    <1997>   DW_AT_decl_file   : 19
    <1998>   DW_AT_decl_line   : 648
    <199a>   DW_AT_decl_column : 13
    <199b>   DW_AT_type        : <0x6f>
    <199f>   DW_AT_external    : 1
    <199f>   DW_AT_declaration : 1
 <1><199f>: Abbrev Number: 46 (DW_TAG_structure_type)
    <19a0>   DW_AT_name        : (indirect string, offset: 0x1d13): svEntity_s
    <19a4>   DW_AT_byte_size   : 312
    <19a6>   DW_AT_decl_file   : 20
    <19a7>   DW_AT_decl_line   : 37
    <19a8>   DW_AT_decl_column : 16
    <19a9>   DW_AT_sibling     : <0x1a27>
 <2><19ad>: Abbrev Number: 15 (DW_TAG_member)
    <19ae>   DW_AT_name        : (indirect string, offset: 0x14db): worldSector
    <19b2>   DW_AT_decl_file   : 20
    <19b3>   DW_AT_decl_line   : 38
    <19b4>   DW_AT_decl_column : 24
    <19b5>   DW_AT_type        : <0x1a2c>
    <19b9>   DW_AT_data_member_location: 0
 <2><19ba>: Abbrev Number: 15 (DW_TAG_member)
    <19bb>   DW_AT_name        : (indirect string, offset: 0xc56): nextEntityInWorldSector
    <19bf>   DW_AT_decl_file   : 20
    <19c0>   DW_AT_decl_line   : 39
    <19c1>   DW_AT_decl_column : 21
    <19c2>   DW_AT_type        : <0x1a32>
    <19c6>   DW_AT_data_member_location: 8
 <2><19c7>: Abbrev Number: 15 (DW_TAG_member)
    <19c8>   DW_AT_name        : (indirect string, offset: 0x1c81): baseline
    <19cc>   DW_AT_decl_file   : 20
    <19cd>   DW_AT_decl_line   : 41
    <19ce>   DW_AT_decl_column : 16
    <19cf>   DW_AT_type        : <0xe25>
    <19d3>   DW_AT_data_member_location: 16
 <2><19d4>: Abbrev Number: 15 (DW_TAG_member)
    <19d5>   DW_AT_name        : (indirect string, offset: 0x17ac): numClusters
    <19d9>   DW_AT_decl_file   : 20
    <19da>   DW_AT_decl_line   : 42
    <19db>   DW_AT_decl_column : 8
    <19dc>   DW_AT_type        : <0x6f>
    <19e0>   DW_AT_data_member_location: 224
 <2><19e1>: Abbrev Number: 15 (DW_TAG_member)
    <19e2>   DW_AT_name        : (indirect string, offset: 0xe98): clusternums
    <19e6>   DW_AT_decl_file   : 20
    <19e7>   DW_AT_decl_line   : 43
    <19e8>   DW_AT_decl_column : 8
    <19e9>   DW_AT_type        : <0xb54>
    <19ed>   DW_AT_data_member_location: 228
 <2><19ee>: Abbrev Number: 39 (DW_TAG_member)
    <19ef>   DW_AT_name        : (indirect string, offset: 0xb61): lastCluster
    <19f3>   DW_AT_decl_file   : 20
    <19f4>   DW_AT_decl_line   : 44
    <19f5>   DW_AT_decl_column : 8
    <19f6>   DW_AT_type        : <0x6f>
    <19fa>   DW_AT_data_member_location: 292
 <2><19fc>: Abbrev Number: 39 (DW_TAG_member)
    <19fd>   DW_AT_name        : (indirect string, offset: 0xd47): areanum
    <1a01>   DW_AT_decl_file   : 20
    <1a02>   DW_AT_decl_line   : 45
    <1a03>   DW_AT_decl_column : 8
    <1a04>   DW_AT_type        : <0x6f>
    <1a08>   DW_AT_data_member_location: 296
 <2><1a0a>: Abbrev Number: 39 (DW_TAG_member)
    <1a0b>   DW_AT_name        : (indirect string, offset: 0x793): areanum2
    <1a0f>   DW_AT_decl_file   : 20
    <1a10>   DW_AT_decl_line   : 45
    <1a11>   DW_AT_decl_column : 17
    <1a12>   DW_AT_type        : <0x6f>
    <1a16>   DW_AT_data_member_location: 300
 <2><1a18>: Abbrev Number: 39 (DW_TAG_member)
    <1a19>   DW_AT_name        : (indirect string, offset: 0x65f): snapshotCounter
    <1a1d>   DW_AT_decl_file   : 20
    <1a1e>   DW_AT_decl_line   : 46
    <1a1f>   DW_AT_decl_column : 8
    <1a20>   DW_AT_type        : <0x6f>
    <1a24>   DW_AT_data_member_location: 304
 <2><1a26>: Abbrev Number: 0
 <1><1a27>: Abbrev Number: 17 (DW_TAG_structure_type)
    <1a28>   DW_AT_name        : (indirect string, offset: 0x1960): worldSector_s
    <1a2c>   DW_AT_declaration : 1
 <1><1a2c>: Abbrev Number: 9 (DW_TAG_pointer_type)
    <1a2d>   DW_AT_byte_size   : 8
    <1a2e>   DW_AT_type        : <0x1a27>
 <1><1a32>: Abbrev Number: 9 (DW_TAG_pointer_type)
    <1a33>   DW_AT_byte_size   : 8
    <1a34>   DW_AT_type        : <0x199f>
 <1><1a38>: Abbrev Number: 3 (DW_TAG_typedef)
    <1a39>   DW_AT_name        : (indirect string, offset: 0x1d1e): svEntity_t
    <1a3d>   DW_AT_decl_file   : 20
    <1a3e>   DW_AT_decl_line   : 47
    <1a3f>   DW_AT_decl_column : 3
    <1a40>   DW_AT_type        : <0x199f>
 <1><1a44>: Abbrev Number: 20 (DW_TAG_enumeration_type)
    <1a45>   DW_AT_encoding    : 7	(unsigned)
    <1a46>   DW_AT_byte_size   : 4
    <1a47>   DW_AT_type        : <0x3b>
    <1a4b>   DW_AT_decl_file   : 20
    <1a4c>   DW_AT_decl_line   : 49
    <1a4d>   DW_AT_decl_column : 14
    <1a4e>   DW_AT_sibling     : <0x1a65>
 <2><1a52>: Abbrev Number: 21 (DW_TAG_enumerator)
    <1a53>   DW_AT_name        : (indirect string, offset: 0xbdb): SS_DEAD
    <1a57>   DW_AT_const_value : 0
 <2><1a58>: Abbrev Number: 21 (DW_TAG_enumerator)
    <1a59>   DW_AT_name        : (indirect string, offset: 0x1abc): SS_LOADING
    <1a5d>   DW_AT_const_value : 1
 <2><1a5e>: Abbrev Number: 21 (DW_TAG_enumerator)
    <1a5f>   DW_AT_name        : (indirect string, offset: 0x14e7): SS_GAME
    <1a63>   DW_AT_const_value : 2
 <2><1a64>: Abbrev Number: 0
 <1><1a65>: Abbrev Number: 3 (DW_TAG_typedef)
    <1a66>   DW_AT_name        : (indirect string, offset: 0xbf): serverState_t
    <1a6a>   DW_AT_decl_file   : 20
    <1a6b>   DW_AT_decl_line   : 53
    <1a6c>   DW_AT_decl_column : 3
    <1a6d>   DW_AT_type        : <0x1a44>
 <1><1a71>: Abbrev Number: 46 (DW_TAG_structure_type)
    <1a72>   DW_AT_name        : (indirect string, offset: 0x1dcc): snapshotFrame_s
    <1a76>   DW_AT_byte_size   : 8208
    <1a78>   DW_AT_decl_file   : 20
    <1a79>   DW_AT_decl_line   : 59
    <1a7a>   DW_AT_decl_column : 16
    <1a7b>   DW_AT_sibling     : <0x1ab7>
 <2><1a7f>: Abbrev Number: 15 (DW_TAG_member)
    <1a80>   DW_AT_name        : (indirect string, offset: 0x10b9): ents
    <1a84>   DW_AT_decl_file   : 20
    <1a85>   DW_AT_decl_line   : 60
    <1a86>   DW_AT_decl_column : 17
    <1a87>   DW_AT_type        : <0x1ab7>
    <1a8b>   DW_AT_data_member_location: 0
 <2><1a8c>: Abbrev Number: 39 (DW_TAG_member)
    <1a8d>   DW_AT_name        : (indirect string, offset: 0x1846): frameNum
    <1a91>   DW_AT_decl_file   : 20
    <1a92>   DW_AT_decl_line   : 61
    <1a93>   DW_AT_decl_column : 6
    <1a94>   DW_AT_type        : <0x6f>
    <1a98>   DW_AT_data_member_location: 8192
 <2><1a9a>: Abbrev Number: 39 (DW_TAG_member)
    <1a9b>   DW_AT_name        : (indirect string, offset: 0x110a): start
    <1a9f>   DW_AT_decl_file   : 20
    <1aa0>   DW_AT_decl_line   : 62
    <1aa1>   DW_AT_decl_column : 6
    <1aa2>   DW_AT_type        : <0x6f>
    <1aa6>   DW_AT_data_member_location: 8196
 <2><1aa8>: Abbrev Number: 39 (DW_TAG_member)
    <1aa9>   DW_AT_name        : (indirect string, offset: 0x1161): count
    <1aad>   DW_AT_decl_file   : 20
    <1aae>   DW_AT_decl_line   : 63
    <1aaf>   DW_AT_decl_column : 6
    <1ab0>   DW_AT_type        : <0x6f>
    <1ab4>   DW_AT_data_member_location: 8200
 <2><1ab6>: Abbrev Number: 0
 <1><1ab7>: Abbrev Number: 6 (DW_TAG_array_type)
    <1ab8>   DW_AT_type        : <0x1ac8>
    <1abc>   DW_AT_sibling     : <0x1ac8>
 <2><1ac0>: Abbrev Number: 24 (DW_TAG_subrange_type)
    <1ac1>   DW_AT_type        : <0x42>
    <1ac5>   DW_AT_upper_bound : 1023
 <2><1ac7>: Abbrev Number: 0
 <1><1ac8>: Abbrev Number: 9 (DW_TAG_pointer_type)
    <1ac9>   DW_AT_byte_size   : 8
    <1aca>   DW_AT_type        : <0xe25>
 <1><1ace>: Abbrev Number: 3 (DW_TAG_typedef)
    <1acf>   DW_AT_name        : (indirect string, offset: 0x1ddc): snapshotFrame_t
    <1ad3>   DW_AT_decl_file   : 20
    <1ad4>   DW_AT_decl_line   : 64
    <1ad5>   DW_AT_decl_column : 3
    <1ad6>   DW_AT_type        : <0x1a71>
 <1><1ada>: Abbrev Number: 47 (DW_TAG_structure_type)
    <1adb>   DW_AT_byte_size   : 0x50450
    <1adf>   DW_AT_decl_file   : 20
    <1ae0>   DW_AT_decl_line   : 66
    <1ae1>   DW_AT_decl_column : 9
    <1ae2>   DW_AT_sibling     : <0x1bfa>
 <2><1ae6>: Abbrev Number: 15 (DW_TAG_member)
    <1ae7>   DW_AT_name        : (indirect string, offset: 0x11d2): state
    <1aeb>   DW_AT_decl_file   : 20
    <1aec>   DW_AT_decl_line   : 67
    <1aed>   DW_AT_decl_column : 16
    <1aee>   DW_AT_type        : <0x1a65>
    <1af2>   DW_AT_data_member_location: 0
 <2><1af3>: Abbrev Number: 15 (DW_TAG_member)
    <1af4>   DW_AT_name        : (indirect string, offset: 0x1955): restarting
    <1af8>   DW_AT_decl_file   : 20
    <1af9>   DW_AT_decl_line   : 68
    <1afa>   DW_AT_decl_column : 12
    <1afb>   DW_AT_type        : <0x483>
    <1aff>   DW_AT_data_member_location: 4
 <2><1b00>: Abbrev Number: 15 (DW_TAG_member)
    <1b01>   DW_AT_name        : (indirect string, offset: 0x79c): serverId
    <1b05>   DW_AT_decl_file   : 20
    <1b06>   DW_AT_decl_line   : 69
    <1b07>   DW_AT_decl_column : 9
    <1b08>   DW_AT_type        : <0x6f>
    <1b0c>   DW_AT_data_member_location: 8
 <2><1b0d>: Abbrev Number: 15 (DW_TAG_member)
    <1b0e>   DW_AT_name        : (indirect string, offset: 0x1369): restartedServerId
    <1b12>   DW_AT_decl_file   : 20
    <1b13>   DW_AT_decl_line   : 70
    <1b14>   DW_AT_decl_column : 9
    <1b15>   DW_AT_type        : <0x6f>
    <1b19>   DW_AT_data_member_location: 12
 <2><1b1a>: Abbrev Number: 15 (DW_TAG_member)
    <1b1b>   DW_AT_name        : (indirect string, offset: 0x883): checksumFeed
    <1b1f>   DW_AT_decl_file   : 20
    <1b20>   DW_AT_decl_line   : 71
    <1b21>   DW_AT_decl_column : 9
    <1b22>   DW_AT_type        : <0x6f>
    <1b26>   DW_AT_data_member_location: 16
 <2><1b27>: Abbrev Number: 15 (DW_TAG_member)
    <1b28>   DW_AT_name        : (indirect string, offset: 0x1335): checksumFeedServerId
    <1b2c>   DW_AT_decl_file   : 20
    <1b2d>   DW_AT_decl_line   : 74
    <1b2e>   DW_AT_decl_column : 9
    <1b2f>   DW_AT_type        : <0x6f>
    <1b33>   DW_AT_data_member_location: 20
 <2><1b34>: Abbrev Number: 15 (DW_TAG_member)
    <1b35>   DW_AT_name        : (indirect string, offset: 0x65f): snapshotCounter
    <1b39>   DW_AT_decl_file   : 20
    <1b3a>   DW_AT_decl_line   : 75
    <1b3b>   DW_AT_decl_column : 9
    <1b3c>   DW_AT_type        : <0x6f>
    <1b40>   DW_AT_data_member_location: 24
 <2><1b41>: Abbrev Number: 15 (DW_TAG_member)
    <1b42>   DW_AT_name        : (indirect string, offset: 0x109): timeResidual
    <1b46>   DW_AT_decl_file   : 20
    <1b47>   DW_AT_decl_line   : 76
    <1b48>   DW_AT_decl_column : 9
    <1b49>   DW_AT_type        : <0x6f>
    <1b4d>   DW_AT_data_member_location: 28
 <2><1b4e>: Abbrev Number: 15 (DW_TAG_member)
    <1b4f>   DW_AT_name        : (indirect string, offset: 0xc37): configstrings
    <1b53>   DW_AT_decl_file   : 20
    <1b54>   DW_AT_decl_line   : 77
    <1b55>   DW_AT_decl_column : 10
    <1b56>   DW_AT_type        : <0x1bfa>
    <1b5a>   DW_AT_data_member_location: 32
 <2><1b5b>: Abbrev Number: 39 (DW_TAG_member)
    <1b5c>   DW_AT_name        : (indirect string, offset: 0xed7): svEntities
    <1b60>   DW_AT_decl_file   : 20
    <1b61>   DW_AT_decl_line   : 78
    <1b62>   DW_AT_decl_column : 14
    <1b63>   DW_AT_type        : <0x1c0b>
    <1b67>   DW_AT_data_member_location: 8224
 <2><1b69>: Abbrev Number: 48 (DW_TAG_member)
    <1b6a>   DW_AT_name        : (indirect string, offset: 0x18b): entityParsePoint
    <1b6e>   DW_AT_decl_file   : 20
    <1b6f>   DW_AT_decl_line   : 80
    <1b70>   DW_AT_decl_column : 15
    <1b71>   DW_AT_type        : <0x38d>
    <1b75>   DW_AT_data_member_location: 0x50020
 <2><1b79>: Abbrev Number: 48 (DW_TAG_member)
    <1b7a>   DW_AT_name        : (indirect string, offset: 0x117b): gentities
    <1b7e>   DW_AT_decl_file   : 20
    <1b7f>   DW_AT_decl_line   : 83
    <1b80>   DW_AT_decl_column : 18
    <1b81>   DW_AT_type        : <0x1c1c>
    <1b85>   DW_AT_data_member_location: 0x50028
 <2><1b89>: Abbrev Number: 48 (DW_TAG_member)
    <1b8a>   DW_AT_name        : (indirect string, offset: 0x7cf): gentitySize
    <1b8e>   DW_AT_decl_file   : 20
    <1b8f>   DW_AT_decl_line   : 84
    <1b90>   DW_AT_decl_column : 9
    <1b91>   DW_AT_type        : <0x6f>
    <1b95>   DW_AT_data_member_location: 0x50030
 <2><1b99>: Abbrev Number: 48 (DW_TAG_member)
    <1b9a>   DW_AT_name        : (indirect string, offset: 0x14a0): num_entities
    <1b9e>   DW_AT_decl_file   : 20
    <1b9f>   DW_AT_decl_line   : 85
    <1ba0>   DW_AT_decl_column : 9
    <1ba1>   DW_AT_type        : <0x6f>
    <1ba5>   DW_AT_data_member_location: 0x50034
 <2><1ba9>: Abbrev Number: 48 (DW_TAG_member)
    <1baa>   DW_AT_name        : (indirect string, offset: 0x1517): gameClients
    <1bae>   DW_AT_decl_file   : 20
    <1baf>   DW_AT_decl_line   : 87
    <1bb0>   DW_AT_decl_column : 17
    <1bb1>   DW_AT_type        : <0x1869>
    <1bb5>   DW_AT_data_member_location: 0x50038
 <2><1bb9>: Abbrev Number: 48 (DW_TAG_member)
    <1bba>   DW_AT_name        : (indirect string, offset: 0x1ca3): gameClientSize
    <1bbe>   DW_AT_decl_file   : 20
    <1bbf>   DW_AT_decl_line   : 88
    <1bc0>   DW_AT_decl_column : 9
    <1bc1>   DW_AT_type        : <0x6f>
    <1bc5>   DW_AT_data_member_location: 0x50040
 <2><1bc9>: Abbrev Number: 48 (DW_TAG_member)
    <1bca>   DW_AT_name        : (indirect string, offset: 0xea4): restartTime
    <1bce>   DW_AT_decl_file   : 20
    <1bcf>   DW_AT_decl_line   : 90
    <1bd0>   DW_AT_decl_column : 9
    <1bd1>   DW_AT_type        : <0x6f>
    <1bd5>   DW_AT_data_member_location: 0x50044
 <2><1bd9>: Abbrev Number: 48 (DW_TAG_member)
    <1bda>   DW_AT_name        : (indirect string, offset: 0x12d1): time
    <1bde>   DW_AT_decl_file   : 20
    <1bdf>   DW_AT_decl_line   : 91
    <1be0>   DW_AT_decl_column : 9
    <1be1>   DW_AT_type        : <0x6f>
    <1be5>   DW_AT_data_member_location: 0x50048
 <2><1be9>: Abbrev Number: 48 (DW_TAG_member)
    <1bea>   DW_AT_name        : (indirect string, offset: 0xc2a): baselineUsed
    <1bee>   DW_AT_decl_file   : 20
    <1bef>   DW_AT_decl_line   : 93
    <1bf0>   DW_AT_decl_column : 9
    <1bf1>   DW_AT_type        : <0x1c22>
    <1bf5>   DW_AT_data_member_location: 0x5004c
 <2><1bf9>: Abbrev Number: 0
 <1><1bfa>: Abbrev Number: 6 (DW_TAG_array_type)
    <1bfb>   DW_AT_type        : <0xb8>
    <1bff>   DW_AT_sibling     : <0x1c0b>
 <2><1c03>: Abbrev Number: 24 (DW_TAG_subrange_type)
    <1c04>   DW_AT_type        : <0x42>
    <1c08>   DW_AT_upper_bound : 1023
 <2><1c0a>: Abbrev Number: 0
 <1><1c0b>: Abbrev Number: 6 (DW_TAG_array_type)
    <1c0c>   DW_AT_type        : <0x1a38>
    <1c10>   DW_AT_sibling     : <0x1c1c>
 <2><1c14>: Abbrev Number: 24 (DW_TAG_subrange_type)
    <1c15>   DW_AT_type        : <0x42>
    <1c19>   DW_AT_upper_bound : 1023
 <2><1c1b>: Abbrev Number: 0
 <1><1c1c>: Abbrev Number: 9 (DW_TAG_pointer_type)
    <1c1d>   DW_AT_byte_size   : 8
    <1c1e>   DW_AT_type        : <0x1805>
 <1><1c22>: Abbrev Number: 6 (DW_TAG_array_type)
    <1c23>   DW_AT_type        : <0x457>
    <1c27>   DW_AT_sibling     : <0x1c33>
 <2><1c2b>: Abbrev Number: 24 (DW_TAG_subrange_type)
    <1c2c>   DW_AT_type        : <0x42>
    <1c30>   DW_AT_upper_bound : 1023
 <2><1c32>: Abbrev Number: 0
 <1><1c33>: Abbrev Number: 3 (DW_TAG_typedef)
    <1c34>   DW_AT_name        : (indirect string, offset: 0x1355): server_t
    <1c38>   DW_AT_decl_file   : 20
    <1c39>   DW_AT_decl_line   : 94
    <1c3a>   DW_AT_decl_column : 3
    <1c3b>   DW_AT_type        : <0x1ada>
 <1><1c3f>: Abbrev Number: 38 (DW_TAG_structure_type)
    <1c40>   DW_AT_byte_size   : 2576
    <1c42>   DW_AT_decl_file   : 20
    <1c43>   DW_AT_decl_line   : 96
    <1c44>   DW_AT_decl_column : 9
    <1c45>   DW_AT_sibling     : <0x1cc4>
 <2><1c49>: Abbrev Number: 15 (DW_TAG_member)
    <1c4a>   DW_AT_name        : (indirect string, offset: 0x812): areabytes
    <1c4e>   DW_AT_decl_file   : 20
    <1c4f>   DW_AT_decl_line   : 97
    <1c50>   DW_AT_decl_column : 9
    <1c51>   DW_AT_type        : <0x6f>
    <1c55>   DW_AT_data_member_location: 0
 <2><1c56>: Abbrev Number: 15 (DW_TAG_member)
    <1c57>   DW_AT_name        : (indirect string, offset: 0xd17): areabits
    <1c5b>   DW_AT_decl_file   : 20
    <1c5c>   DW_AT_decl_line   : 98
    <1c5d>   DW_AT_decl_column : 9
    <1c5e>   DW_AT_type        : <0x1cc4>
    <1c62>   DW_AT_data_member_location: 4
 <2><1c63>: Abbrev Number: 35 (DW_TAG_member)
    <1c64>   DW_AT_name        : ps
    <1c67>   DW_AT_decl_file   : 20
    <1c68>   DW_AT_decl_line   : 99
    <1c69>   DW_AT_decl_column : 16
    <1c6a>   DW_AT_type        : <0xb64>
    <1c6e>   DW_AT_data_member_location: 36
 <2><1c6f>: Abbrev Number: 39 (DW_TAG_member)
    <1c70>   DW_AT_name        : (indirect string, offset: 0x14a0): num_entities
    <1c74>   DW_AT_decl_file   : 20
    <1c75>   DW_AT_decl_line   : 100
    <1c76>   DW_AT_decl_column : 9
    <1c77>   DW_AT_type        : <0x6f>
    <1c7b>   DW_AT_data_member_location: 504
 <2><1c7d>: Abbrev Number: 39 (DW_TAG_member)
    <1c7e>   DW_AT_name        : (indirect string, offset: 0x710): messageSent
    <1c82>   DW_AT_decl_file   : 20
    <1c83>   DW_AT_decl_line   : 106
    <1c84>   DW_AT_decl_column : 9
    <1c85>   DW_AT_type        : <0x6f>
    <1c89>   DW_AT_data_member_location: 508
 <2><1c8b>: Abbrev Number: 39 (DW_TAG_member)
    <1c8c>   DW_AT_name        : (indirect string, offset: 0x168e): messageAcked
    <1c90>   DW_AT_decl_file   : 20
    <1c91>   DW_AT_decl_line   : 107
    <1c92>   DW_AT_decl_column : 9
    <1c93>   DW_AT_type        : <0x6f>
    <1c97>   DW_AT_data_member_location: 512
 <2><1c99>: Abbrev Number: 39 (DW_TAG_member)
    <1c9a>   DW_AT_name        : (indirect string, offset: 0x1977): messageSize
    <1c9e>   DW_AT_decl_file   : 20
    <1c9f>   DW_AT_decl_line   : 108
    <1ca0>   DW_AT_decl_column : 9
    <1ca1>   DW_AT_type        : <0x6f>
    <1ca5>   DW_AT_data_member_location: 516
 <2><1ca7>: Abbrev Number: 39 (DW_TAG_member)
    <1ca8>   DW_AT_name        : (indirect string, offset: 0x1846): frameNum
    <1cac>   DW_AT_decl_file   : 20
    <1cad>   DW_AT_decl_line   : 110
    <1cae>   DW_AT_decl_column : 9
    <1caf>   DW_AT_type        : <0x6f>
    <1cb3>   DW_AT_data_member_location: 520
 <2><1cb5>: Abbrev Number: 39 (DW_TAG_member)
    <1cb6>   DW_AT_name        : (indirect string, offset: 0x10b9): ents
    <1cba>   DW_AT_decl_file   : 20
    <1cbb>   DW_AT_decl_line   : 111
    <1cbc>   DW_AT_decl_column : 17
    <1cbd>   DW_AT_type        : <0x1cd4>
    <1cc1>   DW_AT_data_member_location: 528
 <2><1cc3>: Abbrev Number: 0
 <1><1cc4>: Abbrev Number: 6 (DW_TAG_array_type)
    <1cc5>   DW_AT_type        : <0x457>
    <1cc9>   DW_AT_sibling     : <0x1cd4>
 <2><1ccd>: Abbrev Number: 7 (DW_TAG_subrange_type)
    <1cce>   DW_AT_type        : <0x42>
    <1cd2>   DW_AT_upper_bound : 31
 <2><1cd3>: Abbrev Number: 0
 <1><1cd4>: Abbrev Number: 6 (DW_TAG_array_type)
    <1cd5>   DW_AT_type        : <0x1ac8>
    <1cd9>   DW_AT_sibling     : <0x1ce4>
 <2><1cdd>: Abbrev Number: 7 (DW_TAG_subrange_type)
    <1cde>   DW_AT_type        : <0x42>
    <1ce2>   DW_AT_upper_bound : 255
 <2><1ce3>: Abbrev Number: 0
 <1><1ce4>: Abbrev Number: 3 (DW_TAG_typedef)
    <1ce5>   DW_AT_name        : (indirect string, offset: 0x16ed): clientSnapshot_t
    <1ce9>   DW_AT_decl_file   : 20
    <1cea>   DW_AT_decl_line   : 113
    <1ceb>   DW_AT_decl_column : 3
    <1cec>   DW_AT_type        : <0x1c3f>
 <1><1cf0>: Abbrev Number: 20 (DW_TAG_enumeration_type)
    <1cf1>   DW_AT_encoding    : 7	(unsigned)
    <1cf2>   DW_AT_byte_size   : 4
    <1cf3>   DW_AT_type        : <0x3b>
    <1cf7>   DW_AT_decl_file   : 20
    <1cf8>   DW_AT_decl_line   : 115
    <1cf9>   DW_AT_decl_column : 14
    <1cfa>   DW_AT_sibling     : <0x1d1d>
 <2><1cfe>: Abbrev Number: 21 (DW_TAG_enumerator)
    <1cff>   DW_AT_name        : (indirect string, offset: 0x1a9b): CS_FREE
    <1d03>   DW_AT_const_value : 0
 <2><1d04>: Abbrev Number: 21 (DW_TAG_enumerator)
    <1d05>   DW_AT_name        : (indirect string, offset: 0x1905): CS_ZOMBIE
    <1d09>   DW_AT_const_value : 1
 <2><1d0a>: Abbrev Number: 21 (DW_TAG_enumerator)
    <1d0b>   DW_AT_name        : (indirect string, offset: 0x1086): CS_CONNECTED
    <1d0f>   DW_AT_const_value : 2
 <2><1d10>: Abbrev Number: 21 (DW_TAG_enumerator)
    <1d11>   DW_AT_name        : (indirect string, offset: 0x13c7): CS_PRIMED
    <1d15>   DW_AT_const_value : 3
 <2><1d16>: Abbrev Number: 21 (DW_TAG_enumerator)
    <1d17>   DW_AT_name        : (indirect string, offset: 0x12b6): CS_ACTIVE
    <1d1b>   DW_AT_const_value : 4
 <2><1d1c>: Abbrev Number: 0
 <1><1d1d>: Abbrev Number: 3 (DW_TAG_typedef)
    <1d1e>   DW_AT_name        : (indirect string, offset: 0x1d29): clientState_t
    <1d22>   DW_AT_decl_file   : 20
    <1d23>   DW_AT_decl_line   : 122
    <1d24>   DW_AT_decl_column : 3
    <1d25>   DW_AT_type        : <0x1cf0>
 <1><1d29>: Abbrev Number: 46 (DW_TAG_structure_type)
    <1d2a>   DW_AT_name        : (indirect string, offset: 0xdcf): netchan_buffer_s
    <1d2e>   DW_AT_byte_size   : 17464
    <1d30>   DW_AT_decl_file   : 20
    <1d31>   DW_AT_decl_line   : 124
    <1d32>   DW_AT_decl_column : 16
    <1d33>   DW_AT_sibling     : <0x1d6e>
 <2><1d37>: Abbrev Number: 35 (DW_TAG_member)
    <1d38>   DW_AT_name        : msg
    <1d3c>   DW_AT_decl_file   : 20
    <1d3d>   DW_AT_decl_line   : 125
    <1d3e>   DW_AT_decl_column : 18
    <1d3f>   DW_AT_type        : <0xec7>
    <1d43>   DW_AT_data_member_location: 0
 <2><1d44>: Abbrev Number: 15 (DW_TAG_member)
    <1d45>   DW_AT_name        : (indirect string, offset: 0x7eb): msgBuffer
    <1d49>   DW_AT_decl_file   : 20
    <1d4a>   DW_AT_decl_line   : 126
    <1d4b>   DW_AT_decl_column : 18
    <1d4c>   DW_AT_type        : <0x10c8>
    <1d50>   DW_AT_data_member_location: 48
 <2><1d51>: Abbrev Number: 39 (DW_TAG_member)
    <1d52>   DW_AT_name        : (indirect string, offset: 0x172e): clientCommandString
    <1d56>   DW_AT_decl_file   : 20
    <1d57>   DW_AT_decl_line   : 127
    <1d58>   DW_AT_decl_column : 8
    <1d59>   DW_AT_type        : <0x68b>
    <1d5d>   DW_AT_data_member_location: 16432
 <2><1d5f>: Abbrev Number: 39 (DW_TAG_member)
    <1d60>   DW_AT_name        : (indirect string, offset: 0x220): next
    <1d64>   DW_AT_decl_file   : 20
    <1d65>   DW_AT_decl_line   : 128
    <1d66>   DW_AT_decl_column : 27
    <1d67>   DW_AT_type        : <0x1d6e>
    <1d6b>   DW_AT_data_member_location: 17456
 <2><1d6d>: Abbrev Number: 0
 <1><1d6e>: Abbrev Number: 9 (DW_TAG_pointer_type)
    <1d6f>   DW_AT_byte_size   : 8
    <1d70>   DW_AT_type        : <0x1d29>
 <1><1d74>: Abbrev Number: 3 (DW_TAG_typedef)
    <1d75>   DW_AT_name        : (indirect string, offset: 0xde0): netchan_buffer_t
    <1d79>   DW_AT_decl_file   : 20
    <1d7a>   DW_AT_decl_line   : 129
    <1d7b>   DW_AT_decl_column : 3
    <1d7c>   DW_AT_type        : <0x1d29>
 <1><1d80>: Abbrev Number: 14 (DW_TAG_structure_type)
    <1d81>   DW_AT_name        : (indirect string, offset: 0x6d1): rateLimit_s
    <1d85>   DW_AT_byte_size   : 8
    <1d86>   DW_AT_decl_file   : 20
    <1d87>   DW_AT_decl_line   : 131
    <1d88>   DW_AT_decl_column : 16
    <1d89>   DW_AT_sibling     : <0x1da8>
 <2><1d8d>: Abbrev Number: 15 (DW_TAG_member)
    <1d8e>   DW_AT_name        : (indirect string, offset: 0x406): lastTime
    <1d92>   DW_AT_decl_file   : 20
    <1d93>   DW_AT_decl_line   : 132
    <1d94>   DW_AT_decl_column : 8
    <1d95>   DW_AT_type        : <0x6f>
    <1d99>   DW_AT_data_member_location: 0
 <2><1d9a>: Abbrev Number: 15 (DW_TAG_member)
    <1d9b>   DW_AT_name        : (indirect string, offset: 0x1cb2): burst
    <1d9f>   DW_AT_decl_file   : 20
    <1da0>   DW_AT_decl_line   : 133
    <1da1>   DW_AT_decl_column : 8
    <1da2>   DW_AT_type        : <0x6f>
    <1da6>   DW_AT_data_member_location: 4
 <2><1da7>: Abbrev Number: 0
 <1><1da8>: Abbrev Number: 3 (DW_TAG_typedef)
    <1da9>   DW_AT_name        : (indirect string, offset: 0xbae): rateLimit_t
    <1dad>   DW_AT_decl_file   : 20
    <1dae>   DW_AT_decl_line   : 134
    <1daf>   DW_AT_decl_column : 3
    <1db0>   DW_AT_type        : <0x1d80>
 <1><1db4>: Abbrev Number: 3 (DW_TAG_typedef)
    <1db5>   DW_AT_name        : (indirect string, offset: 0x1e47): leakyBucket_t
    <1db9>   DW_AT_decl_file   : 20
    <1dba>   DW_AT_decl_line   : 136
    <1dbb>   DW_AT_decl_column : 30
    <1dbc>   DW_AT_type        : <0x1dc0>
 <1><1dc0>: Abbrev Number: 14 (DW_TAG_structure_type)
    <1dc1>   DW_AT_name        : (indirect string, offset: 0x1a8d): leakyBucket_s
    <1dc5>   DW_AT_byte_size   : 56
    <1dc6>   DW_AT_decl_file   : 20
    <1dc7>   DW_AT_decl_line   : 137
    <1dc8>   DW_AT_decl_column : 8
    <1dc9>   DW_AT_sibling     : <0x1e29>
 <2><1dcd>: Abbrev Number: 15 (DW_TAG_member)
    <1dce>   DW_AT_name        : (indirect string, offset: 0x5c3): type
    <1dd2>   DW_AT_decl_file   : 20
    <1dd3>   DW_AT_decl_line   : 138
    <1dd4>   DW_AT_decl_column : 15
    <1dd5>   DW_AT_type        : <0xf12>
    <1dd9>   DW_AT_data_member_location: 0
 <2><1dda>: Abbrev Number: 35 (DW_TAG_member)
    <1ddb>   DW_AT_name        : ipv
    <1ddf>   DW_AT_decl_file   : 20
    <1de0>   DW_AT_decl_line   : 143
    <1de1>   DW_AT_decl_column : 4
    <1de2>   DW_AT_type        : <0x1e29>
    <1de6>   DW_AT_data_member_location: 4
 <2><1de7>: Abbrev Number: 15 (DW_TAG_member)
    <1de8>   DW_AT_name        : (indirect string, offset: 0x1f0f): rate
    <1dec>   DW_AT_decl_file   : 20
    <1ded>   DW_AT_decl_line   : 145
    <1dee>   DW_AT_decl_column : 14
    <1def>   DW_AT_type        : <0x1da8>
    <1df3>   DW_AT_data_member_location: 20
 <2><1df4>: Abbrev Number: 15 (DW_TAG_member)
    <1df5>   DW_AT_name        : (indirect string, offset: 0x162e): hash
    <1df9>   DW_AT_decl_file   : 20
    <1dfa>   DW_AT_decl_line   : 147
    <1dfb>   DW_AT_decl_column : 8
    <1dfc>   DW_AT_type        : <0x6f>
    <1e00>   DW_AT_data_member_location: 28
 <2><1e01>: Abbrev Number: 15 (DW_TAG_member)
    <1e02>   DW_AT_name        : (indirect string, offset: 0x101e): toxic
    <1e06>   DW_AT_decl_file   : 20
    <1e07>   DW_AT_decl_line   : 148
    <1e08>   DW_AT_decl_column : 8
    <1e09>   DW_AT_type        : <0x6f>
    <1e0d>   DW_AT_data_member_location: 32
 <2><1e0e>: Abbrev Number: 15 (DW_TAG_member)
    <1e0f>   DW_AT_name        : (indirect string, offset: 0x1eb1): prev
    <1e13>   DW_AT_decl_file   : 20
    <1e14>   DW_AT_decl_line   : 150
    <1e15>   DW_AT_decl_column : 17
    <1e16>   DW_AT_type        : <0x1e49>
    <1e1a>   DW_AT_data_member_location: 40
 <2><1e1b>: Abbrev Number: 15 (DW_TAG_member)
    <1e1c>   DW_AT_name        : (indirect string, offset: 0x220): next
    <1e20>   DW_AT_decl_file   : 20
    <1e21>   DW_AT_decl_line   : 150
    <1e22>   DW_AT_decl_column : 24
    <1e23>   DW_AT_type        : <0x1e49>
    <1e27>   DW_AT_data_member_location: 48
 <2><1e28>: Abbrev Number: 0
 <1><1e29>: Abbrev Number: 36 (DW_TAG_union_type)
    <1e2a>   DW_AT_byte_size   : 16
    <1e2b>   DW_AT_decl_file   : 20
    <1e2c>   DW_AT_decl_line   : 140
    <1e2d>   DW_AT_decl_column : 2
    <1e2e>   DW_AT_sibling     : <0x1e49>
 <2><1e32>: Abbrev Number: 37 (DW_TAG_member)
    <1e33>   DW_AT_name        : _4
    <1e36>   DW_AT_decl_file   : 20
    <1e37>   DW_AT_decl_line   : 141
    <1e38>   DW_AT_decl_column : 8
    <1e39>   DW_AT_type        : <0x48f>
 <2><1e3d>: Abbrev Number: 37 (DW_TAG_member)
    <1e3e>   DW_AT_name        : _6
    <1e41>   DW_AT_decl_file   : 20
    <1e42>   DW_AT_decl_line   : 142
    <1e43>   DW_AT_decl_column : 8
    <1e44>   DW_AT_type        : <0xf65>
 <2><1e48>: Abbrev Number: 0
 <1><1e49>: Abbrev Number: 9 (DW_TAG_pointer_type)
    <1e4a>   DW_AT_byte_size   : 8
    <1e4b>   DW_AT_type        : <0x1db4>
 <1><1e4f>: Abbrev Number: 49 (DW_TAG_structure_type)
    <1e50>   DW_AT_name        : (indirect string, offset: 0x982): client_s
    <1e54>   DW_AT_byte_size   : 0x2dde0
    <1e58>   DW_AT_decl_file   : 20
    <1e59>   DW_AT_decl_line   : 154
    <1e5a>   DW_AT_decl_column : 16
    <1e5b>   DW_AT_sibling     : <0x2178>
 <2><1e5f>: Abbrev Number: 15 (DW_TAG_member)
    <1e60>   DW_AT_name        : (indirect string, offset: 0x11d2): state
    <1e64>   DW_AT_decl_file   : 20
    <1e65>   DW_AT_decl_line   : 155
    <1e66>   DW_AT_decl_column : 16
    <1e67>   DW_AT_type        : <0x1d1d>
    <1e6b>   DW_AT_data_member_location: 0
 <2><1e6c>: Abbrev Number: 15 (DW_TAG_member)
    <1e6d>   DW_AT_name        : (indirect string, offset: 0x1cb8): userinfo
    <1e71>   DW_AT_decl_file   : 20
    <1e72>   DW_AT_decl_line   : 156
    <1e73>   DW_AT_decl_column : 9
    <1e74>   DW_AT_type        : <0x68b>
    <1e78>   DW_AT_data_member_location: 4
 <2><1e79>: Abbrev Number: 39 (DW_TAG_member)
    <1e7a>   DW_AT_name        : (indirect string, offset: 0x113e): reliableCommands
    <1e7e>   DW_AT_decl_file   : 20
    <1e7f>   DW_AT_decl_line   : 158
    <1e80>   DW_AT_decl_column : 9
    <1e81>   DW_AT_type        : <0x2178>
    <1e85>   DW_AT_data_member_location: 1028
 <2><1e87>: Abbrev Number: 48 (DW_TAG_member)
    <1e88>   DW_AT_name        : (indirect string, offset: 0x900): reliableSequence
    <1e8c>   DW_AT_decl_file   : 20
    <1e8d>   DW_AT_decl_line   : 159
    <1e8e>   DW_AT_decl_column : 9
    <1e8f>   DW_AT_type        : <0x6f>
    <1e93>   DW_AT_data_member_location: 0x10404
 <2><1e97>: Abbrev Number: 48 (DW_TAG_member)
    <1e98>   DW_AT_name        : (indirect string, offset: 0x109d): reliableAcknowledge
    <1e9c>   DW_AT_decl_file   : 20
    <1e9d>   DW_AT_decl_line   : 160
    <1e9e>   DW_AT_decl_column : 9
    <1e9f>   DW_AT_type        : <0x6f>
    <1ea3>   DW_AT_data_member_location: 0x10408
 <2><1ea7>: Abbrev Number: 48 (DW_TAG_member)
    <1ea8>   DW_AT_name        : (indirect string, offset: 0x6ee): messageAcknowledge
    <1eac>   DW_AT_decl_file   : 20
    <1ead>   DW_AT_decl_line   : 161
    <1eae>   DW_AT_decl_column : 9
    <1eaf>   DW_AT_type        : <0x6f>
    <1eb3>   DW_AT_data_member_location: 0x1040c
 <2><1eb7>: Abbrev Number: 48 (DW_TAG_member)
    <1eb8>   DW_AT_name        : (indirect string, offset: 0x1a4f): gamestateMessageNum
    <1ebc>   DW_AT_decl_file   : 20
    <1ebd>   DW_AT_decl_line   : 163
    <1ebe>   DW_AT_decl_column : 9
    <1ebf>   DW_AT_type        : <0x6f>
    <1ec3>   DW_AT_data_member_location: 0x10410
 <2><1ec7>: Abbrev Number: 48 (DW_TAG_member)
    <1ec8>   DW_AT_name        : (indirect string, offset: 0x1b2c): challenge
    <1ecc>   DW_AT_decl_file   : 20
    <1ecd>   DW_AT_decl_line   : 164
    <1ece>   DW_AT_decl_column : 9
    <1ecf>   DW_AT_type        : <0x6f>
    <1ed3>   DW_AT_data_member_location: 0x10414
 <2><1ed7>: Abbrev Number: 48 (DW_TAG_member)
    <1ed8>   DW_AT_name        : (indirect string, offset: 0x1ac7): lastUsercmd
    <1edc>   DW_AT_decl_file   : 20
    <1edd>   DW_AT_decl_line   : 166
    <1ede>   DW_AT_decl_column : 13
    <1edf>   DW_AT_type        : <0xbe2>
    <1ee3>   DW_AT_data_member_location: 0x10418
 <2><1ee7>: Abbrev Number: 48 (DW_TAG_member)
    <1ee8>   DW_AT_name        : (indirect string, offset: 0x4eb): lastClientCommand
    <1eec>   DW_AT_decl_file   : 20
    <1eed>   DW_AT_decl_line   : 167
    <1eee>   DW_AT_decl_column : 9
    <1eef>   DW_AT_type        : <0x6f>
    <1ef3>   DW_AT_data_member_location: 0x10430
 <2><1ef7>: Abbrev Number: 48 (DW_TAG_member)
    <1ef8>   DW_AT_name        : (indirect string, offset: 0xd91): lastClientCommandString
    <1efc>   DW_AT_decl_file   : 20
    <1efd>   DW_AT_decl_line   : 168
    <1efe>   DW_AT_decl_column : 9
    <1eff>   DW_AT_type        : <0x68b>
    <1f03>   DW_AT_data_member_location: 0x10434
 <2><1f07>: Abbrev Number: 48 (DW_TAG_member)
    <1f08>   DW_AT_name        : (indirect string, offset: 0x1427): gentity
    <1f0c>   DW_AT_decl_file   : 20
    <1f0d>   DW_AT_decl_line   : 169
    <1f0e>   DW_AT_decl_column : 18
    <1f0f>   DW_AT_type        : <0x1c1c>
    <1f13>   DW_AT_data_member_location: 0x10838
 <2><1f17>: Abbrev Number: 48 (DW_TAG_member)
    <1f18>   DW_AT_name        : (indirect string, offset: 0xf3f): name
    <1f1c>   DW_AT_decl_file   : 20
    <1f1d>   DW_AT_decl_line   : 170
    <1f1e>   DW_AT_decl_column : 9
    <1f1f>   DW_AT_type        : <0x3be>
    <1f23>   DW_AT_data_member_location: 0x10840
 <2><1f27>: Abbrev Number: 48 (DW_TAG_member)
    <1f28>   DW_AT_name        : (indirect string, offset: 0x17e): downloadName
    <1f2c>   DW_AT_decl_file   : 20
    <1f2d>   DW_AT_decl_line   : 173
    <1f2e>   DW_AT_decl_column : 9
    <1f2f>   DW_AT_type        : <0xe32>
    <1f33>   DW_AT_data_member_location: 0x10860
 <2><1f37>: Abbrev Number: 48 (DW_TAG_member)
    <1f38>   DW_AT_name        : (indirect string, offset: 0xb74): download
    <1f3c>   DW_AT_decl_file   : 20
    <1f3d>   DW_AT_decl_line   : 174
    <1f3e>   DW_AT_decl_column : 15
    <1f3f>   DW_AT_type        : <0x49f>
    <1f43>   DW_AT_data_member_location: 0x108a0
 <2><1f47>: Abbrev Number: 48 (DW_TAG_member)
    <1f48>   DW_AT_name        : (indirect string, offset: 0xdc2): downloadSize
    <1f4c>   DW_AT_decl_file   : 20
    <1f4d>   DW_AT_decl_line   : 175
    <1f4e>   DW_AT_decl_column : 10
    <1f4f>   DW_AT_type        : <0x6f>
    <1f53>   DW_AT_data_member_location: 0x108a4
 <2><1f57>: Abbrev Number: 48 (DW_TAG_member)
    <1f58>   DW_AT_name        : (indirect string, offset: 0xf81): downloadCount
    <1f5c>   DW_AT_decl_file   : 20
    <1f5d>   DW_AT_decl_line   : 176
    <1f5e>   DW_AT_decl_column : 10
    <1f5f>   DW_AT_type        : <0x6f>
    <1f63>   DW_AT_data_member_location: 0x108a8
 <2><1f67>: Abbrev Number: 48 (DW_TAG_member)
    <1f68>   DW_AT_name        : (indirect string, offset: 0xaba): downloadClientBlock
    <1f6c>   DW_AT_decl_file   : 20
    <1f6d>   DW_AT_decl_line   : 177
    <1f6e>   DW_AT_decl_column : 9
    <1f6f>   DW_AT_type        : <0x6f>
    <1f73>   DW_AT_data_member_location: 0x108ac
 <2><1f77>: Abbrev Number: 48 (DW_TAG_member)
    <1f78>   DW_AT_name        : (indirect string, offset: 0x2be): downloadCurrentBlock
    <1f7c>   DW_AT_decl_file   : 20
    <1f7d>   DW_AT_decl_line   : 178
    <1f7e>   DW_AT_decl_column : 9
    <1f7f>   DW_AT_type        : <0x6f>
    <1f83>   DW_AT_data_member_location: 0x108b0
 <2><1f87>: Abbrev Number: 48 (DW_TAG_member)
    <1f88>   DW_AT_name        : (indirect string, offset: 0x185f): downloadXmitBlock
    <1f8c>   DW_AT_decl_file   : 20
    <1f8d>   DW_AT_decl_line   : 179
    <1f8e>   DW_AT_decl_column : 9
    <1f8f>   DW_AT_type        : <0x6f>
    <1f93>   DW_AT_data_member_location: 0x108b4
 <2><1f97>: Abbrev Number: 48 (DW_TAG_member)
    <1f98>   DW_AT_name        : (indirect string, offset: 0x1523): downloadBlocks
    <1f9c>   DW_AT_decl_file   : 20
    <1f9d>   DW_AT_decl_line   : 180
    <1f9e>   DW_AT_decl_column : 17
    <1f9f>   DW_AT_type        : <0x218f>
    <1fa3>   DW_AT_data_member_location: 0x108b8
 <2><1fa7>: Abbrev Number: 48 (DW_TAG_member)
    <1fa8>   DW_AT_name        : (indirect string, offset: 0xb06): downloadBlockSize
    <1fac>   DW_AT_decl_file   : 20
    <1fad>   DW_AT_decl_line   : 181
    <1fae>   DW_AT_decl_column : 9
    <1faf>   DW_AT_type        : <0x21a5>
    <1fb3>   DW_AT_data_member_location: 0x10a38
 <2><1fb7>: Abbrev Number: 48 (DW_TAG_member)
    <1fb8>   DW_AT_name        : (indirect string, offset: 0xc6e): downloadEOF
    <1fbc>   DW_AT_decl_file   : 20
    <1fbd>   DW_AT_decl_line   : 182
    <1fbe>   DW_AT_decl_column : 12
    <1fbf>   DW_AT_type        : <0x483>
    <1fc3>   DW_AT_data_member_location: 0x10af8
 <2><1fc7>: Abbrev Number: 48 (DW_TAG_member)
    <1fc8>   DW_AT_name        : (indirect string, offset: 0x81c): downloadSendTime
    <1fcc>   DW_AT_decl_file   : 20
    <1fcd>   DW_AT_decl_line   : 183
    <1fce>   DW_AT_decl_column : 9
    <1fcf>   DW_AT_type        : <0x6f>
    <1fd3>   DW_AT_data_member_location: 0x10afc
 <2><1fd7>: Abbrev Number: 48 (DW_TAG_member)
    <1fd8>   DW_AT_name        : (indirect string, offset: 0x19c1): deltaMessage
    <1fdc>   DW_AT_decl_file   : 20
    <1fdd>   DW_AT_decl_line   : 185
    <1fde>   DW_AT_decl_column : 9
    <1fdf>   DW_AT_type        : <0x6f>
    <1fe3>   DW_AT_data_member_location: 0x10b00
 <2><1fe7>: Abbrev Number: 48 (DW_TAG_member)
    <1fe8>   DW_AT_name        : (indirect string, offset: 0x1ecb): lastPacketTime
    <1fec>   DW_AT_decl_file   : 20
    <1fed>   DW_AT_decl_line   : 186
    <1fee>   DW_AT_decl_column : 9
    <1fef>   DW_AT_type        : <0x6f>
    <1ff3>   DW_AT_data_member_location: 0x10b04
 <2><1ff7>: Abbrev Number: 48 (DW_TAG_member)
    <1ff8>   DW_AT_name        : (indirect string, offset: 0x14cb): lastConnectTime
    <1ffc>   DW_AT_decl_file   : 20
    <1ffd>   DW_AT_decl_line   : 187
    <1ffe>   DW_AT_decl_column : 9
    <1fff>   DW_AT_type        : <0x6f>
    <2003>   DW_AT_data_member_location: 0x10b08
 <2><2007>: Abbrev Number: 48 (DW_TAG_member)
    <2008>   DW_AT_name        : (indirect string, offset: 0x46e): lastDisconnectTime
    <200c>   DW_AT_decl_file   : 20
    <200d>   DW_AT_decl_line   : 188
    <200e>   DW_AT_decl_column : 9
    <200f>   DW_AT_type        : <0x6f>
    <2013>   DW_AT_data_member_location: 0x10b0c
 <2><2017>: Abbrev Number: 48 (DW_TAG_member)
    <2018>   DW_AT_name        : (indirect string, offset: 0x99b): lastSnapshotTime
    <201c>   DW_AT_decl_file   : 20
    <201d>   DW_AT_decl_line   : 189
    <201e>   DW_AT_decl_column : 9
    <201f>   DW_AT_type        : <0x6f>
    <2023>   DW_AT_data_member_location: 0x10b10
 <2><2027>: Abbrev Number: 48 (DW_TAG_member)
    <2028>   DW_AT_name        : (indirect string, offset: 0x3e3): rateDelayed
    <202c>   DW_AT_decl_file   : 20
    <202d>   DW_AT_decl_line   : 190
    <202e>   DW_AT_decl_column : 12
    <202f>   DW_AT_type        : <0x483>
    <2033>   DW_AT_data_member_location: 0x10b14
 <2><2037>: Abbrev Number: 48 (DW_TAG_member)
    <2038>   DW_AT_name        : (indirect string, offset: 0xdf1): timeoutCount
    <203c>   DW_AT_decl_file   : 20
    <203d>   DW_AT_decl_line   : 191
    <203e>   DW_AT_decl_column : 9
    <203f>   DW_AT_type        : <0x6f>
    <2043>   DW_AT_data_member_location: 0x10b18
 <2><2047>: Abbrev Number: 48 (DW_TAG_member)
    <2048>   DW_AT_name        : (indirect string, offset: 0xce1): frames
    <204c>   DW_AT_decl_file   : 20
    <204d>   DW_AT_decl_line   : 192
    <204e>   DW_AT_decl_column : 19
    <204f>   DW_AT_type        : <0x21b5>
    <2053>   DW_AT_data_member_location: 0x10b20
 <2><2057>: Abbrev Number: 48 (DW_TAG_member)
    <2058>   DW_AT_name        : (indirect string, offset: 0x7a5): ping
    <205c>   DW_AT_decl_file   : 20
    <205d>   DW_AT_decl_line   : 193
    <205e>   DW_AT_decl_column : 9
    <205f>   DW_AT_type        : <0x6f>
    <2063>   DW_AT_data_member_location: 0x24d20
 <2><2067>: Abbrev Number: 48 (DW_TAG_member)
    <2068>   DW_AT_name        : (indirect string, offset: 0x1f0f): rate
    <206c>   DW_AT_decl_file   : 20
    <206d>   DW_AT_decl_line   : 194
    <206e>   DW_AT_decl_column : 9
    <206f>   DW_AT_type        : <0x6f>
    <2073>   DW_AT_data_member_location: 0x24d24
 <2><2077>: Abbrev Number: 48 (DW_TAG_member)
    <2078>   DW_AT_name        : (indirect string, offset: 0x13ae): snapshotMsec
    <207c>   DW_AT_decl_file   : 20
    <207d>   DW_AT_decl_line   : 195
    <207e>   DW_AT_decl_column : 9
    <207f>   DW_AT_type        : <0x6f>
    <2083>   DW_AT_data_member_location: 0x24d28
 <2><2087>: Abbrev Number: 48 (DW_TAG_member)
    <2088>   DW_AT_name        : (indirect string, offset: 0x1dec): pureAuthentic
    <208c>   DW_AT_decl_file   : 20
    <208d>   DW_AT_decl_line   : 196
    <208e>   DW_AT_decl_column : 12
    <208f>   DW_AT_type        : <0x483>
    <2093>   DW_AT_data_member_location: 0x24d2c
 <2><2097>: Abbrev Number: 48 (DW_TAG_member)
    <2098>   DW_AT_name        : (indirect string, offset: 0x1f4f): gotCP
    <209c>   DW_AT_decl_file   : 20
    <209d>   DW_AT_decl_line   : 197
    <209e>   DW_AT_decl_column : 12
    <209f>   DW_AT_type        : <0x483>
    <20a3>   DW_AT_data_member_location: 0x24d30
 <2><20a7>: Abbrev Number: 48 (DW_TAG_member)
    <20a8>   DW_AT_name        : (indirect string, offset: 0x1a63): netchan
    <20ac>   DW_AT_decl_file   : 20
    <20ad>   DW_AT_decl_line   : 198
    <20ae>   DW_AT_decl_column : 13
    <20af>   DW_AT_type        : <0x10d9>
    <20b3>   DW_AT_data_member_location: 0x24d38
 <2><20b7>: Abbrev Number: 48 (DW_TAG_member)
    <20b8>   DW_AT_name        : (indirect string, offset: 0xab): netchan_start_queue
    <20bc>   DW_AT_decl_file   : 20
    <20bd>   DW_AT_decl_line   : 203
    <20be>   DW_AT_decl_column : 20
    <20bf>   DW_AT_type        : <0x21c5>
    <20c3>   DW_AT_data_member_location: 0x2cd98
 <2><20c7>: Abbrev Number: 48 (DW_TAG_member)
    <20c8>   DW_AT_name        : (indirect string, offset: 0x1318): netchan_end_queue
    <20cc>   DW_AT_decl_file   : 20
    <20cd>   DW_AT_decl_line   : 204
    <20ce>   DW_AT_decl_column : 21
    <20cf>   DW_AT_type        : <0x21cb>
    <20d3>   DW_AT_data_member_location: 0x2cda0
 <2><20d7>: Abbrev Number: 48 (DW_TAG_member)
    <20d8>   DW_AT_name        : (indirect string, offset: 0x1ceb): oldServerTime
    <20dc>   DW_AT_decl_file   : 20
    <20dd>   DW_AT_decl_line   : 206
    <20de>   DW_AT_decl_column : 9
    <20df>   DW_AT_type        : <0x6f>
    <20e3>   DW_AT_data_member_location: 0x2cda8
 <2><20e7>: Abbrev Number: 48 (DW_TAG_member)
    <20e8>   DW_AT_name        : (indirect string, offset: 0xec4): csUpdated
    <20ec>   DW_AT_decl_file   : 20
    <20ed>   DW_AT_decl_line   : 207
    <20ee>   DW_AT_decl_column : 12
    <20ef>   DW_AT_type        : <0x21d1>
    <20f3>   DW_AT_data_member_location: 0x2cdac
 <2><20f7>: Abbrev Number: 48 (DW_TAG_member)
    <20f8>   DW_AT_name        : (indirect string, offset: 0x365): compat
    <20fc>   DW_AT_decl_file   : 20
    <20fd>   DW_AT_decl_line   : 208
    <20fe>   DW_AT_decl_column : 12
    <20ff>   DW_AT_type        : <0x483>
    <2103>   DW_AT_data_member_location: 0x2ddac
 <2><2107>: Abbrev Number: 48 (DW_TAG_member)
    <2108>   DW_AT_name        : (indirect string, offset: 0x8b2): cmd_rate
    <210c>   DW_AT_decl_file   : 20
    <210d>   DW_AT_decl_line   : 211
    <210e>   DW_AT_decl_column : 15
    <210f>   DW_AT_type        : <0x1da8>
    <2113>   DW_AT_data_member_location: 0x2ddb0
 <2><2117>: Abbrev Number: 48 (DW_TAG_member)
    <2118>   DW_AT_name        : (indirect string, offset: 0x1c1): info_rate
    <211c>   DW_AT_decl_file   : 20
    <211d>   DW_AT_decl_line   : 212
    <211e>   DW_AT_decl_column : 15
    <211f>   DW_AT_type        : <0x1da8>
    <2123>   DW_AT_data_member_location: 0x2ddb8
 <2><2127>: Abbrev Number: 48 (DW_TAG_member)
    <2128>   DW_AT_name        : (indirect string, offset: 0xeeb): gamestate_rate
    <212c>   DW_AT_decl_file   : 20
    <212d>   DW_AT_decl_line   : 213
    <212e>   DW_AT_decl_column : 15
    <212f>   DW_AT_type        : <0x1da8>
    <2133>   DW_AT_data_member_location: 0x2ddc0
 <2><2137>: Abbrev Number: 48 (DW_TAG_member)
    <2138>   DW_AT_name        : (indirect string, offset: 0xc): longstr
    <213c>   DW_AT_decl_file   : 20
    <213d>   DW_AT_decl_line   : 216
    <213e>   DW_AT_decl_column : 12
    <213f>   DW_AT_type        : <0x483>
    <2143>   DW_AT_data_member_location: 0x2ddc8
 <2><2147>: Abbrev Number: 48 (DW_TAG_member)
    <2148>   DW_AT_name        : (indirect string, offset: 0x13e3): justConnected
    <214c>   DW_AT_decl_file   : 20
    <214d>   DW_AT_decl_line   : 218
    <214e>   DW_AT_decl_column : 12
    <214f>   DW_AT_type        : <0x483>
    <2153>   DW_AT_data_member_location: 0x2ddcc
 <2><2157>: Abbrev Number: 50 (DW_TAG_member)
    <2158>   DW_AT_name        : tld
    <215c>   DW_AT_decl_file   : 20
    <215d>   DW_AT_decl_line   : 220
    <215e>   DW_AT_decl_column : 9
    <215f>   DW_AT_type        : <0x21e2>
    <2163>   DW_AT_data_member_location: 0x2ddd0
 <2><2167>: Abbrev Number: 48 (DW_TAG_member)
    <2168>   DW_AT_name        : (indirect string, offset: 0x82d): country
    <216c>   DW_AT_decl_file   : 20
    <216d>   DW_AT_decl_line   : 221
    <216e>   DW_AT_decl_column : 15
    <216f>   DW_AT_type        : <0x38d>
    <2173>   DW_AT_data_member_location: 0x2ddd8
 <2><2177>: Abbrev Number: 0
 <1><2178>: Abbrev Number: 6 (DW_TAG_array_type)
    <2179>   DW_AT_type        : <0xbe>
    <217d>   DW_AT_sibling     : <0x218f>
 <2><2181>: Abbrev Number: 7 (DW_TAG_subrange_type)
    <2182>   DW_AT_type        : <0x42>
    <2186>   DW_AT_upper_bound : 63
 <2><2187>: Abbrev Number: 24 (DW_TAG_subrange_type)
    <2188>   DW_AT_type        : <0x42>
    <218c>   DW_AT_upper_bound : 1023
 <2><218e>: Abbrev Number: 0
 <1><218f>: Abbrev Number: 6 (DW_TAG_array_type)
    <2190>   DW_AT_type        : <0x219f>
    <2194>   DW_AT_sibling     : <0x219f>
 <2><2198>: Abbrev Number: 7 (DW_TAG_subrange_type)
    <2199>   DW_AT_type        : <0x42>
    <219d>   DW_AT_upper_bound : 47
 <2><219e>: Abbrev Number: 0
 <1><219f>: Abbrev Number: 9 (DW_TAG_pointer_type)
    <21a0>   DW_AT_byte_size   : 8
    <21a1>   DW_AT_type        : <0x2d>
 <1><21a5>: Abbrev Number: 6 (DW_TAG_array_type)
    <21a6>   DW_AT_type        : <0x6f>
    <21aa>   DW_AT_sibling     : <0x21b5>
 <2><21ae>: Abbrev Number: 7 (DW_TAG_subrange_type)
    <21af>   DW_AT_type        : <0x42>
    <21b3>   DW_AT_upper_bound : 47
 <2><21b4>: Abbrev Number: 0
 <1><21b5>: Abbrev Number: 6 (DW_TAG_array_type)
    <21b6>   DW_AT_type        : <0x1ce4>
    <21ba>   DW_AT_sibling     : <0x21c5>
 <2><21be>: Abbrev Number: 7 (DW_TAG_subrange_type)
    <21bf>   DW_AT_type        : <0x42>
    <21c3>   DW_AT_upper_bound : 31
 <2><21c4>: Abbrev Number: 0
 <1><21c5>: Abbrev Number: 9 (DW_TAG_pointer_type)
    <21c6>   DW_AT_byte_size   : 8
    <21c7>   DW_AT_type        : <0x1d74>
 <1><21cb>: Abbrev Number: 9 (DW_TAG_pointer_type)
    <21cc>   DW_AT_byte_size   : 8
    <21cd>   DW_AT_type        : <0x21c5>
 <1><21d1>: Abbrev Number: 6 (DW_TAG_array_type)
    <21d2>   DW_AT_type        : <0x483>
    <21d6>   DW_AT_sibling     : <0x21e2>
 <2><21da>: Abbrev Number: 24 (DW_TAG_subrange_type)
    <21db>   DW_AT_type        : <0x42>
    <21df>   DW_AT_upper_bound : 1023
 <2><21e1>: Abbrev Number: 0
 <1><21e2>: Abbrev Number: 6 (DW_TAG_array_type)
    <21e3>   DW_AT_type        : <0xbe>
    <21e7>   DW_AT_sibling     : <0x21f2>
 <2><21eb>: Abbrev Number: 7 (DW_TAG_subrange_type)
    <21ec>   DW_AT_type        : <0x42>
    <21f0>   DW_AT_upper_bound : 2
 <2><21f1>: Abbrev Number: 0
 <1><21f2>: Abbrev Number: 3 (DW_TAG_typedef)
    <21f3>   DW_AT_name        : (indirect string, offset: 0x98b): client_t
    <21f7>   DW_AT_decl_file   : 20
    <21f8>   DW_AT_decl_line   : 223
    <21f9>   DW_AT_decl_column : 3
    <21fa>   DW_AT_type        : <0x1e4f>
 <1><21fe>: Abbrev Number: 5 (DW_TAG_const_type)
    <21ff>   DW_AT_type        : <0x21f2>
 <1><2203>: Abbrev Number: 47 (DW_TAG_structure_type)
    <2204>   DW_AT_byte_size   : 0x100880
    <2208>   DW_AT_decl_file   : 20
    <2209>   DW_AT_decl_line   : 229
    <220a>   DW_AT_decl_column : 9
    <220b>   DW_AT_sibling     : <0x22f0>
 <2><220f>: Abbrev Number: 15 (DW_TAG_member)
    <2210>   DW_AT_name        : (indirect string, offset: 0x762): initialized
    <2214>   DW_AT_decl_file   : 20
    <2215>   DW_AT_decl_line   : 230
    <2216>   DW_AT_decl_column : 11
    <2217>   DW_AT_type        : <0x483>
    <221b>   DW_AT_data_member_location: 0
 <2><221c>: Abbrev Number: 15 (DW_TAG_member)
    <221d>   DW_AT_name        : (indirect string, offset: 0x12d1): time
    <2221>   DW_AT_decl_file   : 20
    <2222>   DW_AT_decl_line   : 232
    <2223>   DW_AT_decl_column : 8
    <2224>   DW_AT_type        : <0x6f>
    <2228>   DW_AT_data_member_location: 4
 <2><2229>: Abbrev Number: 15 (DW_TAG_member)
    <222a>   DW_AT_name        : (indirect string, offset: 0x4c9): msgTime
    <222e>   DW_AT_decl_file   : 20
    <222f>   DW_AT_decl_line   : 233
    <2230>   DW_AT_decl_column : 8
    <2231>   DW_AT_type        : <0x6f>
    <2235>   DW_AT_data_member_location: 8
 <2><2236>: Abbrev Number: 15 (DW_TAG_member)
    <2237>   DW_AT_name        : (indirect string, offset: 0xa57): snapFlagServerBit
    <223b>   DW_AT_decl_file   : 20
    <223c>   DW_AT_decl_line   : 235
    <223d>   DW_AT_decl_column : 8
    <223e>   DW_AT_type        : <0x6f>
    <2242>   DW_AT_data_member_location: 12
 <2><2243>: Abbrev Number: 15 (DW_TAG_member)
    <2244>   DW_AT_name        : (indirect string, offset: 0x75a): clients
    <2248>   DW_AT_decl_file   : 20
    <2249>   DW_AT_decl_line   : 237
    <224a>   DW_AT_decl_column : 12
    <224b>   DW_AT_type        : <0x22f0>
    <224f>   DW_AT_data_member_location: 16
 <2><2250>: Abbrev Number: 15 (DW_TAG_member)
    <2251>   DW_AT_name        : (indirect string, offset: 0x16a): numSnapshotEntities
    <2255>   DW_AT_decl_file   : 20
    <2256>   DW_AT_decl_line   : 238
    <2257>   DW_AT_decl_column : 8
    <2258>   DW_AT_type        : <0x6f>
    <225c>   DW_AT_data_member_location: 24
 <2><225d>: Abbrev Number: 15 (DW_TAG_member)
    <225e>   DW_AT_name        : (indirect string, offset: 0x1b5f): snapshotEntities
    <2262>   DW_AT_decl_file   : 20
    <2263>   DW_AT_decl_line   : 239
    <2264>   DW_AT_decl_column : 17
    <2265>   DW_AT_type        : <0x1ac8>
    <2269>   DW_AT_data_member_location: 32
 <2><226a>: Abbrev Number: 15 (DW_TAG_member)
    <226b>   DW_AT_name        : (indirect string, offset: 0x1cb): nextHeartbeatTime
    <226f>   DW_AT_decl_file   : 20
    <2270>   DW_AT_decl_line   : 240
    <2271>   DW_AT_decl_column : 8
    <2272>   DW_AT_type        : <0x6f>
    <2276>   DW_AT_data_member_location: 40
 <2><2277>: Abbrev Number: 15 (DW_TAG_member)
    <2278>   DW_AT_name        : (indirect string, offset: 0x424): authorizeAddress
    <227c>   DW_AT_decl_file   : 20
    <227d>   DW_AT_decl_line   : 242
    <227e>   DW_AT_decl_column : 11
    <227f>   DW_AT_type        : <0xfb3>
    <2283>   DW_AT_data_member_location: 48
 <2><2284>: Abbrev Number: 15 (DW_TAG_member)
    <2285>   DW_AT_name        : (indirect string, offset: 0x137b): masterResolveTime
    <2289>   DW_AT_decl_file   : 20
    <228a>   DW_AT_decl_line   : 243
    <228b>   DW_AT_decl_column : 8
    <228c>   DW_AT_type        : <0x22f6>
    <2290>   DW_AT_data_member_location: 80
 <2><2291>: Abbrev Number: 15 (DW_TAG_member)
    <2292>   DW_AT_name        : (indirect string, offset: 0x17ec): freeStorageEntities
    <2296>   DW_AT_decl_file   : 20
    <2297>   DW_AT_decl_line   : 246
    <2298>   DW_AT_decl_column : 8
    <2299>   DW_AT_type        : <0x6f>
    <229d>   DW_AT_data_member_location: 100
 <2><229e>: Abbrev Number: 15 (DW_TAG_member)
    <229f>   DW_AT_name        : (indirect string, offset: 0x26a): currentStoragePosition
    <22a3>   DW_AT_decl_file   : 20
    <22a4>   DW_AT_decl_line   : 247
    <22a5>   DW_AT_decl_column : 8
    <22a6>   DW_AT_type        : <0x6f>
    <22aa>   DW_AT_data_member_location: 104
 <2><22ab>: Abbrev Number: 15 (DW_TAG_member)
    <22ac>   DW_AT_name        : (indirect string, offset: 0x1129): snapshotFrame
    <22b0>   DW_AT_decl_file   : 20
    <22b1>   DW_AT_decl_line   : 248
    <22b2>   DW_AT_decl_column : 8
    <22b3>   DW_AT_type        : <0x6f>
    <22b7>   DW_AT_data_member_location: 108
 <2><22b8>: Abbrev Number: 15 (DW_TAG_member)
    <22b9>   DW_AT_name        : (indirect string, offset: 0x563): currentSnapshotFrame
    <22bd>   DW_AT_decl_file   : 20
    <22be>   DW_AT_decl_line   : 249
    <22bf>   DW_AT_decl_column : 8
    <22c0>   DW_AT_type        : <0x6f>
    <22c4>   DW_AT_data_member_location: 112
 <2><22c5>: Abbrev Number: 15 (DW_TAG_member)
    <22c6>   DW_AT_name        : (indirect string, offset: 0x451): lastValidFrame
    <22ca>   DW_AT_decl_file   : 20
    <22cb>   DW_AT_decl_line   : 250
    <22cc>   DW_AT_decl_column : 8
    <22cd>   DW_AT_type        : <0x6f>
    <22d1>   DW_AT_data_member_location: 116
 <2><22d2>: Abbrev Number: 15 (DW_TAG_member)
    <22d3>   DW_AT_name        : (indirect string, offset: 0xca0): snapFrames
    <22d7>   DW_AT_decl_file   : 20
    <22d8>   DW_AT_decl_line   : 251
    <22d9>   DW_AT_decl_column : 18
    <22da>   DW_AT_type        : <0x2306>
    <22de>   DW_AT_data_member_location: 120
 <2><22df>: Abbrev Number: 48 (DW_TAG_member)
    <22e0>   DW_AT_name        : (indirect string, offset: 0x1481): currFrame
    <22e4>   DW_AT_decl_file   : 20
    <22e5>   DW_AT_decl_line   : 252
    <22e6>   DW_AT_decl_column : 19
    <22e7>   DW_AT_type        : <0x2316>
    <22eb>   DW_AT_data_member_location: 0x100878
 <2><22ef>: Abbrev Number: 0
 <1><22f0>: Abbrev Number: 9 (DW_TAG_pointer_type)
    <22f1>   DW_AT_byte_size   : 8
    <22f2>   DW_AT_type        : <0x21f2>
 <1><22f6>: Abbrev Number: 6 (DW_TAG_array_type)
    <22f7>   DW_AT_type        : <0x6f>
    <22fb>   DW_AT_sibling     : <0x2306>
 <2><22ff>: Abbrev Number: 7 (DW_TAG_subrange_type)
    <2300>   DW_AT_type        : <0x42>
    <2304>   DW_AT_upper_bound : 4
 <2><2305>: Abbrev Number: 0
 <1><2306>: Abbrev Number: 6 (DW_TAG_array_type)
    <2307>   DW_AT_type        : <0x1ace>
    <230b>   DW_AT_sibling     : <0x2316>
 <2><230f>: Abbrev Number: 7 (DW_TAG_subrange_type)
    <2310>   DW_AT_type        : <0x42>
    <2314>   DW_AT_upper_bound : 127
 <2><2315>: Abbrev Number: 0
 <1><2316>: Abbrev Number: 9 (DW_TAG_pointer_type)
    <2317>   DW_AT_byte_size   : 8
    <2318>   DW_AT_type        : <0x1ace>
 <1><231c>: Abbrev Number: 3 (DW_TAG_typedef)
    <231d>   DW_AT_name        : (indirect string, offset: 0x18a8): serverStatic_t
    <2321>   DW_AT_decl_file   : 20
    <2322>   DW_AT_decl_line   : 254
    <2323>   DW_AT_decl_column : 3
    <2324>   DW_AT_type        : <0x2203>
 <1><2328>: Abbrev Number: 45 (DW_TAG_variable)
    <2329>   DW_AT_name        : svs
    <232d>   DW_AT_decl_file   : 20
    <232e>   DW_AT_decl_line   : 271
    <2330>   DW_AT_decl_column : 23
    <2331>   DW_AT_type        : <0x231c>
    <2335>   DW_AT_external    : 1
    <2335>   DW_AT_declaration : 1
 <1><2335>: Abbrev Number: 45 (DW_TAG_variable)
    <2336>   DW_AT_name        : sv
    <2339>   DW_AT_decl_file   : 20
    <233a>   DW_AT_decl_line   : 272
    <233c>   DW_AT_decl_column : 18
    <233d>   DW_AT_type        : <0x1c33>
    <2341>   DW_AT_external    : 1
    <2341>   DW_AT_declaration : 1
 <1><2341>: Abbrev Number: 45 (DW_TAG_variable)
    <2342>   DW_AT_name        : gvm
    <2346>   DW_AT_decl_file   : 20
    <2347>   DW_AT_decl_line   : 273
    <2349>   DW_AT_decl_column : 16
    <234a>   DW_AT_type        : <0x1697>
    <234e>   DW_AT_external    : 1
    <234e>   DW_AT_declaration : 1
 <1><234e>: Abbrev Number: 10 (DW_TAG_variable)
    <234f>   DW_AT_name        : (indirect string, offset: 0x1858): sv_fps
    <2353>   DW_AT_decl_file   : 20
    <2354>   DW_AT_decl_line   : 275
    <2356>   DW_AT_decl_column : 16
    <2357>   DW_AT_type        : <0x89f>
    <235b>   DW_AT_external    : 1
    <235b>   DW_AT_declaration : 1
 <1><235b>: Abbrev Number: 10 (DW_TAG_variable)
    <235c>   DW_AT_name        : (indirect string, offset: 0xafb): sv_timeout
    <2360>   DW_AT_decl_file   : 20
    <2361>   DW_AT_decl_line   : 276
    <2363>   DW_AT_decl_column : 16
    <2364>   DW_AT_type        : <0x89f>
    <2368>   DW_AT_external    : 1
    <2368>   DW_AT_declaration : 1
 <1><2368>: Abbrev Number: 10 (DW_TAG_variable)
    <2369>   DW_AT_name        : (indirect string, offset: 0x1ea3): sv_zombietime
    <236d>   DW_AT_decl_file   : 20
    <236e>   DW_AT_decl_line   : 277
    <2370>   DW_AT_decl_column : 16
    <2371>   DW_AT_type        : <0x89f>
    <2375>   DW_AT_external    : 1
    <2375>   DW_AT_declaration : 1
 <1><2375>: Abbrev Number: 10 (DW_TAG_variable)
    <2376>   DW_AT_name        : (indirect string, offset: 0xaaa): sv_rconPassword
    <237a>   DW_AT_decl_file   : 20
    <237b>   DW_AT_decl_line   : 278
    <237d>   DW_AT_decl_column : 16
    <237e>   DW_AT_type        : <0x89f>
    <2382>   DW_AT_external    : 1
    <2382>   DW_AT_declaration : 1
 <1><2382>: Abbrev Number: 10 (DW_TAG_variable)
    <2383>   DW_AT_name        : (indirect string, offset: 0x193d): sv_privatePassword
    <2387>   DW_AT_decl_file   : 20
    <2388>   DW_AT_decl_line   : 279
    <238a>   DW_AT_decl_column : 16
    <238b>   DW_AT_type        : <0x89f>
    <238f>   DW_AT_external    : 1
    <238f>   DW_AT_declaration : 1
 <1><238f>: Abbrev Number: 10 (DW_TAG_variable)
    <2390>   DW_AT_name        : (indirect string, offset: 0x594): sv_allowDownload
    <2394>   DW_AT_decl_file   : 20
    <2395>   DW_AT_decl_line   : 280
    <2397>   DW_AT_decl_column : 16
    <2398>   DW_AT_type        : <0x89f>
    <239c>   DW_AT_external    : 1
    <239c>   DW_AT_declaration : 1
 <1><239c>: Abbrev Number: 10 (DW_TAG_variable)
    <239d>   DW_AT_name        : (indirect string, offset: 0x1d7b): sv_maxclients
    <23a1>   DW_AT_decl_file   : 20
    <23a2>   DW_AT_decl_line   : 281
    <23a4>   DW_AT_decl_column : 16
    <23a5>   DW_AT_type        : <0x89f>
    <23a9>   DW_AT_external    : 1
    <23a9>   DW_AT_declaration : 1
 <1><23a9>: Abbrev Number: 10 (DW_TAG_variable)
    <23aa>   DW_AT_name        : (indirect string, offset: 0x307): sv_maxclientsPerIP
    <23ae>   DW_AT_decl_file   : 20
    <23af>   DW_AT_decl_line   : 282
    <23b1>   DW_AT_decl_column : 16
    <23b2>   DW_AT_type        : <0x89f>
    <23b6>   DW_AT_external    : 1
    <23b6>   DW_AT_declaration : 1
 <1><23b6>: Abbrev Number: 10 (DW_TAG_variable)
    <23b7>   DW_AT_name        : (indirect string, offset: 0x12f7): sv_clientTLD
    <23bb>   DW_AT_decl_file   : 20
    <23bc>   DW_AT_decl_line   : 283
    <23be>   DW_AT_decl_column : 16
    <23bf>   DW_AT_type        : <0x89f>
    <23c3>   DW_AT_external    : 1
    <23c3>   DW_AT_declaration : 1
 <1><23c3>: Abbrev Number: 10 (DW_TAG_variable)
    <23c4>   DW_AT_name        : (indirect string, offset: 0x13d1): sv_privateClients
    <23c8>   DW_AT_decl_file   : 20
    <23c9>   DW_AT_decl_line   : 285
    <23cb>   DW_AT_decl_column : 16
    <23cc>   DW_AT_type        : <0x89f>
    <23d0>   DW_AT_external    : 1
    <23d0>   DW_AT_declaration : 1
 <1><23d0>: Abbrev Number: 10 (DW_TAG_variable)
    <23d1>   DW_AT_name        : (indirect string, offset: 0x1008): sv_hostname
    <23d5>   DW_AT_decl_file   : 20
    <23d6>   DW_AT_decl_line   : 286
    <23d8>   DW_AT_decl_column : 16
    <23d9>   DW_AT_type        : <0x89f>
    <23dd>   DW_AT_external    : 1
    <23dd>   DW_AT_declaration : 1
 <1><23dd>: Abbrev Number: 6 (DW_TAG_array_type)
    <23de>   DW_AT_type        : <0x89f>
    <23e2>   DW_AT_sibling     : <0x23ed>
 <2><23e6>: Abbrev Number: 7 (DW_TAG_subrange_type)
    <23e7>   DW_AT_type        : <0x42>
    <23eb>   DW_AT_upper_bound : 4
 <2><23ec>: Abbrev Number: 0
 <1><23ed>: Abbrev Number: 10 (DW_TAG_variable)
    <23ee>   DW_AT_name        : (indirect string, offset: 0xfda): sv_master
    <23f2>   DW_AT_decl_file   : 20
    <23f3>   DW_AT_decl_line   : 287
    <23f5>   DW_AT_decl_column : 16
    <23f6>   DW_AT_type        : <0x23dd>
    <23fa>   DW_AT_external    : 1
    <23fa>   DW_AT_declaration : 1
 <1><23fa>: Abbrev Number: 10 (DW_TAG_variable)
    <23fb>   DW_AT_name        : (indirect string, offset: 0x114f): sv_reconnectlimit
    <23ff>   DW_AT_decl_file   : 20
    <2400>   DW_AT_decl_line   : 288
    <2402>   DW_AT_decl_column : 16
    <2403>   DW_AT_type        : <0x89f>
    <2407>   DW_AT_external    : 1
    <2407>   DW_AT_declaration : 1
 <1><2407>: Abbrev Number: 10 (DW_TAG_variable)
    <2408>   DW_AT_name        : (indirect string, offset: 0x71c): sv_padPackets
    <240c>   DW_AT_decl_file   : 20
    <240d>   DW_AT_decl_line   : 289
    <240f>   DW_AT_decl_column : 16
    <2410>   DW_AT_type        : <0x89f>
    <2414>   DW_AT_external    : 1
    <2414>   DW_AT_declaration : 1
 <1><2414>: Abbrev Number: 10 (DW_TAG_variable)
    <2415>   DW_AT_name        : (indirect string, offset: 0x11f0): sv_killserver
    <2419>   DW_AT_decl_file   : 20
    <241a>   DW_AT_decl_line   : 290
    <241c>   DW_AT_decl_column : 16
    <241d>   DW_AT_type        : <0x89f>
    <2421>   DW_AT_external    : 1
    <2421>   DW_AT_declaration : 1
 <1><2421>: Abbrev Number: 10 (DW_TAG_variable)
    <2422>   DW_AT_name        : (indirect string, offset: 0x897): sv_mapname
    <2426>   DW_AT_decl_file   : 20
    <2427>   DW_AT_decl_line   : 291
    <2429>   DW_AT_decl_column : 16
    <242a>   DW_AT_type        : <0x89f>
    <242e>   DW_AT_external    : 1
    <242e>   DW_AT_declaration : 1
 <1><242e>: Abbrev Number: 10 (DW_TAG_variable)
    <242f>   DW_AT_name        : (indirect string, offset: 0x1db4): sv_mapChecksum
    <2433>   DW_AT_decl_file   : 20
    <2434>   DW_AT_decl_line   : 292
    <2436>   DW_AT_decl_column : 16
    <2437>   DW_AT_type        : <0x89f>
    <243b>   DW_AT_external    : 1
    <243b>   DW_AT_declaration : 1
 <1><243b>: Abbrev Number: 10 (DW_TAG_variable)
    <243c>   DW_AT_name        : (indirect string, offset: 0x1a77): sv_referencedPakNames
    <2440>   DW_AT_decl_file   : 20
    <2441>   DW_AT_decl_line   : 293
    <2443>   DW_AT_decl_column : 16
    <2444>   DW_AT_type        : <0x89f>
    <2448>   DW_AT_external    : 1
    <2448>   DW_AT_declaration : 1
 <1><2448>: Abbrev Number: 10 (DW_TAG_variable)
    <2449>   DW_AT_name        : (indirect string, offset: 0x1d6f): sv_serverid
    <244d>   DW_AT_decl_file   : 20
    <244e>   DW_AT_decl_line   : 294
    <2450>   DW_AT_decl_column : 16
    <2451>   DW_AT_type        : <0x89f>
    <2455>   DW_AT_external    : 1
    <2455>   DW_AT_declaration : 1
 <1><2455>: Abbrev Number: 10 (DW_TAG_variable)
    <2456>   DW_AT_name        : (indirect string, offset: 0x603): sv_minRate
    <245a>   DW_AT_decl_file   : 20
    <245b>   DW_AT_decl_line   : 295
    <245d>   DW_AT_decl_column : 16
    <245e>   DW_AT_type        : <0x89f>
    <2462>   DW_AT_external    : 1
    <2462>   DW_AT_declaration : 1
 <1><2462>: Abbrev Number: 10 (DW_TAG_variable)
    <2463>   DW_AT_name        : (indirect string, offset: 0x18bd): sv_maxRate
    <2467>   DW_AT_decl_file   : 20
    <2468>   DW_AT_decl_line   : 296
    <246a>   DW_AT_decl_column : 16
    <246b>   DW_AT_type        : <0x89f>
    <246f>   DW_AT_external    : 1
    <246f>   DW_AT_declaration : 1
 <1><246f>: Abbrev Number: 10 (DW_TAG_variable)
    <2470>   DW_AT_name        : (indirect string, offset: 0x4b9): sv_dlRate
    <2474>   DW_AT_decl_file   : 20
    <2475>   DW_AT_decl_line   : 297
    <2477>   DW_AT_decl_column : 16
    <2478>   DW_AT_type        : <0x89f>
    <247c>   DW_AT_external    : 1
    <247c>   DW_AT_declaration : 1
 <1><247c>: Abbrev Number: 10 (DW_TAG_variable)
    <247d>   DW_AT_name        : (indirect string, offset: 0x1ada): sv_gametype
    <2481>   DW_AT_decl_file   : 20
    <2482>   DW_AT_decl_line   : 298
    <2484>   DW_AT_decl_column : 16
    <2485>   DW_AT_type        : <0x89f>
    <2489>   DW_AT_external    : 1
    <2489>   DW_AT_declaration : 1
 <1><2489>: Abbrev Number: 10 (DW_TAG_variable)
    <248a>   DW_AT_name        : (indirect string, offset: 0x225): sv_pure
    <248e>   DW_AT_decl_file   : 20
    <248f>   DW_AT_decl_line   : 299
    <2491>   DW_AT_decl_column : 16
    <2492>   DW_AT_type        : <0x89f>
    <2496>   DW_AT_external    : 1
    <2496>   DW_AT_declaration : 1
 <1><2496>: Abbrev Number: 10 (DW_TAG_variable)
    <2497>   DW_AT_name        : (indirect string, offset: 0x129f): sv_floodProtect
    <249b>   DW_AT_decl_file   : 20
    <249c>   DW_AT_decl_line   : 300
    <249e>   DW_AT_decl_column : 16
    <249f>   DW_AT_type        : <0x89f>
    <24a3>   DW_AT_external    : 1
    <24a3>   DW_AT_declaration : 1
 <1><24a3>: Abbrev Number: 10 (DW_TAG_variable)
    <24a4>   DW_AT_name        : (indirect string, offset: 0x2ae): sv_lanForceRate
    <24a8>   DW_AT_decl_file   : 20
    <24a9>   DW_AT_decl_line   : 301
    <24ab>   DW_AT_decl_column : 16
    <24ac>   DW_AT_type        : <0x89f>
    <24b0>   DW_AT_external    : 1
    <24b0>   DW_AT_declaration : 1
 <1><24b0>: Abbrev Number: 10 (DW_TAG_variable)
    <24b1>   DW_AT_name        : (indirect string, offset: 0x11fe): sv_levelTimeReset
    <24b5>   DW_AT_decl_file   : 20
    <24b6>   DW_AT_decl_line   : 303
    <24b8>   DW_AT_decl_column : 16
    <24b9>   DW_AT_type        : <0x89f>
    <24bd>   DW_AT_external    : 1
    <24bd>   DW_AT_declaration : 1
 <1><24bd>: Abbrev Number: 10 (DW_TAG_variable)
    <24be>   DW_AT_name        : (indirect string, offset: 0x175f): sv_filter
    <24c2>   DW_AT_decl_file   : 20
    <24c3>   DW_AT_decl_line   : 304
    <24c5>   DW_AT_decl_column : 16
    <24c6>   DW_AT_type        : <0x89f>
    <24ca>   DW_AT_external    : 1
    <24ca>   DW_AT_declaration : 1
 <1><24ca>: Abbrev Number: 51 (DW_TAG_variable)
    <24cb>   DW_AT_specification: <0x2328>
    <24cf>   DW_AT_decl_file   : 1
    <24d0>   DW_AT_decl_line   : 25
    <24d1>   DW_AT_decl_column : 16
    <24d2>   DW_AT_location    : 9 byte block: 3 0 0 0 0 0 0 0 0 	(DW_OP_addr: 0)
 <1><24dc>: Abbrev Number: 51 (DW_TAG_variable)
    <24dd>   DW_AT_specification: <0x2335>
    <24e1>   DW_AT_decl_file   : 1
    <24e2>   DW_AT_decl_line   : 26
    <24e3>   DW_AT_decl_column : 11
    <24e4>   DW_AT_location    : 9 byte block: 3 0 0 0 0 0 0 0 0 	(DW_OP_addr: 0)
 <1><24ee>: Abbrev Number: 51 (DW_TAG_variable)
    <24ef>   DW_AT_specification: <0x2341>
    <24f3>   DW_AT_decl_file   : 1
    <24f4>   DW_AT_decl_line   : 27
    <24f5>   DW_AT_decl_column : 9
    <24f6>   DW_AT_location    : 9 byte block: 3 0 0 0 0 0 0 0 0 	(DW_OP_addr: 0)
 <1><2500>: Abbrev Number: 51 (DW_TAG_variable)
    <2501>   DW_AT_specification: <0x234e>
    <2505>   DW_AT_decl_file   : 1
    <2506>   DW_AT_decl_line   : 29
    <2507>   DW_AT_decl_column : 9
    <2508>   DW_AT_location    : 9 byte block: 3 0 0 0 0 0 0 0 0 	(DW_OP_addr: 0)
 <1><2512>: Abbrev Number: 51 (DW_TAG_variable)
    <2513>   DW_AT_specification: <0x235b>
    <2517>   DW_AT_decl_file   : 1
    <2518>   DW_AT_decl_line   : 30
    <2519>   DW_AT_decl_column : 9
    <251a>   DW_AT_location    : 9 byte block: 3 0 0 0 0 0 0 0 0 	(DW_OP_addr: 0)
 <1><2524>: Abbrev Number: 51 (DW_TAG_variable)
    <2525>   DW_AT_specification: <0x2368>
    <2529>   DW_AT_decl_file   : 1
    <252a>   DW_AT_decl_line   : 31
    <252b>   DW_AT_decl_column : 9
    <252c>   DW_AT_location    : 9 byte block: 3 0 0 0 0 0 0 0 0 	(DW_OP_addr: 0)
 <1><2536>: Abbrev Number: 51 (DW_TAG_variable)
    <2537>   DW_AT_specification: <0x2375>
    <253b>   DW_AT_decl_file   : 1
    <253c>   DW_AT_decl_line   : 32
    <253d>   DW_AT_decl_column : 9
    <253e>   DW_AT_location    : 9 byte block: 3 0 0 0 0 0 0 0 0 	(DW_OP_addr: 0)
 <1><2548>: Abbrev Number: 51 (DW_TAG_variable)
    <2549>   DW_AT_specification: <0x2382>
    <254d>   DW_AT_decl_file   : 1
    <254e>   DW_AT_decl_line   : 33
    <254f>   DW_AT_decl_column : 9
    <2550>   DW_AT_location    : 9 byte block: 3 0 0 0 0 0 0 0 0 	(DW_OP_addr: 0)
 <1><255a>: Abbrev Number: 51 (DW_TAG_variable)
    <255b>   DW_AT_specification: <0x238f>
    <255f>   DW_AT_decl_file   : 1
    <2560>   DW_AT_decl_line   : 34
    <2561>   DW_AT_decl_column : 9
    <2562>   DW_AT_location    : 9 byte block: 3 0 0 0 0 0 0 0 0 	(DW_OP_addr: 0)
 <1><256c>: Abbrev Number: 51 (DW_TAG_variable)
    <256d>   DW_AT_specification: <0x239c>
    <2571>   DW_AT_decl_file   : 1
    <2572>   DW_AT_decl_line   : 35
    <2573>   DW_AT_decl_column : 9
    <2574>   DW_AT_location    : 9 byte block: 3 0 0 0 0 0 0 0 0 	(DW_OP_addr: 0)
 <1><257e>: Abbrev Number: 51 (DW_TAG_variable)
    <257f>   DW_AT_specification: <0x23a9>
    <2583>   DW_AT_decl_file   : 1
    <2584>   DW_AT_decl_line   : 36
    <2585>   DW_AT_decl_column : 9
    <2586>   DW_AT_location    : 9 byte block: 3 0 0 0 0 0 0 0 0 	(DW_OP_addr: 0)
 <1><2590>: Abbrev Number: 51 (DW_TAG_variable)
    <2591>   DW_AT_specification: <0x23b6>
    <2595>   DW_AT_decl_file   : 1
    <2596>   DW_AT_decl_line   : 37
    <2597>   DW_AT_decl_column : 9
    <2598>   DW_AT_location    : 9 byte block: 3 0 0 0 0 0 0 0 0 	(DW_OP_addr: 0)
 <1><25a2>: Abbrev Number: 51 (DW_TAG_variable)
    <25a3>   DW_AT_specification: <0x23c3>
    <25a7>   DW_AT_decl_file   : 1
    <25a8>   DW_AT_decl_line   : 39
    <25a9>   DW_AT_decl_column : 9
    <25aa>   DW_AT_location    : 9 byte block: 3 0 0 0 0 0 0 0 0 	(DW_OP_addr: 0)
 <1><25b4>: Abbrev Number: 51 (DW_TAG_variable)
    <25b5>   DW_AT_specification: <0x23d0>
    <25b9>   DW_AT_decl_file   : 1
    <25ba>   DW_AT_decl_line   : 40
    <25bb>   DW_AT_decl_column : 9
    <25bc>   DW_AT_location    : 9 byte block: 3 0 0 0 0 0 0 0 0 	(DW_OP_addr: 0)
 <1><25c6>: Abbrev Number: 51 (DW_TAG_variable)
    <25c7>   DW_AT_specification: <0x23ed>
    <25cb>   DW_AT_decl_file   : 1
    <25cc>   DW_AT_decl_line   : 41
    <25cd>   DW_AT_decl_column : 9
    <25ce>   DW_AT_location    : 9 byte block: 3 0 0 0 0 0 0 0 0 	(DW_OP_addr: 0)
 <1><25d8>: Abbrev Number: 51 (DW_TAG_variable)
    <25d9>   DW_AT_specification: <0x23fa>
    <25dd>   DW_AT_decl_file   : 1
    <25de>   DW_AT_decl_line   : 42
    <25df>   DW_AT_decl_column : 9
    <25e0>   DW_AT_location    : 9 byte block: 3 0 0 0 0 0 0 0 0 	(DW_OP_addr: 0)
 <1><25ea>: Abbrev Number: 51 (DW_TAG_variable)
    <25eb>   DW_AT_specification: <0x2407>
    <25ef>   DW_AT_decl_file   : 1
    <25f0>   DW_AT_decl_line   : 43
    <25f1>   DW_AT_decl_column : 9
    <25f2>   DW_AT_location    : 9 byte block: 3 0 0 0 0 0 0 0 0 	(DW_OP_addr: 0)
 <1><25fc>: Abbrev Number: 51 (DW_TAG_variable)
    <25fd>   DW_AT_specification: <0x2414>
    <2601>   DW_AT_decl_file   : 1
    <2602>   DW_AT_decl_line   : 44
    <2603>   DW_AT_decl_column : 9
    <2604>   DW_AT_location    : 9 byte block: 3 0 0 0 0 0 0 0 0 	(DW_OP_addr: 0)
 <1><260e>: Abbrev Number: 51 (DW_TAG_variable)
    <260f>   DW_AT_specification: <0x2421>
    <2613>   DW_AT_decl_file   : 1
    <2614>   DW_AT_decl_line   : 45
    <2615>   DW_AT_decl_column : 9
    <2616>   DW_AT_location    : 9 byte block: 3 0 0 0 0 0 0 0 0 	(DW_OP_addr: 0)
 <1><2620>: Abbrev Number: 51 (DW_TAG_variable)
    <2621>   DW_AT_specification: <0x242e>
    <2625>   DW_AT_decl_file   : 1
    <2626>   DW_AT_decl_line   : 46
    <2627>   DW_AT_decl_column : 9
    <2628>   DW_AT_location    : 9 byte block: 3 0 0 0 0 0 0 0 0 	(DW_OP_addr: 0)
 <1><2632>: Abbrev Number: 51 (DW_TAG_variable)
    <2633>   DW_AT_specification: <0x243b>
    <2637>   DW_AT_decl_file   : 1
    <2638>   DW_AT_decl_line   : 47
    <2639>   DW_AT_decl_column : 9
    <263a>   DW_AT_location    : 9 byte block: 3 0 0 0 0 0 0 0 0 	(DW_OP_addr: 0)
 <1><2644>: Abbrev Number: 51 (DW_TAG_variable)
    <2645>   DW_AT_specification: <0x2448>
    <2649>   DW_AT_decl_file   : 1
    <264a>   DW_AT_decl_line   : 48
    <264b>   DW_AT_decl_column : 9
    <264c>   DW_AT_location    : 9 byte block: 3 0 0 0 0 0 0 0 0 	(DW_OP_addr: 0)
 <1><2656>: Abbrev Number: 51 (DW_TAG_variable)
    <2657>   DW_AT_specification: <0x2455>
    <265b>   DW_AT_decl_file   : 1
    <265c>   DW_AT_decl_line   : 49
    <265d>   DW_AT_decl_column : 9
    <265e>   DW_AT_location    : 9 byte block: 3 0 0 0 0 0 0 0 0 	(DW_OP_addr: 0)
 <1><2668>: Abbrev Number: 51 (DW_TAG_variable)
    <2669>   DW_AT_specification: <0x2462>
    <266d>   DW_AT_decl_file   : 1
    <266e>   DW_AT_decl_line   : 50
    <266f>   DW_AT_decl_column : 9
    <2670>   DW_AT_location    : 9 byte block: 3 0 0 0 0 0 0 0 0 	(DW_OP_addr: 0)
 <1><267a>: Abbrev Number: 51 (DW_TAG_variable)
    <267b>   DW_AT_specification: <0x246f>
    <267f>   DW_AT_decl_file   : 1
    <2680>   DW_AT_decl_line   : 51
    <2681>   DW_AT_decl_column : 9
    <2682>   DW_AT_location    : 9 byte block: 3 0 0 0 0 0 0 0 0 	(DW_OP_addr: 0)
 <1><268c>: Abbrev Number: 51 (DW_TAG_variable)
    <268d>   DW_AT_specification: <0x247c>
    <2691>   DW_AT_decl_file   : 1
    <2692>   DW_AT_decl_line   : 52
    <2693>   DW_AT_decl_column : 9
    <2694>   DW_AT_location    : 9 byte block: 3 0 0 0 0 0 0 0 0 	(DW_OP_addr: 0)
 <1><269e>: Abbrev Number: 51 (DW_TAG_variable)
    <269f>   DW_AT_specification: <0x2489>
    <26a3>   DW_AT_decl_file   : 1
    <26a4>   DW_AT_decl_line   : 53
    <26a5>   DW_AT_decl_column : 9
    <26a6>   DW_AT_location    : 9 byte block: 3 0 0 0 0 0 0 0 0 	(DW_OP_addr: 0)
 <1><26b0>: Abbrev Number: 51 (DW_TAG_variable)
    <26b1>   DW_AT_specification: <0x2496>
    <26b5>   DW_AT_decl_file   : 1
    <26b6>   DW_AT_decl_line   : 54
    <26b7>   DW_AT_decl_column : 9
    <26b8>   DW_AT_location    : 9 byte block: 3 0 0 0 0 0 0 0 0 	(DW_OP_addr: 0)
 <1><26c2>: Abbrev Number: 51 (DW_TAG_variable)
    <26c3>   DW_AT_specification: <0x24a3>
    <26c7>   DW_AT_decl_file   : 1
    <26c8>   DW_AT_decl_line   : 55
    <26c9>   DW_AT_decl_column : 9
    <26ca>   DW_AT_location    : 9 byte block: 3 0 0 0 0 0 0 0 0 	(DW_OP_addr: 0)
 <1><26d4>: Abbrev Number: 51 (DW_TAG_variable)
    <26d5>   DW_AT_specification: <0x24b0>
    <26d9>   DW_AT_decl_file   : 1
    <26da>   DW_AT_decl_line   : 57
    <26db>   DW_AT_decl_column : 9
    <26dc>   DW_AT_location    : 9 byte block: 3 0 0 0 0 0 0 0 0 	(DW_OP_addr: 0)
 <1><26e6>: Abbrev Number: 51 (DW_TAG_variable)
    <26e7>   DW_AT_specification: <0x24bd>
    <26eb>   DW_AT_decl_file   : 1
    <26ec>   DW_AT_decl_line   : 58
    <26ed>   DW_AT_decl_column : 9
    <26ee>   DW_AT_location    : 9 byte block: 3 0 0 0 0 0 0 0 0 	(DW_OP_addr: 0)
 <1><26f8>: Abbrev Number: 6 (DW_TAG_array_type)
    <26f9>   DW_AT_type        : <0x1db4>
    <26fd>   DW_AT_sibling     : <0x2709>
 <2><2701>: Abbrev Number: 24 (DW_TAG_subrange_type)
    <2702>   DW_AT_type        : <0x42>
    <2706>   DW_AT_upper_bound : 16383
 <2><2708>: Abbrev Number: 0
 <1><2709>: Abbrev Number: 52 (DW_TAG_variable)
    <270a>   DW_AT_name        : (indirect string, offset: 0xa69): buckets
    <270e>   DW_AT_decl_file   : 1
    <270f>   DW_AT_decl_line   : 360
    <2711>   DW_AT_decl_column : 22
    <2712>   DW_AT_type        : <0x26f8>
    <2716>   DW_AT_location    : 9 byte block: 3 20 0 0 0 0 0 0 0 	(DW_OP_addr: 20)
 <1><2720>: Abbrev Number: 6 (DW_TAG_array_type)
    <2721>   DW_AT_type        : <0x1e49>
    <2725>   DW_AT_sibling     : <0x2731>
 <2><2729>: Abbrev Number: 24 (DW_TAG_subrange_type)
    <272a>   DW_AT_type        : <0x42>
    <272e>   DW_AT_upper_bound : 1023
 <2><2730>: Abbrev Number: 0
 <1><2731>: Abbrev Number: 52 (DW_TAG_variable)
    <2732>   DW_AT_name        : (indirect string, offset: 0x1033): bucketHashes
    <2736>   DW_AT_decl_file   : 1
    <2737>   DW_AT_decl_line   : 361
    <2739>   DW_AT_decl_column : 23
    <273a>   DW_AT_type        : <0x2720>
    <273e>   DW_AT_location    : 9 byte block: 3 20 0 e 0 0 0 0 0 	(DW_OP_addr: e0020)
 <1><2748>: Abbrev Number: 52 (DW_TAG_variable)
    <2749>   DW_AT_name        : (indirect string, offset: 0x578): outboundRateLimit
    <274d>   DW_AT_decl_file   : 1
    <274e>   DW_AT_decl_line   : 362
    <2750>   DW_AT_decl_column : 20
    <2751>   DW_AT_type        : <0x1da8>
    <2755>   DW_AT_location    : 9 byte block: 3 20 20 e 0 0 0 0 0 	(DW_OP_addr: e2020)
 <1><275f>: Abbrev Number: 52 (DW_TAG_variable)
    <2760>   DW_AT_name        : (indirect string, offset: 0x179c): redirectAddress
    <2764>   DW_AT_decl_file   : 1
    <2765>   DW_AT_decl_line   : 805
    <2767>   DW_AT_decl_column : 17
    <2768>   DW_AT_type        : <0xfb3>
    <276c>   DW_AT_location    : 9 byte block: 3 40 20 e 0 0 0 0 0 	(DW_OP_addr: e2040)
 <1><2776>: Abbrev Number: 53 (DW_TAG_subprogram)
    <2777>   DW_AT_external    : 1
    <2777>   DW_AT_name        : (indirect string, offset: 0xb7d): SV_SendQueuedPackets
    <277b>   DW_AT_decl_file   : 1
    <277c>   DW_AT_decl_line   : 1460
    <277e>   DW_AT_decl_column : 5
    <277f>   DW_AT_prototyped  : 1
    <277f>   DW_AT_type        : <0x6f>
    <2783>   DW_AT_low_pc      : 0x26d5
    <278b>   DW_AT_high_pc     : 0x10e
    <2793>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
    <2795>   DW_AT_GNU_all_tail_call_sites: 1
    <2795>   DW_AT_sibling     : <0x2801>
 <2><2799>: Abbrev Number: 52 (DW_TAG_variable)
    <279a>   DW_AT_name        : (indirect string, offset: 0x281): numBlocks
    <279e>   DW_AT_decl_file   : 1
    <279f>   DW_AT_decl_line   : 1462
    <27a1>   DW_AT_decl_column : 6
    <27a2>   DW_AT_type        : <0x6f>
    <27a6>   DW_AT_location    : 2 byte block: 91 5c 	(DW_OP_fbreg: -36)
 <2><27a9>: Abbrev Number: 52 (DW_TAG_variable)
    <27aa>   DW_AT_name        : (indirect string, offset: 0xfac): dlStart
    <27ae>   DW_AT_decl_file   : 1
    <27af>   DW_AT_decl_line   : 1463
    <27b1>   DW_AT_decl_column : 6
    <27b2>   DW_AT_type        : <0x6f>
    <27b6>   DW_AT_location    : 2 byte block: 91 64 	(DW_OP_fbreg: -28)
 <2><27b9>: Abbrev Number: 52 (DW_TAG_variable)
    <27ba>   DW_AT_name        : (indirect string, offset: 0x1ad3): deltaT
    <27be>   DW_AT_decl_file   : 1
    <27bf>   DW_AT_decl_line   : 1463
    <27c1>   DW_AT_decl_column : 15
    <27c2>   DW_AT_type        : <0x6f>
    <27c6>   DW_AT_location    : 2 byte block: 91 60 	(DW_OP_fbreg: -32)
 <2><27c9>: Abbrev Number: 52 (DW_TAG_variable)
    <27ca>   DW_AT_name        : (indirect string, offset: 0x994): delayT
    <27ce>   DW_AT_decl_file   : 1
    <27cf>   DW_AT_decl_line   : 1463
    <27d1>   DW_AT_decl_column : 23
    <27d2>   DW_AT_type        : <0x6f>
    <27d6>   DW_AT_location    : 2 byte block: 91 68 	(DW_OP_fbreg: -24)
 <2><27d9>: Abbrev Number: 52 (DW_TAG_variable)
    <27da>   DW_AT_name        : (indirect string, offset: 0x6c5): dlNextRound
    <27de>   DW_AT_decl_file   : 1
    <27df>   DW_AT_decl_line   : 1464
    <27e1>   DW_AT_decl_column : 13
    <27e2>   DW_AT_type        : <0x6f>
    <27e6>   DW_AT_location    : 9 byte block: 3 e8 29 e 0 0 0 0 0 	(DW_OP_addr: e29e8)
 <2><27f0>: Abbrev Number: 52 (DW_TAG_variable)
    <27f1>   DW_AT_name        : (indirect string, offset: 0x105c): timeVal
    <27f5>   DW_AT_decl_file   : 1
    <27f6>   DW_AT_decl_line   : 1465
    <27f8>   DW_AT_decl_column : 6
    <27f9>   DW_AT_type        : <0x6f>
    <27fd>   DW_AT_location    : 2 byte block: 91 6c 	(DW_OP_fbreg: -20)
 <2><2800>: Abbrev Number: 0
 <1><2801>: Abbrev Number: 53 (DW_TAG_subprogram)
    <2802>   DW_AT_external    : 1
    <2802>   DW_AT_name        : (indirect string, offset: 0x17d0): SV_RateMsec
    <2806>   DW_AT_decl_file   : 1
    <2807>   DW_AT_decl_line   : 1424
    <2809>   DW_AT_decl_column : 5
    <280a>   DW_AT_prototyped  : 1
    <280a>   DW_AT_type        : <0x6f>
    <280e>   DW_AT_low_pc      : 0x262b
    <2816>   DW_AT_high_pc     : 0xaa
    <281e>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
    <2820>   DW_AT_GNU_all_tail_call_sites: 1
    <2820>   DW_AT_sibling     : <0x2865>
 <2><2824>: Abbrev Number: 54 (DW_TAG_formal_parameter)
    <2825>   DW_AT_name        : (indirect string, offset: 0xb6d): client
    <2829>   DW_AT_decl_file   : 1
    <282a>   DW_AT_decl_line   : 1424
    <282c>   DW_AT_decl_column : 34
    <282d>   DW_AT_type        : <0x2865>
    <2831>   DW_AT_location    : 2 byte block: 91 58 	(DW_OP_fbreg: -40)
 <2><2834>: Abbrev Number: 52 (DW_TAG_variable)
    <2835>   DW_AT_name        : (indirect string, offset: 0x1f0f): rate
    <2839>   DW_AT_decl_file   : 1
    <283a>   DW_AT_decl_line   : 1426
    <283c>   DW_AT_decl_column : 6
    <283d>   DW_AT_type        : <0x6f>
    <2841>   DW_AT_location    : 2 byte block: 91 64 	(DW_OP_fbreg: -28)
 <2><2844>: Abbrev Number: 52 (DW_TAG_variable)
    <2845>   DW_AT_name        : (indirect string, offset: 0xd60): rateMsec
    <2849>   DW_AT_decl_file   : 1
    <284a>   DW_AT_decl_line   : 1426
    <284c>   DW_AT_decl_column : 12
    <284d>   DW_AT_type        : <0x6f>
    <2851>   DW_AT_location    : 2 byte block: 91 68 	(DW_OP_fbreg: -24)
 <2><2854>: Abbrev Number: 52 (DW_TAG_variable)
    <2855>   DW_AT_name        : (indirect string, offset: 0x1977): messageSize
    <2859>   DW_AT_decl_file   : 1
    <285a>   DW_AT_decl_line   : 1427
    <285c>   DW_AT_decl_column : 6
    <285d>   DW_AT_type        : <0x6f>
    <2861>   DW_AT_location    : 2 byte block: 91 6c 	(DW_OP_fbreg: -20)
 <2><2864>: Abbrev Number: 0
 <1><2865>: Abbrev Number: 9 (DW_TAG_pointer_type)
    <2866>   DW_AT_byte_size   : 8
    <2867>   DW_AT_type        : <0x21fe>
 <1><286b>: Abbrev Number: 55 (DW_TAG_subprogram)
    <286c>   DW_AT_external    : 1
    <286c>   DW_AT_name        : (indirect string, offset: 0x1ee4): SV_Frame
    <2870>   DW_AT_decl_file   : 1
    <2871>   DW_AT_decl_line   : 1285
    <2873>   DW_AT_decl_column : 6
    <2874>   DW_AT_prototyped  : 1
    <2874>   DW_AT_low_pc      : 0x2273
    <287c>   DW_AT_high_pc     : 0x3b8
    <2884>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
    <2886>   DW_AT_GNU_all_tail_call_sites: 1
    <2886>   DW_AT_sibling     : <0x28c9>
 <2><288a>: Abbrev Number: 54 (DW_TAG_formal_parameter)
    <288b>   DW_AT_name        : (indirect string, offset: 0x13a9): msec
    <288f>   DW_AT_decl_file   : 1
    <2890>   DW_AT_decl_line   : 1285
    <2892>   DW_AT_decl_column : 20
    <2893>   DW_AT_type        : <0x6f>
    <2897>   DW_AT_location    : 2 byte block: 91 5c 	(DW_OP_fbreg: -36)
 <2><289a>: Abbrev Number: 52 (DW_TAG_variable)
    <289b>   DW_AT_name        : (indirect string, offset: 0x5c8): frameMsec
    <289f>   DW_AT_decl_file   : 1
    <28a0>   DW_AT_decl_line   : 1286
    <28a2>   DW_AT_decl_column : 7
    <28a3>   DW_AT_type        : <0x6f>
    <28a7>   DW_AT_location    : 2 byte block: 91 6c 	(DW_OP_fbreg: -20)
 <2><28aa>: Abbrev Number: 52 (DW_TAG_variable)
    <28ab>   DW_AT_name        : (indirect string, offset: 0x92d): startTime
    <28af>   DW_AT_decl_file   : 1
    <28b0>   DW_AT_decl_line   : 1287
    <28b2>   DW_AT_decl_column : 7
    <28b3>   DW_AT_type        : <0x6f>
    <28b7>   DW_AT_location    : 2 byte block: 91 68 	(DW_OP_fbreg: -24)
 <2><28ba>: Abbrev Number: 56 (DW_TAG_variable)
    <28bb>   DW_AT_name        : i
    <28bd>   DW_AT_decl_file   : 1
    <28be>   DW_AT_decl_line   : 1288
    <28c0>   DW_AT_decl_column : 7
    <28c1>   DW_AT_type        : <0x6f>
    <28c5>   DW_AT_location    : 2 byte block: 91 64 	(DW_OP_fbreg: -28)
 <2><28c8>: Abbrev Number: 0
 <1><28c9>: Abbrev Number: 57 (DW_TAG_subprogram)
    <28ca>   DW_AT_name        : (indirect string, offset: 0x1304): SV_Restart
    <28ce>   DW_AT_decl_file   : 1
    <28cf>   DW_AT_decl_line   : 1249
    <28d1>   DW_AT_decl_column : 13
    <28d2>   DW_AT_prototyped  : 1
    <28d2>   DW_AT_low_pc      : 0x21a2
    <28da>   DW_AT_high_pc     : 0xd1
    <28e2>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
    <28e4>   DW_AT_GNU_all_tail_call_sites: 1
    <28e4>   DW_AT_sibling     : <0x2929>
 <2><28e8>: Abbrev Number: 54 (DW_TAG_formal_parameter)
    <28e9>   DW_AT_name        : (indirect string, offset: 0x1549): reason
    <28ed>   DW_AT_decl_file   : 1
    <28ee>   DW_AT_decl_line   : 1249
    <28f0>   DW_AT_decl_column : 37
    <28f1>   DW_AT_type        : <0x38d>
    <28f5>   DW_AT_location    : 3 byte block: 91 d8 7d 	(DW_OP_fbreg: -296)
 <2><28f9>: Abbrev Number: 52 (DW_TAG_variable)
    <28fa>   DW_AT_name        : (indirect string, offset: 0x1983): sv_shutdown
    <28fe>   DW_AT_decl_file   : 1
    <28ff>   DW_AT_decl_line   : 1250
    <2901>   DW_AT_decl_column : 11
    <2902>   DW_AT_type        : <0x483>
    <2906>   DW_AT_location    : 2 byte block: 91 6c 	(DW_OP_fbreg: -20)
 <2><2909>: Abbrev Number: 52 (DW_TAG_variable)
    <290a>   DW_AT_name        : (indirect string, offset: 0x1d43): mapName
    <290e>   DW_AT_decl_file   : 1
    <290f>   DW_AT_decl_line   : 1251
    <2911>   DW_AT_decl_column : 7
    <2912>   DW_AT_type        : <0x8a5>
    <2916>   DW_AT_location    : 3 byte block: 91 e0 7d 	(DW_OP_fbreg: -288)
 <2><291a>: Abbrev Number: 56 (DW_TAG_variable)
    <291b>   DW_AT_name        : i
    <291d>   DW_AT_decl_file   : 1
    <291e>   DW_AT_decl_line   : 1252
    <2920>   DW_AT_decl_column : 6
    <2921>   DW_AT_type        : <0x6f>
    <2925>   DW_AT_location    : 2 byte block: 91 68 	(DW_OP_fbreg: -24)
 <2><2928>: Abbrev Number: 0
 <1><2929>: Abbrev Number: 55 (DW_TAG_subprogram)
    <292a>   DW_AT_external    : 1
    <292a>   DW_AT_name        : (indirect string, offset: 0x14f): SV_TrackCvarChanges
    <292e>   DW_AT_decl_file   : 1
    <292f>   DW_AT_decl_line   : 1216
    <2931>   DW_AT_decl_column : 6
    <2932>   DW_AT_prototyped  : 1
    <2932>   DW_AT_low_pc      : 0x209a
    <293a>   DW_AT_high_pc     : 0x108
    <2942>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
    <2944>   DW_AT_GNU_all_tail_call_sites: 1
    <2944>   DW_AT_sibling     : <0x2966>
 <2><2948>: Abbrev Number: 56 (DW_TAG_variable)
    <2949>   DW_AT_name        : cl
    <294c>   DW_AT_decl_file   : 1
    <294d>   DW_AT_decl_line   : 1218
    <294f>   DW_AT_decl_column : 12
    <2950>   DW_AT_type        : <0x22f0>
    <2954>   DW_AT_location    : 2 byte block: 91 68 	(DW_OP_fbreg: -24)
 <2><2957>: Abbrev Number: 56 (DW_TAG_variable)
    <2958>   DW_AT_name        : i
    <295a>   DW_AT_decl_file   : 1
    <295b>   DW_AT_decl_line   : 1219
    <295d>   DW_AT_decl_column : 6
    <295e>   DW_AT_type        : <0x6f>
    <2962>   DW_AT_location    : 2 byte block: 91 64 	(DW_OP_fbreg: -28)
 <2><2965>: Abbrev Number: 0
 <1><2966>: Abbrev Number: 58 (DW_TAG_subprogram)
    <2967>   DW_AT_external    : 1
    <2967>   DW_AT_name        : (indirect string, offset: 0x163e): SV_FrameMsec
    <296b>   DW_AT_decl_file   : 1
    <296c>   DW_AT_decl_line   : 1193
    <296e>   DW_AT_decl_column : 5
    <296f>   DW_AT_prototyped  : 1
    <296f>   DW_AT_type        : <0x6f>
    <2973>   DW_AT_low_pc      : 0x2043
    <297b>   DW_AT_high_pc     : 0x57
    <2983>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
    <2985>   DW_AT_GNU_all_call_sites: 1
    <2985>   DW_AT_sibling     : <0x29ac>
 <2><2989>: Abbrev Number: 59 (DW_TAG_lexical_block)
    <298a>   DW_AT_low_pc      : 0x2053
    <2992>   DW_AT_high_pc     : 0x40
 <3><299a>: Abbrev Number: 52 (DW_TAG_variable)
    <299b>   DW_AT_name        : (indirect string, offset: 0x5c8): frameMsec
    <299f>   DW_AT_decl_file   : 1
    <29a0>   DW_AT_decl_line   : 1197
    <29a2>   DW_AT_decl_column : 7
    <29a3>   DW_AT_type        : <0x6f>
    <29a7>   DW_AT_location    : 2 byte block: 91 6c 	(DW_OP_fbreg: -20)
 <3><29aa>: Abbrev Number: 0
 <2><29ab>: Abbrev Number: 0
 <1><29ac>: Abbrev Number: 60 (DW_TAG_subprogram)
    <29ad>   DW_AT_name        : (indirect string, offset: 0x17c1): SV_CheckPaused
    <29b1>   DW_AT_decl_file   : 1
    <29b2>   DW_AT_decl_line   : 1150
    <29b4>   DW_AT_decl_column : 17
    <29b5>   DW_AT_prototyped  : 1
    <29b5>   DW_AT_type        : <0x483>
    <29b9>   DW_AT_low_pc      : 0x2038
    <29c1>   DW_AT_high_pc     : 0xb
    <29c9>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
    <29cb>   DW_AT_GNU_all_call_sites: 1
 <1><29cb>: Abbrev Number: 57 (DW_TAG_subprogram)
    <29cc>   DW_AT_name        : (indirect string, offset: 0x1470): SV_CheckTimeouts
    <29d0>   DW_AT_decl_file   : 1
    <29d1>   DW_AT_decl_line   : 1100
    <29d3>   DW_AT_decl_column : 13
    <29d4>   DW_AT_prototyped  : 1
    <29d4>   DW_AT_low_pc      : 0x1e76
    <29dc>   DW_AT_high_pc     : 0x1c2
    <29e4>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
    <29e6>   DW_AT_GNU_all_tail_call_sites: 1
    <29e6>   DW_AT_sibling     : <0x2a28>
 <2><29ea>: Abbrev Number: 56 (DW_TAG_variable)
    <29eb>   DW_AT_name        : i
    <29ed>   DW_AT_decl_file   : 1
    <29ee>   DW_AT_decl_line   : 1101
    <29f0>   DW_AT_decl_column : 7
    <29f1>   DW_AT_type        : <0x6f>
    <29f5>   DW_AT_location    : 2 byte block: 91 6c 	(DW_OP_fbreg: -20)
 <2><29f8>: Abbrev Number: 56 (DW_TAG_variable)
    <29f9>   DW_AT_name        : cl
    <29fc>   DW_AT_decl_file   : 1
    <29fd>   DW_AT_decl_line   : 1102
    <29ff>   DW_AT_decl_column : 12
    <2a00>   DW_AT_type        : <0x22f0>
    <2a04>   DW_AT_location    : 2 byte block: 91 60 	(DW_OP_fbreg: -32)
 <2><2a07>: Abbrev Number: 52 (DW_TAG_variable)
    <2a08>   DW_AT_name        : (indirect string, offset: 0xde): droppoint
    <2a0c>   DW_AT_decl_file   : 1
    <2a0d>   DW_AT_decl_line   : 1103
    <2a0f>   DW_AT_decl_column : 8
    <2a10>   DW_AT_type        : <0x6f>
    <2a14>   DW_AT_location    : 2 byte block: 91 5c 	(DW_OP_fbreg: -36)
 <2><2a17>: Abbrev Number: 52 (DW_TAG_variable)
    <2a18>   DW_AT_name        : (indirect string, offset: 0x1bee): zombiepoint
    <2a1c>   DW_AT_decl_file   : 1
    <2a1d>   DW_AT_decl_line   : 1104
    <2a1f>   DW_AT_decl_column : 8
    <2a20>   DW_AT_type        : <0x6f>
    <2a24>   DW_AT_location    : 2 byte block: 91 58 	(DW_OP_fbreg: -40)
 <2><2a27>: Abbrev Number: 0
 <1><2a28>: Abbrev Number: 57 (DW_TAG_subprogram)
    <2a29>   DW_AT_name        : (indirect string, offset: 0x344): SV_CalcPings
    <2a2d>   DW_AT_decl_file   : 1
    <2a2e>   DW_AT_decl_line   : 1040
    <2a30>   DW_AT_decl_column : 13
    <2a31>   DW_AT_prototyped  : 1
    <2a31>   DW_AT_low_pc      : 0x1cd7
    <2a39>   DW_AT_high_pc     : 0x19f
    <2a41>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
    <2a43>   DW_AT_GNU_all_tail_call_sites: 1
    <2a43>   DW_AT_sibling     : <0x2ab2>
 <2><2a47>: Abbrev Number: 56 (DW_TAG_variable)
    <2a48>   DW_AT_name        : i
    <2a4a>   DW_AT_decl_file   : 1
    <2a4b>   DW_AT_decl_line   : 1041
    <2a4d>   DW_AT_decl_column : 8
    <2a4e>   DW_AT_type        : <0x6f>
    <2a52>   DW_AT_location    : 2 byte block: 91 6c 	(DW_OP_fbreg: -20)
 <2><2a55>: Abbrev Number: 56 (DW_TAG_variable)
    <2a56>   DW_AT_name        : j
    <2a58>   DW_AT_decl_file   : 1
    <2a59>   DW_AT_decl_line   : 1041
    <2a5b>   DW_AT_decl_column : 11
    <2a5c>   DW_AT_type        : <0x6f>
    <2a60>   DW_AT_location    : 2 byte block: 91 68 	(DW_OP_fbreg: -24)
 <2><2a63>: Abbrev Number: 56 (DW_TAG_variable)
    <2a64>   DW_AT_name        : cl
    <2a67>   DW_AT_decl_file   : 1
    <2a68>   DW_AT_decl_line   : 1042
    <2a6a>   DW_AT_decl_column : 12
    <2a6b>   DW_AT_type        : <0x22f0>
    <2a6f>   DW_AT_location    : 2 byte block: 91 58 	(DW_OP_fbreg: -40)
 <2><2a72>: Abbrev Number: 52 (DW_TAG_variable)
    <2a73>   DW_AT_name        : (indirect string, offset: 0x0): total
    <2a77>   DW_AT_decl_file   : 1
    <2a78>   DW_AT_decl_line   : 1043
    <2a7a>   DW_AT_decl_column : 8
    <2a7b>   DW_AT_type        : <0x6f>
    <2a7f>   DW_AT_location    : 2 byte block: 91 64 	(DW_OP_fbreg: -28)
 <2><2a82>: Abbrev Number: 52 (DW_TAG_variable)
    <2a83>   DW_AT_name        : (indirect string, offset: 0x1161): count
    <2a87>   DW_AT_decl_file   : 1
    <2a88>   DW_AT_decl_line   : 1043
    <2a8a>   DW_AT_decl_column : 15
    <2a8b>   DW_AT_type        : <0x6f>
    <2a8f>   DW_AT_location    : 2 byte block: 91 60 	(DW_OP_fbreg: -32)
 <2><2a92>: Abbrev Number: 52 (DW_TAG_variable)
    <2a93>   DW_AT_name        : (indirect string, offset: 0x7be): delta
    <2a97>   DW_AT_decl_file   : 1
    <2a98>   DW_AT_decl_line   : 1044
    <2a9a>   DW_AT_decl_column : 8
    <2a9b>   DW_AT_type        : <0x6f>
    <2a9f>   DW_AT_location    : 2 byte block: 91 54 	(DW_OP_fbreg: -44)
 <2><2aa2>: Abbrev Number: 56 (DW_TAG_variable)
    <2aa3>   DW_AT_name        : ps
    <2aa6>   DW_AT_decl_file   : 1
    <2aa7>   DW_AT_decl_line   : 1045
    <2aa9>   DW_AT_decl_column : 17
    <2aaa>   DW_AT_type        : <0x1869>
    <2aae>   DW_AT_location    : 2 byte block: 91 48 	(DW_OP_fbreg: -56)
 <2><2ab1>: Abbrev Number: 0
 <1><2ab2>: Abbrev Number: 55 (DW_TAG_subprogram)
    <2ab3>   DW_AT_external    : 1
    <2ab3>   DW_AT_name        : (indirect string, offset: 0x9c1): SV_PacketEvent
    <2ab7>   DW_AT_decl_file   : 1
    <2ab8>   DW_AT_decl_line   : 973
    <2aba>   DW_AT_decl_column : 6
    <2abb>   DW_AT_prototyped  : 1
    <2abb>   DW_AT_low_pc      : 0x1b48
    <2ac3>   DW_AT_high_pc     : 0x18f
    <2acb>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
    <2acd>   DW_AT_GNU_all_tail_call_sites: 1
    <2acd>   DW_AT_sibling     : <0x2b1f>
 <2><2ad1>: Abbrev Number: 54 (DW_TAG_formal_parameter)
    <2ad2>   DW_AT_name        : (indirect string, offset: 0x928): from
    <2ad6>   DW_AT_decl_file   : 1
    <2ad7>   DW_AT_decl_line   : 973
    <2ad9>   DW_AT_decl_column : 38
    <2ada>   DW_AT_type        : <0x2b1f>
    <2ade>   DW_AT_location    : 2 byte block: 91 48 	(DW_OP_fbreg: -56)
 <2><2ae1>: Abbrev Number: 61 (DW_TAG_formal_parameter)
    <2ae2>   DW_AT_name        : msg
    <2ae6>   DW_AT_decl_file   : 1
    <2ae7>   DW_AT_decl_line   : 973
    <2ae9>   DW_AT_decl_column : 51
    <2aea>   DW_AT_type        : <0x2b25>
    <2aee>   DW_AT_location    : 2 byte block: 91 40 	(DW_OP_fbreg: -64)
 <2><2af1>: Abbrev Number: 56 (DW_TAG_variable)
    <2af2>   DW_AT_name        : i
    <2af4>   DW_AT_decl_file   : 1
    <2af5>   DW_AT_decl_line   : 974
    <2af7>   DW_AT_decl_column : 8
    <2af8>   DW_AT_type        : <0x6f>
    <2afc>   DW_AT_location    : 2 byte block: 91 6c 	(DW_OP_fbreg: -20)
 <2><2aff>: Abbrev Number: 56 (DW_TAG_variable)
    <2b00>   DW_AT_name        : cl
    <2b03>   DW_AT_decl_file   : 1
    <2b04>   DW_AT_decl_line   : 975
    <2b06>   DW_AT_decl_column : 12
    <2b07>   DW_AT_type        : <0x22f0>
    <2b0b>   DW_AT_location    : 2 byte block: 91 60 	(DW_OP_fbreg: -32)
 <2><2b0e>: Abbrev Number: 52 (DW_TAG_variable)
    <2b0f>   DW_AT_name        : (indirect string, offset: 0x1840): qport
    <2b13>   DW_AT_decl_file   : 1
    <2b14>   DW_AT_decl_line   : 976
    <2b16>   DW_AT_decl_column : 8
    <2b17>   DW_AT_type        : <0x6f>
    <2b1b>   DW_AT_location    : 2 byte block: 91 5c 	(DW_OP_fbreg: -36)
 <2><2b1e>: Abbrev Number: 0
 <1><2b1f>: Abbrev Number: 9 (DW_TAG_pointer_type)
    <2b20>   DW_AT_byte_size   : 8
    <2b21>   DW_AT_type        : <0xfbf>
 <1><2b25>: Abbrev Number: 9 (DW_TAG_pointer_type)
    <2b26>   DW_AT_byte_size   : 8
    <2b27>   DW_AT_type        : <0xec7>
 <1><2b2b>: Abbrev Number: 57 (DW_TAG_subprogram)
    <2b2c>   DW_AT_name        : (indirect string, offset: 0xa28): SV_ConnectionlessPacket
    <2b30>   DW_AT_decl_file   : 1
    <2b31>   DW_AT_decl_line   : 907
    <2b33>   DW_AT_decl_column : 13
    <2b34>   DW_AT_prototyped  : 1
    <2b34>   DW_AT_low_pc      : 0x18f0
    <2b3c>   DW_AT_high_pc     : 0x258
    <2b44>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
    <2b46>   DW_AT_GNU_all_tail_call_sites: 1
    <2b46>   DW_AT_sibling     : <0x2b87>
 <2><2b4a>: Abbrev Number: 54 (DW_TAG_formal_parameter)
    <2b4b>   DW_AT_name        : (indirect string, offset: 0x928): from
    <2b4f>   DW_AT_decl_file   : 1
    <2b50>   DW_AT_decl_line   : 907
    <2b52>   DW_AT_decl_column : 54
    <2b53>   DW_AT_type        : <0x2b1f>
    <2b57>   DW_AT_location    : 2 byte block: 91 48 	(DW_OP_fbreg: -56)
 <2><2b5a>: Abbrev Number: 61 (DW_TAG_formal_parameter)
    <2b5b>   DW_AT_name        : msg
    <2b5f>   DW_AT_decl_file   : 1
    <2b60>   DW_AT_decl_line   : 907
    <2b62>   DW_AT_decl_column : 67
    <2b63>   DW_AT_type        : <0x2b25>
    <2b67>   DW_AT_location    : 2 byte block: 91 40 	(DW_OP_fbreg: -64)
 <2><2b6a>: Abbrev Number: 56 (DW_TAG_variable)
    <2b6b>   DW_AT_name        : s
    <2b6d>   DW_AT_decl_file   : 1
    <2b6e>   DW_AT_decl_line   : 908
    <2b70>   DW_AT_decl_column : 14
    <2b71>   DW_AT_type        : <0x38d>
    <2b75>   DW_AT_location    : 2 byte block: 91 58 	(DW_OP_fbreg: -40)
 <2><2b78>: Abbrev Number: 56 (DW_TAG_variable)
    <2b79>   DW_AT_name        : c
    <2b7b>   DW_AT_decl_file   : 1
    <2b7c>   DW_AT_decl_line   : 909
    <2b7e>   DW_AT_decl_column : 14
    <2b7f>   DW_AT_type        : <0x38d>
    <2b83>   DW_AT_location    : 2 byte block: 91 50 	(DW_OP_fbreg: -48)
 <2><2b86>: Abbrev Number: 0
 <1><2b87>: Abbrev Number: 57 (DW_TAG_subprogram)
    <2b88>   DW_AT_name        : (indirect string, offset: 0x10db): SVC_RemoteCommand
    <2b8c>   DW_AT_decl_file   : 1
    <2b8d>   DW_AT_decl_line   : 825
    <2b8f>   DW_AT_decl_column : 13
    <2b90>   DW_AT_prototyped  : 1
    <2b90>   DW_AT_low_pc      : 0x161d
    <2b98>   DW_AT_high_pc     : 0x2d3
    <2ba0>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
    <2ba2>   DW_AT_GNU_all_tail_call_sites: 1
    <2ba2>   DW_AT_sibling     : <0x2c0f>
 <2><2ba6>: Abbrev Number: 54 (DW_TAG_formal_parameter)
    <2ba7>   DW_AT_name        : (indirect string, offset: 0x928): from
    <2bab>   DW_AT_decl_file   : 1
    <2bac>   DW_AT_decl_line   : 825
    <2bae>   DW_AT_decl_column : 48
    <2baf>   DW_AT_type        : <0x2b1f>
    <2bb3>   DW_AT_location    : 3 byte block: 91 c8 77 	(DW_OP_fbreg: -1080)
 <2><2bb7>: Abbrev Number: 52 (DW_TAG_variable)
    <2bb8>   DW_AT_name        : (indirect string, offset: 0x17dc): bucket
    <2bbc>   DW_AT_decl_file   : 1
    <2bbd>   DW_AT_decl_line   : 826
    <2bbf>   DW_AT_decl_column : 21
    <2bc0>   DW_AT_type        : <0x1da8>
    <2bc4>   DW_AT_location    : 9 byte block: 3 e0 29 e 0 0 0 0 0 	(DW_OP_addr: e29e0)
 <2><2bce>: Abbrev Number: 52 (DW_TAG_variable)
    <2bcf>   DW_AT_name        : (indirect string, offset: 0x12f1): valid
    <2bd3>   DW_AT_decl_file   : 1
    <2bd4>   DW_AT_decl_line   : 827
    <2bd6>   DW_AT_decl_column : 11
    <2bd7>   DW_AT_type        : <0x483>
    <2bdb>   DW_AT_location    : 2 byte block: 91 5c 	(DW_OP_fbreg: -36)
 <2><2bde>: Abbrev Number: 52 (DW_TAG_variable)
    <2bdf>   DW_AT_name        : (indirect string, offset: 0x1b94): sv_outputbuf
    <2be3>   DW_AT_decl_file   : 1
    <2be4>   DW_AT_decl_line   : 830
    <2be6>   DW_AT_decl_column : 8
    <2be7>   DW_AT_type        : <0x2c0f>
    <2beb>   DW_AT_location    : 3 byte block: 91 d0 77 	(DW_OP_fbreg: -1072)
 <2><2bef>: Abbrev Number: 52 (DW_TAG_variable)
    <2bf0>   DW_AT_name        : (indirect string, offset: 0x107e): cmd_aux
    <2bf4>   DW_AT_decl_file   : 1
    <2bf5>   DW_AT_decl_line   : 831
    <2bf7>   DW_AT_decl_column : 14
    <2bf8>   DW_AT_type        : <0x38d>
    <2bfc>   DW_AT_location    : 2 byte block: 91 50 	(DW_OP_fbreg: -48)
 <2><2bff>: Abbrev Number: 56 (DW_TAG_variable)
    <2c00>   DW_AT_name        : pw
    <2c03>   DW_AT_decl_file   : 1
    <2c04>   DW_AT_decl_line   : 831
    <2c06>   DW_AT_decl_column : 24
    <2c07>   DW_AT_type        : <0x38d>
    <2c0b>   DW_AT_location    : 2 byte block: 91 48 	(DW_OP_fbreg: -56)
 <2><2c0e>: Abbrev Number: 0
 <1><2c0f>: Abbrev Number: 6 (DW_TAG_array_type)
    <2c10>   DW_AT_type        : <0xbe>
    <2c14>   DW_AT_sibling     : <0x2c20>
 <2><2c18>: Abbrev Number: 24 (DW_TAG_subrange_type)
    <2c19>   DW_AT_type        : <0x42>
    <2c1d>   DW_AT_upper_bound : 1007
 <2><2c1f>: Abbrev Number: 0
 <1><2c20>: Abbrev Number: 57 (DW_TAG_subprogram)
    <2c21>   DW_AT_name        : (indirect string, offset: 0x1281): SV_FlushRedirect
    <2c25>   DW_AT_decl_file   : 1
    <2c26>   DW_AT_decl_line   : 807
    <2c28>   DW_AT_decl_column : 13
    <2c29>   DW_AT_prototyped  : 1
    <2c29>   DW_AT_low_pc      : 0x15df
    <2c31>   DW_AT_high_pc     : 0x3e
    <2c39>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
    <2c3b>   DW_AT_GNU_all_tail_call_sites: 1
    <2c3b>   DW_AT_sibling     : <0x2c50>
 <2><2c3f>: Abbrev Number: 54 (DW_TAG_formal_parameter)
    <2c40>   DW_AT_name        : (indirect string, offset: 0x12e): outputbuf
    <2c44>   DW_AT_decl_file   : 1
    <2c45>   DW_AT_decl_line   : 807
    <2c47>   DW_AT_decl_column : 43
    <2c48>   DW_AT_type        : <0x38d>
    <2c4c>   DW_AT_location    : 2 byte block: 91 68 	(DW_OP_fbreg: -24)
 <2><2c4f>: Abbrev Number: 0
 <1><2c50>: Abbrev Number: 57 (DW_TAG_subprogram)
    <2c51>   DW_AT_name        : (indirect string, offset: 0x31a): SVC_Info
    <2c55>   DW_AT_decl_file   : 1
    <2c56>   DW_AT_decl_line   : 727
    <2c58>   DW_AT_decl_column : 13
    <2c59>   DW_AT_prototyped  : 1
    <2c59>   DW_AT_low_pc      : 0x1221
    <2c61>   DW_AT_high_pc     : 0x3be
    <2c69>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
    <2c6b>   DW_AT_GNU_all_tail_call_sites: 1
    <2c6b>   DW_AT_sibling     : <0x2cd0>
 <2><2c6f>: Abbrev Number: 54 (DW_TAG_formal_parameter)
    <2c70>   DW_AT_name        : (indirect string, offset: 0x928): from
    <2c74>   DW_AT_decl_file   : 1
    <2c75>   DW_AT_decl_line   : 727
    <2c77>   DW_AT_decl_column : 39
    <2c78>   DW_AT_type        : <0x2b1f>
    <2c7c>   DW_AT_location    : 3 byte block: 91 c8 77 	(DW_OP_fbreg: -1080)
 <2><2c80>: Abbrev Number: 56 (DW_TAG_variable)
    <2c81>   DW_AT_name        : i
    <2c83>   DW_AT_decl_file   : 1
    <2c84>   DW_AT_decl_line   : 728
    <2c86>   DW_AT_decl_column : 7
    <2c87>   DW_AT_type        : <0x6f>
    <2c8b>   DW_AT_location    : 2 byte block: 91 6c 	(DW_OP_fbreg: -20)
 <2><2c8e>: Abbrev Number: 52 (DW_TAG_variable)
    <2c8f>   DW_AT_name        : (indirect string, offset: 0x1161): count
    <2c93>   DW_AT_decl_file   : 1
    <2c94>   DW_AT_decl_line   : 728
    <2c96>   DW_AT_decl_column : 10
    <2c97>   DW_AT_type        : <0x6f>
    <2c9b>   DW_AT_location    : 2 byte block: 91 68 	(DW_OP_fbreg: -24)
 <2><2c9e>: Abbrev Number: 52 (DW_TAG_variable)
    <2c9f>   DW_AT_name        : (indirect string, offset: 0x1110): humans
    <2ca3>   DW_AT_decl_file   : 1
    <2ca4>   DW_AT_decl_line   : 728
    <2ca6>   DW_AT_decl_column : 17
    <2ca7>   DW_AT_type        : <0x6f>
    <2cab>   DW_AT_location    : 2 byte block: 91 64 	(DW_OP_fbreg: -28)
 <2><2cae>: Abbrev Number: 52 (DW_TAG_variable)
    <2caf>   DW_AT_name        : (indirect string, offset: 0x126): gamedir
    <2cb3>   DW_AT_decl_file   : 1
    <2cb4>   DW_AT_decl_line   : 729
    <2cb6>   DW_AT_decl_column : 14
    <2cb7>   DW_AT_type        : <0x38d>
    <2cbb>   DW_AT_location    : 2 byte block: 91 58 	(DW_OP_fbreg: -40)
 <2><2cbe>: Abbrev Number: 52 (DW_TAG_variable)
    <2cbf>   DW_AT_name        : (indirect string, offset: 0x1d): infostring
    <2cc3>   DW_AT_decl_file   : 1
    <2cc4>   DW_AT_decl_line   : 730
    <2cc6>   DW_AT_decl_column : 7
    <2cc7>   DW_AT_type        : <0x68b>
    <2ccb>   DW_AT_location    : 3 byte block: 91 d0 77 	(DW_OP_fbreg: -1072)
 <2><2ccf>: Abbrev Number: 0
 <1><2cd0>: Abbrev Number: 57 (DW_TAG_subprogram)
    <2cd1>   DW_AT_name        : (indirect string, offset: 0x111e): SVC_Status
    <2cd5>   DW_AT_decl_file   : 1
    <2cd6>   DW_AT_decl_line   : 651
    <2cd8>   DW_AT_decl_column : 13
    <2cd9>   DW_AT_prototyped  : 1
    <2cd9>   DW_AT_low_pc      : 0xfe3
    <2ce1>   DW_AT_high_pc     : 0x23e
    <2ce9>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
    <2ceb>   DW_AT_GNU_all_tail_call_sites: 1
    <2ceb>   DW_AT_sibling     : <0x2d8e>
 <2><2cef>: Abbrev Number: 54 (DW_TAG_formal_parameter)
    <2cf0>   DW_AT_name        : (indirect string, offset: 0x928): from
    <2cf4>   DW_AT_decl_file   : 1
    <2cf5>   DW_AT_decl_line   : 651
    <2cf7>   DW_AT_decl_column : 41
    <2cf8>   DW_AT_type        : <0x2b1f>
    <2cfc>   DW_AT_location    : 3 byte block: 91 d8 6a 	(DW_OP_fbreg: -2728)
 <2><2d00>: Abbrev Number: 52 (DW_TAG_variable)
    <2d01>   DW_AT_name        : (indirect string, offset: 0x1b58): player
    <2d05>   DW_AT_decl_file   : 1
    <2d06>   DW_AT_decl_line   : 652
    <2d08>   DW_AT_decl_column : 7
    <2d09>   DW_AT_type        : <0xe32>
    <2d0d>   DW_AT_location    : 3 byte block: 91 80 7f 	(DW_OP_fbreg: -128)
 <2><2d11>: Abbrev Number: 52 (DW_TAG_variable)
    <2d12>   DW_AT_name        : (indirect string, offset: 0x1137): status
    <2d16>   DW_AT_decl_file   : 1
    <2d17>   DW_AT_decl_line   : 653
    <2d19>   DW_AT_decl_column : 7
    <2d1a>   DW_AT_type        : <0x2d8e>
    <2d1e>   DW_AT_location    : 3 byte block: 91 80 74 	(DW_OP_fbreg: -1536)
 <2><2d22>: Abbrev Number: 56 (DW_TAG_variable)
    <2d23>   DW_AT_name        : s
    <2d25>   DW_AT_decl_file   : 1
    <2d26>   DW_AT_decl_line   : 654
    <2d28>   DW_AT_decl_column : 8
    <2d29>   DW_AT_type        : <0xb8>
    <2d2d>   DW_AT_location    : 2 byte block: 91 68 	(DW_OP_fbreg: -24)
 <2><2d30>: Abbrev Number: 56 (DW_TAG_variable)
    <2d31>   DW_AT_name        : i
    <2d33>   DW_AT_decl_file   : 1
    <2d34>   DW_AT_decl_line   : 655
    <2d36>   DW_AT_decl_column : 7
    <2d37>   DW_AT_type        : <0x6f>
    <2d3b>   DW_AT_location    : 2 byte block: 91 64 	(DW_OP_fbreg: -28)
 <2><2d3e>: Abbrev Number: 56 (DW_TAG_variable)
    <2d3f>   DW_AT_name        : cl
    <2d42>   DW_AT_decl_file   : 1
    <2d43>   DW_AT_decl_line   : 656
    <2d45>   DW_AT_decl_column : 12
    <2d46>   DW_AT_type        : <0x22f0>
    <2d4a>   DW_AT_location    : 2 byte block: 91 58 	(DW_OP_fbreg: -40)
 <2><2d4d>: Abbrev Number: 56 (DW_TAG_variable)
    <2d4e>   DW_AT_name        : ps
    <2d51>   DW_AT_decl_file   : 1
    <2d52>   DW_AT_decl_line   : 657
    <2d54>   DW_AT_decl_column : 17
    <2d55>   DW_AT_type        : <0x1869>
    <2d59>   DW_AT_location    : 2 byte block: 91 50 	(DW_OP_fbreg: -48)
 <2><2d5c>: Abbrev Number: 52 (DW_TAG_variable)
    <2d5d>   DW_AT_name        : (indirect string, offset: 0x116e): statusLength
    <2d61>   DW_AT_decl_file   : 1
    <2d62>   DW_AT_decl_line   : 658
    <2d64>   DW_AT_decl_column : 7
    <2d65>   DW_AT_type        : <0x6f>
    <2d69>   DW_AT_location    : 2 byte block: 91 60 	(DW_OP_fbreg: -32)
 <2><2d6c>: Abbrev Number: 52 (DW_TAG_variable)
    <2d6d>   DW_AT_name        : (indirect string, offset: 0xb92): playerLength
    <2d71>   DW_AT_decl_file   : 1
    <2d72>   DW_AT_decl_line   : 659
    <2d74>   DW_AT_decl_column : 7
    <2d75>   DW_AT_type        : <0x6f>
    <2d79>   DW_AT_location    : 2 byte block: 91 4c 	(DW_OP_fbreg: -52)
 <2><2d7c>: Abbrev Number: 52 (DW_TAG_variable)
    <2d7d>   DW_AT_name        : (indirect string, offset: 0x1d): infostring
    <2d81>   DW_AT_decl_file   : 1
    <2d82>   DW_AT_decl_line   : 660
    <2d84>   DW_AT_decl_column : 7
    <2d85>   DW_AT_type        : <0x2d9f>
    <2d89>   DW_AT_location    : 3 byte block: 91 e0 6a 	(DW_OP_fbreg: -2720)
 <2><2d8d>: Abbrev Number: 0
 <1><2d8e>: Abbrev Number: 6 (DW_TAG_array_type)
    <2d8f>   DW_AT_type        : <0xbe>
    <2d93>   DW_AT_sibling     : <0x2d9f>
 <2><2d97>: Abbrev Number: 24 (DW_TAG_subrange_type)
    <2d98>   DW_AT_type        : <0x42>
    <2d9c>   DW_AT_upper_bound : 1399
 <2><2d9e>: Abbrev Number: 0
 <1><2d9f>: Abbrev Number: 6 (DW_TAG_array_type)
    <2da0>   DW_AT_type        : <0xbe>
    <2da4>   DW_AT_sibling     : <0x2db0>
 <2><2da8>: Abbrev Number: 24 (DW_TAG_subrange_type)
    <2da9>   DW_AT_type        : <0x42>
    <2dad>   DW_AT_upper_bound : 1183
 <2><2daf>: Abbrev Number: 0
 <1><2db0>: Abbrev Number: 55 (DW_TAG_subprogram)
    <2db1>   DW_AT_external    : 1
    <2db1>   DW_AT_name        : (indirect string, offset: 0xa96): SVC_RateDropAddress
    <2db5>   DW_AT_decl_file   : 1
    <2db6>   DW_AT_decl_line   : 635
    <2db8>   DW_AT_decl_column : 6
    <2db9>   DW_AT_prototyped  : 1
    <2db9>   DW_AT_low_pc      : 0xfa5
    <2dc1>   DW_AT_high_pc     : 0x3e
    <2dc9>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
    <2dcb>   DW_AT_GNU_all_tail_call_sites: 1
    <2dcb>   DW_AT_sibling     : <0x2e10>
 <2><2dcf>: Abbrev Number: 54 (DW_TAG_formal_parameter)
    <2dd0>   DW_AT_name        : (indirect string, offset: 0x928): from
    <2dd4>   DW_AT_decl_file   : 1
    <2dd5>   DW_AT_decl_line   : 635
    <2dd7>   DW_AT_decl_column : 43
    <2dd8>   DW_AT_type        : <0x2b1f>
    <2ddc>   DW_AT_location    : 2 byte block: 91 58 	(DW_OP_fbreg: -40)
 <2><2ddf>: Abbrev Number: 54 (DW_TAG_formal_parameter)
    <2de0>   DW_AT_name        : (indirect string, offset: 0x1cb2): burst
    <2de4>   DW_AT_decl_file   : 1
    <2de5>   DW_AT_decl_line   : 635
    <2de7>   DW_AT_decl_column : 53
    <2de8>   DW_AT_type        : <0x6f>
    <2dec>   DW_AT_location    : 2 byte block: 91 54 	(DW_OP_fbreg: -44)
 <2><2def>: Abbrev Number: 54 (DW_TAG_formal_parameter)
    <2df0>   DW_AT_name        : (indirect string, offset: 0x1b43): period
    <2df4>   DW_AT_decl_file   : 1
    <2df5>   DW_AT_decl_line   : 635
    <2df7>   DW_AT_decl_column : 64
    <2df8>   DW_AT_type        : <0x6f>
    <2dfc>   DW_AT_location    : 2 byte block: 91 50 	(DW_OP_fbreg: -48)
 <2><2dff>: Abbrev Number: 52 (DW_TAG_variable)
    <2e00>   DW_AT_name        : (indirect string, offset: 0x17dc): bucket
    <2e04>   DW_AT_decl_file   : 1
    <2e05>   DW_AT_decl_line   : 636
    <2e07>   DW_AT_decl_column : 17
    <2e08>   DW_AT_type        : <0x1e49>
    <2e0c>   DW_AT_location    : 2 byte block: 91 68 	(DW_OP_fbreg: -24)
 <2><2e0f>: Abbrev Number: 0
 <1><2e10>: Abbrev Number: 55 (DW_TAG_subprogram)
    <2e11>   DW_AT_external    : 1
    <2e11>   DW_AT_name        : (indirect string, offset: 0x39a): SVC_RateRestoreToxicAddress
    <2e15>   DW_AT_decl_file   : 1
    <2e16>   DW_AT_decl_line   : 623
    <2e18>   DW_AT_decl_column : 6
    <2e19>   DW_AT_prototyped  : 1
    <2e19>   DW_AT_low_pc      : 0xf6c
    <2e21>   DW_AT_high_pc     : 0x39
    <2e29>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
    <2e2b>   DW_AT_GNU_all_tail_call_sites: 1
    <2e2b>   DW_AT_sibling     : <0x2e70>
 <2><2e2f>: Abbrev Number: 54 (DW_TAG_formal_parameter)
    <2e30>   DW_AT_name        : (indirect string, offset: 0x928): from
    <2e34>   DW_AT_decl_file   : 1
    <2e35>   DW_AT_decl_line   : 623
    <2e37>   DW_AT_decl_column : 51
    <2e38>   DW_AT_type        : <0x2b1f>
    <2e3c>   DW_AT_location    : 2 byte block: 91 58 	(DW_OP_fbreg: -40)
 <2><2e3f>: Abbrev Number: 54 (DW_TAG_formal_parameter)
    <2e40>   DW_AT_name        : (indirect string, offset: 0x1cb2): burst
    <2e44>   DW_AT_decl_file   : 1
    <2e45>   DW_AT_decl_line   : 623
    <2e47>   DW_AT_decl_column : 61
    <2e48>   DW_AT_type        : <0x6f>
    <2e4c>   DW_AT_location    : 2 byte block: 91 54 	(DW_OP_fbreg: -44)
 <2><2e4f>: Abbrev Number: 54 (DW_TAG_formal_parameter)
    <2e50>   DW_AT_name        : (indirect string, offset: 0x1b43): period
    <2e54>   DW_AT_decl_file   : 1
    <2e55>   DW_AT_decl_line   : 623
    <2e57>   DW_AT_decl_column : 72
    <2e58>   DW_AT_type        : <0x6f>
    <2e5c>   DW_AT_location    : 2 byte block: 91 50 	(DW_OP_fbreg: -48)
 <2><2e5f>: Abbrev Number: 52 (DW_TAG_variable)
    <2e60>   DW_AT_name        : (indirect string, offset: 0x17dc): bucket
    <2e64>   DW_AT_decl_file   : 1
    <2e65>   DW_AT_decl_line   : 624
    <2e67>   DW_AT_decl_column : 17
    <2e68>   DW_AT_type        : <0x1e49>
    <2e6c>   DW_AT_location    : 2 byte block: 91 68 	(DW_OP_fbreg: -24)
 <2><2e6f>: Abbrev Number: 0
 <1><2e70>: Abbrev Number: 55 (DW_TAG_subprogram)
    <2e71>   DW_AT_external    : 1
    <2e71>   DW_AT_name        : (indirect string, offset: 0x19c): SVC_RateRestoreBurstAddress
    <2e75>   DW_AT_decl_file   : 1
    <2e76>   DW_AT_decl_line   : 609
    <2e78>   DW_AT_decl_column : 6
    <2e79>   DW_AT_prototyped  : 1
    <2e79>   DW_AT_low_pc      : 0xf33
    <2e81>   DW_AT_high_pc     : 0x39
    <2e89>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
    <2e8b>   DW_AT_GNU_all_tail_call_sites: 1
    <2e8b>   DW_AT_sibling     : <0x2ed0>
 <2><2e8f>: Abbrev Number: 54 (DW_TAG_formal_parameter)
    <2e90>   DW_AT_name        : (indirect string, offset: 0x928): from
    <2e94>   DW_AT_decl_file   : 1
    <2e95>   DW_AT_decl_line   : 609
    <2e97>   DW_AT_decl_column : 51
    <2e98>   DW_AT_type        : <0x2b1f>
    <2e9c>   DW_AT_location    : 2 byte block: 91 58 	(DW_OP_fbreg: -40)
 <2><2e9f>: Abbrev Number: 54 (DW_TAG_formal_parameter)
    <2ea0>   DW_AT_name        : (indirect string, offset: 0x1cb2): burst
    <2ea4>   DW_AT_decl_file   : 1
    <2ea5>   DW_AT_decl_line   : 609
    <2ea7>   DW_AT_decl_column : 61
    <2ea8>   DW_AT_type        : <0x6f>
    <2eac>   DW_AT_location    : 2 byte block: 91 54 	(DW_OP_fbreg: -44)
 <2><2eaf>: Abbrev Number: 54 (DW_TAG_formal_parameter)
    <2eb0>   DW_AT_name        : (indirect string, offset: 0x1b43): period
    <2eb4>   DW_AT_decl_file   : 1
    <2eb5>   DW_AT_decl_line   : 609
    <2eb7>   DW_AT_decl_column : 72
    <2eb8>   DW_AT_type        : <0x6f>
    <2ebc>   DW_AT_location    : 2 byte block: 91 50 	(DW_OP_fbreg: -48)
 <2><2ebf>: Abbrev Number: 52 (DW_TAG_variable)
    <2ec0>   DW_AT_name        : (indirect string, offset: 0x17dc): bucket
    <2ec4>   DW_AT_decl_file   : 1
    <2ec5>   DW_AT_decl_line   : 610
    <2ec7>   DW_AT_decl_column : 17
    <2ec8>   DW_AT_type        : <0x1e49>
    <2ecc>   DW_AT_location    : 2 byte block: 91 68 	(DW_OP_fbreg: -24)
 <2><2ecf>: Abbrev Number: 0
 <1><2ed0>: Abbrev Number: 53 (DW_TAG_subprogram)
    <2ed1>   DW_AT_external    : 1
    <2ed1>   DW_AT_name        : (indirect string, offset: 0xf58): SVC_RateLimitAddress
    <2ed5>   DW_AT_decl_file   : 1
    <2ed6>   DW_AT_decl_line   : 595
    <2ed8>   DW_AT_decl_column : 10
    <2ed9>   DW_AT_prototyped  : 1
    <2ed9>   DW_AT_type        : <0x483>
    <2edd>   DW_AT_low_pc      : 0xee1
    <2ee5>   DW_AT_high_pc     : 0x52
    <2eed>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
    <2eef>   DW_AT_GNU_all_tail_call_sites: 1
    <2eef>   DW_AT_sibling     : <0x2f34>
 <2><2ef3>: Abbrev Number: 54 (DW_TAG_formal_parameter)
    <2ef4>   DW_AT_name        : (indirect string, offset: 0x928): from
    <2ef8>   DW_AT_decl_file   : 1
    <2ef9>   DW_AT_decl_line   : 595
    <2efb>   DW_AT_decl_column : 48
    <2efc>   DW_AT_type        : <0x2b1f>
    <2f00>   DW_AT_location    : 2 byte block: 91 58 	(DW_OP_fbreg: -40)
 <2><2f03>: Abbrev Number: 54 (DW_TAG_formal_parameter)
    <2f04>   DW_AT_name        : (indirect string, offset: 0x1cb2): burst
    <2f08>   DW_AT_decl_file   : 1
    <2f09>   DW_AT_decl_line   : 595
    <2f0b>   DW_AT_decl_column : 58
    <2f0c>   DW_AT_type        : <0x6f>
    <2f10>   DW_AT_location    : 2 byte block: 91 54 	(DW_OP_fbreg: -44)
 <2><2f13>: Abbrev Number: 54 (DW_TAG_formal_parameter)
    <2f14>   DW_AT_name        : (indirect string, offset: 0x1b43): period
    <2f18>   DW_AT_decl_file   : 1
    <2f19>   DW_AT_decl_line   : 595
    <2f1b>   DW_AT_decl_column : 69
    <2f1c>   DW_AT_type        : <0x6f>
    <2f20>   DW_AT_location    : 2 byte block: 91 50 	(DW_OP_fbreg: -48)
 <2><2f23>: Abbrev Number: 52 (DW_TAG_variable)
    <2f24>   DW_AT_name        : (indirect string, offset: 0x17dc): bucket
    <2f28>   DW_AT_decl_file   : 1
    <2f29>   DW_AT_decl_line   : 596
    <2f2b>   DW_AT_decl_column : 17
    <2f2c>   DW_AT_type        : <0x1e49>
    <2f30>   DW_AT_location    : 2 byte block: 91 68 	(DW_OP_fbreg: -24)
 <2><2f33>: Abbrev Number: 0
 <1><2f34>: Abbrev Number: 62 (DW_TAG_subprogram)
    <2f35>   DW_AT_name        : (indirect string, offset: 0x5c): SVC_RateRestoreToxic
    <2f39>   DW_AT_decl_file   : 1
    <2f3a>   DW_AT_decl_line   : 579
    <2f3c>   DW_AT_decl_column : 13
    <2f3d>   DW_AT_prototyped  : 1
    <2f3d>   DW_AT_low_pc      : 0xeb3
    <2f45>   DW_AT_high_pc     : 0x2e
    <2f4d>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
    <2f4f>   DW_AT_GNU_all_call_sites: 1
    <2f4f>   DW_AT_sibling     : <0x2f64>
 <2><2f53>: Abbrev Number: 54 (DW_TAG_formal_parameter)
    <2f54>   DW_AT_name        : (indirect string, offset: 0x17dc): bucket
    <2f58>   DW_AT_decl_file   : 1
    <2f59>   DW_AT_decl_line   : 579
    <2f5b>   DW_AT_decl_column : 50
    <2f5c>   DW_AT_type        : <0x1e49>
    <2f60>   DW_AT_location    : 2 byte block: 91 68 	(DW_OP_fbreg: -24)
 <2><2f63>: Abbrev Number: 0
 <1><2f64>: Abbrev Number: 62 (DW_TAG_subprogram)
    <2f65>   DW_AT_name        : (indirect string, offset: 0x1afd): SVC_RateRestoreBurst
    <2f69>   DW_AT_decl_file   : 1
    <2f6a>   DW_AT_decl_line   : 565
    <2f6c>   DW_AT_decl_column : 13
    <2f6d>   DW_AT_prototyped  : 1
    <2f6d>   DW_AT_low_pc      : 0xe85
    <2f75>   DW_AT_high_pc     : 0x2e
    <2f7d>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
    <2f7f>   DW_AT_GNU_all_call_sites: 1
    <2f7f>   DW_AT_sibling     : <0x2f94>
 <2><2f83>: Abbrev Number: 54 (DW_TAG_formal_parameter)
    <2f84>   DW_AT_name        : (indirect string, offset: 0x17dc): bucket
    <2f88>   DW_AT_decl_file   : 1
    <2f89>   DW_AT_decl_line   : 565
    <2f8b>   DW_AT_decl_column : 50
    <2f8c>   DW_AT_type        : <0x1e49>
    <2f90>   DW_AT_location    : 2 byte block: 91 68 	(DW_OP_fbreg: -24)
 <2><2f93>: Abbrev Number: 0
 <1><2f94>: Abbrev Number: 57 (DW_TAG_subprogram)
    <2f95>   DW_AT_name        : (indirect string, offset: 0x142f): SVC_RateDrop
    <2f99>   DW_AT_decl_file   : 1
    <2f9a>   DW_AT_decl_line   : 550
    <2f9c>   DW_AT_decl_column : 13
    <2f9d>   DW_AT_prototyped  : 1
    <2f9d>   DW_AT_low_pc      : 0xe2b
    <2fa5>   DW_AT_high_pc     : 0x5a
    <2fad>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
    <2faf>   DW_AT_GNU_all_tail_call_sites: 1
    <2faf>   DW_AT_sibling     : <0x2fd4>
 <2><2fb3>: Abbrev Number: 54 (DW_TAG_formal_parameter)
    <2fb4>   DW_AT_name        : (indirect string, offset: 0x17dc): bucket
    <2fb8>   DW_AT_decl_file   : 1
    <2fb9>   DW_AT_decl_line   : 550
    <2fbb>   DW_AT_decl_column : 42
    <2fbc>   DW_AT_type        : <0x1e49>
    <2fc0>   DW_AT_location    : 2 byte block: 91 68 	(DW_OP_fbreg: -24)
 <2><2fc3>: Abbrev Number: 54 (DW_TAG_formal_parameter)
    <2fc4>   DW_AT_name        : (indirect string, offset: 0x1cb2): burst
    <2fc8>   DW_AT_decl_file   : 1
    <2fc9>   DW_AT_decl_line   : 550
    <2fcb>   DW_AT_decl_column : 54
    <2fcc>   DW_AT_type        : <0x6f>
    <2fd0>   DW_AT_location    : 2 byte block: 91 64 	(DW_OP_fbreg: -28)
 <2><2fd3>: Abbrev Number: 0
 <1><2fd4>: Abbrev Number: 53 (DW_TAG_subprogram)
    <2fd5>   DW_AT_external    : 1
    <2fd5>   DW_AT_name        : (indirect string, offset: 0x18f7): SVC_RateLimit
    <2fd9>   DW_AT_decl_file   : 1
    <2fda>   DW_AT_decl_line   : 522
    <2fdc>   DW_AT_decl_column : 10
    <2fdd>   DW_AT_prototyped  : 1
    <2fdd>   DW_AT_type        : <0x483>
    <2fe1>   DW_AT_low_pc      : 0xd79
    <2fe9>   DW_AT_high_pc     : 0xb2
    <2ff1>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
    <2ff3>   DW_AT_GNU_all_tail_call_sites: 1
    <2ff3>   DW_AT_sibling     : <0x3068>
 <2><2ff7>: Abbrev Number: 54 (DW_TAG_formal_parameter)
    <2ff8>   DW_AT_name        : (indirect string, offset: 0x17dc): bucket
    <2ffc>   DW_AT_decl_file   : 1
    <2ffd>   DW_AT_decl_line   : 522
    <2fff>   DW_AT_decl_column : 38
    <3000>   DW_AT_type        : <0x3068>
    <3004>   DW_AT_location    : 2 byte block: 91 58 	(DW_OP_fbreg: -40)
 <2><3007>: Abbrev Number: 54 (DW_TAG_formal_parameter)
    <3008>   DW_AT_name        : (indirect string, offset: 0x1cb2): burst
    <300c>   DW_AT_decl_file   : 1
    <300d>   DW_AT_decl_line   : 522
    <300f>   DW_AT_decl_column : 50
    <3010>   DW_AT_type        : <0x6f>
    <3014>   DW_AT_location    : 2 byte block: 91 54 	(DW_OP_fbreg: -44)
 <2><3017>: Abbrev Number: 54 (DW_TAG_formal_parameter)
    <3018>   DW_AT_name        : (indirect string, offset: 0x1b43): period
    <301c>   DW_AT_decl_file   : 1
    <301d>   DW_AT_decl_line   : 522
    <301f>   DW_AT_decl_column : 61
    <3020>   DW_AT_type        : <0x6f>
    <3024>   DW_AT_location    : 2 byte block: 91 50 	(DW_OP_fbreg: -48)
 <2><3027>: Abbrev Number: 56 (DW_TAG_variable)
    <3028>   DW_AT_name        : now
    <302c>   DW_AT_decl_file   : 1
    <302d>   DW_AT_decl_line   : 523
    <302f>   DW_AT_decl_column : 6
    <3030>   DW_AT_type        : <0x6f>
    <3034>   DW_AT_location    : 2 byte block: 91 6c 	(DW_OP_fbreg: -20)
 <2><3037>: Abbrev Number: 52 (DW_TAG_variable)
    <3038>   DW_AT_name        : (indirect string, offset: 0x145d): interval
    <303c>   DW_AT_decl_file   : 1
    <303d>   DW_AT_decl_line   : 524
    <303f>   DW_AT_decl_column : 6
    <3040>   DW_AT_type        : <0x6f>
    <3044>   DW_AT_location    : 2 byte block: 91 68 	(DW_OP_fbreg: -24)
 <2><3047>: Abbrev Number: 52 (DW_TAG_variable)
    <3048>   DW_AT_name        : (indirect string, offset: 0xf9c): expired
    <304c>   DW_AT_decl_file   : 1
    <304d>   DW_AT_decl_line   : 525
    <304f>   DW_AT_decl_column : 6
    <3050>   DW_AT_type        : <0x6f>
    <3054>   DW_AT_location    : 2 byte block: 91 64 	(DW_OP_fbreg: -28)
 <2><3057>: Abbrev Number: 52 (DW_TAG_variable)
    <3058>   DW_AT_name        : (indirect string, offset: 0xc45): expiredRemainder
    <305c>   DW_AT_decl_file   : 1
    <305d>   DW_AT_decl_line   : 526
    <305f>   DW_AT_decl_column : 6
    <3060>   DW_AT_type        : <0x6f>
    <3064>   DW_AT_location    : 2 byte block: 91 60 	(DW_OP_fbreg: -32)
 <2><3067>: Abbrev Number: 0
 <1><3068>: Abbrev Number: 9 (DW_TAG_pointer_type)
    <3069>   DW_AT_byte_size   : 8
    <306a>   DW_AT_type        : <0x1da8>
 <1><306e>: Abbrev Number: 63 (DW_TAG_subprogram)
    <306f>   DW_AT_name        : (indirect string, offset: 0xfb4): SVC_BucketForAddress
    <3073>   DW_AT_decl_file   : 1
    <3074>   DW_AT_decl_line   : 428
    <3076>   DW_AT_decl_column : 23
    <3077>   DW_AT_prototyped  : 1
    <3077>   DW_AT_type        : <0x1e49>
    <307b>   DW_AT_low_pc      : 0xa3b
    <3083>   DW_AT_high_pc     : 0x33e
    <308b>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
    <308d>   DW_AT_GNU_all_tail_call_sites: 1
    <308d>   DW_AT_sibling     : <0x315e>
 <2><3091>: Abbrev Number: 54 (DW_TAG_formal_parameter)
    <3092>   DW_AT_name        : (indirect string, offset: 0x118f): address
    <3096>   DW_AT_decl_file   : 1
    <3097>   DW_AT_decl_line   : 428
    <3099>   DW_AT_decl_column : 61
    <309a>   DW_AT_type        : <0x2b1f>
    <309e>   DW_AT_location    : 2 byte block: 91 48 	(DW_OP_fbreg: -56)
 <2><30a1>: Abbrev Number: 54 (DW_TAG_formal_parameter)
    <30a2>   DW_AT_name        : (indirect string, offset: 0x1cb2): burst
    <30a6>   DW_AT_decl_file   : 1
    <30a7>   DW_AT_decl_line   : 428
    <30a9>   DW_AT_decl_column : 74
    <30aa>   DW_AT_type        : <0x6f>
    <30ae>   DW_AT_location    : 2 byte block: 91 44 	(DW_OP_fbreg: -60)
 <2><30b1>: Abbrev Number: 54 (DW_TAG_formal_parameter)
    <30b2>   DW_AT_name        : (indirect string, offset: 0x1b43): period
    <30b6>   DW_AT_decl_file   : 1
    <30b7>   DW_AT_decl_line   : 428
    <30b9>   DW_AT_decl_column : 85
    <30ba>   DW_AT_type        : <0x6f>
    <30be>   DW_AT_location    : 2 byte block: 91 40 	(DW_OP_fbreg: -64)
 <2><30c1>: Abbrev Number: 52 (DW_TAG_variable)
    <30c2>   DW_AT_name        : (indirect string, offset: 0x1e24): dummy
    <30c6>   DW_AT_decl_file   : 1
    <30c7>   DW_AT_decl_line   : 429
    <30c9>   DW_AT_decl_column : 23
    <30ca>   DW_AT_type        : <0x1db4>
    <30ce>   DW_AT_location    : 9 byte block: 3 a0 29 e 0 0 0 0 0 	(DW_OP_addr: e29a0)
 <2><30d8>: Abbrev Number: 52 (DW_TAG_variable)
    <30d9>   DW_AT_name        : (indirect string, offset: 0x110a): start
    <30dd>   DW_AT_decl_file   : 1
    <30de>   DW_AT_decl_line   : 430
    <30e0>   DW_AT_decl_column : 14
    <30e1>   DW_AT_type        : <0x6f>
    <30e5>   DW_AT_location    : 9 byte block: 3 d8 29 e 0 0 0 0 0 	(DW_OP_addr: e29d8)
 <2><30ef>: Abbrev Number: 52 (DW_TAG_variable)
    <30f0>   DW_AT_name        : (indirect string, offset: 0x162e): hash
    <30f4>   DW_AT_decl_file   : 1
    <30f5>   DW_AT_decl_line   : 431
    <30f7>   DW_AT_decl_column : 13
    <30f8>   DW_AT_type        : <0x76>
    <30fc>   DW_AT_location    : 2 byte block: 91 5c 	(DW_OP_fbreg: -36)
 <2><30ff>: Abbrev Number: 56 (DW_TAG_variable)
    <3100>   DW_AT_name        : now
    <3104>   DW_AT_decl_file   : 1
    <3105>   DW_AT_decl_line   : 432
    <3107>   DW_AT_decl_column : 13
    <3108>   DW_AT_type        : <0x76>
    <310c>   DW_AT_location    : 2 byte block: 91 58 	(DW_OP_fbreg: -40)
 <2><310f>: Abbrev Number: 52 (DW_TAG_variable)
    <3110>   DW_AT_name        : (indirect string, offset: 0x17dc): bucket
    <3114>   DW_AT_decl_file   : 1
    <3115>   DW_AT_decl_line   : 433
    <3117>   DW_AT_decl_column : 17
    <3118>   DW_AT_type        : <0x1e49>
    <311c>   DW_AT_location    : 2 byte block: 91 68 	(DW_OP_fbreg: -24)
 <2><311f>: Abbrev Number: 56 (DW_TAG_variable)
    <3120>   DW_AT_name        : i
    <3122>   DW_AT_decl_file   : 1
    <3123>   DW_AT_decl_line   : 434
    <3125>   DW_AT_decl_column : 9
    <3126>   DW_AT_type        : <0x6f>
    <312a>   DW_AT_location    : 2 byte block: 91 64 	(DW_OP_fbreg: -28)
 <2><312d>: Abbrev Number: 56 (DW_TAG_variable)
    <312e>   DW_AT_name        : n
    <3130>   DW_AT_decl_file   : 1
    <3131>   DW_AT_decl_line   : 434
    <3133>   DW_AT_decl_column : 12
    <3134>   DW_AT_type        : <0x6f>
    <3138>   DW_AT_location    : 2 byte block: 91 60 	(DW_OP_fbreg: -32)
 <2><313b>: Abbrev Number: 59 (DW_TAG_lexical_block)
    <313c>   DW_AT_low_pc      : 0xb60
    <3144>   DW_AT_high_pc     : 0x201
 <3><314c>: Abbrev Number: 52 (DW_TAG_variable)
    <314d>   DW_AT_name        : (indirect string, offset: 0x145d): interval
    <3151>   DW_AT_decl_file   : 1
    <3152>   DW_AT_decl_line   : 462
    <3154>   DW_AT_decl_column : 7
    <3155>   DW_AT_type        : <0x6f>
    <3159>   DW_AT_location    : 2 byte block: 91 54 	(DW_OP_fbreg: -44)
 <3><315c>: Abbrev Number: 0
 <2><315d>: Abbrev Number: 0
 <1><315e>: Abbrev Number: 62 (DW_TAG_subprogram)
    <315f>   DW_AT_name        : (indirect string, offset: 0x961): SVC_RelinkToHead
    <3163>   DW_AT_decl_file   : 1
    <3164>   DW_AT_decl_line   : 399
    <3166>   DW_AT_decl_column : 13
    <3167>   DW_AT_prototyped  : 1
    <3167>   DW_AT_low_pc      : 0x960
    <316f>   DW_AT_high_pc     : 0xdb
    <3177>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
    <3179>   DW_AT_GNU_all_call_sites: 1
    <3179>   DW_AT_sibling     : <0x319e>
 <2><317d>: Abbrev Number: 54 (DW_TAG_formal_parameter)
    <317e>   DW_AT_name        : (indirect string, offset: 0x17dc): bucket
    <3182>   DW_AT_decl_file   : 1
    <3183>   DW_AT_decl_line   : 399
    <3185>   DW_AT_decl_column : 46
    <3186>   DW_AT_type        : <0x1e49>
    <318a>   DW_AT_location    : 2 byte block: 91 68 	(DW_OP_fbreg: -24)
 <2><318d>: Abbrev Number: 54 (DW_TAG_formal_parameter)
    <318e>   DW_AT_name        : (indirect string, offset: 0x162e): hash
    <3192>   DW_AT_decl_file   : 1
    <3193>   DW_AT_decl_line   : 399
    <3195>   DW_AT_decl_column : 58
    <3196>   DW_AT_type        : <0x6f>
    <319a>   DW_AT_location    : 2 byte block: 91 64 	(DW_OP_fbreg: -28)
 <2><319d>: Abbrev Number: 0
 <1><319e>: Abbrev Number: 64 (DW_TAG_subprogram)
    <319f>   DW_AT_name        : (indirect string, offset: 0x1aa3): SVC_HashForAddress
    <31a3>   DW_AT_decl_file   : 1
    <31a4>   DW_AT_decl_line   : 369
    <31a6>   DW_AT_decl_column : 12
    <31a7>   DW_AT_prototyped  : 1
    <31a7>   DW_AT_type        : <0x6f>
    <31ab>   DW_AT_low_pc      : 0x8b3
    <31b3>   DW_AT_high_pc     : 0xad
    <31bb>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
    <31bd>   DW_AT_GNU_all_call_sites: 1
    <31bd>   DW_AT_sibling     : <0x320f>
 <2><31c1>: Abbrev Number: 54 (DW_TAG_formal_parameter)
    <31c2>   DW_AT_name        : (indirect string, offset: 0x118f): address
    <31c6>   DW_AT_decl_file   : 1
    <31c7>   DW_AT_decl_line   : 369
    <31c9>   DW_AT_decl_column : 48
    <31ca>   DW_AT_type        : <0x2b1f>
    <31ce>   DW_AT_location    : 2 byte block: 91 48 	(DW_OP_fbreg: -56)
 <2><31d1>: Abbrev Number: 56 (DW_TAG_variable)
    <31d2>   DW_AT_name        : ip
    <31d5>   DW_AT_decl_file   : 1
    <31d6>   DW_AT_decl_line   : 370
    <31d8>   DW_AT_decl_column : 14
    <31d9>   DW_AT_type        : <0x320f>
    <31dd>   DW_AT_location    : 2 byte block: 91 68 	(DW_OP_fbreg: -24)
 <2><31e0>: Abbrev Number: 52 (DW_TAG_variable)
    <31e1>   DW_AT_name        : (indirect string, offset: 0x94f): size
    <31e5>   DW_AT_decl_file   : 1
    <31e6>   DW_AT_decl_line   : 371
    <31e8>   DW_AT_decl_column : 8
    <31e9>   DW_AT_type        : <0x6f>
    <31ed>   DW_AT_location    : 2 byte block: 91 64 	(DW_OP_fbreg: -28)
 <2><31f0>: Abbrev Number: 52 (DW_TAG_variable)
    <31f1>   DW_AT_name        : (indirect string, offset: 0x162e): hash
    <31f5>   DW_AT_decl_file   : 1
    <31f6>   DW_AT_decl_line   : 372
    <31f8>   DW_AT_decl_column : 8
    <31f9>   DW_AT_type        : <0x6f>
    <31fd>   DW_AT_location    : 2 byte block: 91 60 	(DW_OP_fbreg: -32)
 <2><3200>: Abbrev Number: 56 (DW_TAG_variable)
    <3201>   DW_AT_name        : i
    <3203>   DW_AT_decl_file   : 1
    <3204>   DW_AT_decl_line   : 373
    <3206>   DW_AT_decl_column : 8
    <3207>   DW_AT_type        : <0x6f>
    <320b>   DW_AT_location    : 2 byte block: 91 5c 	(DW_OP_fbreg: -36)
 <2><320e>: Abbrev Number: 0
 <1><320f>: Abbrev Number: 9 (DW_TAG_pointer_type)
    <3210>   DW_AT_byte_size   : 8
    <3211>   DW_AT_type        : <0x463>
 <1><3215>: Abbrev Number: 65 (DW_TAG_subprogram)
    <3216>   DW_AT_external    : 1
    <3216>   DW_AT_name        : (indirect string, offset: 0x1f55): SV_MasterShutdown
    <321a>   DW_AT_decl_file   : 1
    <321b>   DW_AT_decl_line   : 333
    <321d>   DW_AT_decl_column : 6
    <321e>   DW_AT_prototyped  : 1
    <321e>   DW_AT_low_pc      : 0x87c
    <3226>   DW_AT_high_pc     : 0x37
    <322e>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
    <3230>   DW_AT_GNU_all_tail_call_sites: 1
 <1><3230>: Abbrev Number: 66 (DW_TAG_subprogram)
    <3231>   DW_AT_name        : (indirect string, offset: 0x677): SV_MasterHeartbeat
    <3235>   DW_AT_decl_file   : 1
    <3236>   DW_AT_decl_line   : 239
    <3237>   DW_AT_decl_column : 13
    <3238>   DW_AT_prototyped  : 1
    <3238>   DW_AT_low_pc      : 0x3ad
    <3240>   DW_AT_high_pc     : 0x4cf
    <3248>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
    <324a>   DW_AT_GNU_all_tail_call_sites: 1
    <324a>   DW_AT_sibling     : <0x329f>
 <2><324e>: Abbrev Number: 67 (DW_TAG_formal_parameter)
    <324f>   DW_AT_name        : (indirect string, offset: 0x3b): message
    <3253>   DW_AT_decl_file   : 1
    <3254>   DW_AT_decl_line   : 239
    <3255>   DW_AT_decl_column : 45
    <3256>   DW_AT_type        : <0x38d>
    <325a>   DW_AT_location    : 2 byte block: 91 58 	(DW_OP_fbreg: -40)
 <2><325d>: Abbrev Number: 68 (DW_TAG_variable)
    <325e>   DW_AT_name        : adr
    <3262>   DW_AT_decl_file   : 1
    <3263>   DW_AT_decl_line   : 241
    <3264>   DW_AT_decl_column : 18
    <3265>   DW_AT_type        : <0x329f>
    <3269>   DW_AT_location    : 9 byte block: 3 60 28 e 0 0 0 0 0 	(DW_OP_addr: e2860)
 <2><3273>: Abbrev Number: 68 (DW_TAG_variable)
    <3274>   DW_AT_name        : i
    <3276>   DW_AT_decl_file   : 1
    <3277>   DW_AT_decl_line   : 242
    <3278>   DW_AT_decl_column : 8
    <3279>   DW_AT_type        : <0x6f>
    <327d>   DW_AT_location    : 2 byte block: 91 6c 	(DW_OP_fbreg: -20)
 <2><3280>: Abbrev Number: 68 (DW_TAG_variable)
    <3281>   DW_AT_name        : res
    <3285>   DW_AT_decl_file   : 1
    <3286>   DW_AT_decl_line   : 243
    <3287>   DW_AT_decl_column : 8
    <3288>   DW_AT_type        : <0x6f>
    <328c>   DW_AT_location    : 2 byte block: 91 64 	(DW_OP_fbreg: -28)
 <2><328f>: Abbrev Number: 69 (DW_TAG_variable)
    <3290>   DW_AT_name        : (indirect string, offset: 0x50b): netenabled
    <3294>   DW_AT_decl_file   : 1
    <3295>   DW_AT_decl_line   : 244
    <3296>   DW_AT_decl_column : 8
    <3297>   DW_AT_type        : <0x6f>
    <329b>   DW_AT_location    : 2 byte block: 91 68 	(DW_OP_fbreg: -24)
 <2><329e>: Abbrev Number: 0
 <1><329f>: Abbrev Number: 6 (DW_TAG_array_type)
    <32a0>   DW_AT_type        : <0xfb3>
    <32a4>   DW_AT_sibling     : <0x32b5>
 <2><32a8>: Abbrev Number: 7 (DW_TAG_subrange_type)
    <32a9>   DW_AT_type        : <0x42>
    <32ad>   DW_AT_upper_bound : 4
 <2><32ae>: Abbrev Number: 7 (DW_TAG_subrange_type)
    <32af>   DW_AT_type        : <0x42>
    <32b3>   DW_AT_upper_bound : 1
 <2><32b4>: Abbrev Number: 0
 <1><32b5>: Abbrev Number: 70 (DW_TAG_subprogram)
    <32b6>   DW_AT_external    : 1
    <32b6>   DW_AT_name        : (indirect string, offset: 0x40f): SV_SendServerCommand
    <32ba>   DW_AT_decl_file   : 1
    <32bb>   DW_AT_decl_line   : 185
    <32bc>   DW_AT_decl_column : 12
    <32bd>   DW_AT_prototyped  : 1
    <32bd>   DW_AT_low_pc      : 0x1ed
    <32c5>   DW_AT_high_pc     : 0x1c0
    <32cd>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
    <32cf>   DW_AT_GNU_all_tail_call_sites: 1
    <32cf>   DW_AT_sibling     : <0x3342>
 <2><32d3>: Abbrev Number: 71 (DW_TAG_formal_parameter)
    <32d4>   DW_AT_name        : cl
    <32d7>   DW_AT_decl_file   : 1
    <32d8>   DW_AT_decl_line   : 185
    <32d9>   DW_AT_decl_column : 44
    <32da>   DW_AT_type        : <0x22f0>
    <32de>   DW_AT_location    : 3 byte block: 91 88 75 	(DW_OP_fbreg: -1400)
 <2><32e2>: Abbrev Number: 71 (DW_TAG_formal_parameter)
    <32e3>   DW_AT_name        : fmt
    <32e7>   DW_AT_decl_file   : 1
    <32e8>   DW_AT_decl_line   : 185
    <32e9>   DW_AT_decl_column : 60
    <32ea>   DW_AT_type        : <0x38d>
    <32ee>   DW_AT_location    : 3 byte block: 91 80 75 	(DW_OP_fbreg: -1408)
 <2><32f2>: Abbrev Number: 27 (DW_TAG_unspecified_parameters)
 <2><32f3>: Abbrev Number: 69 (DW_TAG_variable)
    <32f4>   DW_AT_name        : (indirect string, offset: 0x163): argptr
    <32f8>   DW_AT_decl_file   : 1
    <32f9>   DW_AT_decl_line   : 186
    <32fa>   DW_AT_decl_column : 11
    <32fb>   DW_AT_type        : <0x33b>
    <32ff>   DW_AT_location    : 3 byte block: 91 98 7e 	(DW_OP_fbreg: -232)
 <2><3303>: Abbrev Number: 69 (DW_TAG_variable)
    <3304>   DW_AT_name        : (indirect string, offset: 0x3b): message
    <3308>   DW_AT_decl_file   : 1
    <3309>   DW_AT_decl_line   : 187
    <330a>   DW_AT_decl_column : 8
    <330b>   DW_AT_type        : <0x3342>
    <330f>   DW_AT_location    : 3 byte block: 91 90 75 	(DW_OP_fbreg: -1392)
 <2><3313>: Abbrev Number: 69 (DW_TAG_variable)
    <3314>   DW_AT_name        : (indirect string, offset: 0xb6d): client
    <3318>   DW_AT_decl_file   : 1
    <3319>   DW_AT_decl_line   : 188
    <331a>   DW_AT_decl_column : 12
    <331b>   DW_AT_type        : <0x22f0>
    <331f>   DW_AT_location    : 3 byte block: 91 b8 7e 	(DW_OP_fbreg: -200)
 <2><3323>: Abbrev Number: 68 (DW_TAG_variable)
    <3324>   DW_AT_name        : j
    <3326>   DW_AT_decl_file   : 1
    <3327>   DW_AT_decl_line   : 189
    <3328>   DW_AT_decl_column : 8
    <3329>   DW_AT_type        : <0x6f>
    <332d>   DW_AT_location    : 3 byte block: 91 b4 7e 	(DW_OP_fbreg: -204)
 <2><3331>: Abbrev Number: 68 (DW_TAG_variable)
    <3332>   DW_AT_name        : len
    <3336>   DW_AT_decl_file   : 1
    <3337>   DW_AT_decl_line   : 189
    <3338>   DW_AT_decl_column : 11
    <3339>   DW_AT_type        : <0x6f>
    <333d>   DW_AT_location    : 3 byte block: 91 b0 7e 	(DW_OP_fbreg: -208)
 <2><3341>: Abbrev Number: 0
 <1><3342>: Abbrev Number: 6 (DW_TAG_array_type)
    <3343>   DW_AT_type        : <0xbe>
    <3347>   DW_AT_sibling     : <0x3353>
 <2><334b>: Abbrev Number: 24 (DW_TAG_subrange_type)
    <334c>   DW_AT_type        : <0x42>
    <3350>   DW_AT_upper_bound : 1151
 <2><3352>: Abbrev Number: 0
 <1><3353>: Abbrev Number: 70 (DW_TAG_subprogram)
    <3354>   DW_AT_external    : 1
    <3354>   DW_AT_name        : (indirect string, offset: 0x1c57): SV_AddServerCommand
    <3358>   DW_AT_decl_file   : 1
    <3359>   DW_AT_decl_line   : 142
    <335a>   DW_AT_decl_column : 6
    <335b>   DW_AT_prototyped  : 1
    <335b>   DW_AT_low_pc      : 0x99
    <3363>   DW_AT_high_pc     : 0x154
    <336b>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
    <336d>   DW_AT_GNU_all_tail_call_sites: 1
    <336d>   DW_AT_sibling     : <0x33da>
 <2><3371>: Abbrev Number: 67 (DW_TAG_formal_parameter)
    <3372>   DW_AT_name        : (indirect string, offset: 0xb6d): client
    <3376>   DW_AT_decl_file   : 1
    <3377>   DW_AT_decl_line   : 142
    <3378>   DW_AT_decl_column : 37
    <3379>   DW_AT_type        : <0x22f0>
    <337d>   DW_AT_location    : 2 byte block: 91 58 	(DW_OP_fbreg: -40)
 <2><3380>: Abbrev Number: 71 (DW_TAG_formal_parameter)
    <3381>   DW_AT_name        : cmd
    <3385>   DW_AT_decl_file   : 1
    <3386>   DW_AT_decl_line   : 142
    <3387>   DW_AT_decl_column : 57
    <3388>   DW_AT_type        : <0x38d>
    <338c>   DW_AT_location    : 2 byte block: 91 50 	(DW_OP_fbreg: -48)
 <2><338f>: Abbrev Number: 69 (DW_TAG_variable)
    <3390>   DW_AT_name        : (indirect string, offset: 0x4c3): index
    <3394>   DW_AT_decl_file   : 1
    <3395>   DW_AT_decl_line   : 143
    <3396>   DW_AT_decl_column : 7
    <3397>   DW_AT_type        : <0x6f>
    <339b>   DW_AT_location    : 2 byte block: 91 60 	(DW_OP_fbreg: -32)
 <2><339e>: Abbrev Number: 68 (DW_TAG_variable)
    <339f>   DW_AT_name        : i
    <33a1>   DW_AT_decl_file   : 1
    <33a2>   DW_AT_decl_line   : 143
    <33a3>   DW_AT_decl_column : 14
    <33a4>   DW_AT_type        : <0x6f>
    <33a8>   DW_AT_location    : 2 byte block: 91 6c 	(DW_OP_fbreg: -20)
 <2><33ab>: Abbrev Number: 68 (DW_TAG_variable)
    <33ac>   DW_AT_name        : n
    <33ae>   DW_AT_decl_file   : 1
    <33af>   DW_AT_decl_line   : 143
    <33b0>   DW_AT_decl_column : 17
    <33b1>   DW_AT_type        : <0x6f>
    <33b5>   DW_AT_location    : 2 byte block: 91 68 	(DW_OP_fbreg: -24)
 <2><33b8>: Abbrev Number: 59 (DW_TAG_lexical_block)
    <33b9>   DW_AT_low_pc      : 0x125
    <33c1>   DW_AT_high_pc     : 0x49
 <3><33c9>: Abbrev Number: 69 (DW_TAG_variable)
    <33ca>   DW_AT_name        : (indirect string, offset: 0x4c3): index
    <33ce>   DW_AT_decl_file   : 1
    <33cf>   DW_AT_decl_line   : 164
    <33d0>   DW_AT_decl_column : 14
    <33d1>   DW_AT_type        : <0x76>
    <33d5>   DW_AT_location    : 2 byte block: 91 64 	(DW_OP_fbreg: -28)
 <3><33d8>: Abbrev Number: 0
 <2><33d9>: Abbrev Number: 0
 <1><33da>: Abbrev Number: 72 (DW_TAG_subprogram)
    <33db>   DW_AT_name        : (indirect string, offset: 0x2f5): SV_ExpandNewlines
    <33df>   DW_AT_decl_file   : 1
    <33e0>   DW_AT_decl_line   : 81
    <33e1>   DW_AT_decl_column : 20
    <33e2>   DW_AT_prototyped  : 1
    <33e2>   DW_AT_type        : <0x38d>
    <33e6>   DW_AT_low_pc      : 0x0
    <33ee>   DW_AT_high_pc     : 0x99
    <33f6>   DW_AT_frame_base  : 1 byte block: 9c 	(DW_OP_call_frame_cfa)
    <33f8>   DW_AT_GNU_all_call_sites: 1
    <33f8>   DW_AT_sibling     : <0x342e>
 <2><33fc>: Abbrev Number: 71 (DW_TAG_formal_parameter)
    <33fd>   DW_AT_name        : in
    <3400>   DW_AT_decl_file   : 1
    <3401>   DW_AT_decl_line   : 81
    <3402>   DW_AT_decl_column : 51
    <3403>   DW_AT_type        : <0x38d>
    <3407>   DW_AT_location    : 2 byte block: 91 58 	(DW_OP_fbreg: -40)
 <2><340a>: Abbrev Number: 69 (DW_TAG_variable)
    <340b>   DW_AT_name        : (indirect string, offset: 0x11be): string
    <340f>   DW_AT_decl_file   : 1
    <3410>   DW_AT_decl_line   : 82
    <3411>   DW_AT_decl_column : 14
    <3412>   DW_AT_type        : <0x342e>
    <3416>   DW_AT_location    : 9 byte block: 3 60 20 e 0 0 0 0 0 	(DW_OP_addr: e2060)
 <2><3420>: Abbrev Number: 68 (DW_TAG_variable)
    <3421>   DW_AT_name        : l
    <3423>   DW_AT_decl_file   : 1
    <3424>   DW_AT_decl_line   : 83
    <3425>   DW_AT_decl_column : 7
    <3426>   DW_AT_type        : <0x6f>
    <342a>   DW_AT_location    : 2 byte block: 91 6c 	(DW_OP_fbreg: -20)
 <2><342d>: Abbrev Number: 0
 <1><342e>: Abbrev Number: 73 (DW_TAG_array_type)
    <342f>   DW_AT_type        : <0xbe>
 <2><3433>: Abbrev Number: 24 (DW_TAG_subrange_type)
    <3434>   DW_AT_type        : <0x42>
    <3438>   DW_AT_upper_bound : 2047
 <2><343a>: Abbrev Number: 0
 <1><343b>: Abbrev Number: 0

Contents of the .debug_abbrev section:

  Number TAG (0x0)
   1      DW_TAG_compile_unit    [has children]
    DW_AT_producer     DW_FORM_strp
    DW_AT_language     DW_FORM_data1
    DW_AT_name         DW_FORM_strp
    DW_AT_comp_dir     DW_FORM_strp
    DW_AT_low_pc       DW_FORM_addr
    DW_AT_high_pc      DW_FORM_data8
    DW_AT_stmt_list    DW_FORM_sec_offset
    DW_AT value: 0     DW_FORM value: 0
   2      DW_TAG_base_type    [no children]
    DW_AT_byte_size    DW_FORM_data1
    DW_AT_encoding     DW_FORM_data1
    DW_AT_name         DW_FORM_strp
    DW_AT value: 0     DW_FORM value: 0
   3      DW_TAG_typedef    [no children]
    DW_AT_name         DW_FORM_strp
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_decl_column  DW_FORM_data1
    DW_AT_type         DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0
   4      DW_TAG_base_type    [no children]
    DW_AT_byte_size    DW_FORM_data1
    DW_AT_encoding     DW_FORM_data1
    DW_AT_name         DW_FORM_string
    DW_AT value: 0     DW_FORM value: 0
   5      DW_TAG_const_type    [no children]
    DW_AT_type         DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0
   6      DW_TAG_array_type    [has children]
    DW_AT_type         DW_FORM_ref4
    DW_AT_sibling      DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0
   7      DW_TAG_subrange_type    [no children]
    DW_AT_type         DW_FORM_ref4
    DW_AT_upper_bound  DW_FORM_data1
    DW_AT value: 0     DW_FORM value: 0
   8      DW_TAG_pointer_type    [no children]
    DW_AT_byte_size    DW_FORM_data1
    DW_AT value: 0     DW_FORM value: 0
   9      DW_TAG_pointer_type    [no children]
    DW_AT_byte_size    DW_FORM_data1
    DW_AT_type         DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0
   10      DW_TAG_variable    [no children]
    DW_AT_name         DW_FORM_strp
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data2
    DW_AT_decl_column  DW_FORM_data1
    DW_AT_type         DW_FORM_ref4
    DW_AT_external     DW_FORM_flag_present
    DW_AT_declaration  DW_FORM_flag_present
    DW_AT value: 0     DW_FORM value: 0
   11      DW_TAG_typedef    [no children]
    DW_AT_name         DW_FORM_strp
    DW_AT_type         DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0
   12      DW_TAG_structure_type    [has children]
    DW_AT_name         DW_FORM_strp
    DW_AT_byte_size    DW_FORM_data1
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_sibling      DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0
   13      DW_TAG_member    [no children]
    DW_AT_name         DW_FORM_strp
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_type         DW_FORM_ref4
    DW_AT_data_member_location DW_FORM_data1
    DW_AT value: 0     DW_FORM value: 0
   14      DW_TAG_structure_type    [has children]
    DW_AT_name         DW_FORM_strp
    DW_AT_byte_size    DW_FORM_data1
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_decl_column  DW_FORM_data1
    DW_AT_sibling      DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0
   15      DW_TAG_member    [no children]
    DW_AT_name         DW_FORM_strp
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_decl_column  DW_FORM_data1
    DW_AT_type         DW_FORM_ref4
    DW_AT_data_member_location DW_FORM_data1
    DW_AT value: 0     DW_FORM value: 0
   16      DW_TAG_typedef    [no children]
    DW_AT_name         DW_FORM_strp
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_decl_column  DW_FORM_data1
    DW_AT value: 0     DW_FORM value: 0
   17      DW_TAG_structure_type    [no children]
    DW_AT_name         DW_FORM_strp
    DW_AT_declaration  DW_FORM_flag_present
    DW_AT value: 0     DW_FORM value: 0
   18      DW_TAG_variable    [no children]
    DW_AT_name         DW_FORM_strp
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_decl_column  DW_FORM_data1
    DW_AT_type         DW_FORM_ref4
    DW_AT_external     DW_FORM_flag_present
    DW_AT_declaration  DW_FORM_flag_present
    DW_AT value: 0     DW_FORM value: 0
   19      DW_TAG_subrange_type    [no children]
    DW_AT value: 0     DW_FORM value: 0
   20      DW_TAG_enumeration_type    [has children]
    DW_AT_encoding     DW_FORM_data1
    DW_AT_byte_size    DW_FORM_data1
    DW_AT_type         DW_FORM_ref4
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_decl_column  DW_FORM_data1
    DW_AT_sibling      DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0
   21      DW_TAG_enumerator    [no children]
    DW_AT_name         DW_FORM_strp
    DW_AT_const_value  DW_FORM_data1
    DW_AT value: 0     DW_FORM value: 0
   22      DW_TAG_typedef    [no children]
    DW_AT_name         DW_FORM_strp
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data2
    DW_AT_decl_column  DW_FORM_data1
    DW_AT_type         DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0
   23      DW_TAG_enumeration_type    [has children]
    DW_AT_encoding     DW_FORM_data1
    DW_AT_byte_size    DW_FORM_data1
    DW_AT_type         DW_FORM_ref4
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data2
    DW_AT_decl_column  DW_FORM_data1
    DW_AT_sibling      DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0
   24      DW_TAG_subrange_type    [no children]
    DW_AT_type         DW_FORM_ref4
    DW_AT_upper_bound  DW_FORM_data2
    DW_AT value: 0     DW_FORM value: 0
   25      DW_TAG_subroutine_type    [has children]
    DW_AT_prototyped   DW_FORM_flag_present
    DW_AT_type         DW_FORM_ref4
    DW_AT_sibling      DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0
   26      DW_TAG_formal_parameter    [no children]
    DW_AT_type         DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0
   27      DW_TAG_unspecified_parameters    [no children]
    DW_AT value: 0     DW_FORM value: 0
   28      DW_TAG_structure_type    [has children]
    DW_AT_name         DW_FORM_strp
    DW_AT_byte_size    DW_FORM_data1
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data2
    DW_AT_decl_column  DW_FORM_data1
    DW_AT_sibling      DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0
   29      DW_TAG_member    [no children]
    DW_AT_name         DW_FORM_strp
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data2
    DW_AT_decl_column  DW_FORM_data1
    DW_AT_type         DW_FORM_ref4
    DW_AT_data_member_location DW_FORM_data1
    DW_AT value: 0     DW_FORM value: 0
   30      DW_TAG_structure_type    [has children]
    DW_AT_name         DW_FORM_strp
    DW_AT_byte_size    DW_FORM_data2
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data2
    DW_AT_decl_column  DW_FORM_data1
    DW_AT_sibling      DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0
   31      DW_TAG_member    [no children]
    DW_AT_name         DW_FORM_strp
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data2
    DW_AT_decl_column  DW_FORM_data1
    DW_AT_type         DW_FORM_ref4
    DW_AT_data_member_location DW_FORM_data2
    DW_AT value: 0     DW_FORM value: 0
   32      DW_TAG_structure_type    [has children]
    DW_AT_byte_size    DW_FORM_data1
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data2
    DW_AT_decl_column  DW_FORM_data1
    DW_AT_sibling      DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0
   33      DW_TAG_member    [no children]
    DW_AT_name         DW_FORM_string
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data2
    DW_AT_decl_column  DW_FORM_data1
    DW_AT_type         DW_FORM_ref4
    DW_AT_data_member_location DW_FORM_data1
    DW_AT value: 0     DW_FORM value: 0
   34      DW_TAG_structure_type    [has children]
    DW_AT_byte_size    DW_FORM_data1
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_decl_column  DW_FORM_data1
    DW_AT_sibling      DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0
   35      DW_TAG_member    [no children]
    DW_AT_name         DW_FORM_string
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_decl_column  DW_FORM_data1
    DW_AT_type         DW_FORM_ref4
    DW_AT_data_member_location DW_FORM_data1
    DW_AT value: 0     DW_FORM value: 0
   36      DW_TAG_union_type    [has children]
    DW_AT_byte_size    DW_FORM_data1
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_decl_column  DW_FORM_data1
    DW_AT_sibling      DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0
   37      DW_TAG_member    [no children]
    DW_AT_name         DW_FORM_string
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_decl_column  DW_FORM_data1
    DW_AT_type         DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0
   38      DW_TAG_structure_type    [has children]
    DW_AT_byte_size    DW_FORM_data2
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_decl_column  DW_FORM_data1
    DW_AT_sibling      DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0
   39      DW_TAG_member    [no children]
    DW_AT_name         DW_FORM_strp
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_decl_column  DW_FORM_data1
    DW_AT_type         DW_FORM_ref4
    DW_AT_data_member_location DW_FORM_data2
    DW_AT value: 0     DW_FORM value: 0
   40      DW_TAG_enumerator    [no children]
    DW_AT_name         DW_FORM_strp
    DW_AT_const_value  DW_FORM_sdata
    DW_AT value: 0     DW_FORM value: 0
   41      DW_TAG_subroutine_type    [no children]
    DW_AT_prototyped   DW_FORM_flag_present
    DW_AT value: 0     DW_FORM value: 0
   42      DW_TAG_union_type    [has children]
    DW_AT_name         DW_FORM_strp
    DW_AT_byte_size    DW_FORM_data1
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_decl_column  DW_FORM_data1
    DW_AT_sibling      DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0
   43      DW_TAG_member    [no children]
    DW_AT_name         DW_FORM_strp
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_decl_column  DW_FORM_data1
    DW_AT_type         DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0
   44      DW_TAG_subroutine_type    [has children]
    DW_AT_prototyped   DW_FORM_flag_present
    DW_AT_sibling      DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0
   45      DW_TAG_variable    [no children]
    DW_AT_name         DW_FORM_string
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data2
    DW_AT_decl_column  DW_FORM_data1
    DW_AT_type         DW_FORM_ref4
    DW_AT_external     DW_FORM_flag_present
    DW_AT_declaration  DW_FORM_flag_present
    DW_AT value: 0     DW_FORM value: 0
   46      DW_TAG_structure_type    [has children]
    DW_AT_name         DW_FORM_strp
    DW_AT_byte_size    DW_FORM_data2
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_decl_column  DW_FORM_data1
    DW_AT_sibling      DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0
   47      DW_TAG_structure_type    [has children]
    DW_AT_byte_size    DW_FORM_data4
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_decl_column  DW_FORM_data1
    DW_AT_sibling      DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0
   48      DW_TAG_member    [no children]
    DW_AT_name         DW_FORM_strp
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_decl_column  DW_FORM_data1
    DW_AT_type         DW_FORM_ref4
    DW_AT_data_member_location DW_FORM_data4
    DW_AT value: 0     DW_FORM value: 0
   49      DW_TAG_structure_type    [has children]
    DW_AT_name         DW_FORM_strp
    DW_AT_byte_size    DW_FORM_data4
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_decl_column  DW_FORM_data1
    DW_AT_sibling      DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0
   50      DW_TAG_member    [no children]
    DW_AT_name         DW_FORM_string
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_decl_column  DW_FORM_data1
    DW_AT_type         DW_FORM_ref4
    DW_AT_data_member_location DW_FORM_data4
    DW_AT value: 0     DW_FORM value: 0
   51      DW_TAG_variable    [no children]
    DW_AT_specification DW_FORM_ref4
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_decl_column  DW_FORM_data1
    DW_AT_location     DW_FORM_exprloc
    DW_AT value: 0     DW_FORM value: 0
   52      DW_TAG_variable    [no children]
    DW_AT_name         DW_FORM_strp
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data2
    DW_AT_decl_column  DW_FORM_data1
    DW_AT_type         DW_FORM_ref4
    DW_AT_location     DW_FORM_exprloc
    DW_AT value: 0     DW_FORM value: 0
   53      DW_TAG_subprogram    [has children]
    DW_AT_external     DW_FORM_flag_present
    DW_AT_name         DW_FORM_strp
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data2
    DW_AT_decl_column  DW_FORM_data1
    DW_AT_prototyped   DW_FORM_flag_present
    DW_AT_type         DW_FORM_ref4
    DW_AT_low_pc       DW_FORM_addr
    DW_AT_high_pc      DW_FORM_data8
    DW_AT_frame_base   DW_FORM_exprloc
    DW_AT_GNU_all_tail_call_sites DW_FORM_flag_present
    DW_AT_sibling      DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0
   54      DW_TAG_formal_parameter    [no children]
    DW_AT_name         DW_FORM_strp
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data2
    DW_AT_decl_column  DW_FORM_data1
    DW_AT_type         DW_FORM_ref4
    DW_AT_location     DW_FORM_exprloc
    DW_AT value: 0     DW_FORM value: 0
   55      DW_TAG_subprogram    [has children]
    DW_AT_external     DW_FORM_flag_present
    DW_AT_name         DW_FORM_strp
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data2
    DW_AT_decl_column  DW_FORM_data1
    DW_AT_prototyped   DW_FORM_flag_present
    DW_AT_low_pc       DW_FORM_addr
    DW_AT_high_pc      DW_FORM_data8
    DW_AT_frame_base   DW_FORM_exprloc
    DW_AT_GNU_all_tail_call_sites DW_FORM_flag_present
    DW_AT_sibling      DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0
   56      DW_TAG_variable    [no children]
    DW_AT_name         DW_FORM_string
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data2
    DW_AT_decl_column  DW_FORM_data1
    DW_AT_type         DW_FORM_ref4
    DW_AT_location     DW_FORM_exprloc
    DW_AT value: 0     DW_FORM value: 0
   57      DW_TAG_subprogram    [has children]
    DW_AT_name         DW_FORM_strp
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data2
    DW_AT_decl_column  DW_FORM_data1
    DW_AT_prototyped   DW_FORM_flag_present
    DW_AT_low_pc       DW_FORM_addr
    DW_AT_high_pc      DW_FORM_data8
    DW_AT_frame_base   DW_FORM_exprloc
    DW_AT_GNU_all_tail_call_sites DW_FORM_flag_present
    DW_AT_sibling      DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0
   58      DW_TAG_subprogram    [has children]
    DW_AT_external     DW_FORM_flag_present
    DW_AT_name         DW_FORM_strp
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data2
    DW_AT_decl_column  DW_FORM_data1
    DW_AT_prototyped   DW_FORM_flag_present
    DW_AT_type         DW_FORM_ref4
    DW_AT_low_pc       DW_FORM_addr
    DW_AT_high_pc      DW_FORM_data8
    DW_AT_frame_base   DW_FORM_exprloc
    DW_AT_GNU_all_call_sites DW_FORM_flag_present
    DW_AT_sibling      DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0
   59      DW_TAG_lexical_block    [has children]
    DW_AT_low_pc       DW_FORM_addr
    DW_AT_high_pc      DW_FORM_data8
    DW_AT value: 0     DW_FORM value: 0
   60      DW_TAG_subprogram    [no children]
    DW_AT_name         DW_FORM_strp
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data2
    DW_AT_decl_column  DW_FORM_data1
    DW_AT_prototyped   DW_FORM_flag_present
    DW_AT_type         DW_FORM_ref4
    DW_AT_low_pc       DW_FORM_addr
    DW_AT_high_pc      DW_FORM_data8
    DW_AT_frame_base   DW_FORM_exprloc
    DW_AT_GNU_all_call_sites DW_FORM_flag_present
    DW_AT value: 0     DW_FORM value: 0
   61      DW_TAG_formal_parameter    [no children]
    DW_AT_name         DW_FORM_string
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data2
    DW_AT_decl_column  DW_FORM_data1
    DW_AT_type         DW_FORM_ref4
    DW_AT_location     DW_FORM_exprloc
    DW_AT value: 0     DW_FORM value: 0
   62      DW_TAG_subprogram    [has children]
    DW_AT_name         DW_FORM_strp
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data2
    DW_AT_decl_column  DW_FORM_data1
    DW_AT_prototyped   DW_FORM_flag_present
    DW_AT_low_pc       DW_FORM_addr
    DW_AT_high_pc      DW_FORM_data8
    DW_AT_frame_base   DW_FORM_exprloc
    DW_AT_GNU_all_call_sites DW_FORM_flag_present
    DW_AT_sibling      DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0
   63      DW_TAG_subprogram    [has children]
    DW_AT_name         DW_FORM_strp
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data2
    DW_AT_decl_column  DW_FORM_data1
    DW_AT_prototyped   DW_FORM_flag_present
    DW_AT_type         DW_FORM_ref4
    DW_AT_low_pc       DW_FORM_addr
    DW_AT_high_pc      DW_FORM_data8
    DW_AT_frame_base   DW_FORM_exprloc
    DW_AT_GNU_all_tail_call_sites DW_FORM_flag_present
    DW_AT_sibling      DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0
   64      DW_TAG_subprogram    [has children]
    DW_AT_name         DW_FORM_strp
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data2
    DW_AT_decl_column  DW_FORM_data1
    DW_AT_prototyped   DW_FORM_flag_present
    DW_AT_type         DW_FORM_ref4
    DW_AT_low_pc       DW_FORM_addr
    DW_AT_high_pc      DW_FORM_data8
    DW_AT_frame_base   DW_FORM_exprloc
    DW_AT_GNU_all_call_sites DW_FORM_flag_present
    DW_AT_sibling      DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0
   65      DW_TAG_subprogram    [no children]
    DW_AT_external     DW_FORM_flag_present
    DW_AT_name         DW_FORM_strp
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data2
    DW_AT_decl_column  DW_FORM_data1
    DW_AT_prototyped   DW_FORM_flag_present
    DW_AT_low_pc       DW_FORM_addr
    DW_AT_high_pc      DW_FORM_data8
    DW_AT_frame_base   DW_FORM_exprloc
    DW_AT_GNU_all_tail_call_sites DW_FORM_flag_present
    DW_AT value: 0     DW_FORM value: 0
   66      DW_TAG_subprogram    [has children]
    DW_AT_name         DW_FORM_strp
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_decl_column  DW_FORM_data1
    DW_AT_prototyped   DW_FORM_flag_present
    DW_AT_low_pc       DW_FORM_addr
    DW_AT_high_pc      DW_FORM_data8
    DW_AT_frame_base   DW_FORM_exprloc
    DW_AT_GNU_all_tail_call_sites DW_FORM_flag_present
    DW_AT_sibling      DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0
   67      DW_TAG_formal_parameter    [no children]
    DW_AT_name         DW_FORM_strp
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_decl_column  DW_FORM_data1
    DW_AT_type         DW_FORM_ref4
    DW_AT_location     DW_FORM_exprloc
    DW_AT value: 0     DW_FORM value: 0
   68      DW_TAG_variable    [no children]
    DW_AT_name         DW_FORM_string
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_decl_column  DW_FORM_data1
    DW_AT_type         DW_FORM_ref4
    DW_AT_location     DW_FORM_exprloc
    DW_AT value: 0     DW_FORM value: 0
   69      DW_TAG_variable    [no children]
    DW_AT_name         DW_FORM_strp
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_decl_column  DW_FORM_data1
    DW_AT_type         DW_FORM_ref4
    DW_AT_location     DW_FORM_exprloc
    DW_AT value: 0     DW_FORM value: 0
   70      DW_TAG_subprogram    [has children]
    DW_AT_external     DW_FORM_flag_present
    DW_AT_name         DW_FORM_strp
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_decl_column  DW_FORM_data1
    DW_AT_prototyped   DW_FORM_flag_present
    DW_AT_low_pc       DW_FORM_addr
    DW_AT_high_pc      DW_FORM_data8
    DW_AT_frame_base   DW_FORM_exprloc
    DW_AT_GNU_all_tail_call_sites DW_FORM_flag_present
    DW_AT_sibling      DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0
   71      DW_TAG_formal_parameter    [no children]
    DW_AT_name         DW_FORM_string
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_decl_column  DW_FORM_data1
    DW_AT_type         DW_FORM_ref4
    DW_AT_location     DW_FORM_exprloc
    DW_AT value: 0     DW_FORM value: 0
   72      DW_TAG_subprogram    [has children]
    DW_AT_name         DW_FORM_strp
    DW_AT_decl_file    DW_FORM_data1
    DW_AT_decl_line    DW_FORM_data1
    DW_AT_decl_column  DW_FORM_data1
    DW_AT_prototyped   DW_FORM_flag_present
    DW_AT_type         DW_FORM_ref4
    DW_AT_low_pc       DW_FORM_addr
    DW_AT_high_pc      DW_FORM_data8
    DW_AT_frame_base   DW_FORM_exprloc
    DW_AT_GNU_all_call_sites DW_FORM_flag_present
    DW_AT_sibling      DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0
   73      DW_TAG_array_type    [has children]
    DW_AT_type         DW_FORM_ref4
    DW_AT value: 0     DW_FORM value: 0

Contents of the .debug_aranges section:

  Length:                   44
  Version:                  2
  Offset into .debug_info:  0x0
  Pointer Size:             8
  Segment Size:             0

    Address            Length
    0000000000000000 00000000000027e3 
    0000000000000000 0000000000000000 

Raw dump of debug contents of section .debug_line:

  Offset:                      0x0
  Length:                      4201
  DWARF Version:               2
  Prologue Length:             469
  Minimum Instruction Length:  1
  Initial value of 'is_stmt':  1
  Line Base:                   -5
  Line Range:                  14
  Opcode Base:                 13

 Opcodes:
  Opcode 1 has 0 args
  Opcode 2 has 1 arg
  Opcode 3 has 1 arg
  Opcode 4 has 1 arg
  Opcode 5 has 1 arg
  Opcode 6 has 0 args
  Opcode 7 has 0 args
  Opcode 8 has 0 args
  Opcode 9 has 1 arg
  Opcode 10 has 0 args
  Opcode 11 has 0 args
  Opcode 12 has 1 arg

 The Directory Table (offset 0x1b):
  1	code/server
  2	/usr/include/x86_64-linux-gnu/bits
  3	/usr/lib/gcc/x86_64-linux-gnu/8/include
  4	/usr/include/x86_64-linux-gnu/bits/types
  5	/usr/include
  6	code/server/../qcommon
  7	code/server/../game

 The File Name Table (offset 0xd4):
  Entry	Dir	Time	Size	Name
  1	1	0	0	sv_main.c
  2	2	0	0	types.h
  3	3	0	0	stddef.h
  4	3	0	0	stdarg.h
  5	0	0	0	<built-in>
  6	4	0	0	struct_FILE.h
  7	4	0	0	FILE.h
  8	5	0	0	stdio.h
  9	5	0	0	math.h
  10	2	0	0	sys_errlist.h
  11	2	0	0	stdint-intn.h
  12	5	0	0	time.h
  13	2	0	0	stdint-uintn.h
  14	5	0	0	stdint.h
  15	6	0	0	q_shared.h
  16	6	0	0	qcommon.h
  17	6	0	0	vm_local.h
  18	7	0	0	g_public.h
  19	7	0	0	bg_public.h
  20	1	0	0	server.h

 Line Number Statements:
  [0x000001df]  Set column to 56
  [0x000001e1]  Extended opcode 2: set Address to 0x0
  [0x000001ec]  Advance Line by 80 to 81
  [0x000001ef]  Copy
  [0x000001f0]  Set column to 4
  [0x000001f2]  Special opcode 121: advance Address by 8 to 0x8 and Line by 4 to 85
  [0x000001f3]  Set column to 8
  [0x000001f5]  Special opcode 104: advance Address by 7 to 0xf and Line by 1 to 86
  [0x000001f6]  Special opcode 34: advance Address by 2 to 0x11 and Line by 1 to 87
  [0x000001f7]  Set column to 6
  [0x000001f9]  Special opcode 103: advance Address by 7 to 0x18 and Line by 0 to 87
  [0x000001fa]  Set column to 12
  [0x000001fc]  Special opcode 62: advance Address by 4 to 0x1c and Line by 1 to 88
  [0x000001fd]  Set column to 16
  [0x000001ff]  Special opcode 131: advance Address by 9 to 0x25 and Line by 0 to 88
  [0x00000200]  Set column to 12
  [0x00000202]  Special opcode 188: advance Address by 13 to 0x32 and Line by 1 to 89
  [0x00000203]  Set column to 16
  [0x00000205]  Special opcode 131: advance Address by 9 to 0x3b and Line by 0 to 89
  [0x00000206]  Set column to 12
  [0x00000208]  Special opcode 217: advance Address by 15 to 0x4a and Line by 2 to 91
  [0x00000209]  Set column to 18
  [0x0000020b]  Special opcode 131: advance Address by 9 to 0x53 and Line by 0 to 91
  [0x0000020c]  Set column to 16
  [0x0000020e]  Special opcode 103: advance Address by 7 to 0x5a and Line by 0 to 91
  [0x0000020f]  Set column to 5
  [0x00000211]  Special opcode 175: advance Address by 12 to 0x66 and Line by 2 to 93
  [0x00000212]  Set column to 10
  [0x00000214]  Advance Line by -7 to 86
  [0x00000216]  Special opcode 75: advance Address by 5 to 0x6b and Line by 0 to 86
  [0x00000217]  Set column to 8
  [0x00000219]  Special opcode 103: advance Address by 7 to 0x72 and Line by 0 to 86
  [0x0000021a]  Set column to 19
  [0x0000021c]  Extended opcode 4: set Discriminator to 1
  [0x00000220]  Special opcode 61: advance Address by 4 to 0x76 and Line by 0 to 86
  [0x00000221]  Set column to 14
  [0x00000223]  Extended opcode 4: set Discriminator to 1
  [0x00000227]  Special opcode 47: advance Address by 3 to 0x79 and Line by 0 to 86
  [0x00000228]  Set column to 12
  [0x0000022a]  Advance Line by 9 to 95
  [0x0000022c]  Special opcode 103: advance Address by 7 to 0x80 and Line by 0 to 95
  [0x0000022d]  Set column to 9
  [0x0000022f]  Special opcode 231: advance Address by 16 to 0x90 and Line by 2 to 97
  [0x00000230]  Set column to 1
  [0x00000232]  Special opcode 104: advance Address by 7 to 0x97 and Line by 1 to 98
  [0x00000233]  Set column to 63
  [0x00000235]  Advance Line by 44 to 142
  [0x00000237]  Special opcode 33: advance Address by 2 to 0x99 and Line by 0 to 142
  [0x00000238]  Set column to 13
  [0x0000023a]  Advance Line by 10 to 152
  [0x0000023c]  Special opcode 229: advance Address by 16 to 0xa9 and Line by 0 to 152
  [0x0000023d]  Set column to 5
  [0x0000023f]  Special opcode 89: advance Address by 6 to 0xaf and Line by 0 to 152
  [0x00000240]  Set column to 8
  [0x00000242]  Special opcode 134: advance Address by 9 to 0xb8 and Line by 3 to 155
  [0x00000243]  Set column to 26
  [0x00000245]  Special opcode 145: advance Address by 10 to 0xc2 and Line by 0 to 155
  [0x00000246]  Set column to 13
  [0x00000248]  Special opcode 192: advance Address by 13 to 0xcf and Line by 5 to 160
  [0x00000249]  Set column to 40
  [0x0000024b]  Special opcode 145: advance Address by 10 to 0xd9 and Line by 0 to 160
  [0x0000024c]  Set column to 32
  [0x0000024e]  Special opcode 145: advance Address by 10 to 0xe3 and Line by 0 to 160
  [0x0000024f]  Set column to 5
  [0x00000251]  Special opcode 61: advance Address by 4 to 0xe7 and Line by 0 to 160
  [0x00000252]  Set column to 3
  [0x00000254]  Special opcode 132: advance Address by 9 to 0xf0 and Line by 1 to 161
  [0x00000255]  Set column to 13
  [0x00000257]  Advance PC by constant 17 to 0x101
  [0x00000258]  Special opcode 6: advance Address by 0 to 0x101 and Line by 1 to 162
  [0x00000259]  Set column to 40
  [0x0000025b]  Special opcode 145: advance Address by 10 to 0x10b and Line by 0 to 162
  [0x0000025c]  Set column to 5
  [0x0000025e]  Special opcode 145: advance Address by 10 to 0x115 and Line by 0 to 162
  [0x0000025f]  Set column to 11
  [0x00000261]  Special opcode 104: advance Address by 7 to 0x11c and Line by 1 to 163
  [0x00000262]  Set column to 3
  [0x00000264]  Special opcode 103: advance Address by 7 to 0x123 and Line by 0 to 163
  [0x00000265]  Set column to 28
  [0x00000267]  Extended opcode 4: set Discriminator to 3
  [0x0000026b]  Special opcode 34: advance Address by 2 to 0x125 and Line by 1 to 164
  [0x0000026c]  Set column to 50
  [0x0000026e]  Extended opcode 4: set Discriminator to 3
  [0x00000272]  Special opcode 145: advance Address by 10 to 0x12f and Line by 0 to 164
  [0x00000273]  Set column to 14
  [0x00000275]  Extended opcode 4: set Discriminator to 3
  [0x00000279]  Special opcode 47: advance Address by 3 to 0x132 and Line by 0 to 164
  [0x0000027a]  Set column to 68
  [0x0000027c]  Extended opcode 4: set Discriminator to 3
  [0x00000280]  Special opcode 118: advance Address by 8 to 0x13a and Line by 1 to 165
  [0x00000281]  Set column to 60
  [0x00000283]  Extended opcode 4: set Discriminator to 3
  [0x00000287]  Special opcode 89: advance Address by 6 to 0x140 and Line by 0 to 165
  [0x00000288]  Set column to 4
  [0x0000028a]  Extended opcode 4: set Discriminator to 3
  [0x0000028e]  Advance PC by constant 17 to 0x151
  [0x0000028f]  Special opcode 103: advance Address by 7 to 0x158 and Line by 0 to 165
  [0x00000290]  Set column to 24
  [0x00000292]  Extended opcode 4: set Discriminator to 3
  [0x00000296]  Advance PC by constant 17 to 0x169
  [0x00000297]  Special opcode 73: advance Address by 5 to 0x16e and Line by -2 to 163
  [0x00000298]  Set column to 3
  [0x0000029a]  Extended opcode 4: set Discriminator to 1
  [0x0000029e]  Special opcode 61: advance Address by 4 to 0x172 and Line by 0 to 163
  [0x0000029f]  Special opcode 121: advance Address by 8 to 0x17a and Line by 4 to 167
  [0x000002a0]  Advance PC by constant 17 to 0x18b
  [0x000002a1]  Special opcode 132: advance Address by 9 to 0x194 and Line by 1 to 168
  [0x000002a2]  Advance PC by constant 17 to 0x1a5
  [0x000002a3]  Special opcode 34: advance Address by 2 to 0x1a7 and Line by 1 to 169
  [0x000002a4]  Set column to 16
  [0x000002a6]  Special opcode 35: advance Address by 2 to 0x1a9 and Line by 2 to 171
  [0x000002a7]  Set column to 8
  [0x000002a9]  Special opcode 145: advance Address by 10 to 0x1b3 and Line by 0 to 171
  [0x000002aa]  Set column to 38
  [0x000002ac]  Special opcode 90: advance Address by 6 to 0x1b9 and Line by 1 to 172
  [0x000002ad]  Set column to 2
  [0x000002af]  Advance PC by constant 17 to 0x1ca
  [0x000002b0]  Special opcode 145: advance Address by 10 to 0x1d4 and Line by 0 to 172
  [0x000002b1]  Set column to 3
  [0x000002b3]  Advance Line by -19 to 153
  [0x000002b5]  Advance PC by constant 17 to 0x1e5
  [0x000002b6]  Special opcode 75: advance Address by 5 to 0x1ea and Line by 0 to 153
  [0x000002b7]  Set column to 1
  [0x000002b9]  Advance Line by 20 to 173
  [0x000002bb]  Special opcode 19: advance Address by 1 to 0x1eb and Line by 0 to 173
  [0x000002bc]  Set column to 71
  [0x000002be]  Advance Line by 12 to 185
  [0x000002c0]  Special opcode 33: advance Address by 2 to 0x1ed and Line by 0 to 185
  [0x000002c1]  Set column to 2
  [0x000002c3]  Advance PC by 89 to 0x246
  [0x000002c5]  Special opcode 11: advance Address by 0 to 0x246 and Line by 6 to 191
  [0x000002c6]  Set column to 8
  [0x000002c8]  Advance PC by 45 to 0x273
  [0x000002ca]  Special opcode 6: advance Address by 0 to 0x273 and Line by 1 to 192
  [0x000002cb]  Set column to 5
  [0x000002cd]  Advance PC by 40 to 0x29b
  [0x000002cf]  Special opcode 8: advance Address by 0 to 0x29b and Line by 3 to 195
  [0x000002d0]  Set column to 6
  [0x000002d2]  Special opcode 148: advance Address by 10 to 0x2a5 and Line by 3 to 198
  [0x000002d3]  Set column to 25
  [0x000002d5]  Extended opcode 4: set Discriminator to 1
  [0x000002d9]  Special opcode 173: advance Address by 12 to 0x2b1 and Line by 0 to 198
  [0x000002da]  Set column to 20
  [0x000002dc]  Extended opcode 4: set Discriminator to 1
  [0x000002e0]  Special opcode 187: advance Address by 13 to 0x2be and Line by 0 to 198
  [0x000002e1]  Set column to 4
  [0x000002e3]  Special opcode 118: advance Address by 8 to 0x2c6 and Line by 1 to 199
  [0x000002e4]  Set column to 20
  [0x000002e6]  Advance PC by constant 17 to 0x2d7
  [0x000002e7]  Special opcode 193: advance Address by 13 to 0x2e4 and Line by 6 to 205
  [0x000002e8]  Set column to 5
  [0x000002ea]  Special opcode 145: advance Address by 10 to 0x2ee and Line by 0 to 205
  [0x000002eb]  Set column to 34
  [0x000002ed]  Extended opcode 4: set Discriminator to 1
  [0x000002f1]  Special opcode 61: advance Address by 4 to 0x2f2 and Line by 0 to 205
  [0x000002f2]  Set column to 30
  [0x000002f4]  Extended opcode 4: set Discriminator to 1
  [0x000002f8]  Advance PC by constant 17 to 0x303
  [0x000002f9]  Special opcode 145: advance Address by 10 to 0x30d and Line by 0 to 205
  [0x000002fa]  Set column to 3
  [0x000002fc]  Special opcode 62: advance Address by 4 to 0x311 and Line by 1 to 206
  [0x000002fd]  Set column to 10
  [0x000002ff]  Advance PC by 35 to 0x334
  [0x00000301]  Special opcode 9: advance Address by 0 to 0x334 and Line by 4 to 210
  [0x00000302]  Set column to 22
  [0x00000304]  Special opcode 145: advance Address by 10 to 0x33e and Line by 0 to 210
  [0x00000305]  Set column to 2
  [0x00000307]  Special opcode 201: advance Address by 14 to 0x34c and Line by 0 to 210
  [0x00000308]  Set column to 6
  [0x0000030a]  Special opcode 34: advance Address by 2 to 0x34e and Line by 1 to 211
  [0x0000030b]  Set column to 29
  [0x0000030d]  Extended opcode 4: set Discriminator to 1
  [0x00000311]  Special opcode 173: advance Address by 12 to 0x35a and Line by 0 to 211
  [0x00000312]  Set column to 20
  [0x00000314]  Extended opcode 4: set Discriminator to 1
  [0x00000318]  Special opcode 187: advance Address by 13 to 0x367 and Line by 0 to 211
  [0x00000319]  Set column to 4
  [0x0000031b]  Special opcode 62: advance Address by 4 to 0x36b and Line by 1 to 212
  [0x0000031c]  Set column to 67
  [0x0000031e]  Extended opcode 4: set Discriminator to 2
  [0x00000322]  Advance PC by constant 17 to 0x37c
  [0x00000323]  Special opcode 115: advance Address by 8 to 0x384 and Line by -2 to 210
  [0x00000324]  Set column to 77
  [0x00000326]  Extended opcode 4: set Discriminator to 2
  [0x0000032a]  Special opcode 103: advance Address by 7 to 0x38b and Line by 0 to 210
  [0x0000032b]  Set column to 54
  [0x0000032d]  Extended opcode 4: set Discriminator to 1
  [0x00000331]  Special opcode 159: advance Address by 11 to 0x396 and Line by 0 to 210
  [0x00000332]  Set column to 2
  [0x00000334]  Extended opcode 4: set Discriminator to 1
  [0x00000338]  Special opcode 145: advance Address by 10 to 0x3a0 and Line by 0 to 210
  [0x00000339]  Set column to 3
  [0x0000033b]  Advance Line by -9 to 201
  [0x0000033d]  Special opcode 145: advance Address by 10 to 0x3aa and Line by 0 to 201
  [0x0000033e]  Set column to 1
  [0x00000340]  Advance Line by 14 to 215
  [0x00000342]  Special opcode 19: advance Address by 1 to 0x3ab and Line by 0 to 215
  [0x00000343]  Advance Line by 25 to 240
  [0x00000345]  Special opcode 33: advance Address by 2 to 0x3ad and Line by 0 to 240
  [0x00000346]  Set column to 15
  [0x00000348]  Special opcode 179: advance Address by 12 to 0x3b9 and Line by 6 to 246
  [0x00000349]  Set column to 6
  [0x0000034b]  Special opcode 218: advance Address by 15 to 0x3c8 and Line by 3 to 249
  [0x0000034c]  Set column to 5
  [0x0000034e]  Special opcode 103: advance Address by 7 to 0x3cf and Line by 0 to 249
  [0x0000034f]  Set column to 37
  [0x00000351]  Extended opcode 4: set Discriminator to 1
  [0x00000355]  Special opcode 131: advance Address by 9 to 0x3d8 and Line by 0 to 249
  [0x00000356]  Set column to 21
  [0x00000358]  Extended opcode 4: set Discriminator to 1
  [0x0000035c]  Special opcode 145: advance Address by 10 to 0x3e2 and Line by 0 to 249
  [0x0000035d]  Set column to 68
  [0x0000035f]  Extended opcode 4: set Discriminator to 2
  [0x00000363]  Special opcode 131: advance Address by 9 to 0x3eb and Line by 0 to 249
  [0x00000364]  Set column to 52
  [0x00000366]  Extended opcode 4: set Discriminator to 2
  [0x0000036a]  Special opcode 89: advance Address by 6 to 0x3f1 and Line by 0 to 249
  [0x0000036b]  Set column to 10
  [0x0000036d]  Special opcode 121: advance Address by 8 to 0x3f9 and Line by 4 to 253
  [0x0000036e]  Set column to 34
  [0x00000370]  Special opcode 89: advance Address by 6 to 0x3ff and Line by 0 to 253
  [0x00000371]  Set column to 29
  [0x00000373]  Special opcode 89: advance Address by 6 to 0x405 and Line by 0 to 253
  [0x00000374]  Set column to 5
  [0x00000376]  Special opcode 61: advance Address by 4 to 0x409 and Line by 0 to 253
  [0x00000377]  Set column to 29
  [0x00000379]  Special opcode 120: advance Address by 8 to 0x411 and Line by 3 to 256
  [0x0000037a]  Set column to 35
  [0x0000037c]  Special opcode 89: advance Address by 6 to 0x417 and Line by 0 to 256
  [0x0000037d]  Set column to 24
  [0x0000037f]  Special opcode 75: advance Address by 5 to 0x41c and Line by 0 to 256
  [0x00000380]  Set column to 9
  [0x00000382]  Special opcode 92: advance Address by 6 to 0x422 and Line by 3 to 259
  [0x00000383]  Set column to 2
  [0x00000385]  Special opcode 103: advance Address by 7 to 0x429 and Line by 0 to 259
  [0x00000386]  Set column to 16
  [0x00000388]  Special opcode 77: advance Address by 5 to 0x42e and Line by 2 to 261
  [0x00000389]  Set column to 19
  [0x0000038b]  Advance PC by constant 17 to 0x43f
  [0x0000038c]  Special opcode 103: advance Address by 7 to 0x446 and Line by 0 to 261
  [0x0000038d]  Set column to 27
  [0x0000038f]  Special opcode 61: advance Address by 4 to 0x44a and Line by 0 to 261
  [0x00000390]  Set column to 5
  [0x00000392]  Special opcode 47: advance Address by 3 to 0x44d and Line by 0 to 261
  [0x00000393]  Set column to 17
  [0x00000395]  Special opcode 122: advance Address by 8 to 0x455 and Line by 5 to 266
  [0x00000396]  Set column to 20
  [0x00000398]  Advance PC by constant 17 to 0x466
  [0x00000399]  Special opcode 103: advance Address by 7 to 0x46d and Line by 0 to 266
  [0x0000039a]  Set column to 6
  [0x0000039c]  Special opcode 47: advance Address by 3 to 0x470 and Line by 0 to 266
  [0x0000039d]  Set column to 37
  [0x0000039f]  Extended opcode 4: set Discriminator to 1
  [0x000003a3]  Special opcode 61: advance Address by 4 to 0x474 and Line by 0 to 266
  [0x000003a4]  Set column to 66
  [0x000003a6]  Extended opcode 4: set Discriminator to 1
  [0x000003aa]  Special opcode 89: advance Address by 6 to 0x47a and Line by 0 to 266
  [0x000003ab]  Set column to 43
  [0x000003ad]  Extended opcode 4: set Discriminator to 1
  [0x000003b1]  Advance PC by constant 17 to 0x48b
  [0x000003b2]  Special opcode 145: advance Address by 10 to 0x495 and Line by 0 to 266
  [0x000003b3]  Set column to 31
  [0x000003b5]  Extended opcode 4: set Discriminator to 1
  [0x000003b9]  Special opcode 61: advance Address by 4 to 0x499 and Line by 0 to 266
  [0x000003ba]  Set column to 13
  [0x000003bc]  Special opcode 119: advance Address by 8 to 0x4a1 and Line by 2 to 268
  [0x000003bd]  Set column to 27
  [0x000003bf]  Advance PC by constant 17 to 0x4b2
  [0x000003c0]  Special opcode 103: advance Address by 7 to 0x4b9 and Line by 0 to 268
  [0x000003c1]  Set column to 34
  [0x000003c3]  Special opcode 104: advance Address by 7 to 0x4c0 and Line by 1 to 269
  [0x000003c4]  Set column to 40
  [0x000003c6]  Special opcode 89: advance Address by 6 to 0x4c6 and Line by 0 to 269
  [0x000003c7]  Set column to 29
  [0x000003c9]  Special opcode 89: advance Address by 6 to 0x4cc and Line by 0 to 269
  [0x000003ca]  Set column to 18
  [0x000003cc]  Advance PC by constant 17 to 0x4dd
  [0x000003cd]  Special opcode 147: advance Address by 10 to 0x4e7 and Line by 2 to 271
  [0x000003ce]  Set column to 6
  [0x000003d0]  Special opcode 89: advance Address by 6 to 0x4ed and Line by 0 to 271
  [0x000003d1]  Set column to 50
  [0x000003d3]  Special opcode 119: advance Address by 8 to 0x4f5 and Line by 2 to 273
  [0x000003d4]  Set column to 5
  [0x000003d6]  Advance PC by constant 17 to 0x506
  [0x000003d7]  Special opcode 103: advance Address by 7 to 0x50d and Line by 0 to 273
  [0x000003d8]  Set column to 11
  [0x000003da]  Advance PC by constant 17 to 0x51e
  [0x000003db]  Special opcode 104: advance Address by 7 to 0x525 and Line by 1 to 274
  [0x000003dc]  Set column to 36
  [0x000003de]  Advance PC by constant 17 to 0x536
  [0x000003df]  Special opcode 89: advance Address by 6 to 0x53c and Line by 0 to 274
  [0x000003e0]  Set column to 39
  [0x000003e2]  Advance PC by constant 17 to 0x54d
  [0x000003e3]  Special opcode 103: advance Address by 7 to 0x554 and Line by 0 to 274
  [0x000003e4]  Set column to 11
  [0x000003e6]  Special opcode 61: advance Address by 4 to 0x558 and Line by 0 to 274
  [0x000003e7]  Set column to 7
  [0x000003e9]  Advance PC by constant 17 to 0x569
  [0x000003ea]  Special opcode 35: advance Address by 2 to 0x56b and Line by 2 to 276
  [0x000003eb]  Set column to 23
  [0x000003ed]  Special opcode 92: advance Address by 6 to 0x571 and Line by 3 to 279
  [0x000003ee]  Set column to 21
  [0x000003f0]  Special opcode 173: advance Address by 12 to 0x57d and Line by 0 to 279
  [0x000003f1]  Set column to 7
  [0x000003f3]  Advance PC by constant 17 to 0x58e
  [0x000003f4]  Special opcode 92: advance Address by 6 to 0x594 and Line by 3 to 282
  [0x000003f5]  Set column to 85
  [0x000003f7]  Special opcode 90: advance Address by 6 to 0x59a and Line by 1 to 283
  [0x000003f8]  Set column to 6
  [0x000003fa]  Advance PC by constant 17 to 0x5ab
  [0x000003fb]  Special opcode 75: advance Address by 5 to 0x5b0 and Line by 0 to 283
  [0x000003fc]  Set column to 50
  [0x000003fe]  Special opcode 159: advance Address by 11 to 0x5bb and Line by 0 to 283
  [0x000003ff]  Set column to 6
  [0x00000401]  Advance PC by constant 17 to 0x5cc
  [0x00000402]  Special opcode 103: advance Address by 7 to 0x5d3 and Line by 0 to 283
  [0x00000403]  Set column to 56
  [0x00000405]  Advance PC by constant 17 to 0x5e4
  [0x00000406]  Special opcode 175: advance Address by 12 to 0x5f0 and Line by 2 to 285
  [0x00000407]  Set column to 6
  [0x00000409]  Advance PC by constant 17 to 0x601
  [0x0000040a]  Special opcode 103: advance Address by 7 to 0x608 and Line by 0 to 285
  [0x0000040b]  Set column to 18
  [0x0000040d]  Advance PC by constant 17 to 0x619
  [0x0000040e]  Special opcode 106: advance Address by 7 to 0x620 and Line by 3 to 288
  [0x0000040f]  Set column to 6
  [0x00000411]  Special opcode 89: advance Address by 6 to 0x626 and Line by 0 to 288
  [0x00000412]  Set column to 50
  [0x00000414]  Special opcode 119: advance Address by 8 to 0x62e and Line by 2 to 290
  [0x00000415]  Set column to 5
  [0x00000417]  Advance PC by constant 17 to 0x63f
  [0x00000418]  Special opcode 103: advance Address by 7 to 0x646 and Line by 0 to 290
  [0x00000419]  Set column to 11
  [0x0000041b]  Advance PC by constant 17 to 0x657
  [0x0000041c]  Special opcode 104: advance Address by 7 to 0x65e and Line by 1 to 291
  [0x0000041d]  Set column to 36
  [0x0000041f]  Advance PC by constant 17 to 0x66f
  [0x00000420]  Special opcode 103: advance Address by 7 to 0x676 and Line by 0 to 291
  [0x00000421]  Set column to 39
  [0x00000423]  Advance PC by constant 17 to 0x687
  [0x00000424]  Special opcode 103: advance Address by 7 to 0x68e and Line by 0 to 291
  [0x00000425]  Set column to 11
  [0x00000427]  Special opcode 61: advance Address by 4 to 0x692 and Line by 0 to 291
  [0x00000428]  Set column to 7
  [0x0000042a]  Advance PC by constant 17 to 0x6a3
  [0x0000042b]  Special opcode 35: advance Address by 2 to 0x6a5 and Line by 2 to 293
  [0x0000042c]  Set column to 23
  [0x0000042e]  Special opcode 92: advance Address by 6 to 0x6ab and Line by 3 to 296
  [0x0000042f]  Set column to 21
  [0x00000431]  Special opcode 173: advance Address by 12 to 0x6b7 and Line by 0 to 296
  [0x00000432]  Set column to 7
  [0x00000434]  Advance PC by constant 17 to 0x6c8
  [0x00000435]  Special opcode 92: advance Address by 6 to 0x6ce and Line by 3 to 299
  [0x00000436]  Set column to 85
  [0x00000438]  Special opcode 90: advance Address by 6 to 0x6d4 and Line by 1 to 300
  [0x00000439]  Set column to 6
  [0x0000043b]  Advance PC by constant 17 to 0x6e5
  [0x0000043c]  Special opcode 89: advance Address by 6 to 0x6eb and Line by 0 to 300
  [0x0000043d]  Set column to 50
  [0x0000043f]  Special opcode 159: advance Address by 11 to 0x6f6 and Line by 0 to 300
  [0x00000440]  Set column to 6
  [0x00000442]  Advance PC by constant 17 to 0x707
  [0x00000443]  Special opcode 103: advance Address by 7 to 0x70e and Line by 0 to 300
  [0x00000444]  Set column to 56
  [0x00000446]  Advance PC by constant 17 to 0x71f
  [0x00000447]  Special opcode 175: advance Address by 12 to 0x72b and Line by 2 to 302
  [0x00000448]  Set column to 6
  [0x0000044a]  Advance PC by constant 17 to 0x73c
  [0x0000044b]  Special opcode 103: advance Address by 7 to 0x743 and Line by 0 to 302
  [0x0000044c]  Set column to 16
  [0x0000044e]  Advance PC by constant 17 to 0x754
  [0x0000044f]  Special opcode 108: advance Address by 7 to 0x75b and Line by 5 to 307
  [0x00000450]  Set column to 5
  [0x00000452]  Advance PC by constant 17 to 0x76c
  [0x00000453]  Special opcode 75: advance Address by 5 to 0x771 and Line by 0 to 307
  [0x00000454]  Set column to 44
  [0x00000456]  Extended opcode 4: set Discriminator to 1
  [0x0000045a]  Special opcode 61: advance Address by 4 to 0x775 and Line by 0 to 307
  [0x0000045b]  Set column to 32
  [0x0000045d]  Extended opcode 4: set Discriminator to 1
  [0x00000461]  Advance PC by constant 17 to 0x786
  [0x00000462]  Special opcode 75: advance Address by 5 to 0x78b and Line by 0 to 307
  [0x00000463]  Set column to 53
  [0x00000465]  Special opcode 123: advance Address by 8 to 0x793 and Line by 6 to 313
  [0x00000466]  Set column to 3
  [0x00000468]  Advance PC by constant 17 to 0x7a4
  [0x00000469]  Special opcode 103: advance Address by 7 to 0x7ab and Line by 0 to 313
  [0x0000046a]  Set column to 15
  [0x0000046c]  Advance PC by constant 17 to 0x7bc
  [0x0000046d]  Special opcode 108: advance Address by 7 to 0x7c3 and Line by 5 to 318
  [0x0000046e]  Set column to 5
  [0x00000470]  Advance PC by constant 17 to 0x7d4
  [0x00000471]  Special opcode 75: advance Address by 5 to 0x7d9 and Line by 0 to 318
  [0x00000472]  Set column to 35
  [0x00000474]  Special opcode 62: advance Address by 4 to 0x7dd and Line by 1 to 319
  [0x00000475]  Set column to 4
  [0x00000477]  Advance PC by constant 17 to 0x7ee
  [0x00000478]  Special opcode 89: advance Address by 6 to 0x7f4 and Line by 0 to 319
  [0x00000479]  Set column to 15
  [0x0000047b]  Advance PC by constant 17 to 0x805
  [0x0000047c]  Special opcode 174: advance Address by 12 to 0x811 and Line by 1 to 320
  [0x0000047d]  Set column to 5
  [0x0000047f]  Advance PC by constant 17 to 0x822
  [0x00000480]  Special opcode 75: advance Address by 5 to 0x827 and Line by 0 to 320
  [0x00000481]  Set column to 35
  [0x00000483]  Special opcode 62: advance Address by 4 to 0x82b and Line by 1 to 321
  [0x00000484]  Set column to 4
  [0x00000486]  Advance PC by constant 17 to 0x83c
  [0x00000487]  Special opcode 103: advance Address by 7 to 0x843 and Line by 0 to 321
  [0x00000488]  Advance Line by -59 to 262
  [0x0000048a]  Advance PC by constant 17 to 0x854
  [0x0000048b]  Special opcode 201: advance Address by 14 to 0x862 and Line by 0 to 262
  [0x0000048c]  Advance Line by 47 to 309
  [0x0000048e]  Special opcode 47: advance Address by 3 to 0x865 and Line by 0 to 309
  [0x0000048f]  Set column to 39
  [0x00000491]  Extended opcode 4: set Discriminator to 2
  [0x00000495]  Advance Line by -50 to 259
  [0x00000497]  Special opcode 19: advance Address by 1 to 0x866 and Line by 0 to 259
  [0x00000498]  Set column to 2
  [0x0000049a]  Extended opcode 4: set Discriminator to 1
  [0x0000049e]  Special opcode 61: advance Address by 4 to 0x86a and Line by 0 to 259
  [0x0000049f]  Set column to 3
  [0x000004a1]  Advance Line by -9 to 250
  [0x000004a3]  Special opcode 173: advance Address by 12 to 0x876 and Line by 0 to 250
  [0x000004a4]  Special opcode 51: advance Address by 3 to 0x879 and Line by 4 to 254
  [0x000004a5]  Set column to 1
  [0x000004a7]  Advance Line by 69 to 323
  [0x000004aa]  Special opcode 19: advance Address by 1 to 0x87a and Line by 0 to 323
  [0x000004ab]  Advance Line by 11 to 334
  [0x000004ad]  Special opcode 33: advance Address by 2 to 0x87c and Line by 0 to 334
  [0x000004ae]  Set column to 29
  [0x000004b0]  Special opcode 63: advance Address by 4 to 0x880 and Line by 2 to 336
  [0x000004b1]  Set column to 24
  [0x000004b3]  Special opcode 89: advance Address by 6 to 0x886 and Line by 0 to 336
  [0x000004b4]  Set column to 2
  [0x000004b6]  Special opcode 90: advance Address by 6 to 0x88c and Line by 1 to 337
  [0x000004b7]  Set column to 29
  [0x000004b9]  Special opcode 176: advance Address by 12 to 0x898 and Line by 3 to 340
  [0x000004ba]  Set column to 24
  [0x000004bc]  Special opcode 89: advance Address by 6 to 0x89e and Line by 0 to 340
  [0x000004bd]  Set column to 2
  [0x000004bf]  Special opcode 90: advance Address by 6 to 0x8a4 and Line by 1 to 341
  [0x000004c0]  Set column to 1
  [0x000004c2]  Special opcode 177: advance Address by 12 to 0x8b0 and Line by 4 to 345
  [0x000004c3]  Set column to 58
  [0x000004c5]  Advance Line by 24 to 369
  [0x000004c7]  Special opcode 47: advance Address by 3 to 0x8b3 and Line by 0 to 369
  [0x000004c8]  Set column to 14
  [0x000004ca]  Special opcode 118: advance Address by 8 to 0x8bb and Line by 1 to 370
  [0x000004cb]  Set column to 8
  [0x000004cd]  Special opcode 118: advance Address by 8 to 0x8c3 and Line by 1 to 371
  [0x000004ce]  Special opcode 104: advance Address by 7 to 0x8ca and Line by 1 to 372
  [0x000004cf]  Set column to 18
  [0x000004d1]  Special opcode 106: advance Address by 7 to 0x8d1 and Line by 3 to 375
  [0x000004d2]  Set column to 2
  [0x000004d4]  Special opcode 89: advance Address by 6 to 0x8d7 and Line by 0 to 375
  [0x000004d5]  Set column to 3
  [0x000004d7]  Special opcode 150: advance Address by 10 to 0x8e1 and Line by 5 to 380
  [0x000004d8]  Set column to 19
  [0x000004da]  Special opcode 29: advance Address by 2 to 0x8e3 and Line by -4 to 376
  [0x000004db]  Set column to 43
  [0x000004dd]  Special opcode 173: advance Address by 12 to 0x8ef and Line by 0 to 376
  [0x000004de]  Set column to 3
  [0x000004e0]  Special opcode 103: advance Address by 7 to 0x8f6 and Line by 0 to 376
  [0x000004e1]  Set column to 19
  [0x000004e3]  Special opcode 35: advance Address by 2 to 0x8f8 and Line by 2 to 378
  [0x000004e4]  Set column to 43
  [0x000004e6]  Special opcode 173: advance Address by 12 to 0x904 and Line by 0 to 378
  [0x000004e7]  Set column to 3
  [0x000004e9]  Special opcode 103: advance Address by 7 to 0x90b and Line by 0 to 378
  [0x000004ea]  Set column to 10
  [0x000004ec]  Special opcode 24: advance Address by 1 to 0x90c and Line by 5 to 383
  [0x000004ed]  Set column to 2
  [0x000004ef]  Special opcode 103: advance Address by 7 to 0x913 and Line by 0 to 383
  [0x000004f0]  Set column to 20
  [0x000004f2]  Extended opcode 4: set Discriminator to 3
  [0x000004f6]  Special opcode 34: advance Address by 2 to 0x915 and Line by 1 to 384
  [0x000004f7]  Set column to 11
  [0x000004f9]  Extended opcode 4: set Discriminator to 3
  [0x000004fd]  Special opcode 229: advance Address by 16 to 0x925 and Line by 0 to 384
  [0x000004fe]  Set column to 34
  [0x00000500]  Extended opcode 4: set Discriminator to 3
  [0x00000504]  Special opcode 47: advance Address by 3 to 0x928 and Line by 0 to 384
  [0x00000505]  Set column to 28
  [0x00000507]  Extended opcode 4: set Discriminator to 3
  [0x0000050b]  Special opcode 89: advance Address by 6 to 0x92e and Line by 0 to 384
  [0x0000050c]  Set column to 8
  [0x0000050e]  Extended opcode 4: set Discriminator to 3
  [0x00000512]  Special opcode 47: advance Address by 3 to 0x931 and Line by 0 to 384
  [0x00000513]  Set column to 26
  [0x00000515]  Extended opcode 4: set Discriminator to 3
  [0x00000519]  Special opcode 46: advance Address by 3 to 0x934 and Line by -1 to 383
  [0x0000051a]  Set column to 2
  [0x0000051c]  Extended opcode 4: set Discriminator to 1
  [0x00000520]  Special opcode 61: advance Address by 4 to 0x938 and Line by 0 to 383
  [0x00000521]  Set column to 25
  [0x00000523]  Special opcode 121: advance Address by 8 to 0x940 and Line by 4 to 387
  [0x00000524]  Set column to 16
  [0x00000526]  Special opcode 89: advance Address by 6 to 0x946 and Line by 0 to 387
  [0x00000527]  Set column to 42
  [0x00000529]  Special opcode 47: advance Address by 3 to 0x949 and Line by 0 to 387
  [0x0000052a]  Set column to 7
  [0x0000052c]  Special opcode 89: advance Address by 6 to 0x94f and Line by 0 to 387
  [0x0000052d]  Special opcode 76: advance Address by 5 to 0x954 and Line by 1 to 388
  [0x0000052e]  Set column to 9
  [0x00000530]  Special opcode 105: advance Address by 7 to 0x95b and Line by 2 to 390
  [0x00000531]  Set column to 1
  [0x00000533]  Special opcode 48: advance Address by 3 to 0x95e and Line by 1 to 391
  [0x00000534]  Set column to 65
  [0x00000536]  Special opcode 41: advance Address by 2 to 0x960 and Line by 8 to 399
  [0x00000537]  Set column to 13
  [0x00000539]  Special opcode 161: advance Address by 11 to 0x96b and Line by 2 to 401
  [0x0000053a]  Set column to 5
  [0x0000053c]  Special opcode 117: advance Address by 8 to 0x973 and Line by 0 to 401
  [0x0000053d]  Set column to 9
  [0x0000053f]  Special opcode 132: advance Address by 9 to 0x97c and Line by 1 to 402
  [0x00000540]  Set column to 30
  [0x00000542]  Special opcode 117: advance Address by 8 to 0x984 and Line by 0 to 402
  [0x00000543]  Set column to 22
  [0x00000545]  Special opcode 117: advance Address by 8 to 0x98c and Line by 0 to 402
  [0x00000546]  Set column to 13
  [0x00000548]  Special opcode 66: advance Address by 4 to 0x990 and Line by 5 to 407
  [0x00000549]  Set column to 5
  [0x0000054b]  Special opcode 117: advance Address by 8 to 0x998 and Line by 0 to 407
  [0x0000054c]  Set column to 9
  [0x0000054e]  Special opcode 76: advance Address by 5 to 0x99d and Line by 1 to 408
  [0x0000054f]  Set column to 30
  [0x00000551]  Special opcode 117: advance Address by 8 to 0x9a5 and Line by 0 to 408
  [0x00000552]  Set column to 22
  [0x00000554]  Special opcode 117: advance Address by 8 to 0x9ad and Line by 0 to 408
  [0x00000555]  Set column to 29
  [0x00000557]  Special opcode 64: advance Address by 4 to 0x9b1 and Line by 3 to 411
  [0x00000558]  Set column to 15
  [0x0000055a]  Advance PC by constant 17 to 0x9c2
  [0x0000055b]  Special opcode 103: advance Address by 7 to 0x9c9 and Line by 0 to 411
  [0x0000055c]  Set column to 19
  [0x0000055e]  Special opcode 118: advance Address by 8 to 0x9d1 and Line by 1 to 412
  [0x0000055f]  Set column to 5
  [0x00000561]  Advance PC by constant 17 to 0x9e2
  [0x00000562]  Special opcode 103: advance Address by 7 to 0x9e9 and Line by 0 to 412
  [0x00000563]  Set column to 15
  [0x00000565]  Special opcode 76: advance Address by 5 to 0x9ee and Line by 1 to 413
  [0x00000566]  Set column to 30
  [0x00000568]  Advance PC by constant 17 to 0x9ff
  [0x00000569]  Special opcode 103: advance Address by 7 to 0xa06 and Line by 0 to 413
  [0x0000056a]  Set column to 15
  [0x0000056c]  Special opcode 120: advance Address by 8 to 0xa0e and Line by 3 to 416
  [0x0000056d]  Set column to 23
  [0x0000056f]  Special opcode 174: advance Address by 12 to 0xa1a and Line by 1 to 417
  [0x00000570]  Set column to 3
  [0x00000572]  Advance Line by -13 to 404
  [0x00000574]  Advance PC by constant 17 to 0xa2b
  [0x00000575]  Special opcode 187: advance Address by 13 to 0xa38 and Line by 0 to 404
  [0x00000576]  Set column to 1
  [0x00000578]  Advance Line by 14 to 418
  [0x0000057a]  Special opcode 19: advance Address by 1 to 0xa39 and Line by 0 to 418
  [0x0000057b]  Set column to 94
  [0x0000057d]  Advance Line by 10 to 428
  [0x0000057f]  Special opcode 33: advance Address by 2 to 0xa3b and Line by 0 to 428
  [0x00000580]  Set column to 20
  [0x00000582]  Advance PC by constant 17 to 0xa4c
  [0x00000583]  Special opcode 22: advance Address by 1 to 0xa4d and Line by 3 to 431
  [0x00000584]  Set column to 19
  [0x00000586]  Special opcode 216: advance Address by 15 to 0xa5c and Line by 1 to 432
  [0x00000587]  Set column to 15
  [0x00000589]  Special opcode 121: advance Address by 8 to 0xa64 and Line by 4 to 436
  [0x0000058a]  Set column to 41
  [0x0000058c]  Advance PC by constant 17 to 0xa75
  [0x0000058d]  Special opcode 159: advance Address by 11 to 0xa80 and Line by 0 to 436
  [0x0000058e]  Set column to 2
  [0x00000590]  Special opcode 103: advance Address by 7 to 0xa87 and Line by 0 to 436
  [0x00000591]  Set column to 18
  [0x00000593]  Special opcode 76: advance Address by 5 to 0xa8c and Line by 1 to 437
  [0x00000594]  Set column to 3
  [0x00000596]  Special opcode 89: advance Address by 6 to 0xa92 and Line by 0 to 437
  [0x00000597]  Set column to 46
  [0x00000599]  Special opcode 217: advance Address by 15 to 0xaa1 and Line by 2 to 439
  [0x0000059a]  Set column to 29
  [0x0000059c]  Special opcode 117: advance Address by 8 to 0xaa9 and Line by 0 to 439
  [0x0000059d]  Set column to 10
  [0x0000059f]  Special opcode 117: advance Address by 8 to 0xab1 and Line by 0 to 439
  [0x000005a0]  Set column to 8
  [0x000005a2]  Special opcode 229: advance Address by 16 to 0xac1 and Line by 0 to 439
  [0x000005a3]  Set column to 9
  [0x000005a5]  Special opcode 62: advance Address by 4 to 0xac5 and Line by 1 to 440
  [0x000005a6]  Set column to 7
  [0x000005a8]  Special opcode 90: advance Address by 6 to 0xacb and Line by 1 to 441
  [0x000005a9]  Set column to 13
  [0x000005ab]  Advance PC by constant 17 to 0xadc
  [0x000005ac]  Special opcode 7: advance Address by 0 to 0xadc and Line by 2 to 443
  [0x000005ad]  Set column to 46
  [0x000005af]  Special opcode 136: advance Address by 9 to 0xae5 and Line by 5 to 448
  [0x000005b0]  Set column to 29
  [0x000005b2]  Special opcode 117: advance Address by 8 to 0xaed and Line by 0 to 448
  [0x000005b3]  Set column to 10
  [0x000005b5]  Special opcode 117: advance Address by 8 to 0xaf5 and Line by 0 to 448
  [0x000005b6]  Set column to 8
  [0x000005b8]  Special opcode 229: advance Address by 16 to 0xb05 and Line by 0 to 448
  [0x000005b9]  Set column to 9
  [0x000005bb]  Special opcode 62: advance Address by 4 to 0xb09 and Line by 1 to 449
  [0x000005bc]  Set column to 7
  [0x000005be]  Special opcode 90: advance Address by 6 to 0xb0f and Line by 1 to 450
  [0x000005bf]  Set column to 13
  [0x000005c1]  Advance PC by constant 17 to 0xb20
  [0x000005c2]  Special opcode 7: advance Address by 0 to 0xb20 and Line by 2 to 452
  [0x000005c3]  Set column to 12
  [0x000005c5]  Special opcode 136: advance Address by 9 to 0xb29 and Line by 5 to 457
  [0x000005c6]  Set column to 5
  [0x000005c8]  Advance Line by -12 to 445
  [0x000005ca]  Special opcode 173: advance Address by 12 to 0xb35 and Line by 0 to 445
  [0x000005cb]  Advance Line by 9 to 454
  [0x000005cd]  Special opcode 47: advance Address by 3 to 0xb38 and Line by 0 to 454
  [0x000005ce]  Set column to 61
  [0x000005d0]  Extended opcode 4: set Discriminator to 2
  [0x000005d4]  Advance Line by -18 to 436
  [0x000005d6]  Special opcode 19: advance Address by 1 to 0xb39 and Line by 0 to 436
  [0x000005d7]  Set column to 78
  [0x000005d9]  Extended opcode 4: set Discriminator to 2
  [0x000005dd]  Special opcode 173: advance Address by 12 to 0xb45 and Line by 0 to 436
  [0x000005de]  Set column to 2
  [0x000005e0]  Extended opcode 4: set Discriminator to 1
  [0x000005e4]  Special opcode 61: advance Address by 4 to 0xb49 and Line by 0 to 436
  [0x000005e5]  Set column to 10
  [0x000005e7]  Advance Line by 25 to 461
  [0x000005e9]  Special opcode 159: advance Address by 11 to 0xb54 and Line by 0 to 461
  [0x000005ea]  Set column to 2
  [0x000005ec]  Special opcode 103: advance Address by 7 to 0xb5b and Line by 0 to 461
  [0x000005ed]  Set column to 14
  [0x000005ef]  Special opcode 78: advance Address by 5 to 0xb60 and Line by 3 to 464
  [0x000005f0]  Set column to 6
  [0x000005f2]  Special opcode 89: advance Address by 6 to 0xb66 and Line by 0 to 464
  [0x000005f3]  Set column to 10
  [0x000005f5]  Special opcode 104: advance Address by 7 to 0xb6d and Line by 1 to 465
  [0x000005f6]  Set column to 27
  [0x000005f8]  Special opcode 146: advance Address by 10 to 0xb77 and Line by 1 to 466
  [0x000005f9]  Set column to 10
  [0x000005fb]  Special opcode 215: advance Address by 15 to 0xb86 and Line by 0 to 466
  [0x000005fc]  Set column to 32
  [0x000005fe]  Advance PC by constant 17 to 0xb97
  [0x000005ff]  Special opcode 202: advance Address by 14 to 0xba5 and Line by 1 to 467
  [0x00000600]  Set column to 12
  [0x00000602]  Special opcode 103: advance Address by 7 to 0xbac and Line by 0 to 467
  [0x00000603]  Set column to 14
  [0x00000605]  Special opcode 148: advance Address by 10 to 0xbb6 and Line by 3 to 470
  [0x00000606]  Set column to 6
  [0x00000608]  Special opcode 89: advance Address by 6 to 0xbbc and Line by 0 to 470
  [0x00000609]  Set column to 69
  [0x0000060b]  Extended opcode 4: set Discriminator to 1
  [0x0000060f]  Special opcode 117: advance Address by 8 to 0xbc4 and Line by 0 to 470
  [0x00000610]  Set column to 76
  [0x00000612]  Extended opcode 4: set Discriminator to 1
  [0x00000616]  Special opcode 103: advance Address by 7 to 0xbcb and Line by 0 to 470
  [0x00000617]  Set column to 34
  [0x00000619]  Extended opcode 4: set Discriminator to 1
  [0x0000061d]  Special opcode 89: advance Address by 6 to 0xbd1 and Line by 0 to 470
  [0x0000061e]  Set column to 31
  [0x00000620]  Extended opcode 4: set Discriminator to 1
  [0x00000624]  Special opcode 47: advance Address by 3 to 0xbd4 and Line by 0 to 470
  [0x00000625]  Set column to 15
  [0x00000627]  Special opcode 62: advance Address by 4 to 0xbd8 and Line by 1 to 471
  [0x00000628]  Set column to 7
  [0x0000062a]  Special opcode 117: advance Address by 8 to 0xbe0 and Line by 0 to 471
  [0x0000062b]  Set column to 11
  [0x0000062d]  Special opcode 76: advance Address by 5 to 0xbe5 and Line by 1 to 472
  [0x0000062e]  Set column to 32
  [0x00000630]  Special opcode 117: advance Address by 8 to 0xbed and Line by 0 to 472
  [0x00000631]  Set column to 24
  [0x00000633]  Special opcode 117: advance Address by 8 to 0xbf5 and Line by 0 to 472
  [0x00000634]  Set column to 25
  [0x00000636]  Special opcode 91: advance Address by 6 to 0xbfb and Line by 2 to 474
  [0x00000637]  Set column to 42
  [0x00000639]  Special opcode 103: advance Address by 7 to 0xc02 and Line by 0 to 474
  [0x0000063a]  Set column to 34
  [0x0000063c]  Special opcode 117: advance Address by 8 to 0xc0a and Line by 0 to 474
  [0x0000063d]  Set column to 15
  [0x0000063f]  Advance PC by constant 17 to 0xc1b
  [0x00000640]  Special opcode 78: advance Address by 5 to 0xc20 and Line by 3 to 477
  [0x00000641]  Set column to 7
  [0x00000643]  Special opcode 117: advance Address by 8 to 0xc28 and Line by 0 to 477
  [0x00000644]  Set column to 11
  [0x00000646]  Special opcode 76: advance Address by 5 to 0xc2d and Line by 1 to 478
  [0x00000647]  Set column to 32
  [0x00000649]  Special opcode 117: advance Address by 8 to 0xc35 and Line by 0 to 478
  [0x0000064a]  Set column to 24
  [0x0000064c]  Special opcode 117: advance Address by 8 to 0xc3d and Line by 0 to 478
  [0x0000064d]  Set column to 17
  [0x0000064f]  Special opcode 64: advance Address by 4 to 0xc41 and Line by 3 to 481
  [0x00000650]  Set column to 14
  [0x00000652]  Special opcode 148: advance Address by 10 to 0xc4b and Line by 3 to 484
  [0x00000653]  Set column to 6
  [0x00000655]  Special opcode 89: advance Address by 6 to 0xc51 and Line by 0 to 484
  [0x00000656]  Set column to 26
  [0x00000658]  Special opcode 118: advance Address by 8 to 0xc59 and Line by 1 to 485
  [0x00000659]  Set column to 17
  [0x0000065b]  Special opcode 89: advance Address by 6 to 0xc5f and Line by 0 to 485
  [0x0000065c]  Set column to 20
  [0x0000065e]  Special opcode 90: advance Address by 6 to 0xc65 and Line by 1 to 486
  [0x0000065f]  Set column to 4
  [0x00000661]  Special opcode 89: advance Address by 6 to 0xc6b and Line by 0 to 486
  [0x00000662]  Set column to 5
  [0x00000664]  Special opcode 150: advance Address by 10 to 0xc75 and Line by 5 to 491
  [0x00000665]  Set column to 58
  [0x00000667]  Special opcode 29: advance Address by 2 to 0xc77 and Line by -4 to 487
  [0x00000668]  Set column to 41
  [0x0000066a]  Special opcode 117: advance Address by 8 to 0xc7f and Line by 0 to 487
  [0x0000066b]  Set column to 18
  [0x0000066d]  Special opcode 117: advance Address by 8 to 0xc87 and Line by 0 to 487
  [0x0000066e]  Set column to 5
  [0x00000670]  Special opcode 61: advance Address by 4 to 0xc8b and Line by 0 to 487
  [0x00000671]  Set column to 58
  [0x00000673]  Special opcode 35: advance Address by 2 to 0xc8d and Line by 2 to 489
  [0x00000674]  Set column to 41
  [0x00000676]  Special opcode 117: advance Address by 8 to 0xc95 and Line by 0 to 489
  [0x00000677]  Set column to 18
  [0x00000679]  Special opcode 117: advance Address by 8 to 0xc9d and Line by 0 to 489
  [0x0000067a]  Set column to 5
  [0x0000067c]  Special opcode 201: advance Address by 14 to 0xcab and Line by 0 to 489
  [0x0000067d]  Set column to 26
  [0x0000067f]  Special opcode 24: advance Address by 1 to 0xcac and Line by 5 to 494
  [0x00000680]  Set column to 23
  [0x00000682]  Special opcode 146: advance Address by 10 to 0xcb6 and Line by 1 to 495
  [0x00000683]  Set column to 17
  [0x00000685]  Special opcode 160: advance Address by 11 to 0xcc1 and Line by 1 to 496
  [0x00000686]  Set column to 18
  [0x00000688]  Special opcode 146: advance Address by 10 to 0xccb and Line by 1 to 497
  [0x00000689]  Set column to 31
  [0x0000068b]  Special opcode 162: advance Address by 11 to 0xcd6 and Line by 3 to 500
  [0x0000068c]  Set column to 17
  [0x0000068e]  Advance PC by constant 17 to 0xce7
  [0x0000068f]  Special opcode 103: advance Address by 7 to 0xcee and Line by 0 to 500
  [0x00000690]  Set column to 21
  [0x00000692]  Special opcode 118: advance Address by 8 to 0xcf6 and Line by 1 to 501
  [0x00000693]  Set column to 7
  [0x00000695]  Advance PC by constant 17 to 0xd07
  [0x00000696]  Special opcode 103: advance Address by 7 to 0xd0e and Line by 0 to 501
  [0x00000697]  Set column to 17
  [0x00000699]  Special opcode 76: advance Address by 5 to 0xd13 and Line by 1 to 502
  [0x0000069a]  Set column to 32
  [0x0000069c]  Advance PC by constant 17 to 0xd24
  [0x0000069d]  Special opcode 103: advance Address by 7 to 0xd2b and Line by 0 to 502
  [0x0000069e]  Set column to 17
  [0x000006a0]  Special opcode 120: advance Address by 8 to 0xd33 and Line by 3 to 505
  [0x000006a1]  Set column to 25
  [0x000006a3]  Special opcode 174: advance Address by 12 to 0xd3f and Line by 1 to 506
  [0x000006a4]  Set column to 11
  [0x000006a6]  Advance PC by constant 17 to 0xd50
  [0x000006a7]  Special opcode 161: advance Address by 11 to 0xd5b and Line by 2 to 508
  [0x000006a8]  Set column to 33
  [0x000006aa]  Extended opcode 4: set Discriminator to 2
  [0x000006ae]  Advance Line by -47 to 461
  [0x000006b0]  Special opcode 89: advance Address by 6 to 0xd61 and Line by 0 to 461
  [0x000006b1]  Set column to 2
  [0x000006b3]  Extended opcode 4: set Discriminator to 1
  [0x000006b7]  Special opcode 61: advance Address by 4 to 0xd65 and Line by 0 to 461
  [0x000006b8]  Set column to 9
  [0x000006ba]  Advance Line by 52 to 513
  [0x000006bc]  Special opcode 187: advance Address by 13 to 0xd72 and Line by 0 to 513
  [0x000006bd]  Set column to 1
  [0x000006bf]  Special opcode 76: advance Address by 5 to 0xd77 and Line by 1 to 514
  [0x000006c0]  Set column to 70
  [0x000006c2]  Special opcode 41: advance Address by 2 to 0xd79 and Line by 8 to 522
  [0x000006c3]  Set column to 12
  [0x000006c5]  Advance PC by constant 17 to 0xd8a
  [0x000006c6]  Special opcode 20: advance Address by 1 to 0xd8b and Line by 1 to 523
  [0x000006c7]  Set column to 29
  [0x000006c9]  Special opcode 118: advance Address by 8 to 0xd93 and Line by 1 to 524
  [0x000006ca]  Set column to 6
  [0x000006cc]  Special opcode 89: advance Address by 6 to 0xd99 and Line by 0 to 524
  [0x000006cd]  Special opcode 146: advance Address by 10 to 0xda3 and Line by 1 to 525
  [0x000006ce]  Special opcode 146: advance Address by 10 to 0xdad and Line by 1 to 526
  [0x000006cf]  Set column to 23
  [0x000006d1]  Special opcode 147: advance Address by 10 to 0xdb7 and Line by 2 to 528
  [0x000006d2]  Set column to 5
  [0x000006d4]  Special opcode 103: advance Address by 7 to 0xdbe and Line by 0 to 528
  [0x000006d5]  Set column to 31
  [0x000006d7]  Extended opcode 4: set Discriminator to 1
  [0x000006db]  Special opcode 75: advance Address by 5 to 0xdc3 and Line by 0 to 528
  [0x000006dc]  Set column to 17
  [0x000006de]  Special opcode 90: advance Address by 6 to 0xdc9 and Line by 1 to 529
  [0x000006df]  Set column to 20
  [0x000006e1]  Special opcode 160: advance Address by 11 to 0xdd4 and Line by 1 to 530
  [0x000006e2]  Set column to 17
  [0x000006e4]  Special opcode 161: advance Address by 11 to 0xddf and Line by 2 to 532
  [0x000006e5]  Set column to 26
  [0x000006e7]  Advance PC by constant 17 to 0xdf0
  [0x000006e8]  Special opcode 34: advance Address by 2 to 0xdf2 and Line by 1 to 533
  [0x000006e9]  Set column to 20
  [0x000006eb]  Special opcode 117: advance Address by 8 to 0xdfa and Line by 0 to 533
  [0x000006ec]  Set column to 13
  [0x000006ee]  Special opcode 92: advance Address by 6 to 0xe00 and Line by 3 to 536
  [0x000006ef]  Set column to 5
  [0x000006f1]  Special opcode 103: advance Address by 7 to 0xe07 and Line by 0 to 536
  [0x000006f2]  Set column to 9
  [0x000006f4]  Special opcode 76: advance Address by 5 to 0xe0c and Line by 1 to 537
  [0x000006f5]  Set column to 16
  [0x000006f7]  Special opcode 103: advance Address by 7 to 0xe13 and Line by 0 to 537
  [0x000006f8]  Set column to 10
  [0x000006fa]  Special opcode 146: advance Address by 10 to 0xe1d and Line by 1 to 538
  [0x000006fb]  Set column to 9
  [0x000006fd]  Special opcode 106: advance Address by 7 to 0xe24 and Line by 3 to 541
  [0x000006fe]  Set column to 1
  [0x00000700]  Special opcode 76: advance Address by 5 to 0xe29 and Line by 1 to 542
  [0x00000701]  Set column to 62
  [0x00000703]  Special opcode 41: advance Address by 2 to 0xe2b and Line by 8 to 550
  [0x00000704]  Set column to 5
  [0x00000706]  Special opcode 216: advance Address by 15 to 0xe3a and Line by 1 to 551
  [0x00000707]  Set column to 14
  [0x00000709]  Special opcode 104: advance Address by 7 to 0xe41 and Line by 1 to 552
  [0x0000070a]  Set column to 6
  [0x0000070c]  Special opcode 103: advance Address by 7 to 0xe48 and Line by 0 to 552
  [0x0000070d]  Set column to 12
  [0x0000070f]  Special opcode 104: advance Address by 7 to 0xe4f and Line by 1 to 553
  [0x00000710]  Set column to 4
  [0x00000712]  Special opcode 103: advance Address by 7 to 0xe56 and Line by 0 to 553
  [0x00000713]  Set column to 38
  [0x00000715]  Special opcode 146: advance Address by 10 to 0xe60 and Line by 1 to 554
  [0x00000716]  Set column to 30
  [0x00000718]  Special opcode 103: advance Address by 7 to 0xe67 and Line by 0 to 554
  [0x00000719]  Set column to 22
  [0x0000071b]  Special opcode 89: advance Address by 6 to 0xe6d and Line by 0 to 554
  [0x0000071c]  Set column to 27
  [0x0000071e]  Special opcode 104: advance Address by 7 to 0xe74 and Line by 1 to 555
  [0x0000071f]  Set column to 25
  [0x00000721]  Special opcode 103: advance Address by 7 to 0xe7b and Line by 0 to 555
  [0x00000722]  Set column to 1
  [0x00000724]  Special opcode 105: advance Address by 7 to 0xe82 and Line by 2 to 557
  [0x00000725]  Set column to 59
  [0x00000727]  Special opcode 55: advance Address by 3 to 0xe85 and Line by 8 to 565
  [0x00000728]  Set column to 5
  [0x0000072a]  Special opcode 118: advance Address by 8 to 0xe8d and Line by 1 to 566
  [0x0000072b]  Set column to 20
  [0x0000072d]  Special opcode 104: advance Address by 7 to 0xe94 and Line by 1 to 567
  [0x0000072e]  Set column to 6
  [0x00000730]  Special opcode 103: advance Address by 7 to 0xe9b and Line by 0 to 567
  [0x00000731]  Set column to 16
  [0x00000733]  Special opcode 62: advance Address by 4 to 0xe9f and Line by 1 to 568
  [0x00000734]  Set column to 22
  [0x00000736]  Special opcode 103: advance Address by 7 to 0xea6 and Line by 0 to 568
  [0x00000737]  Set column to 1
  [0x00000739]  Special opcode 148: advance Address by 10 to 0xeb0 and Line by 3 to 571
  [0x0000073a]  Set column to 59
  [0x0000073c]  Special opcode 55: advance Address by 3 to 0xeb3 and Line by 8 to 579
  [0x0000073d]  Set column to 5
  [0x0000073f]  Special opcode 118: advance Address by 8 to 0xebb and Line by 1 to 580
  [0x00000740]  Set column to 14
  [0x00000742]  Special opcode 104: advance Address by 7 to 0xec2 and Line by 1 to 581
  [0x00000743]  Set column to 6
  [0x00000745]  Special opcode 103: advance Address by 7 to 0xec9 and Line by 0 to 581
  [0x00000746]  Set column to 10
  [0x00000748]  Special opcode 62: advance Address by 4 to 0xecd and Line by 1 to 582
  [0x00000749]  Set column to 17
  [0x0000074b]  Special opcode 103: advance Address by 7 to 0xed4 and Line by 0 to 582
  [0x0000074c]  Set column to 1
  [0x0000074e]  Special opcode 148: advance Address by 10 to 0xede and Line by 3 to 585
  [0x0000074f]  Set column to 78
  [0x00000751]  Advance Line by 10 to 595
  [0x00000753]  Special opcode 47: advance Address by 3 to 0xee1 and Line by 0 to 595
  [0x00000754]  Set column to 26
  [0x00000756]  Advance PC by constant 17 to 0xef2
  [0x00000757]  Special opcode 20: advance Address by 1 to 0xef3 and Line by 1 to 596
  [0x00000758]  Set column to 64
  [0x0000075a]  Advance PC by constant 17 to 0xf04
  [0x0000075b]  Special opcode 105: advance Address by 7 to 0xf0b and Line by 2 to 598
  [0x0000075c]  Set column to 18
  [0x0000075e]  Extended opcode 4: set Discriminator to 1
  [0x00000762]  Special opcode 103: advance Address by 7 to 0xf12 and Line by 0 to 598
  [0x00000763]  Set column to 64
  [0x00000765]  Extended opcode 4: set Discriminator to 1
  [0x00000769]  Advance PC by constant 17 to 0xf23
  [0x0000076a]  Special opcode 103: advance Address by 7 to 0xf2a and Line by 0 to 598
  [0x0000076b]  Extended opcode 4: set Discriminator to 2
  [0x0000076f]  Set is_stmt to 0
  [0x00000770]  Special opcode 33: advance Address by 2 to 0xf2c and Line by 0 to 598
  [0x00000771]  Set column to 1
  [0x00000773]  Extended opcode 4: set Discriminator to 5
  [0x00000777]  Set is_stmt to 1
  [0x00000778]  Special opcode 76: advance Address by 5 to 0xf31 and Line by 1 to 599
  [0x00000779]  Set column to 81
  [0x0000077b]  Advance Line by 10 to 609
  [0x0000077d]  Special opcode 33: advance Address by 2 to 0xf33 and Line by 0 to 609
  [0x0000077e]  Set column to 26
  [0x00000780]  Advance PC by constant 17 to 0xf44
  [0x00000781]  Special opcode 20: advance Address by 1 to 0xf45 and Line by 1 to 610
  [0x00000782]  Set column to 2
  [0x00000784]  Advance PC by constant 17 to 0xf56
  [0x00000785]  Special opcode 105: advance Address by 7 to 0xf5d and Line by 2 to 612
  [0x00000786]  Set column to 1
  [0x00000788]  Special opcode 174: advance Address by 12 to 0xf69 and Line by 1 to 613
  [0x00000789]  Set column to 81
  [0x0000078b]  Advance Line by 10 to 623
  [0x0000078d]  Special opcode 47: advance Address by 3 to 0xf6c and Line by 0 to 623
  [0x0000078e]  Set column to 26
  [0x00000790]  Advance PC by constant 17 to 0xf7d
  [0x00000791]  Special opcode 20: advance Address by 1 to 0xf7e and Line by 1 to 624
  [0x00000792]  Set column to 2
  [0x00000794]  Advance PC by constant 17 to 0xf8f
  [0x00000795]  Special opcode 105: advance Address by 7 to 0xf96 and Line by 2 to 626
  [0x00000796]  Set column to 1
  [0x00000798]  Special opcode 174: advance Address by 12 to 0xfa2 and Line by 1 to 627
  [0x00000799]  Set column to 73
  [0x0000079b]  Special opcode 55: advance Address by 3 to 0xfa5 and Line by 8 to 635
  [0x0000079c]  Set column to 26
  [0x0000079e]  Advance PC by constant 17 to 0xfb6
  [0x0000079f]  Special opcode 20: advance Address by 1 to 0xfb7 and Line by 1 to 636
  [0x000007a0]  Set column to 2
  [0x000007a2]  Advance PC by constant 17 to 0xfc8
  [0x000007a3]  Special opcode 105: advance Address by 7 to 0xfcf and Line by 2 to 638
  [0x000007a4]  Set column to 1
  [0x000007a6]  Advance PC by constant 17 to 0xfe0
  [0x000007a7]  Special opcode 6: advance Address by 0 to 0xfe0 and Line by 1 to 639
  [0x000007a8]  Set column to 48
  [0x000007aa]  Advance Line by 12 to 651
  [0x000007ac]  Special opcode 47: advance Address by 3 to 0xfe3 and Line by 0 to 651
  [0x000007ad]  Set column to 7
  [0x000007af]  Advance Line by 19 to 670
  [0x000007b1]  Advance PC by constant 17 to 0xff4
  [0x000007b2]  Special opcode 19: advance Address by 1 to 0xff5 and Line by 0 to 670
  [0x000007b3]  Set column to 5
  [0x000007b5]  Advance PC by constant 17 to 0x1006
  [0x000007b6]  Special opcode 117: advance Address by 8 to 0x100e and Line by 0 to 670
  [0x000007b7]  Set column to 21
  [0x000007b9]  Special opcode 62: advance Address by 4 to 0x1012 and Line by 1 to 671
  [0x000007ba]  Set column to 6
  [0x000007bc]  Special opcode 145: advance Address by 10 to 0x101c and Line by 0 to 671
  [0x000007bd]  Set column to 4
  [0x000007bf]  Special opcode 118: advance Address by 8 to 0x1024 and Line by 1 to 672
  [0x000007c0]  Set column to 3
  [0x000007c2]  Advance PC by 35 to 0x1047
  [0x000007c4]  Special opcode 8: advance Address by 0 to 0x1047 and Line by 3 to 675
  [0x000007c5]  Set column to 7
  [0x000007c7]  Special opcode 80: advance Address by 5 to 0x104c and Line by 5 to 680
  [0x000007c8]  Set column to 5
  [0x000007ca]  Advance PC by constant 17 to 0x105d
  [0x000007cb]  Special opcode 75: advance Address by 5 to 0x1062 and Line by 0 to 680
  [0x000007cc]  Set column to 3
  [0x000007ce]  Special opcode 62: advance Address by 4 to 0x1066 and Line by 1 to 681
  [0x000007cf]  Advance PC by constant 17 to 0x1077
  [0x000007d0]  Special opcode 6: advance Address by 0 to 0x1077 and Line by 1 to 682
  [0x000007d1]  Set column to 15
  [0x000007d3]  Special opcode 79: advance Address by 5 to 0x107c and Line by 4 to 686
  [0x000007d4]  Set column to 7
  [0x000007d6]  Special opcode 145: advance Address by 10 to 0x1086 and Line by 0 to 686
  [0x000007d7]  Set column to 5
  [0x000007d9]  Special opcode 117: advance Address by 8 to 0x108e and Line by 0 to 686
  [0x000007da]  Set column to 2
  [0x000007dc]  Special opcode 176: advance Address by 12 to 0x109a and Line by 3 to 689
  [0x000007dd]  Advance PC by 41 to 0x10c3
  [0x000007df]  Special opcode 9: advance Address by 0 to 0x10c3 and Line by 4 to 693
  [0x000007e0]  Set column to 4
  [0x000007e2]  Advance PC by 43 to 0x10ee
  [0x000007e4]  Special opcode 7: advance Address by 0 to 0x10ee and Line by 2 to 695
  [0x000007e5]  Set column to 12
  [0x000007e7]  Special opcode 160: advance Address by 11 to 0x10f9 and Line by 1 to 696
  [0x000007e8]  Set column to 17
  [0x000007ea]  Special opcode 104: advance Address by 7 to 0x1100 and Line by 1 to 697
  [0x000007eb]  Set column to 38
  [0x000007ed]  Special opcode 215: advance Address by 15 to 0x110f and Line by 0 to 697
  [0x000007ee]  Set column to 15
  [0x000007f0]  Special opcode 47: advance Address by 3 to 0x1112 and Line by 0 to 697
  [0x000007f1]  Set column to 10
  [0x000007f3]  Special opcode 49: advance Address by 3 to 0x1115 and Line by 2 to 699
  [0x000007f4]  Set column to 2
  [0x000007f6]  Special opcode 103: advance Address by 7 to 0x111c and Line by 0 to 699
  [0x000007f7]  Set column to 12
  [0x000007f9]  Special opcode 76: advance Address by 5 to 0x1121 and Line by 1 to 700
  [0x000007fa]  Set column to 20
  [0x000007fc]  Special opcode 103: advance Address by 7 to 0x1128 and Line by 0 to 700
  [0x000007fd]  Set column to 6
  [0x000007ff]  Special opcode 173: advance Address by 12 to 0x1134 and Line by 0 to 700
  [0x00000800]  Set column to 10
  [0x00000802]  Special opcode 104: advance Address by 7 to 0x113b and Line by 1 to 701
  [0x00000803]  Set column to 6
  [0x00000805]  Special opcode 89: advance Address by 6 to 0x1141 and Line by 0 to 701
  [0x00000806]  Set column to 9
  [0x00000808]  Special opcode 133: advance Address by 9 to 0x114a and Line by 2 to 703
  [0x00000809]  Set column to 47
  [0x0000080b]  Special opcode 203: advance Address by 14 to 0x1158 and Line by 2 to 705
  [0x0000080c]  Set column to 19
  [0x0000080e]  Special opcode 158: advance Address by 11 to 0x1163 and Line by -1 to 704
  [0x0000080f]  Set column to 22
  [0x00000811]  Advance PC by 60 to 0x119f
  [0x00000813]  Special opcode 8: advance Address by 0 to 0x119f and Line by 3 to 707
  [0x00000814]  Set column to 7
  [0x00000816]  Special opcode 117: advance Address by 8 to 0x11a7 and Line by 0 to 707
  [0x00000817]  Set column to 8
  [0x00000819]  Special opcode 106: advance Address by 7 to 0x11ae and Line by 3 to 710
  [0x0000081a]  Set column to 17
  [0x0000081c]  Advance PC by constant 17 to 0x11bf
  [0x0000081d]  Special opcode 90: advance Address by 6 to 0x11c5 and Line by 1 to 711
  [0x0000081e]  Set column to 46
  [0x00000820]  Extended opcode 4: set Discriminator to 2
  [0x00000824]  Advance Line by -12 to 699
  [0x00000826]  Special opcode 89: advance Address by 6 to 0x11cb and Line by 0 to 699
  [0x00000827]  Set column to 33
  [0x00000829]  Extended opcode 4: set Discriminator to 1
  [0x0000082d]  Special opcode 61: advance Address by 4 to 0x11cf and Line by 0 to 699
  [0x0000082e]  Set column to 2
  [0x00000830]  Extended opcode 4: set Discriminator to 1
  [0x00000834]  Special opcode 145: advance Address by 10 to 0x11d9 and Line by 0 to 699
  [0x00000835]  Set column to 5
  [0x00000837]  Advance Line by 9 to 708
  [0x00000839]  Special opcode 159: advance Address by 11 to 0x11e4 and Line by 0 to 708
  [0x0000083a]  Set column to 2
  [0x0000083c]  Extended opcode 4: set Discriminator to 1
  [0x00000840]  Special opcode 26: advance Address by 1 to 0x11e5 and Line by 7 to 715
  [0x00000841]  Set column to 3
  [0x00000843]  Advance Line by -40 to 675
  [0x00000845]  Advance PC by 54 to 0x121b
  [0x00000847]  Copy
  [0x00000848]  Advance Line by 12 to 687
  [0x0000084a]  Special opcode 47: advance Address by 3 to 0x121e and Line by 0 to 687
  [0x0000084b]  Set column to 1
  [0x0000084d]  Advance Line by 29 to 716
  [0x0000084f]  Special opcode 19: advance Address by 1 to 0x121f and Line by 0 to 716
  [0x00000850]  Set column to 46
  [0x00000852]  Advance Line by 11 to 727
  [0x00000854]  Special opcode 33: advance Address by 2 to 0x1221 and Line by 0 to 727
  [0x00000855]  Set column to 7
  [0x00000857]  Advance Line by 13 to 740
  [0x00000859]  Advance PC by constant 17 to 0x1232
  [0x0000085a]  Special opcode 19: advance Address by 1 to 0x1233 and Line by 0 to 740
  [0x0000085b]  Set column to 5
  [0x0000085d]  Advance PC by constant 17 to 0x1244
  [0x0000085e]  Special opcode 117: advance Address by 8 to 0x124c and Line by 0 to 740
  [0x0000085f]  Set column to 21
  [0x00000861]  Special opcode 62: advance Address by 4 to 0x1250 and Line by 1 to 741
  [0x00000862]  Set column to 6
  [0x00000864]  Special opcode 145: advance Address by 10 to 0x125a and Line by 0 to 741
  [0x00000865]  Set column to 4
  [0x00000867]  Special opcode 118: advance Address by 8 to 0x1262 and Line by 1 to 742
  [0x00000868]  Set column to 3
  [0x0000086a]  Advance PC by 35 to 0x1285
  [0x0000086c]  Special opcode 8: advance Address by 0 to 0x1285 and Line by 3 to 745
  [0x0000086d]  Set column to 7
  [0x0000086f]  Special opcode 80: advance Address by 5 to 0x128a and Line by 5 to 750
  [0x00000870]  Set column to 5
  [0x00000872]  Advance PC by constant 17 to 0x129b
  [0x00000873]  Special opcode 75: advance Address by 5 to 0x12a0 and Line by 0 to 750
  [0x00000874]  Set column to 3
  [0x00000876]  Special opcode 62: advance Address by 4 to 0x12a4 and Line by 1 to 751
  [0x00000877]  Advance PC by constant 17 to 0x12b5
  [0x00000878]  Special opcode 6: advance Address by 0 to 0x12b5 and Line by 1 to 752
  [0x00000879]  Set column to 15
  [0x0000087b]  Advance Line by 9 to 761
  [0x0000087d]  Special opcode 75: advance Address by 5 to 0x12ba and Line by 0 to 761
  [0x0000087e]  Set column to 7
  [0x00000880]  Special opcode 145: advance Address by 10 to 0x12c4 and Line by 0 to 761
  [0x00000881]  Set column to 5
  [0x00000883]  Special opcode 117: advance Address by 8 to 0x12cc and Line by 0 to 761
  [0x00000884]  Set column to 17
  [0x00000886]  Special opcode 177: advance Address by 12 to 0x12d8 and Line by 4 to 765
  [0x00000887]  Set column to 8
  [0x00000889]  Special opcode 103: advance Address by 7 to 0x12df and Line by 0 to 765
  [0x0000088a]  Set column to 29
  [0x0000088c]  Special opcode 90: advance Address by 6 to 0x12e5 and Line by 1 to 766
  [0x0000088d]  Set column to 10
  [0x0000088f]  Special opcode 103: advance Address by 7 to 0x12ec and Line by 0 to 766
  [0x00000890]  Set column to 2
  [0x00000892]  Special opcode 89: advance Address by 6 to 0x12f2 and Line by 0 to 766
  [0x00000893]  Set column to 11
  [0x00000895]  Special opcode 34: advance Address by 2 to 0x12f4 and Line by 1 to 767
  [0x00000896]  Set column to 19
  [0x00000898]  Special opcode 103: advance Address by 7 to 0x12fb and Line by 0 to 767
  [0x00000899]  Set column to 22
  [0x0000089b]  Special opcode 215: advance Address by 15 to 0x130a and Line by 0 to 767
  [0x0000089c]  Set column to 6
  [0x0000089e]  Special opcode 33: advance Address by 2 to 0x130c and Line by 0 to 767
  [0x0000089f]  Set column to 9
  [0x000008a1]  Special opcode 76: advance Address by 5 to 0x1311 and Line by 1 to 768
  [0x000008a2]  Set column to 11
  [0x000008a4]  Special opcode 62: advance Address by 4 to 0x1315 and Line by 1 to 769
  [0x000008a5]  Set column to 19
  [0x000008a7]  Special opcode 103: advance Address by 7 to 0x131c and Line by 0 to 769
  [0x000008a8]  Set column to 44
  [0x000008aa]  Special opcode 215: advance Address by 15 to 0x132b and Line by 0 to 769
  [0x000008ab]  Set column to 7
  [0x000008ad]  Special opcode 89: advance Address by 6 to 0x1331 and Line by 0 to 769
  [0x000008ae]  Set column to 11
  [0x000008b0]  Special opcode 76: advance Address by 5 to 0x1336 and Line by 1 to 770
  [0x000008b1]  Set column to 71
  [0x000008b3]  Extended opcode 4: set Discriminator to 2
  [0x000008b7]  Special opcode 57: advance Address by 4 to 0x133a and Line by -4 to 766
  [0x000008b8]  Set column to 58
  [0x000008ba]  Extended opcode 4: set Discriminator to 1
  [0x000008be]  Special opcode 61: advance Address by 4 to 0x133e and Line by 0 to 766
  [0x000008bf]  Set column to 2
  [0x000008c1]  Extended opcode 4: set Discriminator to 1
  [0x000008c5]  Special opcode 145: advance Address by 10 to 0x1348 and Line by 0 to 766
  [0x000008c6]  Set column to 16
  [0x000008c8]  Advance Line by 9 to 775
  [0x000008ca]  Special opcode 75: advance Address by 5 to 0x134d and Line by 0 to 775
  [0x000008cb]  Set column to 2
  [0x000008cd]  Special opcode 107: advance Address by 7 to 0x1354 and Line by 4 to 779
  [0x000008ce]  Advance PC by 43 to 0x137f
  [0x000008d0]  Special opcode 7: advance Address by 0 to 0x137f and Line by 2 to 781
  [0x000008d1]  Advance PC by 41 to 0x13a8
  [0x000008d3]  Special opcode 6: advance Address by 0 to 0x13a8 and Line by 1 to 782
  [0x000008d4]  Advance PC by 41 to 0x13d1
  [0x000008d6]  Special opcode 6: advance Address by 0 to 0x13d1 and Line by 1 to 783
  [0x000008d7]  Advance PC by 41 to 0x13fa
  [0x000008d9]  Special opcode 6: advance Address by 0 to 0x13fa and Line by 1 to 784
  [0x000008da]  Advance PC by 55 to 0x1431
  [0x000008dc]  Special opcode 6: advance Address by 0 to 0x1431 and Line by 1 to 785
  [0x000008dd]  Advance PC by 55 to 0x1468
  [0x000008df]  Special opcode 6: advance Address by 0 to 0x1468 and Line by 1 to 786
  [0x000008e0]  Advance PC by 76 to 0x14b4
  [0x000008e2]  Special opcode 7: advance Address by 0 to 0x14b4 and Line by 2 to 788
  [0x000008e3]  Advance PC by 62 to 0x14f2
  [0x000008e5]  Special opcode 6: advance Address by 0 to 0x14f2 and Line by 1 to 789
  [0x000008e6]  Advance PC by 62 to 0x1530
  [0x000008e8]  Special opcode 6: advance Address by 0 to 0x1530 and Line by 1 to 790
  [0x000008e9]  Set column to 12
  [0x000008eb]  Advance PC by 64 to 0x1570
  [0x000008ed]  Special opcode 6: advance Address by 0 to 0x1570 and Line by 1 to 791
  [0x000008ee]  Set column to 6
  [0x000008f0]  Special opcode 230: advance Address by 16 to 0x1580 and Line by 1 to 792
  [0x000008f1]  Set column to 4
  [0x000008f3]  Special opcode 103: advance Address by 7 to 0x1587 and Line by 0 to 792
  [0x000008f4]  Set column to 3
  [0x000008f6]  Special opcode 62: advance Address by 4 to 0x158b and Line by 1 to 793
  [0x000008f7]  Set column to 2
  [0x000008f9]  Advance PC by 34 to 0x15ad
  [0x000008fb]  Special opcode 8: advance Address by 0 to 0x15ad and Line by 3 to 796
  [0x000008fc]  Set column to 3
  [0x000008fe]  Advance Line by -51 to 745
  [0x00000900]  Advance PC by 44 to 0x15d9
  [0x00000902]  Copy
  [0x00000903]  Advance Line by 17 to 762
  [0x00000905]  Special opcode 47: advance Address by 3 to 0x15dc and Line by 0 to 762
  [0x00000906]  Set column to 1
  [0x00000908]  Advance Line by 35 to 797
  [0x0000090a]  Special opcode 19: advance Address by 1 to 0x15dd and Line by 0 to 797
  [0x0000090b]  Advance Line by 11 to 808
  [0x0000090d]  Special opcode 33: advance Address by 2 to 0x15df and Line by 0 to 808
  [0x0000090e]  Set column to 7
  [0x00000910]  Special opcode 174: advance Address by 12 to 0x15eb and Line by 1 to 809
  [0x00000911]  Set column to 5
  [0x00000913]  Special opcode 103: advance Address by 7 to 0x15f2 and Line by 0 to 809
  [0x00000914]  Set column to 3
  [0x00000916]  Special opcode 63: advance Address by 4 to 0x15f6 and Line by 2 to 811
  [0x00000917]  Set column to 1
  [0x00000919]  Advance PC by 36 to 0x161a
  [0x0000091b]  Special opcode 7: advance Address by 0 to 0x161a and Line by 2 to 813
  [0x0000091c]  Set column to 55
  [0x0000091e]  Advance Line by 12 to 825
  [0x00000920]  Special opcode 47: advance Address by 3 to 0x161d and Line by 0 to 825
  [0x00000921]  Set column to 7
  [0x00000923]  Advance Line by 9 to 834
  [0x00000925]  Advance PC by constant 17 to 0x162e
  [0x00000926]  Special opcode 33: advance Address by 2 to 0x1630 and Line by 0 to 834
  [0x00000927]  Set column to 5
  [0x00000929]  Advance PC by constant 17 to 0x1641
  [0x0000092a]  Special opcode 117: advance Address by 8 to 0x1649 and Line by 0 to 834
  [0x0000092b]  Set column to 21
  [0x0000092d]  Special opcode 62: advance Address by 4 to 0x164d and Line by 1 to 835
  [0x0000092e]  Set column to 6
  [0x00000930]  Special opcode 145: advance Address by 10 to 0x1657 and Line by 0 to 835
  [0x00000931]  Set column to 4
  [0x00000933]  Special opcode 118: advance Address by 8 to 0x165f and Line by 1 to 836
  [0x00000934]  Set column to 3
  [0x00000936]  Advance PC by 35 to 0x1682
  [0x00000938]  Special opcode 8: advance Address by 0 to 0x1682 and Line by 3 to 839
  [0x00000939]  Set column to 7
  [0x0000093b]  Special opcode 78: advance Address by 5 to 0x1687 and Line by 3 to 842
  [0x0000093c]  Set column to 24
  [0x0000093e]  Special opcode 202: advance Address by 14 to 0x1695 and Line by 1 to 843
  [0x0000093f]  Set column to 32
  [0x00000941]  Special opcode 159: advance Address by 11 to 0x16a0 and Line by 0 to 843
  [0x00000942]  Set column to 5
  [0x00000944]  Special opcode 47: advance Address by 3 to 0x16a3 and Line by 0 to 843
  [0x00000945]  Set column to 66
  [0x00000947]  Extended opcode 4: set Discriminator to 1
  [0x0000094b]  Special opcode 61: advance Address by 4 to 0x16a7 and Line by 0 to 843
  [0x0000094c]  Set column to 39
  [0x0000094e]  Extended opcode 4: set Discriminator to 1
  [0x00000952]  Special opcode 159: advance Address by 11 to 0x16b2 and Line by 0 to 843
  [0x00000953]  Set column to 36
  [0x00000955]  Extended opcode 4: set Discriminator to 1
  [0x00000959]  Special opcode 215: advance Address by 15 to 0x16c1 and Line by 0 to 843
  [0x0000095a]  Set column to 18
  [0x0000095c]  Extended opcode 4: set Discriminator to 3
  [0x00000960]  Special opcode 62: advance Address by 4 to 0x16c5 and Line by 1 to 844
  [0x00000961]  Set column to 84
  [0x00000963]  Extended opcode 4: set Discriminator to 3
  [0x00000967]  Special opcode 102: advance Address by 7 to 0x16cc and Line by -1 to 843
  [0x00000968]  Set column to 25
  [0x0000096a]  Special opcode 62: advance Address by 4 to 0x16d0 and Line by 1 to 844
  [0x0000096b]  Set column to 22
  [0x0000096d]  Advance PC by constant 17 to 0x16e1
  [0x0000096e]  Special opcode 33: advance Address by 2 to 0x16e3 and Line by 0 to 844
  [0x0000096f]  Set column to 9
  [0x00000971]  Special opcode 62: advance Address by 4 to 0x16e7 and Line by 1 to 845
  [0x00000972]  Set column to 3
  [0x00000974]  Special opcode 104: advance Address by 7 to 0x16ee and Line by 1 to 846
  [0x00000975]  Set column to 8
  [0x00000977]  Advance PC by 53 to 0x1723
  [0x00000979]  Special opcode 8: advance Address by 0 to 0x1723 and Line by 3 to 849
  [0x0000097a]  Set column to 6
  [0x0000097c]  Advance PC by constant 17 to 0x1734
  [0x0000097d]  Special opcode 75: advance Address by 5 to 0x1739 and Line by 0 to 849
  [0x0000097e]  Set column to 4
  [0x00000980]  Special opcode 62: advance Address by 4 to 0x173d and Line by 1 to 850
  [0x00000981]  Advance PC by constant 17 to 0x174e
  [0x00000982]  Special opcode 6: advance Address by 0 to 0x174e and Line by 1 to 851
  [0x00000983]  Set column to 9
  [0x00000985]  Special opcode 78: advance Address by 5 to 0x1753 and Line by 3 to 854
  [0x00000986]  Set column to 3
  [0x00000988]  Special opcode 104: advance Address by 7 to 0x175a and Line by 1 to 855
  [0x00000989]  Set column to 18
  [0x0000098b]  Advance PC by 51 to 0x178d
  [0x0000098d]  Special opcode 9: advance Address by 0 to 0x178d and Line by 4 to 859
  [0x0000098e]  Set column to 2
  [0x00000990]  Advance PC by 50 to 0x17bf
  [0x00000992]  Special opcode 6: advance Address by 0 to 0x17bf and Line by 1 to 860
  [0x00000993]  Set column to 23
  [0x00000995]  Advance PC by constant 17 to 0x17d0
  [0x00000996]  Special opcode 147: advance Address by 10 to 0x17da and Line by 2 to 862
  [0x00000997]  Set column to 31
  [0x00000999]  Special opcode 159: advance Address by 11 to 0x17e5 and Line by 0 to 862
  [0x0000099a]  Set column to 5
  [0x0000099c]  Special opcode 47: advance Address by 3 to 0x17e8 and Line by 0 to 862
  [0x0000099d]  Set column to 52
  [0x0000099f]  Extended opcode 4: set Discriminator to 1
  [0x000009a3]  Special opcode 61: advance Address by 4 to 0x17ec and Line by 0 to 862
  [0x000009a4]  Set column to 35
  [0x000009a6]  Extended opcode 4: set Discriminator to 1
  [0x000009aa]  Special opcode 103: advance Address by 7 to 0x17f3 and Line by 0 to 862
  [0x000009ab]  Set column to 3
  [0x000009ad]  Special opcode 62: advance Address by 4 to 0x17f7 and Line by 1 to 863
  [0x000009ae]  Set column to 12
  [0x000009b0]  Advance PC by constant 17 to 0x1808
  [0x000009b1]  Special opcode 76: advance Address by 5 to 0x180d and Line by 1 to 864
  [0x000009b2]  Set column to 3
  [0x000009b4]  Special opcode 90: advance Address by 6 to 0x1813 and Line by 1 to 865
  [0x000009b5]  Set column to 13
  [0x000009b7]  Advance PC by constant 17 to 0x1824
  [0x000009b8]  Special opcode 81: advance Address by 5 to 0x1829 and Line by 6 to 871
  [0x000009b9]  Set column to 9
  [0x000009bb]  Special opcode 132: advance Address by 9 to 0x1832 and Line by 1 to 872
  [0x000009bc]  Set column to 11
  [0x000009be]  Special opcode 34: advance Address by 2 to 0x1834 and Line by 1 to 873
  [0x000009bf]  Special opcode 74: advance Address by 5 to 0x1839 and Line by -1 to 872
  [0x000009c0]  Set column to 9
  [0x000009c2]  Special opcode 103: advance Address by 7 to 0x1840 and Line by 0 to 872
  [0x000009c3]  Set column to 23
  [0x000009c5]  Extended opcode 4: set Discriminator to 1
  [0x000009c9]  Special opcode 61: advance Address by 4 to 0x1844 and Line by 0 to 872
  [0x000009ca]  Set column to 20
  [0x000009cc]  Extended opcode 4: set Discriminator to 1
  [0x000009d0]  Special opcode 103: advance Address by 7 to 0x184b and Line by 0 to 872
  [0x000009d1]  Set column to 11
  [0x000009d3]  Special opcode 63: advance Address by 4 to 0x184f and Line by 2 to 874
  [0x000009d4]  Set column to 9
  [0x000009d6]  Special opcode 76: advance Address by 5 to 0x1854 and Line by 1 to 875
  [0x000009d7]  Set column to 11
  [0x000009d9]  Special opcode 34: advance Address by 2 to 0x1856 and Line by 1 to 876
  [0x000009da]  Special opcode 74: advance Address by 5 to 0x185b and Line by -1 to 875
  [0x000009db]  Set column to 9
  [0x000009dd]  Special opcode 103: advance Address by 7 to 0x1862 and Line by 0 to 875
  [0x000009de]  Set column to 8
  [0x000009e0]  Special opcode 63: advance Address by 4 to 0x1866 and Line by 2 to 877
  [0x000009e1]  Set column to 6
  [0x000009e3]  Special opcode 103: advance Address by 7 to 0x186d and Line by 0 to 877
  [0x000009e4]  Set column to 11
  [0x000009e6]  Special opcode 62: advance Address by 4 to 0x1871 and Line by 1 to 878
  [0x000009e7]  Set column to 10
  [0x000009e9]  Special opcode 76: advance Address by 5 to 0x1876 and Line by 1 to 879
  [0x000009ea]  Set column to 12
  [0x000009ec]  Special opcode 34: advance Address by 2 to 0x1878 and Line by 1 to 880
  [0x000009ed]  Special opcode 74: advance Address by 5 to 0x187d and Line by -1 to 879
  [0x000009ee]  Set column to 10
  [0x000009f0]  Special opcode 103: advance Address by 7 to 0x1884 and Line by 0 to 879
  [0x000009f1]  Set column to 24
  [0x000009f3]  Extended opcode 4: set Discriminator to 1
  [0x000009f7]  Special opcode 61: advance Address by 4 to 0x1888 and Line by 0 to 879
  [0x000009f8]  Set column to 21
  [0x000009fa]  Extended opcode 4: set Discriminator to 1
  [0x000009fe]  Special opcode 103: advance Address by 7 to 0x188f and Line by 0 to 879
  [0x000009ff]  Set column to 9
  [0x00000a01]  Special opcode 63: advance Address by 4 to 0x1893 and Line by 2 to 881
  [0x00000a02]  Set column to 7
  [0x00000a04]  Special opcode 103: advance Address by 7 to 0x189a and Line by 0 to 881
  [0x00000a05]  Set column to 12
  [0x00000a07]  Special opcode 62: advance Address by 4 to 0x189e and Line by 1 to 882
  [0x00000a08]  Special opcode 106: advance Address by 7 to 0x18a5 and Line by 3 to 885
  [0x00000a09]  Special opcode 74: advance Address by 5 to 0x18aa and Line by -1 to 884
  [0x00000a0a]  Set column to 10
  [0x00000a0c]  Special opcode 103: advance Address by 7 to 0x18b1 and Line by 0 to 884
  [0x00000a0d]  Set column to 24
  [0x00000a0f]  Extended opcode 4: set Discriminator to 1
  [0x00000a13]  Special opcode 61: advance Address by 4 to 0x18b5 and Line by 0 to 884
  [0x00000a14]  Set column to 21
  [0x00000a16]  Extended opcode 4: set Discriminator to 1
  [0x00000a1a]  Special opcode 103: advance Address by 7 to 0x18bc and Line by 0 to 884
  [0x00000a1b]  Set column to 9
  [0x00000a1d]  Extended opcode 4: set Discriminator to 1
  [0x00000a21]  Special opcode 64: advance Address by 4 to 0x18c0 and Line by 3 to 887
  [0x00000a22]  Set column to 11
  [0x00000a24]  Special opcode 34: advance Address by 2 to 0x18c2 and Line by 1 to 888
  [0x00000a25]  Special opcode 74: advance Address by 5 to 0x18c7 and Line by -1 to 887
  [0x00000a26]  Set column to 9
  [0x00000a28]  Special opcode 103: advance Address by 7 to 0x18ce and Line by 0 to 887
  [0x00000a29]  Set column to 3
  [0x00000a2b]  Special opcode 64: advance Address by 4 to 0x18d2 and Line by 3 to 890
  [0x00000a2c]  Set column to 2
  [0x00000a2e]  Special opcode 176: advance Address by 12 to 0x18de and Line by 3 to 893
  [0x00000a2f]  Set column to 3
  [0x00000a31]  Advance Line by -54 to 839
  [0x00000a33]  Special opcode 103: advance Address by 7 to 0x18e5 and Line by 0 to 839
  [0x00000a34]  Set column to 1
  [0x00000a36]  Advance Line by 55 to 894
  [0x00000a38]  Special opcode 19: advance Address by 1 to 0x18e6 and Line by 0 to 894
  [0x00000a39]  Set column to 73
  [0x00000a3b]  Advance Line by 13 to 907
  [0x00000a3d]  Special opcode 145: advance Address by 10 to 0x18f0 and Line by 0 to 907
  [0x00000a3e]  Set column to 2
  [0x00000a40]  Advance PC by constant 17 to 0x1901
  [0x00000a41]  Special opcode 9: advance Address by 0 to 0x1901 and Line by 4 to 911
  [0x00000a42]  Special opcode 174: advance Address by 12 to 0x190d and Line by 1 to 912
  [0x00000a43]  Set column to 31
  [0x00000a45]  Special opcode 175: advance Address by 12 to 0x1919 and Line by 2 to 914
  [0x00000a46]  Set column to 38
  [0x00000a48]  Special opcode 117: advance Address by 8 to 0x1921 and Line by 0 to 914
  [0x00000a49]  Set column to 8
  [0x00000a4b]  Special opcode 61: advance Address by 4 to 0x1925 and Line by 0 to 914
  [0x00000a4c]  Set column to 5
  [0x00000a4e]  Advance PC by constant 17 to 0x1936
  [0x00000a4f]  Special opcode 47: advance Address by 3 to 0x1939 and Line by 0 to 914
  [0x00000a50]  Set column to 11
  [0x00000a52]  Special opcode 62: advance Address by 4 to 0x193d and Line by 1 to 915
  [0x00000a53]  Set column to 6
  [0x00000a55]  Special opcode 103: advance Address by 7 to 0x1944 and Line by 0 to 915
  [0x00000a56]  Set column to 22
  [0x00000a58]  Special opcode 104: advance Address by 7 to 0x194b and Line by 1 to 916
  [0x00000a59]  Set column to 7
  [0x00000a5b]  Special opcode 145: advance Address by 10 to 0x1955 and Line by 0 to 916
  [0x00000a5c]  Set column to 5
  [0x00000a5e]  Special opcode 118: advance Address by 8 to 0x195d and Line by 1 to 917
  [0x00000a5f]  Set column to 4
  [0x00000a61]  Advance PC by 41 to 0x1986
  [0x00000a63]  Special opcode 7: advance Address by 0 to 0x1986 and Line by 2 to 919
  [0x00000a64]  Set column to 3
  [0x00000a66]  Special opcode 77: advance Address by 5 to 0x198b and Line by 2 to 921
  [0x00000a67]  Set column to 6
  [0x00000a69]  Advance PC by constant 17 to 0x199c
  [0x00000a6a]  Special opcode 8: advance Address by 0 to 0x199c and Line by 3 to 924
  [0x00000a6b]  Set column to 2
  [0x00000a6d]  Special opcode 230: advance Address by 16 to 0x19ac and Line by 1 to 925
  [0x00000a6e]  Set column to 6
  [0x00000a70]  Special opcode 175: advance Address by 12 to 0x19b8 and Line by 2 to 927
  [0x00000a71]  Set column to 20
  [0x00000a73]  Special opcode 203: advance Address by 14 to 0x19c6 and Line by 2 to 929
  [0x00000a74]  Set column to 5
  [0x00000a76]  Special opcode 145: advance Address by 10 to 0x19d0 and Line by 0 to 929
  [0x00000a77]  Set column to 3
  [0x00000a79]  Special opcode 62: advance Address by 4 to 0x19d4 and Line by 1 to 930
  [0x00000a7a]  Set column to 8
  [0x00000a7c]  Advance PC by 42 to 0x19fe
  [0x00000a7e]  Special opcode 8: advance Address by 0 to 0x19fe and Line by 3 to 933
  [0x00000a7f]  Set column to 5
  [0x00000a81]  Advance PC by constant 17 to 0x1a0f
  [0x00000a82]  Special opcode 33: advance Address by 2 to 0x1a11 and Line by 0 to 933
  [0x00000a83]  Set column to 3
  [0x00000a85]  Special opcode 62: advance Address by 4 to 0x1a15 and Line by 1 to 934
  [0x00000a86]  Special opcode 174: advance Address by 12 to 0x1a21 and Line by 1 to 935
  [0x00000a87]  Set column to 22
  [0x00000a89]  Special opcode 78: advance Address by 5 to 0x1a26 and Line by 3 to 938
  [0x00000a8a]  Set column to 5
  [0x00000a8c]  Special opcode 145: advance Address by 10 to 0x1a30 and Line by 0 to 938
  [0x00000a8d]  Set column to 7
  [0x00000a8f]  Special opcode 121: advance Address by 8 to 0x1a38 and Line by 4 to 942
  [0x00000a90]  Set column to 5
  [0x00000a92]  Advance PC by constant 17 to 0x1a49
  [0x00000a93]  Special opcode 33: advance Address by 2 to 0x1a4b and Line by 0 to 942
  [0x00000a94]  Set column to 3
  [0x00000a96]  Special opcode 62: advance Address by 4 to 0x1a4f and Line by 1 to 943
  [0x00000a97]  Set column to 14
  [0x00000a99]  Advance PC by constant 17 to 0x1a60
  [0x00000a9a]  Special opcode 6: advance Address by 0 to 0x1a60 and Line by 1 to 944
  [0x00000a9b]  Set column to 12
  [0x00000a9d]  Advance PC by constant 17 to 0x1a71
  [0x00000a9e]  Special opcode 33: advance Address by 2 to 0x1a73 and Line by 0 to 944
  [0x00000a9f]  Set column to 3
  [0x00000aa1]  Special opcode 62: advance Address by 4 to 0x1a77 and Line by 1 to 945
  [0x00000aa2]  Set column to 14
  [0x00000aa4]  Advance PC by constant 17 to 0x1a88
  [0x00000aa5]  Special opcode 6: advance Address by 0 to 0x1a88 and Line by 1 to 946
  [0x00000aa6]  Set column to 12
  [0x00000aa8]  Advance PC by constant 17 to 0x1a99
  [0x00000aa9]  Special opcode 33: advance Address by 2 to 0x1a9b and Line by 0 to 946
  [0x00000aaa]  Set column to 3
  [0x00000aac]  Special opcode 62: advance Address by 4 to 0x1a9f and Line by 1 to 947
  [0x00000aad]  Set column to 14
  [0x00000aaf]  Advance PC by constant 17 to 0x1ab0
  [0x00000ab0]  Special opcode 6: advance Address by 0 to 0x1ab0 and Line by 1 to 948
  [0x00000ab1]  Set column to 12
  [0x00000ab3]  Advance PC by constant 17 to 0x1ac1
  [0x00000ab4]  Special opcode 33: advance Address by 2 to 0x1ac3 and Line by 0 to 948
  [0x00000ab5]  Set column to 3
  [0x00000ab7]  Special opcode 62: advance Address by 4 to 0x1ac7 and Line by 1 to 949
  [0x00000ab8]  Set column to 14
  [0x00000aba]  Special opcode 203: advance Address by 14 to 0x1ad5 and Line by 2 to 951
  [0x00000abb]  Set column to 12
  [0x00000abd]  Advance PC by constant 17 to 0x1ae6
  [0x00000abe]  Special opcode 33: advance Address by 2 to 0x1ae8 and Line by 0 to 951
  [0x00000abf]  Set column to 14
  [0x00000ac1]  Special opcode 64: advance Address by 4 to 0x1aec and Line by 3 to 954
  [0x00000ac2]  Set column to 12
  [0x00000ac4]  Advance PC by constant 17 to 0x1afd
  [0x00000ac5]  Special opcode 33: advance Address by 2 to 0x1aff and Line by 0 to 954
  [0x00000ac6]  Set column to 21
  [0x00000ac8]  Special opcode 66: advance Address by 4 to 0x1b03 and Line by 5 to 959
  [0x00000ac9]  Set column to 6
  [0x00000acb]  Special opcode 145: advance Address by 10 to 0x1b0d and Line by 0 to 959
  [0x00000acc]  Set column to 4
  [0x00000ace]  Special opcode 62: advance Address by 4 to 0x1b11 and Line by 1 to 960
  [0x00000acf]  Advance Line by -41 to 919
  [0x00000ad1]  Advance PC by 44 to 0x1b3d
  [0x00000ad3]  Copy
  [0x00000ad4]  Set column to 3
  [0x00000ad6]  Advance Line by 20 to 939
  [0x00000ad8]  Special opcode 47: advance Address by 3 to 0x1b40 and Line by 0 to 939
  [0x00000ad9]  Set column to 1
  [0x00000adb]  Advance Line by 25 to 964
  [0x00000add]  Special opcode 19: advance Address by 1 to 0x1b41 and Line by 0 to 964
  [0x00000ade]  Set column to 57
  [0x00000ae0]  Advance Line by 9 to 973
  [0x00000ae2]  Special opcode 103: advance Address by 7 to 0x1b48 and Line by 0 to 973
  [0x00000ae3]  Set column to 10
  [0x00000ae5]  Special opcode 234: advance Address by 16 to 0x1b58 and Line by 5 to 978
  [0x00000ae6]  Set column to 5
  [0x00000ae8]  Special opcode 103: advance Address by 7 to 0x1b5f and Line by 0 to 978
  [0x00000ae9]  Set column to 22
  [0x00000aeb]  Special opcode 135: advance Address by 9 to 0x1b68 and Line by 4 to 982
  [0x00000aec]  Set column to 7
  [0x00000aee]  Special opcode 117: advance Address by 8 to 0x1b70 and Line by 0 to 982
  [0x00000aef]  Set column to 5
  [0x00000af1]  Special opcode 33: advance Address by 2 to 0x1b72 and Line by 0 to 982
  [0x00000af2]  Set column to 3
  [0x00000af4]  Special opcode 76: advance Address by 5 to 0x1b77 and Line by 1 to 983
  [0x00000af5]  Advance PC by constant 17 to 0x1b88
  [0x00000af6]  Special opcode 34: advance Address by 2 to 0x1b8a and Line by 1 to 984
  [0x00000af7]  Set column to 9
  [0x00000af9]  Special opcode 78: advance Address by 5 to 0x1b8f and Line by 3 to 987
  [0x00000afa]  Set column to 5
  [0x00000afc]  Special opcode 89: advance Address by 6 to 0x1b95 and Line by 0 to 987
  [0x00000afd]  Set column to 2
  [0x00000aff]  Special opcode 123: advance Address by 8 to 0x1b9d and Line by 6 to 993
  [0x00000b00]  Special opcode 174: advance Address by 12 to 0x1ba9 and Line by 1 to 994
  [0x00000b01]  Set column to 10
  [0x00000b03]  Special opcode 174: advance Address by 12 to 0x1bb5 and Line by 1 to 995
  [0x00000b04]  Set column to 8
  [0x00000b06]  Special opcode 173: advance Address by 12 to 0x1bc1 and Line by 0 to 995
  [0x00000b07]  Special opcode 120: advance Address by 8 to 0x1bc9 and Line by 3 to 998
  [0x00000b08]  Set column to 14
  [0x00000b0a]  Special opcode 103: advance Address by 7 to 0x1bd0 and Line by 0 to 998
  [0x00000b0b]  Set column to 2
  [0x00000b0d]  Special opcode 159: advance Address by 11 to 0x1bdb and Line by 0 to 998
  [0x00000b0e]  Set column to 9
  [0x00000b10]  Special opcode 76: advance Address by 5 to 0x1be0 and Line by 1 to 999
  [0x00000b11]  Set column to 6
  [0x00000b13]  Special opcode 89: advance Address by 6 to 0x1be6 and Line by 0 to 999
  [0x00000b14]  Set column to 35
  [0x00000b16]  Special opcode 120: advance Address by 8 to 0x1bee and Line by 3 to 1002
  [0x00000b17]  Set column to 9
  [0x00000b19]  Special opcode 159: advance Address by 11 to 0x1bf9 and Line by 0 to 1002
  [0x00000b1a]  Set column to 6
  [0x00000b1c]  Special opcode 215: advance Address by 15 to 0x1c08 and Line by 0 to 1002
  [0x00000b1d]  Set column to 18
  [0x00000b1f]  Special opcode 122: advance Address by 8 to 0x1c10 and Line by 5 to 1007
  [0x00000b20]  Set column to 6
  [0x00000b22]  Special opcode 145: advance Address by 10 to 0x1c1a and Line by 0 to 1007
  [0x00000b23]  Set column to 7
  [0x00000b25]  Special opcode 136: advance Address by 9 to 0x1c23 and Line by 5 to 1012
  [0x00000b26]  Set column to 6
  [0x00000b28]  Advance PC by constant 17 to 0x1c34
  [0x00000b29]  Special opcode 33: advance Address by 2 to 0x1c36 and Line by 0 to 1012
  [0x00000b2a]  Set column to 33
  [0x00000b2c]  Special opcode 65: advance Address by 4 to 0x1c3a and Line by 4 to 1016
  [0x00000b2d]  Set column to 46
  [0x00000b2f]  Special opcode 159: advance Address by 11 to 0x1c45 and Line by 0 to 1016
  [0x00000b30]  Set column to 7
  [0x00000b32]  Special opcode 117: advance Address by 8 to 0x1c4d and Line by 0 to 1016
  [0x00000b33]  Set column to 5
  [0x00000b35]  Special opcode 76: advance Address by 5 to 0x1c52 and Line by 1 to 1017
  [0x00000b36]  Set column to 42
  [0x00000b38]  Advance PC by constant 17 to 0x1c63
  [0x00000b39]  Special opcode 6: advance Address by 0 to 0x1c63 and Line by 1 to 1018
  [0x00000b3a]  Set column to 36
  [0x00000b3c]  Special opcode 117: advance Address by 8 to 0x1c6b and Line by 0 to 1018
  [0x00000b3d]  Set column to 10
  [0x00000b3f]  Special opcode 164: advance Address by 11 to 0x1c76 and Line by 5 to 1023
  [0x00000b40]  Set column to 7
  [0x00000b42]  Special opcode 89: advance Address by 6 to 0x1c7c and Line by 0 to 1023
  [0x00000b43]  Set column to 29
  [0x00000b45]  Special opcode 76: advance Address by 5 to 0x1c81 and Line by 1 to 1024
  [0x00000b46]  Set column to 24
  [0x00000b48]  Special opcode 89: advance Address by 6 to 0x1c87 and Line by 0 to 1024
  [0x00000b49]  Set column to 5
  [0x00000b4b]  Special opcode 146: advance Address by 10 to 0x1c91 and Line by 1 to 1025
  [0x00000b4c]  Set column to 4
  [0x00000b4e]  Advance PC by constant 17 to 0x1ca2
  [0x00000b4f]  Special opcode 35: advance Address by 2 to 0x1ca4 and Line by 2 to 1027
  [0x00000b50]  Advance Line by -27 to 1000
  [0x00000b52]  Special opcode 33: advance Address by 2 to 0x1ca6 and Line by 0 to 1000
  [0x00000b53]  Special opcode 50: advance Address by 3 to 0x1ca9 and Line by 3 to 1003
  [0x00000b54]  Special opcode 52: advance Address by 3 to 0x1cac and Line by 5 to 1008
  [0x00000b55]  Set column to 59
  [0x00000b57]  Extended opcode 4: set Discriminator to 2
  [0x00000b5b]  Advance Line by -10 to 998
  [0x00000b5d]  Special opcode 19: advance Address by 1 to 0x1cad and Line by 0 to 998
  [0x00000b5e]  Set column to 64
  [0x00000b60]  Extended opcode 4: set Discriminator to 2
  [0x00000b64]  Special opcode 61: advance Address by 4 to 0x1cb1 and Line by 0 to 998
  [0x00000b65]  Set column to 46
  [0x00000b67]  Extended opcode 4: set Discriminator to 1
  [0x00000b6b]  Special opcode 117: advance Address by 8 to 0x1cb9 and Line by 0 to 998
  [0x00000b6c]  Set column to 2
  [0x00000b6e]  Extended opcode 4: set Discriminator to 1
  [0x00000b72]  Special opcode 145: advance Address by 10 to 0x1cc3 and Line by 0 to 998
  [0x00000b73]  Set column to 3
  [0x00000b75]  Advance Line by -19 to 979
  [0x00000b77]  Special opcode 159: advance Address by 11 to 0x1cce and Line by 0 to 979
  [0x00000b78]  Advance Line by 9 to 988
  [0x00000b7a]  Special opcode 47: advance Address by 3 to 0x1cd1 and Line by 0 to 988
  [0x00000b7b]  Set column to 4
  [0x00000b7d]  Advance Line by 39 to 1027
  [0x00000b7f]  Special opcode 47: advance Address by 3 to 0x1cd4 and Line by 0 to 1027
  [0x00000b80]  Set column to 1
  [0x00000b82]  Special opcode 22: advance Address by 1 to 0x1cd5 and Line by 3 to 1030
  [0x00000b83]  Set column to 34
  [0x00000b85]  Advance Line by 10 to 1040
  [0x00000b87]  Special opcode 33: advance Address by 2 to 0x1cd7 and Line by 0 to 1040
  [0x00000b88]  Set column to 8
  [0x00000b8a]  Special opcode 124: advance Address by 8 to 0x1cdf and Line by 7 to 1047
  [0x00000b8b]  Set column to 2
  [0x00000b8d]  Special opcode 103: advance Address by 7 to 0x1ce6 and Line by 0 to 1047
  [0x00000b8e]  Set column to 12
  [0x00000b90]  Special opcode 76: advance Address by 5 to 0x1ceb and Line by 1 to 1048
  [0x00000b91]  Set column to 20
  [0x00000b93]  Special opcode 103: advance Address by 7 to 0x1cf2 and Line by 0 to 1048
  [0x00000b94]  Set column to 6
  [0x00000b96]  Special opcode 173: advance Address by 12 to 0x1cfe and Line by 0 to 1048
  [0x00000b97]  Set column to 10
  [0x00000b99]  Special opcode 104: advance Address by 7 to 0x1d05 and Line by 1 to 1049
  [0x00000b9a]  Set column to 6
  [0x00000b9c]  Special opcode 89: advance Address by 6 to 0x1d0b and Line by 0 to 1049
  [0x00000b9d]  Set column to 13
  [0x00000b9f]  Special opcode 76: advance Address by 5 to 0x1d10 and Line by 1 to 1050
  [0x00000ba0]  Set column to 4
  [0x00000ba2]  Special opcode 202: advance Address by 14 to 0x1d1e and Line by 1 to 1051
  [0x00000ba3]  Set column to 11
  [0x00000ba5]  Special opcode 77: advance Address by 5 to 0x1d23 and Line by 2 to 1053
  [0x00000ba6]  Set column to 6
  [0x00000ba8]  Special opcode 159: advance Address by 11 to 0x1d2e and Line by 0 to 1053
  [0x00000ba9]  Set column to 13
  [0x00000bab]  Special opcode 76: advance Address by 5 to 0x1d33 and Line by 1 to 1054
  [0x00000bac]  Set column to 4
  [0x00000bae]  Special opcode 202: advance Address by 14 to 0x1d41 and Line by 1 to 1055
  [0x00000baf]  Set column to 33
  [0x00000bb1]  Special opcode 77: advance Address by 5 to 0x1d46 and Line by 2 to 1057
  [0x00000bb2]  Set column to 6
  [0x00000bb4]  Special opcode 145: advance Address by 10 to 0x1d50 and Line by 0 to 1057
  [0x00000bb5]  Set column to 13
  [0x00000bb7]  Special opcode 76: advance Address by 5 to 0x1d55 and Line by 1 to 1058
  [0x00000bb8]  Set column to 4
  [0x00000bba]  Special opcode 202: advance Address by 14 to 0x1d63 and Line by 1 to 1059
  [0x00000bbb]  Set column to 9
  [0x00000bbd]  Special opcode 78: advance Address by 5 to 0x1d68 and Line by 3 to 1062
  [0x00000bbe]  Special opcode 104: advance Address by 7 to 0x1d6f and Line by 1 to 1063
  [0x00000bbf]  Set column to 11
  [0x00000bc1]  Special opcode 104: advance Address by 7 to 0x1d76 and Line by 1 to 1064
  [0x00000bc2]  Set column to 3
  [0x00000bc4]  Special opcode 103: advance Address by 7 to 0x1d7d and Line by 0 to 1064
  [0x00000bc5]  Set column to 22
  [0x00000bc7]  Special opcode 34: advance Address by 2 to 0x1d7f and Line by 1 to 1065
  [0x00000bc8]  Set column to 7
  [0x00000bca]  Advance PC by constant 17 to 0x1d90
  [0x00000bcb]  Special opcode 145: advance Address by 10 to 0x1d9a and Line by 0 to 1065
  [0x00000bcc]  Set column to 25
  [0x00000bce]  Special opcode 64: advance Address by 4 to 0x1d9e and Line by 3 to 1068
  [0x00000bcf]  Set column to 54
  [0x00000bd1]  Advance PC by constant 17 to 0x1daf
  [0x00000bd2]  Special opcode 145: advance Address by 10 to 0x1db9 and Line by 0 to 1068
  [0x00000bd3]  Set column to 10
  [0x00000bd5]  Advance PC by constant 17 to 0x1dca
  [0x00000bd6]  Special opcode 145: advance Address by 10 to 0x1dd4 and Line by 0 to 1068
  [0x00000bd7]  Set column to 9
  [0x00000bd9]  Special opcode 104: advance Address by 7 to 0x1ddb and Line by 1 to 1069
  [0x00000bda]  Set column to 10
  [0x00000bdc]  Special opcode 62: advance Address by 4 to 0x1ddf and Line by 1 to 1070
  [0x00000bdd]  Set column to 5
  [0x00000bdf]  Special opcode 113: advance Address by 8 to 0x1de7 and Line by -4 to 1066
  [0x00000be0]  Set column to 38
  [0x00000be2]  Extended opcode 4: set Discriminator to 2
  [0x00000be6]  Special opcode 17: advance Address by 1 to 0x1de8 and Line by -2 to 1064
  [0x00000be7]  Set column to 3
  [0x00000be9]  Extended opcode 4: set Discriminator to 1
  [0x00000bed]  Special opcode 61: advance Address by 4 to 0x1dec and Line by 0 to 1064
  [0x00000bee]  Set column to 6
  [0x00000bf0]  Special opcode 97: advance Address by 6 to 0x1df2 and Line by 8 to 1072
  [0x00000bf1]  Set column to 13
  [0x00000bf3]  Special opcode 90: advance Address by 6 to 0x1df8 and Line by 1 to 1073
  [0x00000bf4]  Set column to 20
  [0x00000bf6]  Special opcode 231: advance Address by 16 to 0x1e08 and Line by 2 to 1075
  [0x00000bf7]  Set column to 13
  [0x00000bf9]  Special opcode 131: advance Address by 9 to 0x1e11 and Line by 0 to 1075
  [0x00000bfa]  Set column to 11
  [0x00000bfc]  Special opcode 146: advance Address by 10 to 0x1e1b and Line by 1 to 1076
  [0x00000bfd]  Set column to 7
  [0x00000bff]  Special opcode 145: advance Address by 10 to 0x1e25 and Line by 0 to 1076
  [0x00000c00]  Set column to 14
  [0x00000c02]  Special opcode 104: advance Address by 7 to 0x1e2c and Line by 1 to 1077
  [0x00000c03]  Set column to 8
  [0x00000c05]  Special opcode 206: advance Address by 14 to 0x1e3a and Line by 5 to 1082
  [0x00000c06]  Set column to 16
  [0x00000c08]  Special opcode 202: advance Address by 14 to 0x1e48 and Line by 1 to 1083
  [0x00000c09]  Set column to 12
  [0x00000c0b]  Special opcode 145: advance Address by 10 to 0x1e52 and Line by 0 to 1083
  [0x00000c0c]  Set column to 43
  [0x00000c0e]  Extended opcode 4: set Discriminator to 2
  [0x00000c12]  Advance Line by -36 to 1047
  [0x00000c14]  Special opcode 145: advance Address by 10 to 0x1e5c and Line by 0 to 1047
  [0x00000c15]  Set column to 30
  [0x00000c17]  Extended opcode 4: set Discriminator to 1
  [0x00000c1b]  Special opcode 61: advance Address by 4 to 0x1e60 and Line by 0 to 1047
  [0x00000c1c]  Set column to 2
  [0x00000c1e]  Extended opcode 4: set Discriminator to 1
  [0x00000c22]  Special opcode 145: advance Address by 10 to 0x1e6a and Line by 0 to 1047
  [0x00000c23]  Set column to 1
  [0x00000c25]  Advance Line by 38 to 1085
  [0x00000c27]  Special opcode 131: advance Address by 9 to 0x1e73 and Line by 0 to 1085
  [0x00000c28]  Set column to 38
  [0x00000c2a]  Advance Line by 15 to 1100
  [0x00000c2c]  Special opcode 47: advance Address by 3 to 0x1e76 and Line by 0 to 1100
  [0x00000c2d]  Set column to 17
  [0x00000c2f]  Special opcode 123: advance Address by 8 to 0x1e7e and Line by 6 to 1106
  [0x00000c30]  Set column to 42
  [0x00000c32]  Special opcode 89: advance Address by 6 to 0x1e84 and Line by 0 to 1106
  [0x00000c33]  Set column to 30
  [0x00000c35]  Special opcode 145: advance Address by 10 to 0x1e8e and Line by 0 to 1106
  [0x00000c36]  Set column to 12
  [0x00000c38]  Special opcode 89: advance Address by 6 to 0x1e94 and Line by 0 to 1106
  [0x00000c39]  Set column to 19
  [0x00000c3b]  Special opcode 76: advance Address by 5 to 0x1e99 and Line by 1 to 1107
  [0x00000c3c]  Set column to 47
  [0x00000c3e]  Special opcode 89: advance Address by 6 to 0x1e9f and Line by 0 to 1107
  [0x00000c3f]  Set column to 32
  [0x00000c41]  Special opcode 145: advance Address by 10 to 0x1ea9 and Line by 0 to 1107
  [0x00000c42]  Set column to 14
  [0x00000c44]  Special opcode 89: advance Address by 6 to 0x1eaf and Line by 0 to 1107
  [0x00000c45]  Set column to 10
  [0x00000c47]  Special opcode 77: advance Address by 5 to 0x1eb4 and Line by 2 to 1109
  [0x00000c48]  Set column to 18
  [0x00000c4a]  Special opcode 103: advance Address by 7 to 0x1ebb and Line by 0 to 1109
  [0x00000c4b]  Set column to 2
  [0x00000c4d]  Special opcode 159: advance Address by 11 to 0x1ec6 and Line by 0 to 1109
  [0x00000c4e]  Set column to 10
  [0x00000c50]  Special opcode 76: advance Address by 5 to 0x1ecb and Line by 1 to 1110
  [0x00000c51]  Set column to 6
  [0x00000c53]  Special opcode 89: advance Address by 6 to 0x1ed1 and Line by 0 to 1110
  [0x00000c54]  Set column to 10
  [0x00000c56]  Special opcode 121: advance Address by 8 to 0x1ed9 and Line by 4 to 1114
  [0x00000c57]  Set column to 32
  [0x00000c59]  Special opcode 145: advance Address by 10 to 0x1ee3 and Line by 0 to 1114
  [0x00000c5a]  Set column to 27
  [0x00000c5c]  Special opcode 89: advance Address by 6 to 0x1ee9 and Line by 0 to 1114
  [0x00000c5d]  Set column to 6
  [0x00000c5f]  Special opcode 61: advance Address by 4 to 0x1eed and Line by 0 to 1114
  [0x00000c60]  Set column to 28
  [0x00000c62]  Special opcode 62: advance Address by 4 to 0x1ef1 and Line by 1 to 1115
  [0x00000c63]  Set column to 23
  [0x00000c65]  Special opcode 89: advance Address by 6 to 0x1ef7 and Line by 0 to 1115
  [0x00000c66]  Set column to 10
  [0x00000c68]  Special opcode 148: advance Address by 10 to 0x1f01 and Line by 3 to 1118
  [0x00000c69]  Set column to 6
  [0x00000c6b]  Special opcode 89: advance Address by 6 to 0x1f07 and Line by 0 to 1118
  [0x00000c6c]  Set column to 36
  [0x00000c6e]  Extended opcode 4: set Discriminator to 1
  [0x00000c72]  Special opcode 75: advance Address by 5 to 0x1f0c and Line by 0 to 1118
  [0x00000c73]  Set column to 53
  [0x00000c75]  Extended opcode 4: set Discriminator to 1
  [0x00000c79]  Special opcode 145: advance Address by 10 to 0x1f16 and Line by 0 to 1118
  [0x00000c7a]  Set column to 31
  [0x00000c7c]  Extended opcode 4: set Discriminator to 1
  [0x00000c80]  Special opcode 47: advance Address by 3 to 0x1f19 and Line by 0 to 1118
  [0x00000c81]  Set column to 4
  [0x00000c83]  Special opcode 63: advance Address by 4 to 0x1f1d and Line by 2 to 1120
  [0x00000c84]  Set column to 14
  [0x00000c86]  Advance PC by constant 17 to 0x1f2e
  [0x00000c87]  Special opcode 76: advance Address by 5 to 0x1f33 and Line by 1 to 1121
  [0x00000c88]  Set column to 4
  [0x00000c8a]  Special opcode 146: advance Address by 10 to 0x1f3d and Line by 1 to 1122
  [0x00000c8b]  Set column to 10
  [0x00000c8d]  Special opcode 77: advance Address by 5 to 0x1f42 and Line by 2 to 1124
  [0x00000c8e]  Set column to 6
  [0x00000c90]  Special opcode 145: advance Address by 10 to 0x1f4c and Line by 0 to 1124
  [0x00000c91]  Set column to 32
  [0x00000c93]  Extended opcode 4: set Discriminator to 1
  [0x00000c97]  Special opcode 61: advance Address by 4 to 0x1f50 and Line by 0 to 1124
  [0x00000c98]  Set column to 42
  [0x00000c9a]  Extended opcode 4: set Discriminator to 1
  [0x00000c9e]  Special opcode 89: advance Address by 6 to 0x1f56 and Line by 0 to 1124
  [0x00000c9f]  Set column to 38
  [0x00000ca1]  Extended opcode 4: set Discriminator to 1
  [0x00000ca5]  Special opcode 145: advance Address by 10 to 0x1f60 and Line by 0 to 1124
  [0x00000ca6]  Set column to 26
  [0x00000ca8]  Extended opcode 4: set Discriminator to 1
  [0x00000cac]  Special opcode 61: advance Address by 4 to 0x1f64 and Line by 0 to 1124
  [0x00000cad]  Set column to 25
  [0x00000caf]  Special opcode 105: advance Address by 7 to 0x1f6b and Line by 2 to 1126
  [0x00000cb0]  Set column to 4
  [0x00000cb2]  Special opcode 145: advance Address by 10 to 0x1f75 and Line by 0 to 1126
  [0x00000cb3]  Advance PC by constant 17 to 0x1f86
  [0x00000cb4]  Special opcode 20: advance Address by 1 to 0x1f87 and Line by 1 to 1127
  [0x00000cb5]  Set column to 14
  [0x00000cb7]  Advance PC by constant 17 to 0x1f98
  [0x00000cb8]  Special opcode 6: advance Address by 0 to 0x1f98 and Line by 1 to 1128
  [0x00000cb9]  Set column to 4
  [0x00000cbb]  Special opcode 146: advance Address by 10 to 0x1fa2 and Line by 1 to 1129
  [0x00000cbc]  Set column to 10
  [0x00000cbe]  Special opcode 35: advance Address by 2 to 0x1fa4 and Line by 2 to 1131
  [0x00000cbf]  Set column to 6
  [0x00000cc1]  Special opcode 89: advance Address by 6 to 0x1faa and Line by 0 to 1131
  [0x00000cc2]  Set column to 39
  [0x00000cc4]  Extended opcode 4: set Discriminator to 1
  [0x00000cc8]  Special opcode 75: advance Address by 5 to 0x1faf and Line by 0 to 1131
  [0x00000cc9]  Set column to 56
  [0x00000ccb]  Extended opcode 4: set Discriminator to 1
  [0x00000ccf]  Special opcode 145: advance Address by 10 to 0x1fb9 and Line by 0 to 1131
  [0x00000cd0]  Set column to 34
  [0x00000cd2]  Extended opcode 4: set Discriminator to 1
  [0x00000cd6]  Special opcode 47: advance Address by 3 to 0x1fbc and Line by 0 to 1131
  [0x00000cd7]  Set column to 13
  [0x00000cd9]  Special opcode 64: advance Address by 4 to 0x1fc0 and Line by 3 to 1134
  [0x00000cda]  Set column to 9
  [0x00000cdc]  Special opcode 145: advance Address by 10 to 0x1fca and Line by 0 to 1134
  [0x00000cdd]  Set column to 7
  [0x00000cdf]  Special opcode 47: advance Address by 3 to 0x1fcd and Line by 0 to 1134
  [0x00000ce0]  Set column to 13
  [0x00000ce2]  Special opcode 145: advance Address by 10 to 0x1fd7 and Line by 0 to 1134
  [0x00000ce3]  Set column to 7
  [0x00000ce5]  Special opcode 145: advance Address by 10 to 0x1fe1 and Line by 0 to 1134
  [0x00000ce6]  Set column to 5
  [0x00000ce8]  Special opcode 76: advance Address by 5 to 0x1fe6 and Line by 1 to 1135
  [0x00000ce9]  Set column to 15
  [0x00000ceb]  Advance PC by constant 17 to 0x1ff7
  [0x00000cec]  Special opcode 34: advance Address by 2 to 0x1ff9 and Line by 1 to 1136
  [0x00000ced]  Set column to 7
  [0x00000cef]  Special opcode 143: advance Address by 10 to 0x2003 and Line by -2 to 1134
  [0x00000cf0]  Set column to 21
  [0x00000cf2]  Special opcode 38: advance Address by 2 to 0x2005 and Line by 5 to 1139
  [0x00000cf3]  Set column to 4
  [0x00000cf5]  Advance Line by -28 to 1111
  [0x00000cf7]  Special opcode 229: advance Address by 16 to 0x2015 and Line by 0 to 1111
  [0x00000cf8]  Set column to 64
  [0x00000cfa]  Extended opcode 4: set Discriminator to 2
  [0x00000cfe]  Special opcode 17: advance Address by 1 to 0x2016 and Line by -2 to 1109
  [0x00000cff]  Set column to 70
  [0x00000d01]  Extended opcode 4: set Discriminator to 2
  [0x00000d05]  Special opcode 61: advance Address by 4 to 0x201a and Line by 0 to 1109
  [0x00000d06]  Set column to 51
  [0x00000d08]  Extended opcode 4: set Discriminator to 1
  [0x00000d0c]  Special opcode 117: advance Address by 8 to 0x2022 and Line by 0 to 1109
  [0x00000d0d]  Set column to 2
  [0x00000d0f]  Extended opcode 4: set Discriminator to 1
  [0x00000d13]  Special opcode 145: advance Address by 10 to 0x202c and Line by 0 to 1109
  [0x00000d14]  Set column to 1
  [0x00000d16]  Advance Line by 33 to 1142
  [0x00000d18]  Special opcode 131: advance Address by 9 to 0x2035 and Line by 0 to 1142
  [0x00000d19]  Set column to 40
  [0x00000d1b]  Special opcode 55: advance Address by 3 to 0x2038 and Line by 8 to 1150
  [0x00000d1c]  Set column to 9
  [0x00000d1e]  Special opcode 65: advance Address by 4 to 0x203c and Line by 4 to 1154
  [0x00000d1f]  Set column to 1
  [0x00000d21]  Advance Line by 30 to 1184
  [0x00000d23]  Special opcode 75: advance Address by 5 to 0x2041 and Line by 0 to 1184
  [0x00000d24]  Advance Line by 10 to 1194
  [0x00000d26]  Special opcode 33: advance Address by 2 to 0x2043 and Line by 0 to 1194
  [0x00000d27]  Set column to 7
  [0x00000d29]  Special opcode 62: advance Address by 4 to 0x2047 and Line by 1 to 1195
  [0x00000d2a]  Set column to 5
  [0x00000d2c]  Special opcode 103: advance Address by 7 to 0x204e and Line by 0 to 1195
  [0x00000d2d]  Set column to 31
  [0x00000d2f]  Special opcode 79: advance Address by 5 to 0x2053 and Line by 4 to 1199
  [0x00000d30]  Set column to 23
  [0x00000d32]  Special opcode 173: advance Address by 12 to 0x205f and Line by 0 to 1199
  [0x00000d33]  Set column to 13
  [0x00000d35]  Special opcode 173: advance Address by 12 to 0x206b and Line by 0 to 1199
  [0x00000d36]  Set column to 22
  [0x00000d38]  Special opcode 105: advance Address by 7 to 0x2072 and Line by 2 to 1201
  [0x00000d39]  Set column to 6
  [0x00000d3b]  Special opcode 89: advance Address by 6 to 0x2078 and Line by 0 to 1201
  [0x00000d3c]  Set column to 11
  [0x00000d3e]  Special opcode 76: advance Address by 5 to 0x207d and Line by 1 to 1202
  [0x00000d3f]  Set column to 25
  [0x00000d41]  Special opcode 105: advance Address by 7 to 0x2084 and Line by 2 to 1204
  [0x00000d42]  Set column to 21
  [0x00000d44]  Special opcode 89: advance Address by 6 to 0x208a and Line by 0 to 1204
  [0x00000d45]  Set column to 10
  [0x00000d47]  Special opcode 134: advance Address by 9 to 0x2093 and Line by 3 to 1207
  [0x00000d48]  Set column to 1
  [0x00000d4a]  Special opcode 76: advance Address by 5 to 0x2098 and Line by 1 to 1208
  [0x00000d4b]  Advance Line by 9 to 1217
  [0x00000d4d]  Special opcode 33: advance Address by 2 to 0x209a and Line by 0 to 1217
  [0x00000d4e]  Set column to 17
  [0x00000d50]  Special opcode 121: advance Address by 8 to 0x20a2 and Line by 4 to 1221
  [0x00000d51]  Set column to 5
  [0x00000d53]  Special opcode 145: advance Address by 10 to 0x20ac and Line by 0 to 1221
  [0x00000d54]  Set column to 40
  [0x00000d56]  Extended opcode 4: set Discriminator to 1
  [0x00000d5a]  Special opcode 61: advance Address by 4 to 0x20b0 and Line by 0 to 1221
  [0x00000d5b]  Set column to 27
  [0x00000d5d]  Extended opcode 4: set Discriminator to 1
  [0x00000d61]  Special opcode 145: advance Address by 10 to 0x20ba and Line by 0 to 1221
  [0x00000d62]  Set column to 3
  [0x00000d64]  Special opcode 104: advance Address by 7 to 0x20c1 and Line by 1 to 1222
  [0x00000d65]  Advance PC by constant 17 to 0x20d2
  [0x00000d66]  Special opcode 34: advance Address by 2 to 0x20d4 and Line by 1 to 1223
  [0x00000d67]  Set column to 17
  [0x00000d69]  Advance PC by constant 17 to 0x20e5
  [0x00000d6a]  Special opcode 8: advance Address by 0 to 0x20e5 and Line by 3 to 1226
  [0x00000d6b]  Set column to 5
  [0x00000d6d]  Special opcode 145: advance Address by 10 to 0x20ef and Line by 0 to 1226
  [0x00000d6e]  Set column to 40
  [0x00000d70]  Extended opcode 4: set Discriminator to 1
  [0x00000d74]  Special opcode 61: advance Address by 4 to 0x20f3 and Line by 0 to 1226
  [0x00000d75]  Set column to 27
  [0x00000d77]  Extended opcode 4: set Discriminator to 1
  [0x00000d7b]  Special opcode 145: advance Address by 10 to 0x20fd and Line by 0 to 1226
  [0x00000d7c]  Set column to 3
  [0x00000d7e]  Special opcode 104: advance Address by 7 to 0x2104 and Line by 1 to 1227
  [0x00000d7f]  Advance PC by constant 17 to 0x2115
  [0x00000d80]  Special opcode 34: advance Address by 2 to 0x2117 and Line by 1 to 1228
  [0x00000d81]  Set column to 2
  [0x00000d83]  Advance PC by constant 17 to 0x2128
  [0x00000d84]  Special opcode 8: advance Address by 0 to 0x2128 and Line by 3 to 1231
  [0x00000d85]  Set column to 9
  [0x00000d87]  Special opcode 217: advance Address by 15 to 0x2137 and Line by 2 to 1233
  [0x00000d88]  Set column to 5
  [0x00000d8a]  Special opcode 89: advance Address by 6 to 0x213d and Line by 0 to 1233
  [0x00000d8b]  Set column to 34
  [0x00000d8d]  Extended opcode 4: set Discriminator to 1
  [0x00000d91]  Special opcode 61: advance Address by 4 to 0x2141 and Line by 0 to 1233
  [0x00000d92]  Set column to 27
  [0x00000d94]  Extended opcode 4: set Discriminator to 1
  [0x00000d98]  Special opcode 103: advance Address by 7 to 0x2148 and Line by 0 to 1233
  [0x00000d99]  Set column to 10
  [0x00000d9b]  Special opcode 78: advance Address by 5 to 0x214d and Line by 3 to 1236
  [0x00000d9c]  Set column to 18
  [0x00000d9e]  Special opcode 103: advance Address by 7 to 0x2154 and Line by 0 to 1236
  [0x00000d9f]  Set column to 2
  [0x00000da1]  Special opcode 159: advance Address by 11 to 0x215f and Line by 0 to 1236
  [0x00000da2]  Set column to 10
  [0x00000da4]  Special opcode 34: advance Address by 2 to 0x2161 and Line by 1 to 1237
  [0x00000da5]  Set column to 6
  [0x00000da7]  Special opcode 89: advance Address by 6 to 0x2167 and Line by 0 to 1237
  [0x00000da8]  Set column to 4
  [0x00000daa]  Special opcode 76: advance Address by 5 to 0x216c and Line by 1 to 1238
  [0x00000dab]  Set column to 62
  [0x00000dad]  Extended opcode 4: set Discriminator to 2
  [0x00000db1]  Advance PC by constant 17 to 0x217d
  [0x00000db2]  Special opcode 73: advance Address by 5 to 0x2182 and Line by -2 to 1236
  [0x00000db3]  Set column to 68
  [0x00000db5]  Extended opcode 4: set Discriminator to 2
  [0x00000db9]  Special opcode 61: advance Address by 4 to 0x2186 and Line by 0 to 1236
  [0x00000dba]  Set column to 50
  [0x00000dbc]  Extended opcode 4: set Discriminator to 1
  [0x00000dc0]  Special opcode 117: advance Address by 8 to 0x218e and Line by 0 to 1236
  [0x00000dc1]  Set column to 2
  [0x00000dc3]  Extended opcode 4: set Discriminator to 1
  [0x00000dc7]  Special opcode 145: advance Address by 10 to 0x2198 and Line by 0 to 1236
  [0x00000dc8]  Set column to 3
  [0x00000dca]  Special opcode 101: advance Address by 7 to 0x219f and Line by -2 to 1234
  [0x00000dcb]  Set column to 1
  [0x00000dcd]  Special opcode 26: advance Address by 1 to 0x21a0 and Line by 7 to 1241
  [0x00000dce]  Set column to 46
  [0x00000dd0]  Special opcode 41: advance Address by 2 to 0x21a2 and Line by 8 to 1249
  [0x00000dd1]  Set column to 11
  [0x00000dd3]  Advance PC by constant 17 to 0x21b3
  [0x00000dd4]  Special opcode 20: advance Address by 1 to 0x21b4 and Line by 1 to 1250
  [0x00000dd5]  Set column to 10
  [0x00000dd7]  Special opcode 107: advance Address by 7 to 0x21bb and Line by 4 to 1254
  [0x00000dd8]  Set column to 5
  [0x00000dda]  Special opcode 103: advance Address by 7 to 0x21c2 and Line by 0 to 1254
  [0x00000ddb]  Set column to 11
  [0x00000ddd]  Special opcode 77: advance Address by 5 to 0x21c7 and Line by 2 to 1256
  [0x00000dde]  Set column to 3
  [0x00000de0]  Special opcode 103: advance Address by 7 to 0x21ce and Line by 0 to 1256
  [0x00000de1]  Set column to 12
  [0x00000de3]  Special opcode 34: advance Address by 2 to 0x21d0 and Line by 1 to 1257
  [0x00000de4]  Set column to 20
  [0x00000de6]  Special opcode 103: advance Address by 7 to 0x21d7 and Line by 0 to 1257
  [0x00000de7]  Set column to 23
  [0x00000de9]  Special opcode 215: advance Address by 15 to 0x21e6 and Line by 0 to 1257
  [0x00000dea]  Set column to 7
  [0x00000dec]  Special opcode 33: advance Address by 2 to 0x21e8 and Line by 0 to 1257
  [0x00000ded]  Set column to 17
  [0x00000def]  Special opcode 76: advance Address by 5 to 0x21ed and Line by 1 to 1258
  [0x00000df0]  Set column to 5
  [0x00000df2]  Special opcode 104: advance Address by 7 to 0x21f4 and Line by 1 to 1259
  [0x00000df3]  Set column to 45
  [0x00000df5]  Extended opcode 4: set Discriminator to 2
  [0x00000df9]  Special opcode 30: advance Address by 2 to 0x21f6 and Line by -3 to 1256
  [0x00000dfa]  Set column to 33
  [0x00000dfc]  Extended opcode 4: set Discriminator to 1
  [0x00000e00]  Special opcode 61: advance Address by 4 to 0x21fa and Line by 0 to 1256
  [0x00000e01]  Set column to 3
  [0x00000e03]  Extended opcode 4: set Discriminator to 1
  [0x00000e07]  Special opcode 145: advance Address by 10 to 0x2204 and Line by 0 to 1256
  [0x00000e08]  Set column to 10
  [0x00000e0a]  Special opcode 83: advance Address by 5 to 0x2209 and Line by 8 to 1264
  [0x00000e0b]  Set column to 17
  [0x00000e0d]  Special opcode 146: advance Address by 10 to 0x2213 and Line by 1 to 1265
  [0x00000e0e]  Set column to 2
  [0x00000e10]  Special opcode 147: advance Address by 10 to 0x221d and Line by 2 to 1267
  [0x00000e11]  Set column to 5
  [0x00000e13]  Advance PC by constant 17 to 0x222e
  [0x00000e14]  Special opcode 147: advance Address by 10 to 0x2238 and Line by 2 to 1269
  [0x00000e15]  Set column to 3
  [0x00000e17]  Special opcode 90: advance Address by 6 to 0x223e and Line by 1 to 1270
  [0x00000e18]  Set column to 2
  [0x00000e1a]  Special opcode 218: advance Address by 15 to 0x224d and Line by 3 to 1273
  [0x00000e1b]  Set column to 1
  [0x00000e1d]  Advance PC by 35 to 0x2270
  [0x00000e1f]  Special opcode 6: advance Address by 0 to 0x2270 and Line by 1 to 1274
  [0x00000e20]  Set column to 27
  [0x00000e22]  Advance Line by 11 to 1285
  [0x00000e24]  Special opcode 47: advance Address by 3 to 0x2273 and Line by 0 to 1285
  [0x00000e25]  Set column to 7
  [0x00000e27]  Special opcode 164: advance Address by 11 to 0x227e and Line by 5 to 1290
  [0x00000e28]  Set column to 5
  [0x00000e2a]  Special opcode 145: advance Address by 10 to 0x2288 and Line by 0 to 1290
  [0x00000e2b]  Set column to 3
  [0x00000e2d]  Special opcode 62: advance Address by 4 to 0x228c and Line by 1 to 1291
  [0x00000e2e]  Set column to 20
  [0x00000e30]  Special opcode 78: advance Address by 5 to 0x2291 and Line by 3 to 1294
  [0x00000e31]  Set column to 5
  [0x00000e33]  Special opcode 145: advance Address by 10 to 0x229b and Line by 0 to 1294
  [0x00000e34]  Set column to 3
  [0x00000e36]  Special opcode 62: advance Address by 4 to 0x229f and Line by 1 to 1295
  [0x00000e37]  Special opcode 174: advance Address by 12 to 0x22ab and Line by 1 to 1296
  [0x00000e38]  Advance PC by constant 17 to 0x22bc
  [0x00000e39]  Special opcode 34: advance Address by 2 to 0x22be and Line by 1 to 1297
  [0x00000e3a]  Set column to 22
  [0x00000e3c]  Special opcode 78: advance Address by 5 to 0x22c3 and Line by 3 to 1300
  [0x00000e3d]  Set column to 5
  [0x00000e3f]  Special opcode 145: advance Address by 10 to 0x22cd and Line by 0 to 1300
  [0x00000e40]  Set column to 21
  [0x00000e42]  Special opcode 63: advance Address by 4 to 0x22d1 and Line by 2 to 1302
  [0x00000e43]  Set column to 6
  [0x00000e45]  Special opcode 145: advance Address by 10 to 0x22db and Line by 0 to 1302
  [0x00000e46]  Set column to 4
  [0x00000e48]  Special opcode 121: advance Address by 8 to 0x22e3 and Line by 4 to 1306
  [0x00000e49]  Set column to 3
  [0x00000e4b]  Special opcode 147: advance Address by 10 to 0x22ed and Line by 2 to 1308
  [0x00000e4c]  Set column to 7
  [0x00000e4e]  Special opcode 79: advance Address by 5 to 0x22f2 and Line by 4 to 1312
  [0x00000e4f]  Set column to 5
  [0x00000e51]  Special opcode 75: advance Address by 5 to 0x22f7 and Line by 0 to 1312
  [0x00000e52]  Set column to 27
  [0x00000e54]  Special opcode 123: advance Address by 8 to 0x22ff and Line by 6 to 1318
  [0x00000e55]  Set column to 19
  [0x00000e57]  Special opcode 145: advance Address by 10 to 0x2309 and Line by 0 to 1318
  [0x00000e58]  Set column to 37
  [0x00000e5a]  Special opcode 117: advance Address by 8 to 0x2311 and Line by 0 to 1318
  [0x00000e5b]  Set column to 52
  [0x00000e5d]  Special opcode 61: advance Address by 4 to 0x2315 and Line by 0 to 1318
  [0x00000e5e]  Set column to 37
  [0x00000e60]  Special opcode 173: advance Address by 12 to 0x2321 and Line by 0 to 1318
  [0x00000e61]  Set column to 12
  [0x00000e63]  Special opcode 61: advance Address by 4 to 0x2325 and Line by 0 to 1318
  [0x00000e64]  Set column to 4
  [0x00000e66]  Special opcode 105: advance Address by 7 to 0x232c and Line by 2 to 1320
  [0x00000e67]  Set column to 42
  [0x00000e69]  Special opcode 91: advance Address by 6 to 0x2332 and Line by 2 to 1322
  [0x00000e6a]  Set column to 50
  [0x00000e6c]  Special opcode 173: advance Address by 12 to 0x233e and Line by 0 to 1322
  [0x00000e6d]  Set column to 3
  [0x00000e6f]  Special opcode 173: advance Address by 12 to 0x234a and Line by 0 to 1322
  [0x00000e70]  Set column to 59
  [0x00000e72]  Advance PC by 36 to 0x236e
  [0x00000e74]  Special opcode 6: advance Address by 0 to 0x236e and Line by 1 to 1323
  [0x00000e75]  Set column to 3
  [0x00000e77]  Special opcode 173: advance Address by 12 to 0x237a and Line by 0 to 1323
  [0x00000e78]  Set column to 13
  [0x00000e7a]  Advance PC by constant 17 to 0x238b
  [0x00000e7b]  Special opcode 62: advance Address by 4 to 0x238f and Line by 1 to 1324
  [0x00000e7c]  Set column to 18
  [0x00000e7e]  Special opcode 106: advance Address by 7 to 0x2396 and Line by 3 to 1327
  [0x00000e7f]  Set column to 21
  [0x00000e81]  Advance PC by constant 17 to 0x23a7
  [0x00000e82]  Special opcode 7: advance Address by 0 to 0x23a7 and Line by 2 to 1329
  [0x00000e83]  Set column to 5
  [0x00000e85]  Special opcode 145: advance Address by 10 to 0x23b1 and Line by 0 to 1329
  [0x00000e86]  Set column to 18
  [0x00000e88]  Special opcode 62: advance Address by 4 to 0x23b5 and Line by 1 to 1330
  [0x00000e89]  Set column to 28
  [0x00000e8b]  Special opcode 89: advance Address by 6 to 0x23bb and Line by 0 to 1330
  [0x00000e8c]  Set column to 3
  [0x00000e8e]  Special opcode 89: advance Address by 6 to 0x23c1 and Line by 0 to 1330
  [0x00000e8f]  Set column to 9
  [0x00000e91]  Special opcode 137: advance Address by 9 to 0x23ca and Line by 6 to 1336
  [0x00000e92]  Set column to 5
  [0x00000e94]  Special opcode 89: advance Address by 6 to 0x23d0 and Line by 0 to 1336
  [0x00000e95]  Set column to 3
  [0x00000e97]  Special opcode 104: advance Address by 7 to 0x23d7 and Line by 1 to 1337
  [0x00000e98]  Special opcode 174: advance Address by 12 to 0x23e3 and Line by 1 to 1338
  [0x00000e99]  Set column to 9
  [0x00000e9b]  Special opcode 79: advance Address by 5 to 0x23e8 and Line by 4 to 1342
  [0x00000e9c]  Set column to 5
  [0x00000e9e]  Special opcode 89: advance Address by 6 to 0x23ee and Line by 0 to 1342
  [0x00000e9f]  Set column to 54
  [0x00000ea1]  Extended opcode 4: set Discriminator to 1
  [0x00000ea5]  Special opcode 159: advance Address by 11 to 0x23f9 and Line by 0 to 1342
  [0x00000ea6]  Set column to 32
  [0x00000ea8]  Extended opcode 4: set Discriminator to 1
  [0x00000eac]  Special opcode 145: advance Address by 10 to 0x2403 and Line by 0 to 1342
  [0x00000ead]  Set column to 74
  [0x00000eaf]  Extended opcode 4: set Discriminator to 2
  [0x00000eb3]  Special opcode 61: advance Address by 4 to 0x2407 and Line by 0 to 1342
  [0x00000eb4]  Set column to 69
  [0x00000eb6]  Extended opcode 4: set Discriminator to 2
  [0x00000eba]  Special opcode 89: advance Address by 6 to 0x240d and Line by 0 to 1342
  [0x00000ebb]  Set column to 11
  [0x00000ebd]  Special opcode 160: advance Address by 11 to 0x2418 and Line by 1 to 1343
  [0x00000ebe]  Set column to 6
  [0x00000ec0]  Special opcode 103: advance Address by 7 to 0x241f and Line by 0 to 1343
  [0x00000ec1]  Set column to 12
  [0x00000ec3]  Special opcode 76: advance Address by 5 to 0x2424 and Line by 1 to 1344
  [0x00000ec4]  Set column to 4
  [0x00000ec6]  Special opcode 103: advance Address by 7 to 0x242b and Line by 0 to 1344
  [0x00000ec7]  Set column to 13
  [0x00000ec9]  Special opcode 35: advance Address by 2 to 0x242d and Line by 2 to 1346
  [0x00000eca]  Set column to 21
  [0x00000ecc]  Special opcode 103: advance Address by 7 to 0x2434 and Line by 0 to 1346
  [0x00000ecd]  Set column to 24
  [0x00000ecf]  Special opcode 215: advance Address by 15 to 0x2443 and Line by 0 to 1346
  [0x00000ed0]  Set column to 8
  [0x00000ed2]  Special opcode 33: advance Address by 2 to 0x2445 and Line by 0 to 1346
  [0x00000ed3]  Set column to 48
  [0x00000ed5]  Extended opcode 4: set Discriminator to 1
  [0x00000ed9]  Special opcode 61: advance Address by 4 to 0x2449 and Line by 0 to 1346
  [0x00000eda]  Set column to 56
  [0x00000edc]  Extended opcode 4: set Discriminator to 1
  [0x00000ee0]  Special opcode 103: advance Address by 7 to 0x2450 and Line by 0 to 1346
  [0x00000ee1]  Set column to 81
  [0x00000ee3]  Extended opcode 4: set Discriminator to 1
  [0x00000ee7]  Special opcode 215: advance Address by 15 to 0x245f and Line by 0 to 1346
  [0x00000ee8]  Set column to 42
  [0x00000eea]  Extended opcode 4: set Discriminator to 1
  [0x00000eee]  Special opcode 89: advance Address by 6 to 0x2465 and Line by 0 to 1346
  [0x00000eef]  Set column to 46
  [0x00000ef1]  Extended opcode 4: set Discriminator to 2
  [0x00000ef5]  Special opcode 73: advance Address by 5 to 0x246a and Line by -2 to 1344
  [0x00000ef6]  Set column to 34
  [0x00000ef8]  Extended opcode 4: set Discriminator to 1
  [0x00000efc]  Special opcode 61: advance Address by 4 to 0x246e and Line by 0 to 1344
  [0x00000efd]  Set column to 4
  [0x00000eff]  Extended opcode 4: set Discriminator to 1
  [0x00000f03]  Special opcode 145: advance Address by 10 to 0x2478 and Line by 0 to 1344
  [0x00000f04]  Set column to 6
  [0x00000f06]  Special opcode 106: advance Address by 7 to 0x247f and Line by 3 to 1347
  [0x00000f07]  Set column to 27
  [0x00000f09]  Special opcode 22: advance Address by 1 to 0x2480 and Line by 3 to 1350
  [0x00000f0a]  Set column to 7
  [0x00000f0c]  Special opcode 145: advance Address by 10 to 0x248a and Line by 0 to 1350
  [0x00000f0d]  Set column to 5
  [0x00000f0f]  Special opcode 76: advance Address by 5 to 0x248f and Line by 1 to 1351
  [0x00000f10]  Special opcode 174: advance Address by 12 to 0x249b and Line by 1 to 1352
  [0x00000f11]  Set column to 9
  [0x00000f13]  Special opcode 80: advance Address by 5 to 0x24a0 and Line by 5 to 1357
  [0x00000f14]  Set column to 5
  [0x00000f16]  Special opcode 89: advance Address by 6 to 0x24a6 and Line by 0 to 1357
  [0x00000f17]  Set column to 27
  [0x00000f19]  Extended opcode 4: set Discriminator to 1
  [0x00000f1d]  Special opcode 61: advance Address by 4 to 0x24aa and Line by 0 to 1357
  [0x00000f1e]  Set column to 37
  [0x00000f20]  Extended opcode 4: set Discriminator to 1
  [0x00000f24]  Special opcode 89: advance Address by 6 to 0x24b0 and Line by 0 to 1357
  [0x00000f25]  Set column to 33
  [0x00000f27]  Extended opcode 4: set Discriminator to 1
  [0x00000f2b]  Special opcode 89: advance Address by 6 to 0x24b6 and Line by 0 to 1357
  [0x00000f2c]  Set column to 22
  [0x00000f2e]  Extended opcode 4: set Discriminator to 1
  [0x00000f32]  Special opcode 61: advance Address by 4 to 0x24ba and Line by 0 to 1357
  [0x00000f33]  Set column to 18
  [0x00000f35]  Special opcode 62: advance Address by 4 to 0x24be and Line by 1 to 1358
  [0x00000f36]  Set column to 3
  [0x00000f38]  Special opcode 146: advance Address by 10 to 0x24c8 and Line by 1 to 1359
  [0x00000f39]  Special opcode 174: advance Address by 12 to 0x24d4 and Line by 1 to 1360
  [0x00000f3a]  Set column to 26
  [0x00000f3c]  Special opcode 79: advance Address by 5 to 0x24d9 and Line by 4 to 1364
  [0x00000f3d]  Set column to 5
  [0x00000f3f]  Special opcode 131: advance Address by 9 to 0x24e2 and Line by 0 to 1364
  [0x00000f40]  Set column to 3
  [0x00000f42]  Special opcode 62: advance Address by 4 to 0x24e6 and Line by 1 to 1365
  [0x00000f43]  Set column to 22
  [0x00000f45]  Advance PC by constant 17 to 0x24f7
  [0x00000f46]  Special opcode 160: advance Address by 11 to 0x2502 and Line by 1 to 1366
  [0x00000f47]  Set column to 26
  [0x00000f49]  Special opcode 217: advance Address by 15 to 0x2511 and Line by 2 to 1368
  [0x00000f4a]  Set column to 5
  [0x00000f4c]  Special opcode 131: advance Address by 9 to 0x251a and Line by 0 to 1368
  [0x00000f4d]  Set column to 3
  [0x00000f4f]  Special opcode 62: advance Address by 4 to 0x251e and Line by 1 to 1369
  [0x00000f50]  Set column to 22
  [0x00000f52]  Advance PC by constant 17 to 0x252f
  [0x00000f53]  Special opcode 160: advance Address by 11 to 0x253a and Line by 1 to 1370
  [0x00000f54]  Set column to 17
  [0x00000f56]  Special opcode 218: advance Address by 15 to 0x2549 and Line by 3 to 1373
  [0x00000f57]  Set column to 5
  [0x00000f59]  Special opcode 145: advance Address by 10 to 0x2553 and Line by 0 to 1373
  [0x00000f5a]  Set column to 15
  [0x00000f5c]  Special opcode 62: advance Address by 4 to 0x2557 and Line by 1 to 1374
  [0x00000f5d]  Set column to 13
  [0x00000f5f]  Special opcode 147: advance Address by 10 to 0x2561 and Line by 2 to 1376
  [0x00000f60]  Set column to 2
  [0x00000f62]  Special opcode 107: advance Address by 7 to 0x2568 and Line by 4 to 1380
  [0x00000f63]  Set column to 19
  [0x00000f65]  Special opcode 77: advance Address by 5 to 0x256d and Line by 2 to 1382
  [0x00000f66]  Set column to 5
  [0x00000f68]  Special opcode 145: advance Address by 10 to 0x2577 and Line by 0 to 1382
  [0x00000f69]  Set column to 30
  [0x00000f6b]  Extended opcode 4: set Discriminator to 1
  [0x00000f6f]  Special opcode 61: advance Address by 4 to 0x257b and Line by 0 to 1382
  [0x00000f70]  Set column to 8
  [0x00000f72]  Extended opcode 4: set Discriminator to 1
  [0x00000f76]  Special opcode 190: advance Address by 13 to 0x2588 and Line by 3 to 1385
  [0x00000f77]  Set column to 19
  [0x00000f79]  Special opcode 34: advance Address by 2 to 0x258a and Line by 1 to 1386
  [0x00000f7a]  Set column to 12
  [0x00000f7c]  Special opcode 216: advance Address by 15 to 0x2599 and Line by 1 to 1387
  [0x00000f7d]  Set column to 11
  [0x00000f7f]  Advance PC by constant 17 to 0x25aa
  [0x00000f80]  Special opcode 6: advance Address by 0 to 0x25aa and Line by 1 to 1388
  [0x00000f81]  Set column to 3
  [0x00000f83]  Advance PC by constant 17 to 0x25bb
  [0x00000f84]  Special opcode 8: advance Address by 0 to 0x25bb and Line by 3 to 1391
  [0x00000f85]  Set column to 12
  [0x00000f87]  Advance Line by -6 to 1385
  [0x00000f89]  Advance PC by 38 to 0x25e1
  [0x00000f8b]  Copy
  [0x00000f8c]  Set column to 8
  [0x00000f8e]  Special opcode 89: advance Address by 6 to 0x25e7 and Line by 0 to 1385
  [0x00000f8f]  Set column to 17
  [0x00000f91]  Advance Line by 9 to 1394
  [0x00000f93]  Special opcode 75: advance Address by 5 to 0x25ec and Line by 0 to 1394
  [0x00000f94]  Set column to 5
  [0x00000f96]  Special opcode 145: advance Address by 10 to 0x25f6 and Line by 0 to 1394
  [0x00000f97]  Set column to 15
  [0x00000f99]  Special opcode 62: advance Address by 4 to 0x25fa and Line by 1 to 1395
  [0x00000f9a]  Set column to 35
  [0x00000f9c]  Special opcode 75: advance Address by 5 to 0x25ff and Line by 0 to 1395
  [0x00000f9d]  Set column to 13
  [0x00000f9f]  Special opcode 47: advance Address by 3 to 0x2602 and Line by 0 to 1395
  [0x00000fa0]  Set column to 2
  [0x00000fa2]  Special opcode 93: advance Address by 6 to 0x2608 and Line by 4 to 1399
  [0x00000fa3]  Special opcode 78: advance Address by 5 to 0x260d and Line by 3 to 1402
  [0x00000fa4]  Special opcode 78: advance Address by 5 to 0x2612 and Line by 3 to 1405
  [0x00000fa5]  Special opcode 78: advance Address by 5 to 0x2617 and Line by 3 to 1408
  [0x00000fa6]  Set column to 3
  [0x00000fa8]  Advance Line by -100 to 1308
  [0x00000fab]  Special opcode 201: advance Address by 14 to 0x2625 and Line by 0 to 1308
  [0x00000fac]  Special opcode 52: advance Address by 3 to 0x2628 and Line by 5 to 1313
  [0x00000fad]  Set column to 1
  [0x00000faf]  Advance Line by 96 to 1409
  [0x00000fb2]  Special opcode 19: advance Address by 1 to 0x2629 and Line by 0 to 1409
  [0x00000fb3]  Advance Line by 16 to 1425
  [0x00000fb5]  Special opcode 33: advance Address by 2 to 0x262b and Line by 0 to 1425
  [0x00000fb6]  Set column to 14
  [0x00000fb8]  Special opcode 177: advance Address by 12 to 0x2637 and Line by 4 to 1429
  [0x00000fb9]  Set column to 5
  [0x00000fbb]  Special opcode 145: advance Address by 10 to 0x2641 and Line by 0 to 1429
  [0x00000fbc]  Set column to 10
  [0x00000fbe]  Special opcode 62: advance Address by 4 to 0x2645 and Line by 1 to 1430
  [0x00000fbf]  Set column to 14
  [0x00000fc1]  Special opcode 147: advance Address by 10 to 0x264f and Line by 2 to 1432
  [0x00000fc2]  Set column to 36
  [0x00000fc4]  Special opcode 190: advance Address by 13 to 0x265c and Line by 3 to 1435
  [0x00000fc5]  Set column to 5
  [0x00000fc7]  Special opcode 145: advance Address by 10 to 0x2666 and Line by 0 to 1435
  [0x00000fc8]  Set column to 15
  [0x00000fca]  Special opcode 76: advance Address by 5 to 0x266b and Line by 1 to 1436
  [0x00000fcb]  Special opcode 92: advance Address by 6 to 0x2671 and Line by 3 to 1439
  [0x00000fcc]  Set column to 25
  [0x00000fce]  Special opcode 63: advance Address by 4 to 0x2675 and Line by 2 to 1441
  [0x00000fcf]  Set column to 48
  [0x00000fd1]  Special opcode 131: advance Address by 9 to 0x267e and Line by 0 to 1441
  [0x00000fd2]  Set column to 55
  [0x00000fd4]  Special opcode 145: advance Address by 10 to 0x2688 and Line by 0 to 1441
  [0x00000fd5]  Set column to 70
  [0x00000fd7]  Special opcode 61: advance Address by 4 to 0x268c and Line by 0 to 1441
  [0x00000fd8]  Set column to 55
  [0x00000fda]  Special opcode 173: advance Address by 12 to 0x2698 and Line by 0 to 1441
  [0x00000fdb]  Set column to 35
  [0x00000fdd]  Special opcode 61: advance Address by 4 to 0x269c and Line by 0 to 1441
  [0x00000fde]  Set column to 11
  [0x00000fe0]  Special opcode 61: advance Address by 4 to 0x26a0 and Line by 0 to 1441
  [0x00000fe1]  Set column to 9
  [0x00000fe3]  Special opcode 90: advance Address by 6 to 0x26a6 and Line by 1 to 1442
  [0x00000fe4]  Set column to 45
  [0x00000fe6]  Special opcode 103: advance Address by 7 to 0x26ad and Line by 0 to 1442
  [0x00000fe7]  Set column to 7
  [0x00000fe9]  Special opcode 145: advance Address by 10 to 0x26b7 and Line by 0 to 1442
  [0x00000fea]  Set column to 5
  [0x00000fec]  Special opcode 105: advance Address by 7 to 0x26be and Line by 2 to 1444
  [0x00000fed]  Set column to 10
  [0x00000fef]  Special opcode 118: advance Address by 8 to 0x26c6 and Line by 1 to 1445
  [0x00000ff0]  Set column to 19
  [0x00000ff2]  Special opcode 105: advance Address by 7 to 0x26cd and Line by 2 to 1447
  [0x00000ff3]  Set column to 1
  [0x00000ff5]  Special opcode 90: advance Address by 6 to 0x26d3 and Line by 1 to 1448
  [0x00000ff6]  Advance Line by 13 to 1461
  [0x00000ff8]  Special opcode 33: advance Address by 2 to 0x26d5 and Line by 0 to 1461
  [0x00000ff9]  Set column to 6
  [0x00000ffb]  Special opcode 121: advance Address by 8 to 0x26dd and Line by 4 to 1465
  [0x00000ffc]  Set column to 11
  [0x00000ffe]  Special opcode 106: advance Address by 7 to 0x26e4 and Line by 3 to 1468
  [0x00000fff]  Set column to 4
  [0x00001001]  Special opcode 118: advance Address by 8 to 0x26ec and Line by 1 to 1469
  [0x00001002]  Set column to 11
  [0x00001004]  Special opcode 90: advance Address by 6 to 0x26f2 and Line by 1 to 1470
  [0x00001005]  Set column to 14
  [0x00001007]  Special opcode 91: advance Address by 6 to 0x26f8 and Line by 2 to 1472
  [0x00001008]  Set column to 4
  [0x0000100a]  Special opcode 145: advance Address by 10 to 0x2702 and Line by 0 to 1472
  [0x0000100b]  Set column to 13
  [0x0000100d]  Special opcode 121: advance Address by 8 to 0x270a and Line by 4 to 1476
  [0x0000100e]  Set column to 24
  [0x00001010]  Special opcode 118: advance Address by 8 to 0x2712 and Line by 1 to 1477
  [0x00001011]  Set column to 10
  [0x00001013]  Special opcode 89: advance Address by 6 to 0x2718 and Line by 0 to 1477
  [0x00001014]  Set column to 5
  [0x00001016]  Special opcode 91: advance Address by 6 to 0x271e and Line by 2 to 1479
  [0x00001017]  Set column to 6
  [0x00001019]  Special opcode 91: advance Address by 6 to 0x2724 and Line by 2 to 1481
  [0x0000101a]  Set column to 13
  [0x0000101c]  Special opcode 174: advance Address by 12 to 0x2730 and Line by 1 to 1482
  [0x0000101d]  Set column to 16
  [0x0000101f]  Special opcode 205: advance Address by 14 to 0x273e and Line by 4 to 1486
  [0x00001020]  Set column to 6
  [0x00001022]  Special opcode 119: advance Address by 8 to 0x2746 and Line by 2 to 1488
  [0x00001023]  Set column to 14
  [0x00001025]  Special opcode 148: advance Address by 10 to 0x2750 and Line by 3 to 1491
  [0x00001026]  Set column to 12
  [0x00001028]  Special opcode 75: advance Address by 5 to 0x2755 and Line by 0 to 1491
  [0x00001029]  Special opcode 91: advance Address by 6 to 0x275b and Line by 2 to 1493
  [0x0000102a]  Set column to 24
  [0x0000102c]  Special opcode 174: advance Address by 12 to 0x2767 and Line by 1 to 1494
  [0x0000102d]  Set column to 34
  [0x0000102f]  Special opcode 145: advance Address by 10 to 0x2771 and Line by 0 to 1494
  [0x00001030]  Set column to 12
  [0x00001032]  Special opcode 75: advance Address by 5 to 0x2776 and Line by 0 to 1494
  [0x00001033]  Set column to 25
  [0x00001035]  Special opcode 133: advance Address by 9 to 0x277f and Line by 2 to 1496
  [0x00001036]  Set column to 7
  [0x00001038]  Special opcode 89: advance Address by 6 to 0x2785 and Line by 0 to 1496
  [0x00001039]  Set column to 8
  [0x0000103b]  Advance Line by 9 to 1505
  [0x0000103d]  Special opcode 75: advance Address by 5 to 0x278a and Line by 0 to 1505
  [0x0000103e]  Set column to 15
  [0x00001040]  Special opcode 90: advance Address by 6 to 0x2790 and Line by 1 to 1506
  [0x00001041]  Set column to 28
  [0x00001043]  Special opcode 105: advance Address by 7 to 0x2797 and Line by 2 to 1508
  [0x00001044]  Set column to 37
  [0x00001046]  Special opcode 117: advance Address by 8 to 0x279f and Line by 0 to 1508
  [0x00001047]  Set column to 18
  [0x00001049]  Special opcode 47: advance Address by 3 to 0x27a2 and Line by 0 to 1508
  [0x0000104a]  Set column to 28
  [0x0000104c]  Special opcode 121: advance Address by 8 to 0x27aa and Line by 4 to 1512
  [0x0000104d]  Set column to 18
  [0x0000104f]  Special opcode 117: advance Address by 8 to 0x27b2 and Line by 0 to 1512
  [0x00001050]  Set column to 13
  [0x00001052]  Special opcode 90: advance Address by 6 to 0x27b8 and Line by 1 to 1513
  [0x00001053]  Set column to 8
  [0x00001055]  Special opcode 91: advance Address by 6 to 0x27be and Line by 2 to 1515
  [0x00001056]  Set column to 15
  [0x00001058]  Special opcode 118: advance Address by 8 to 0x27c6 and Line by 1 to 1516
  [0x00001059]  Set column to 6
  [0x0000105b]  Special opcode 124: advance Address by 8 to 0x27ce and Line by 7 to 1523
  [0x0000105c]  Set column to 5
  [0x0000105e]  Special opcode 75: advance Address by 5 to 0x27d3 and Line by 0 to 1523
  [0x0000105f]  Set column to 12
  [0x00001061]  Special opcode 62: advance Address by 4 to 0x27d7 and Line by 1 to 1524
  [0x00001062]  Set column to 9
  [0x00001064]  Special opcode 106: advance Address by 7 to 0x27de and Line by 3 to 1527
  [0x00001065]  Set column to 1
  [0x00001067]  Special opcode 48: advance Address by 3 to 0x27e1 and Line by 1 to 1528
  [0x00001068]  Advance PC by 2 to 0x27e3
  [0x0000106a]  Extended opcode 1: End of Sequence


Contents of the .debug_str section:

  0x00000000 746f7461 6c006576 656e7400 6c6f6e67 total.event.long
  0x00000010 73747200 5f756e75 73656432 00696e66 str._unused2.inf
  0x00000020 6f737472 696e6700 636f6c6f 72426c61 ostring.colorBla
  0x00000030 636b005f 66696c65 6e6f006d 65737361 ck._fileno.messa
  0x00000040 6765006d 73675f74 00544b5f 4e45574c ge.msg_t.TK_NEWL
  0x00000050 494e4500 4f505f42 414e4400 5356435f INE.OP_BAND.SVC_
  0x00000060 52617465 52657374 6f726554 6f786963 RateRestoreToxic
  0x00000070 0075706d 6f766500 766d5f72 74436865 .upmove.vm_rtChe
  0x00000080 636b7300 4f505f45 4e544552 00636f6c cks.OP_ENTER.col
  0x00000090 6f725965 6c6c6f77 004f505f 45510063 orYellow.OP_EQ.c
  0x000000a0 6f6d6d61 6e645469 6d65006e 65746368 ommandTime.netch
  0x000000b0 616e5f73 74617274 5f717565 75650073 an_start_queue.s
  0x000000c0 65727665 72537461 74655f74 0054525f erverState_t.TR_
  0x000000d0 4c494e45 41520074 72547970 65006472 LINEAR.trType.dr
  0x000000e0 6f70706f 696e7400 5f73686f 72746275 oppoint._shortbu
  0x000000f0 6600706d 6f76655f 6672616d 65636f75 f.pmove_framecou
  0x00000100 6e740073 6f6c6964 0074696d 65526573 nt.solid.timeRes
  0x00000110 69647561 6c004e41 5f495000 4e415f55 idual.NA_IP.NA_U
  0x00000120 4e535045 43006761 6d656469 72006f75 NSPEC.gamedir.ou
  0x00000130 74707574 62756600 77656170 6f6e7374 tputbuf.weaponst
  0x00000140 61746500 746f7273 6f54696d 65720053 ate.torsoTimer.S
  0x00000150 565f5472 61636b43 76617243 68616e67 V_TrackCvarChang
  0x00000160 65730061 72677074 72006e75 6d536e61 es.argptr.numSna
  0x00000170 7073686f 74456e74 69746965 7300646f pshotEntities.do
  0x00000180 776e6c6f 61644e61 6d650065 6e746974 wnloadName.entit
  0x00000190 79506172 7365506f 696e7400 5356435f yParsePoint.SVC_
  0x000001a0 52617465 52657374 6f726542 75727374 RateRestoreBurst
  0x000001b0 41646472 65737300 75696e74 31365f74 Address.uint16_t
  0x000001c0 00696e66 6f5f7261 7465006e 65787448 .info_rate.nextH
  0x000001d0 65617274 62656174 54696d65 006c6f6f eartbeatTime.loo
  0x000001e0 70536f75 6e64006f 76657266 6c6f775f pSound.overflow_
  0x000001f0 6172675f 61726561 00636f6d 5f646564 arg_area.com_ded
  0x00000200 69636174 6564005f 666c6167 73006578 icated._flags.ex
  0x00000210 7465726e 616c4576 656e7450 61726d00 ternalEventParm.
  0x00000220 6e657874 0073765f 70757265 00616e67 next.sv_pure.ang
  0x00000230 6c657332 00726567 5f736176 655f6172 les2.reg_save_ar
  0x00000240 6561005f 5f6f6666 5f74004f 505f4e45 ea.__off_t.OP_NE
  0x00000250 4746004f 505f4e45 47490073 765f7061 GF.OP_NEGI.sv_pa
  0x00000260 636b6574 64656c61 79006375 7272656e cketdelay.curren
  0x00000270 7453746f 72616765 506f7369 74696f6e tStoragePosition
  0x00000280 006e756d 426c6f63 6b730047 414d455f .numBlocks.GAME_
  0x00000290 53485554 444f574e 004f505f 424c4f43 SHUTDOWN.OP_BLOC
  0x000002a0 4b5f434f 50590074 72426173 65007376 K_COPY.trBase.sv
  0x000002b0 5f6c616e 466f7263 65526174 6500646f _lanForceRate.do
  0x000002c0 776e6c6f 61644375 7272656e 74426c6f wnloadCurrentBlo
  0x000002d0 636b0065 78746572 6e616c45 76656e74 ck.externalEvent
  0x000002e0 0054525f 53544154 494f4e41 5259005f .TR_STATIONARY._
  0x000002f0 6c6f636b 0053565f 45787061 6e644e65 lock.SV_ExpandNe
  0x00000300 776c696e 65730073 765f6d61 78636c69 wlines.sv_maxcli
  0x00000310 656e7473 50657249 50005356 435f496e entsPerIP.SVC_In
  0x00000320 666f0067 72617669 74790043 56475f52 fo.gravity.CVG_R
  0x00000330 454e4445 52455200 64616d61 67654576 ENDERER.damageEv
  0x00000340 656e7400 53565f43 616c6350 696e6773 ent.SV_CalcPings
  0x00000350 00766965 77686569 67687400 62797465 .viewheight.byte
  0x00000360 64697273 00636f6d 70617400 66735f6c dirs.compat.fs_l
  0x00000370 61737450 616b496e 64657800 76656333 astPakIndex.vec3
  0x00000380 5f6f7269 67696e00 5f5f6275 696c7469 _origin.__builti
  0x00000390 6e5f7661 5f6c6973 74005356 435f5261 n_va_list.SVC_Ra
  0x000003a0 74655265 73746f72 65546f78 69634164 teRestoreToxicAd
  0x000003b0 64726573 73007374 61636b42 6f74746f dress.stackBotto
  0x000003c0 6d006e75 6d53796d 626f6c73 00696e74 m.numSymbols.int
  0x000003d0 33325f74 004f505f 47544600 4f505f47 32_t.OP_GTF.OP_G
  0x000003e0 54490072 61746544 656c6179 6564004e TI.rateDelayed.N
  0x000003f0 415f4950 36004f50 5f475455 004f505f A_IP6.OP_GTU.OP_
  0x00000400 53455831 36006c61 73745469 6d650053 SEX16.lastTime.S
  0x00000410 565f5365 6e645365 72766572 436f6d6d V_SendServerComm
  0x00000420 616e6400 61757468 6f72697a 65416464 and.authorizeAdd
  0x00000430 72657373 00766563 5f740070 72697661 ress.vec_t.priva
  0x00000440 7465466c 61670049 545f4845 414c5448 teFlag.IT_HEALTH
  0x00000450 006c6173 7456616c 69644672 616d6500 .lastValidFrame.
  0x00000460 5f494f5f 77726974 655f656e 64006c61 _IO_write_end.la
  0x00000470 73744469 73636f6e 6e656374 54696d65 stDisconnectTime
  0x00000480 00636f6d 5f646576 656c6f70 6572005f .com_developer._
  0x00000490 5f76615f 6c697374 5f746167 00627974 _va_list_tag.byt
  0x000004a0 65006a75 6d707061 645f656e 74005452 e.jumppad_ent.TR
  0x000004b0 5f475241 56495459 0073765f 646c5261 _GRAVITY.sv_dlRa
  0x000004c0 74650069 6e646578 006d7367 54696d65 te.index.msgTime
  0x000004d0 006c6567 7354696d 6572005f 5f747a6e .legsTimer.__tzn
  0x000004e0 616d6500 616e676c 6573006c 61737443 ame.angles.lastC
  0x000004f0 6c69656e 74436f6d 6d616e64 00657665 lientCommand.eve
  0x00000500 6e745365 7175656e 6365006e 6574656e ntSequence.neten
  0x00000510 61626c65 64004741 4d455f49 4e495400 abled.GAME_INIT.
  0x00000520 75736572 636d645f 73007573 6572636d usercmd_s.usercm
  0x00000530 645f7400 6576656e 74506172 6d006461 d_t.eventParm.da
  0x00000540 74614261 73650054 4b5f5354 52494e47 taBase.TK_STRING
  0x00000550 006d6f64 69666963 6174696f 6e436f75 .modificationCou
  0x00000560 6e740063 75727265 6e74536e 61707368 nt.currentSnapsh
  0x00000570 6f744672 616d6500 6f757462 6f756e64 otFrame.outbound
  0x00000580 52617465 4c696d69 74004f50 5f49474e RateLimit.OP_IGN
  0x00000590 4f524500 73765f61 6c6c6f77 446f776e ORE.sv_allowDown
  0x000005a0 6c6f6164 004e415f 42414400 7376466c load.NA_BAD.svFl
  0x000005b0 61677300 4e535f53 45525645 52006d61 ags.NS_SERVER.ma
  0x000005c0 78730074 79706500 6672616d 654d7365 xs.type.frameMse
  0x000005d0 63007379 735f6572 726c6973 74004f50 c.sys_errlist.OP
  0x000005e0 5f4c5449 00646179 6c696768 74005f5f _LTI.daylight.__
  0x000005f0 75696e74 31365f74 00707265 63616368 uint16_t.precach
  0x00000600 65730073 765f6d69 6e526174 65002f6d es.sv_minRate./m
  0x00000610 65646961 2f574433 74625553 42335f30 edia/WD3tbUSB3_0
  0x00000620 302f434f 44452f63 70702f5f 5f532f77 0/CODE/cpp/__S/w
  0x00000630 6f726b73 70616365 2f517561 6b653365 orkspace/Quake3e
  0x00000640 00766d49 6e646578 5f74006e 756d4a75 .vmIndex_t.numJu
  0x00000650 6d705461 626c6554 61726765 74730073 mpTableTargets.s
  0x00000660 6e617073 686f7443 6f756e74 6572004f napshotCounter.O
  0x00000670 505f4d55 4c460053 565f4d61 73746572 P_MULF.SV_Master
  0x00000680 48656172 74626561 74004f50 5f4d554c Heartbeat.OP_MUL
  0x00000690 49006162 736d6178 00706963 6b75705f I.absmax.pickup_
  0x000006a0 736f756e 64004f50 5f4d554c 55004f50 sound.OP_MULU.OP
  0x000006b0 5f42434f 4d005f5f 676e7563 5f76615f _BCOM.__gnuc_va_
  0x000006c0 6c697374 00646c4e 65787452 6f756e64 list.dlNextRound
  0x000006d0 00726174 654c696d 69745f73 00636f6c .rateLimit_s.col
  0x000006e0 6f72426c 7565005f 63686169 6e006d65 orBlue._chain.me
  0x000006f0 73736167 6541636b 6e6f776c 65646765 ssageAcknowledge
  0x00000700 00435647 5f4d4158 00544b5f 414e4400 .CVG_MAX.TK_AND.
  0x00000710 6d657373 61676553 656e7400 73765f70 messageSent.sv_p
  0x00000720 61645061 636b6574 7300636f 6c6f7252 adPackets.colorR
  0x00000730 65640073 636f7065 5f696400 636f6d5f ed.scope_id.com_
  0x00000740 6275696c 64536372 69707400 756e7369 buildScript.unsi
  0x00000750 676e6564 20636861 7200636c 69656e74 gned char.client
  0x00000760 7300696e 69746961 6c697a65 64005f49 s.initialized._I
  0x00000770 4f5f6c6f 636b5f74 00435647 5f4e4f4e O_lock_t.CVG_NON
  0x00000780 4500636f 6d5f7370 65656473 00666c6f E.com_speeds.flo
  0x00000790 61740061 7265616e 756d3200 73657276 at.areanum2.serv
  0x000007a0 65724964 0070696e 67004f50 5f42584f erId.ping.OP_BXO
  0x000007b0 5200636f 6d5f6a6f 75726e61 6c006465 R.com_journal.de
  0x000007c0 6c746100 766d5379 6d626f6c 5f730067 lta.vmSymbol_s.g
  0x000007d0 656e7469 74795369 7a650054 4b5f4d41 entitySize.TK_MA
  0x000007e0 54434800 4f505f41 4444006d 73674275 TCH.OP_ADD.msgBu
  0x000007f0 66666572 00616c6c 6f776f76 6572666c ffer.allowoverfl
  0x00000800 6f77006e 756d6265 72006d61 7873697a ow.number.maxsiz
  0x00000810 65006172 65616279 74657300 646f776e e.areabytes.down
  0x00000820 6c6f6164 53656e64 54696d65 00636f75 loadSendTime.cou
  0x00000830 6e747279 0072656d 6f746541 64647265 ntry.remoteAddre
  0x00000840 7373004f 505f5355 42007374 61636b00 ss.OP_SUB.stack.
  0x00000850 47414d45 5f434c49 454e545f 5448494e GAME_CLIENT_THIN
  0x00000860 4b006375 7272656e 74416e67 6c657300 K.currentAngles.
  0x00000870 63766172 5f6d6f64 69666965 64466c61 cvar_modifiedFla
  0x00000880 67730063 6865636b 73756d46 65656400 gs.checksumFeed.
  0x00000890 6c6f6361 73650073 765f6d61 706e616d locase.sv_mapnam
  0x000008a0 6500756e 73656e74 46726167 6d656e74 e.unsentFragment
  0x000008b0 7300636d 645f7261 74650074 7244656c s.cmd_rate.trDel
  0x000008c0 7461005f 494f5f77 72697465 5f707472 ta._IO_write_ptr
  0x000008d0 00636f6e 74656e74 7300696e 636f6d69 .contents.incomi
  0x000008e0 6e675365 7175656e 6365004f 505f4c45 ngSequence.OP_LE
  0x000008f0 41564500 72657365 74537472 696e6700 AVE.resetString.
  0x00000900 72656c69 61626c65 53657175 656e6365 reliableSequence
  0x00000910 0069636f 6e00636c 69656e74 4e756d00 .icon.clientNum.
  0x00000920 76615f6c 69737400 66726f6d 00737461 va_list.from.sta
  0x00000930 72745469 6d650054 4b5f5343 4f50455f rtTime.TK_SCOPE_
  0x00000940 434c4f53 45007472 54797065 5f740073 CLOSE.trType_t.s
  0x00000950 697a6500 67726170 706c6550 6f696e74 ize.grapplePoint
  0x00000960 00535643 5f52656c 696e6b54 6f486561 .SVC_RelinkToHea
  0x00000970 64006974 656d5479 70655f74 0046494c d.itemType_t.FIL
  0x00000980 4500636c 69656e74 5f730063 6c69656e E.client_s.clien
  0x00000990 745f7400 64656c61 7954006c 61737453 t_t.delayT.lastS
  0x000009a0 6e617073 686f7454 696d6500 6c656773 napshotTime.legs
  0x000009b0 416e696d 0049545f 484f4c44 41424c45 Anim.IT_HOLDABLE
  0x000009c0 0053565f 5061636b 65744576 656e7400 .SV_PacketEvent.
  0x000009d0 70726f67 72616d53 7461636b 00544b5f programStack.TK_
  0x000009e0 4e455100 47414d45 5f455850 4f52545f NEQ.GAME_EXPORT_
  0x000009f0 4c415354 00636f64 654c656e 67746800 LAST.codeLength.
  0x00000a00 73697a65 5f740076 6d53796d 626f6c5f size_t.vmSymbol_
  0x00000a10 74007368 61726564 456e7469 74795f74 t.sharedEntity_t
  0x00000a20 004f505f 4c454600 53565f43 6f6e6e65 .OP_LEF.SV_Conne
  0x00000a30 6374696f 6e6c6573 73506163 6b657400 ctionlessPacket.
  0x00000a40 4f505f4c 45490061 62736d69 6e006e65 OP_LEI.absmin.ne
  0x00000a50 74737263 5f740073 6e617046 6c616753 tsrc_t.snapFlagS
  0x00000a60 65727665 72426974 00627563 6b657473 erverBit.buckets
  0x00000a70 00646573 74726f79 004f505f 4c455500 .destroy.OP_LEU.
  0x00000a80 675f636f 6c6f725f 7461626c 65004f50 g_color_table.OP
  0x00000a90 5f4d4f44 49005356 435f5261 74654472 _MODI.SVC_RateDr
  0x00000aa0 6f704164 64726573 73007376 5f72636f opAddress.sv_rco
  0x00000ab0 6e506173 73776f72 6400646f 776e6c6f nPassword.downlo
  0x00000ac0 6164436c 69656e74 426c6f63 6b00636f adClientBlock.co
  0x00000ad0 6d5f6572 726f7245 6e746572 65640063 m_errorEntered.c
  0x00000ae0 6f6d5f73 765f7275 6e6e696e 67007469 om_sv_running.ti
  0x00000af0 6d655f62 61636b65 6e640073 765f7469 me_backend.sv_ti
  0x00000b00 6d656f75 7400646f 776e6c6f 6164426c meout.downloadBl
  0x00000b10 6f636b53 697a6500 64726f70 70656400 ockSize.dropped.
  0x00000b20 74724475 72617469 6f6e005f 494f5f73 trDuration._IO_s
  0x00000b30 6176655f 62617365 00776f72 6c645f6d ave_base.world_m
  0x00000b40 6f64656c 004f505f 52534849 00636f6d odel.OP_RSHI.com
  0x00000b50 5f766572 73696f6e 004f505f 52534855 _version.OP_RSHU
  0x00000b60 006c6173 74436c75 73746572 00636c69 .lastCluster.cli
  0x00000b70 656e7400 646f776e 6c6f6164 0053565f ent.download.SV_
  0x00000b80 53656e64 51756575 65645061 636b6574 SendQueuedPacket
  0x00000b90 7300706c 61796572 4c656e67 7468004f s.playerLength.O
  0x00000ba0 505f4d41 58006f72 6967696e 32007261 P_MAX.origin2.ra
  0x00000bb0 74654c69 6d69745f 7400616d 6d6f0064 teLimit_t.ammo.d
  0x00000bc0 656c7461 5f616e67 6c657300 544b5f4c elta_angles.TK_L
  0x00000bd0 5445004f 505f4356 46490053 535f4445 TE.OP_CVFI.SS_DE
  0x00000be0 4144005f 77696465 5f646174 6100636f AD._wide_data.co
  0x00000bf0 6d5f6672 616d6554 696d6500 626f6243 m_frameTime.bobC
  0x00000c00 79636c65 004e415f 42524f41 44434153 ycle.NA_BROADCAS
  0x00000c10 54004e41 5f4d554c 54494341 53543600 T.NA_MULTICAST6.
  0x00000c20 49545f57 4541504f 4e006261 73656c69 IT_WEAPON.baseli
  0x00000c30 6e655573 65640063 6f6e6669 67737472 neUsed.configstr
  0x00000c40 696e6773 00657870 69726564 52656d61 ings.expiredRema
  0x00000c50 696e6465 72006e65 7874456e 74697479 inder.nextEntity
  0x00000c60 496e576f 726c6453 6563746f 7200646f InWorldSector.do
  0x00000c70 776e6c6f 6164454f 46006e65 74616472 wnloadEOF.netadr
  0x00000c80 5f740047 414d455f 434c4945 4e545f55 _t.GAME_CLIENT_U
  0x00000c90 53455249 4e464f5f 4348414e 47454400 SERINFO_CHANGED.
  0x00000ca0 736e6170 4672616d 6573006f 76657266 snapFrames.overf
  0x00000cb0 6c6f7765 64007369 676e6761 6d007379 lowed.signgam.sy
  0x00000cc0 7374656d 43616c6c 00657861 63744461 stemCall.exactDa
  0x00000cd0 74614c65 6e677468 006f7053 7461636b taLength.opStack
  0x00000ce0 00667261 6d657300 636f6d5f 74696d65 .frames.com_time
  0x00000cf0 7363616c 65007661 6c756500 47414d45 scale.value.GAME
  0x00000d00 5f434c49 454e545f 434f4d4d 414e4400 _CLIENT_COMMAND.
  0x00000d10 4e415f42 4f540061 72656162 69747300 NA_BOT.areabits.
  0x00000d20 73796d4e 616d6500 64617461 4c656e67 symName.dataLeng
  0x00000d30 74680047 414d455f 434c4945 4e545f43 th.GAME_CLIENT_C
  0x00000d40 4f4e4e45 43540061 7265616e 756d0072 ONNECT.areanum.r
  0x00000d50 65616463 6f756e74 00747254 696d6500 eadcount.trTime.
  0x00000d60 72617465 4d736563 00636f6d 5f6a6f75 rateMsec.com_jou
  0x00000d70 726e616c 44617461 46696c65 0074696d rnalDataFile.tim
  0x00000d80 655f6761 6d650064 61746141 6c6c6f63 e_game.dataAlloc
  0x00000d90 006c6173 74436c69 656e7443 6f6d6d61 .lastClientComma
  0x00000da0 6e645374 72696e67 00667261 676d656e ndString.fragmen
  0x00000db0 74536571 75656e63 6500696e 74656765 tSequence.intege
  0x00000dc0 7200646f 776e6c6f 61645369 7a65006e r.downloadSize.n
  0x00000dd0 65746368 616e5f62 75666665 725f7300 etchan_buffer_s.
  0x00000de0 6e657463 68616e5f 62756666 65725f74 netchan_buffer_t
  0x00000df0 0074696d 656f7574 436f756e 7400646c .timeoutCount.dl
  0x00000e00 6c48616e 646c6500 47414d45 5f434f4e lHandle.GAME_CON
  0x00000e10 534f4c45 5f434f4d 4d414e44 0054525f SOLE_COMMAND.TR_
  0x00000e20 53494e45 006c696e 6b656400 49545f50 SINE.linked.IT_P
  0x00000e30 45525349 5354414e 545f504f 57455255 ERSISTANT_POWERU
  0x00000e40 50004954 5f41524d 4f52005f 5f74696d P.IT_ARMOR.__tim
  0x00000e50 657a6f6e 65004f50 5f43414c 4c007472 ezone.OP_CALL.tr
  0x00000e60 616a6563 746f7279 5f74006f 74686572 ajectory_t.other
  0x00000e70 456e7469 74794e75 6d320064 6c6c5379 EntityNum2.dllSy
  0x00000e80 7363616c 6c5f7400 63766172 56616c69 scall_t.cvarVali
  0x00000e90 6461746f 725f7400 636c7573 7465726e dator_t.clustern
  0x00000ea0 756d7300 72657374 61727454 696d6500 ums.restartTime.
  0x00000eb0 74696d65 5f66726f 6e74656e 64007469 time_frontend.ti
  0x00000ec0 6d653200 63735570 64617465 64004f50 me2.csUpdated.OP
  0x00000ed0 5f554e44 45460073 76456e74 69746965 _UNDEF.svEntitie
  0x00000ee0 73006461 74614d61 736b0067 616d6573 s.dataMask.games
  0x00000ef0 74617465 5f726174 65007365 72766572 tate_rate.server
  0x00000f00 54696d65 006c696e 6b636f75 6e740063 Time.linkcount.c
  0x00000f10 72633332 73756d00 4f505f42 5245414b rc32sum.OP_BREAK
  0x00000f20 00737464 65727200 71626f6f 6c65616e .stderr.qboolean
  0x00000f30 006c6174 63686564 53747269 6e67006e .latchedString.n
  0x00000f40 616d6500 6a756d70 7061645f 6672616d ame.jumppad_fram
  0x00000f50 65006769 54616700 5356435f 52617465 e.giTag.SVC_Rate
  0x00000f60 4c696d69 74416464 72657373 004f505f LimitAddress.OP_
  0x00000f70 41524700 5f494f5f 73617665 5f656e64 ARG._IO_save_end
  0x00000f80 00646f77 6e6c6f61 64436f75 6e740073 .downloadCount.s
  0x00000f90 696e676c 65436c69 656e7400 65787069 ingleClient.expi
  0x00000fa0 72656400 564d5f47 414d4500 646c5374 red.VM_GAME.dlSt
  0x00000fb0 61727400 5356435f 4275636b 6574466f art.SVC_BucketFo
  0x00000fc0 72416464 72657373 006a756d 70546162 rAddress.jumpTab
  0x00000fd0 6c655461 72676574 73007376 5f6d6173 leTargets.sv_mas
  0x00000fe0 74657200 7374646f 75740066 705f6f66 ter.stdout.fp_of
  0x00000ff0 66736574 004f505f 4d4f4455 00706572 fset.OP_MODU.per
  0x00001000 73697374 616e7400 73765f68 6f73746e sistant.sv_hostn
  0x00001010 616d6500 67705f6f 66667365 7400746f ame.gp_offset.to
  0x00001020 78696300 54525f49 4e544552 504f4c41 xic.TR_INTERPOLA
  0x00001030 54450062 75636b65 74486173 68657300 TE.bucketHashes.
  0x00001040 656e7469 74795374 6174655f 7300656e entityState_s.en
  0x00001050 74697479 53746174 655f7400 74696d65 tityState_t.time
  0x00001060 56616c00 6f757467 6f696e67 53657175 Val.outgoingSequ
  0x00001070 656e6365 004f505f 434f4e53 5400636d ence.OP_CONST.cm
  0x00001080 645f6175 78004353 5f434f4e 4e454354 d_aux.CS_CONNECT
  0x00001090 45440072 69676874 6d6f7665 0072656c ED.rightmove.rel
  0x000010a0 6961626c 6541636b 6e6f776c 65646765 iableAcknowledge
  0x000010b0 00706d5f 74797065 00656e74 73007368 .pm_type.ents.sh
  0x000010c0 6f727420 756e7369 676e6564 20696e74 ort unsigned int
  0x000010d0 00636c61 73736e61 6d650053 56435f52 .classname.SVC_R
  0x000010e0 656d6f74 65436f6d 6d616e64 00736967 emoteCommand.sig
  0x000010f0 6e656420 63686172 00736f63 6b006461 ned char.sock.da
  0x00001100 6d616765 50697463 68007374 61727400 magePitch.start.
  0x00001110 68756d61 6e73004f 505f4e45 46005356 humans.OP_NEF.SV
  0x00001120 435f5374 61747573 00736e61 7073686f C_Status.snapsho
  0x00001130 74467261 6d650073 74617475 73007265 tFrame.status.re
  0x00001140 6c696162 6c65436f 6d6d616e 64730073 liableCommands.s
  0x00001150 765f7265 636f6e6e 6563746c 696d6974 v_reconnectlimit
  0x00001160 00636f75 6e74004f 505f424f 52007374 .count.OP_BOR.st
  0x00001170 61747573 4c656e67 74680067 656e7469 atusLength.genti
  0x00001180 74696573 00686173 68496e64 65780061 ties.hashIndex.a
  0x00001190 64647265 7373005f 5f6f6666 36345f74 ddress.__off64_t
  0x000011a0 00766563 335f7400 5f494f5f 72656164 .vec3_t._IO_read
  0x000011b0 5f626173 65005f6f 66667365 74007374 _base._offset.st
  0x000011c0 72696e67 006e6574 61647274 7970655f ring.netadrtype_
  0x000011d0 74007374 61746500 5f494f5f 6275665f t.state._IO_buf_
  0x000011e0 656e6400 65547970 65007374 61747300 end.eType.stats.
  0x000011f0 73765f6b 696c6c73 65727665 72007376 sv_killserver.sv
  0x00001200 5f6c6576 656c5469 6d655265 73657400 _levelTimeReset.
  0x00001210 4f505f4c 53480063 76617247 726f7570 OP_LSH.cvarGroup
  0x00001220 5f74005f 6d6f6465 005f494f 5f777269 _t._mode._IO_wri
  0x00001230 74655f62 61736500 6f776e65 724e756d te_base.ownerNum
  0x00001240 00696e73 74727563 74696f6e 506f696e .instructionPoin
  0x00001250 74657273 0047414d 455f5255 4e5f4652 ters.GAME_RUN_FR
  0x00001260 414d4500 66756e63 00435055 5f466c61 AME.func.CPU_Fla
  0x00001270 67730063 6f6d5f74 6f6b656e 74797065 gs.com_tokentype
  0x00001280 0053565f 466c7573 68526564 69726563 .SV_FlushRedirec
  0x00001290 7400636f 6c6f724d 6167656e 74610073 t.colorMagenta.s
  0x000012a0 765f666c 6f6f6450 726f7465 6374004f v_floodProtect.O
  0x000012b0 505f4c54 46004353 5f414354 49564500 P_LTF.CS_ACTIVE.
  0x000012c0 4e535f43 4c49454e 54004f50 5f4c5455 NS_CLIENT.OP_LTU
  0x000012d0 0074696d 65007174 72756500 756e7365 .time.qtrue.unse
  0x000012e0 6e744275 66666572 00637572 73697a65 ntBuffer.cursize
  0x000012f0 0076616c 69640073 765f636c 69656e74 .valid.sv_client
  0x00001300 544c4400 53565f52 65737461 7274006c TLD.SV_Restart.l
  0x00001310 6f6e6720 696e7400 6e657463 68616e5f ong int.netchan_
  0x00001320 656e645f 71756575 6500544b 5f47454e end_queue.TK_GEN
  0x00001330 45474943 00636865 636b7375 6d466565 EGIC.checksumFee
  0x00001340 64536572 76657249 64007669 6577616e dServerId.viewan
  0x00001350 676c6573 00736572 7665725f 74005f49 gles.server_t._I
  0x00001360 4f5f6d61 726b6572 00726573 74617274 O_marker.restart
  0x00001370 65645365 72766572 4964006d 61737465 edServerId.maste
  0x00001380 72526573 6f6c7665 54696d65 00706c61 rResolveTime.pla
  0x00001390 79657253 74617465 5f730070 6c617965 yerState_s.playe
  0x000013a0 72537461 74655f74 006d7365 6300736e rState_t.msec.sn
  0x000013b0 61707368 6f744d73 65630066 6f727761 apshotMsec.forwa
  0x000013c0 72646d6f 76650043 535f5052 494d4544 rdmove.CS_PRIMED
  0x000013d0 0073765f 70726976 61746543 6c69656e .sv_privateClien
  0x000013e0 7473006a 75737443 6f6e6e65 63746564 ts.justConnected
  0x000013f0 00696e74 7074725f 74006672 61676d65 .intptr_t.fragme
  0x00001400 6e744275 66666572 00544b5f 454f4600 ntBuffer.TK_EOF.
  0x00001410 75696e74 33325f74 00637572 72656e74 uint32_t.current
  0x00001420 4f726967 696e0067 656e7469 74790053 Origin.gentity.S
  0x00001430 56435f52 61746544 726f7000 5f494f5f VC_RateDrop._IO_
  0x00001440 636f6465 63767400 564d5f43 4f554e54 codecvt.VM_COUNT
  0x00001450 0064616d 61676543 6f756e74 00696e74 .damageCount.int
  0x00001460 65727661 6c00636f 6c6f7243 79616e00 erval.colorCyan.
  0x00001470 53565f43 6865636b 54696d65 6f757473 SV_CheckTimeouts
  0x00001480 00637572 72467261 6d65006c 6f6e6720 .currFrame.long 
  0x00001490 646f7562 6c650076 656c6f63 69747900 double.velocity.
  0x000014a0 6e756d5f 656e7469 74696573 00686173 num_entities.has
  0x000014b0 68507265 76006765 6e657269 63310074 hPrev.generic1.t
  0x000014c0 6f6b656e 54797065 5f74006c 61737443 okenType_t.lastC
  0x000014d0 6f6e6e65 63745469 6d650077 6f726c64 onnectTime.world
  0x000014e0 53656374 6f720053 535f4741 4d450067 Sector.SS_GAME.g
  0x000014f0 69547970 65007665 63345f74 006c6f6e iType.vec4_t.lon
  0x00001500 6720756e 7369676e 65642069 6e74004f g unsigned int.O
  0x00001510 505f4144 44460067 616d6543 6c69656e P_ADDF.gameClien
  0x00001520 74730064 6f776e6c 6f616442 6c6f636b ts.downloadBlock
  0x00001530 73006376 61725f73 00637661 725f7400 s.cvar_s.cvar_t.
  0x00001540 636c5f74 69746c65 00726561 736f6e00 cl_title.reason.
  0x00001550 4f505f4e 45007069 636b7570 5f6e616d OP_NE.pickup_nam
  0x00001560 65006368 61720071 75616e74 69747900 e.char.quantity.
  0x00001570 67726f75 6e64456e 74697479 4e756d00 groundEntityNum.
  0x00001580 544b5f45 51007374 64696e00 696e7374 TK_EQ.stdin.inst
  0x00001590 72756374 696f6e43 6f756e74 0072636f ructionCount.rco
  0x000015a0 6e506173 73776f72 64320065 78746572 nPassword2.exter
  0x000015b0 6e616c45 76656e74 54696d65 005f494f nalEventTime._IO
  0x000015c0 5f627566 5f626173 65006769 74656d5f _buf_base.gitem_
  0x000015d0 73004356 5f4d4158 00756e73 656e7446 s.CV_MAX.unsentF
  0x000015e0 7261676d 656e7453 74617274 00656e74 ragmentStart.ent
  0x000015f0 69747945 76656e74 53657175 656e6365 ityEventSequence
  0x00001600 0049545f 504f5745 52555000 5f494f5f .IT_POWERUP._IO_
  0x00001610 72656164 5f656e64 00617869 73446566 read_end.axisDef
  0x00001620 61756c74 006d6f64 69666965 64006861 ault.modified.ha
  0x00001630 73680064 6c6c5379 7363616c 6c005356 sh.dllSyscall.SV
  0x00001640 5f467261 6d654d73 6563005f 494f5f46 _FrameMsec._IO_F
  0x00001650 494c4500 67697465 6d5f7400 636f6c6f ILE.gitem_t.colo
  0x00001660 72576869 7465006c 61737453 656e7453 rWhite.lastSentS
  0x00001670 697a6500 636f6c6f 724d6447 72657900 ize.colorMdGrey.
  0x00001680 5f494f5f 77696465 5f646174 61006d65 _IO_wide_data.me
  0x00001690 73736167 6541636b 65640074 7a6e616d ssageAcked.tznam
  0x000016a0 6500656e 74727950 6f696e74 00636f6d e.entryPoint.com
  0x000016b0 70696c65 64004741 4d455f43 4c49454e piled.GAME_CLIEN
  0x000016c0 545f4449 53434f4e 4e454354 00544b5f T_DISCONNECT.TK_
  0x000016d0 47540061 706f7300 68617368 4e657874 GT.apos.hashNext
  0x000016e0 00636f6c 6f72446b 47726579 00636c69 .colorDkGrey.cli
  0x000016f0 656e7453 6e617073 686f745f 74006d6f entSnapshot_t.mo
  0x00001700 64656c69 6e646578 32006669 6c654861 delindex2.fileHa
  0x00001710 6e646c65 5f740069 734c414e 41646472 ndle_t.isLANAddr
  0x00001720 65737300 766d5f73 00766d5f 7400636c ess.vm_s.vm_t.cl
  0x00001730 69656e74 436f6d6d 616e6453 7472696e ientCommandStrin
  0x00001740 6700636f 6d5f6166 66696e69 74794d61 g.com_affinityMa
  0x00001750 736b0063 6f6c6f72 4c744772 65790073 sk.colorLtGrey.s
  0x00001760 765f6669 6c746572 005f5f70 61643500 v_filter.__pad5.
  0x00001770 544b5f53 434f5045 5f4f5045 4e00636f TK_SCOPE_OPEN.co
  0x00001780 6d5f7072 6f746f63 6f6c0077 6561706f m_protocol.weapo
  0x00001790 6e004356 5f465350 41544800 72656469 n.CV_FSPATH.redi
  0x000017a0 72656374 41646472 65737300 6e756d43 rectAddress.numC
  0x000017b0 6c757374 65727300 5f6d6172 6b657273 lusters._markers
  0x000017c0 0053565f 43686563 6b506175 73656400 .SV_CheckPaused.
  0x000017d0 53565f52 6174654d 73656300 6275636b SV_RateMsec.buck
  0x000017e0 65740070 6d5f666c 61677300 66726565 et.pm_flags.free
  0x000017f0 53746f72 61676545 6e746974 69657300 StorageEntities.
  0x00001800 66735f72 656f7264 65726564 005f636f fs_reordered._co
  0x00001810 64656376 74004f50 5f534558 3800646f decvt.OP_SEX8.do
  0x00001820 75626c65 0063616c 6c4c6576 656c0073 uble.callLevel.s
  0x00001830 6f756e64 73007376 5f706175 73656400 ounds.sv_paused.
  0x00001840 71706f72 74006672 616d654e 756d0073 qport.frameNum.s
  0x00001850 796d5661 6c756500 73765f66 70730064 ymValue.sv_fps.d
  0x00001860 6f776e6c 6f616458 6d697442 6c6f636b ownloadXmitBlock
  0x00001870 00564d5f 55490064 656d6f5f 70726f74 .VM_UI.demo_prot
  0x00001880 6f636f6c 73006f70 53746163 6b546f70 ocols.opStackTop
  0x00001890 00656e74 69747953 68617265 645f7400 .entityShared_t.
  0x000018a0 49545f41 4d4d4f00 73657276 65725374 IT_AMMO.serverSt
  0x000018b0 61746963 5f740073 70656564 0073765f atic_t.speed.sv_
  0x000018c0 6d617852 61746500 67726f75 70004954 maxRate.group.IT
  0x000018d0 5f424144 005f5f69 6e743332 5f74004f _BAD.__int32_t.O
  0x000018e0 505f5055 5348005f 5f75696e 7433325f P_PUSH.__uint32_
  0x000018f0 74006461 74610053 56435f52 6174654c t.data.SVC_RateL
  0x00001900 696d6974 0043535f 5a4f4d42 4945005f imit.CS_ZOMBIE._
  0x00001910 5f646179 6c696768 7400636f 6e737461 _daylight.consta
  0x00001920 6e744c69 67687400 4f505f4a 554d5000 ntLight.OP_JUMP.
  0x00001930 544b5f4c 5400626d 6f64656c 0073765f TK_LT.bmodel.sv_
  0x00001940 70726976 61746550 61737377 6f726400 privatePassword.
  0x00001950 6d696e73 00726573 74617274 696e6700 mins.restarting.
  0x00001960 776f726c 64536563 746f725f 73004f50 worldSector_s.OP
  0x00001970 5f4c4f43 414c006d 65737361 67655369 _LOCAL.messageSi
  0x00001980 7a650073 765f7368 7574646f 776e0062 ze.sv_shutdown.b
  0x00001990 7265616b 46756e63 74696f6e 00666f72 reakFunction.for
  0x000019a0 63654461 74614d61 736b0062 675f6974 ceDataMask.bg_it
  0x000019b0 656d6c69 7374006e 65746368 616e5f74 emlist.netchan_t
  0x000019c0 0064656c 74614d65 73736167 6500564d .deltaMessage.VM
  0x000019d0 5f434741 4d45005f 66726565 7265735f _CGAME._freeres_
  0x000019e0 62756600 474e5520 43313720 382e332e buf.GNU C17 8.3.
  0x000019f0 30202d6d 74756e65 3d67656e 65726963 0 -mtune=generic
  0x00001a00 202d6d61 7263683d 7838362d 3634202d  -march=x86-64 -
  0x00001a10 67202d4f 30006546 6c616773 004f505f g -O0.eFlags.OP_
  0x00001a20 4c4f4144 31004f50 5f4c4f41 4432004f LOAD1.OP_LOAD2.O
  0x00001a30 505f4c4f 41443400 6c6f6e67 206c6f6e P_LOAD4.long lon
  0x00001a40 6720756e 7369676e 65642069 6e740067 g unsigned int.g
  0x00001a50 616d6573 74617465 4d657373 6167654e amestateMessageN
  0x00001a60 756d006e 65746368 616e005f 6375725f um.netchan._cur_
  0x00001a70 636f6c75 6d6e0073 765f7265 66657265 column.sv_refere
  0x00001a80 6e636564 50616b4e 616d6573 006c6561 ncedPakNames.lea
  0x00001a90 6b794275 636b6574 5f730043 535f4652 kyBucket_s.CS_FR
  0x00001aa0 45450053 56435f48 61736846 6f724164 EE.SVC_HashForAd
  0x00001ab0 64726573 7300544b 5f4f5200 53535f4c dress.TK_OR.SS_L
  0x00001ac0 4f414449 4e47006c 61737455 73657263 OADING.lastUserc
  0x00001ad0 6d640064 656c7461 54007376 5f67616d md.deltaT.sv_gam
  0x00001ae0 65747970 65007379 6d626f6c 73005452 etype.symbols.TR
  0x00001af0 5f4c494e 4541525f 53544f50 00535643 _LINEAR_STOP.SVC
  0x00001b00 5f526174 65526573 746f7265 42757273 _RateRestoreBurs
  0x00001b10 74005f49 4f5f6261 636b7570 5f626173 t._IO_backup_bas
  0x00001b20 65007379 7363616c 6c5f7400 6368616c e.syscall_t.chal
  0x00001b30 6c656e67 65005f49 4f5f7265 61645f70 lenge._IO_read_p
  0x00001b40 74720070 6572696f 64004f50 5f474546 tr.period.OP_GEF
  0x00001b50 004f505f 47454900 706c6179 65720073 .OP_GEI.player.s
  0x00001b60 6e617073 686f7445 6e746974 69657300 napshotEntities.
  0x00001b70 4f505f45 5146004f 505f4745 55005f66 OP_EQF.OP_GEU._f
  0x00001b80 72656572 65735f6c 69737400 4f505f43 reeres_list.OP_C
  0x00001b90 56494600 73765f6f 75747075 74627566 VIF.sv_outputbuf
  0x00001ba0 00657665 6e745061 726d7300 636f6465 .eventParms.code
  0x00001bb0 42617365 0043565f 494e5445 47455200 Base.CV_INTEGER.
  0x00001bc0 74696d65 7a6f6e65 00636f6d 5f63616d timezone.com_cam
  0x00001bd0 6572614d 6f646500 4f505f44 49564600 eraMode.OP_DIVF.
  0x00001be0 6e617267 73004f50 5f444956 49007a6f nargs.OP_DIVI.zo
  0x00001bf0 6d626965 706f696e 7400636f 6c6f7247 mbiepoint.colorG
  0x00001c00 7265656e 004f505f 44495655 005f6f6c reen.OP_DIVU._ol
  0x00001c10 645f6f66 66736574 00627574 746f6e73 d_offset.buttons
  0x00001c20 006d6f76 656d656e 74446972 006d6f64 .movementDir.mod
  0x00001c30 656c696e 64657800 6c6f6e67 206c6f6e elindex.long lon
  0x00001c40 6720696e 7400636f 6d5f7669 65776c6f g int.com_viewlo
  0x00001c50 6700706f 72740053 565f4164 64536572 g.port.SV_AddSer
  0x00001c60 76657243 6f6d6d61 6e64005f 666c6167 verCommand._flag
  0x00001c70 7332004f 505f504f 5000544b 5f475445 s2.OP_POP.TK_GTE
  0x00001c80 00626173 656c696e 6500766d 46756e63 .baseline.vmFunc
  0x00001c90 5f740076 6d46756e 635f7500 564d5f42 _t.vmFunc_u.VM_B
  0x00001ca0 41440067 616d6543 6c69656e 7453697a AD.gameClientSiz
  0x00001cb0 65006275 72737400 75736572 696e666f e.burst.userinfo
  0x00001cc0 004e415f 4c4f4f50 4241434b 00636f6d .NA_LOOPBACK.com
  0x00001cd0 5f626c6f 6f640062 7265616b 436f756e _blood.breakCoun
  0x00001ce0 74007379 735f6e65 7272006f 6c645365 t.sys_nerr.oldSe
  0x00001cf0 72766572 54696d65 0047414d 455f434c rverTime.GAME_CL
  0x00001d00 49454e54 5f424547 494e0070 6d5f7469 IENT_BEGIN.pm_ti
  0x00001d10 6d650073 76456e74 6974795f 73007376 me.svEntity_s.sv
  0x00001d20 456e7469 74795f74 00636c69 656e7453 Entity_t.clientS
  0x00001d30 74617465 5f740064 65736372 69707469 tate_t.descripti
  0x00001d40 6f6e006d 61704e61 6d650071 66616c73 on.mapName.qfals
  0x00001d50 65006f72 6967696e 00746f72 736f416e e.origin.torsoAn
  0x00001d60 696d0062 675f6e75 6d497465 6d730073 im.bg_numItems.s
  0x00001d70 765f7365 72766572 69640073 765f6d61 v_serverid.sv_ma
  0x00001d80 78636c69 656e7473 0043565f 4e4f4e45 xclients.CV_NONE
  0x00001d90 00636c5f 63646b65 79004f50 5f535542 .cl_cdkey.OP_SUB
  0x00001da0 4600424f 5441495f 53544152 545f4652 F.BOTAI_START_FR
  0x00001db0 414d4500 73765f6d 61704368 65636b73 AME.sv_mapChecks
  0x00001dc0 756d0043 565f464c 4f415400 736e6170 um.CV_FLOAT.snap
  0x00001dd0 73686f74 4672616d 655f7300 736e6170 shotFrame_s.snap
  0x00001de0 73686f74 4672616d 655f7400 70757265 shotFrame_t.pure
  0x00001df0 41757468 656e7469 6300756e 73656e74 Authentic.unsent
  0x00001e00 4c656e67 74680065 76656e74 7300756e Length.events.un
  0x00001e10 7369676e 65642069 6e740063 6f646553 signed int.codeS
  0x00001e20 697a6500 64756d6d 79006f70 636f6465 ize.dummy.opcode
  0x00001e30 5f696e66 6f5f7300 6f746865 72456e74 _info_s.otherEnt
  0x00001e40 6974794e 756d006c 65616b79 4275636b ityNum.leakyBuck
  0x00001e50 65745f74 0049545f 5445414d 00636f64 et_t.IT_TEAM.cod
  0x00001e60 652f7365 72766572 2f73765f 6d61696e e/server/sv_main
  0x00001e70 2e63006f 70636f64 655f696e 666f5f74 .c.opcode_info_t
  0x00001e80 0073686f 72742069 6e74006c 61737453 .short int.lastS
  0x00001e90 656e7454 696d6500 4356475f 53455256 entTime.CVG_SERV
  0x00001ea0 45520073 765f7a6f 6d626965 74696d65 ER.sv_zombietime
  0x00001eb0 00707265 76005f76 7461626c 655f6f66 .prev._vtable_of
  0x00001ec0 66736574 00667261 6d65006c 61737450 fset.frame.lastP
  0x00001ed0 61636b65 7454696d 65006461 6d616765 acketTime.damage
  0x00001ee0 59617700 53565f46 72616d65 0070726f Yaw.SV_Frame.pro
  0x00001ef0 66696c65 436f756e 74007765 61706f6e fileCount.weapon
  0x00001f00 54696d65 0076616c 69646174 6f720072 Time.validator.r
  0x00001f10 61746500 6d617862 69747300 66726167 ate.maxbits.frag
  0x00001f20 6d656e74 4c656e67 7468004f 505f5354 mentLength.OP_ST
  0x00001f30 4f524531 004f505f 53544f52 4532004f ORE1.OP_STORE2.O
  0x00001f40 505f5354 4f524534 00666c61 67730067 P_STORE4.flags.g
  0x00001f50 6f744350 0053565f 4d617374 65725368 otCP.SV_MasterSh
  0x00001f60 7574646f 776e0054 4b5f5155 4f544544 utdown.TK_QUOTED
  0x00001f70 00706f77 65727570 7300              .powerups.

Contents of the .eh_frame section:


00000000 0000000000000014 00000000 CIE
  Version:               1
  Augmentation:          "zR"
  Code alignment factor: 1
  Data alignment factor: -8
  Return address column: 16
  Augmentation data:     1b
  DW_CFA_def_cfa: r7 (rsp) ofs 8
  DW_CFA_offset: r16 (rip) at cfa-8
  DW_CFA_nop
  DW_CFA_nop

00000018 000000000000001c 0000001c FDE cie=00000000 pc=0000000000000000..0000000000000099
  DW_CFA_advance_loc: 1 to 0000000000000001
  DW_CFA_def_cfa_offset: 16
  DW_CFA_offset: r6 (rbp) at cfa-16
  DW_CFA_advance_loc: 3 to 0000000000000004
  DW_CFA_def_cfa_register: r6 (rbp)
  DW_CFA_advance_loc1: 148 to 0000000000000098
  DW_CFA_def_cfa: r7 (rsp) ofs 8
  DW_CFA_nop
  DW_CFA_nop

00000038 000000000000001c 0000003c FDE cie=00000000 pc=0000000000000099..00000000000001ed
  DW_CFA_advance_loc: 1 to 000000000000009a
  DW_CFA_def_cfa_offset: 16
  DW_CFA_offset: r6 (rbp) at cfa-16
  DW_CFA_advance_loc: 3 to 000000000000009d
  DW_CFA_def_cfa_register: r6 (rbp)
  DW_CFA_advance_loc2: 335 to 00000000000001ec
  DW_CFA_def_cfa: r7 (rsp) ofs 8
  DW_CFA_nop

00000058 000000000000001c 0000005c FDE cie=00000000 pc=00000000000001ed..00000000000003ad
  DW_CFA_advance_loc: 1 to 00000000000001ee
  DW_CFA_def_cfa_offset: 16
  DW_CFA_offset: r6 (rbp) at cfa-16
  DW_CFA_advance_loc: 3 to 00000000000001f1
  DW_CFA_def_cfa_register: r6 (rbp)
  DW_CFA_advance_loc2: 443 to 00000000000003ac
  DW_CFA_def_cfa: r7 (rsp) ofs 8
  DW_CFA_nop

00000078 000000000000001c 0000007c FDE cie=00000000 pc=00000000000003ad..000000000000087c
  DW_CFA_advance_loc: 1 to 00000000000003ae
  DW_CFA_def_cfa_offset: 16
  DW_CFA_offset: r6 (rbp) at cfa-16
  DW_CFA_advance_loc: 3 to 00000000000003b1
  DW_CFA_def_cfa_register: r6 (rbp)
  DW_CFA_advance_loc2: 1226 to 000000000000087b
  DW_CFA_def_cfa: r7 (rsp) ofs 8
  DW_CFA_nop

00000098 000000000000001c 0000009c FDE cie=00000000 pc=000000000000087c..00000000000008b3
  DW_CFA_advance_loc: 1 to 000000000000087d
  DW_CFA_def_cfa_offset: 16
  DW_CFA_offset: r6 (rbp) at cfa-16
  DW_CFA_advance_loc: 3 to 0000000000000880
  DW_CFA_def_cfa_register: r6 (rbp)
  DW_CFA_advance_loc: 50 to 00000000000008b2
  DW_CFA_def_cfa: r7 (rsp) ofs 8
  DW_CFA_nop
  DW_CFA_nop
  DW_CFA_nop

000000b8 000000000000001c 000000bc FDE cie=00000000 pc=00000000000008b3..0000000000000960
  DW_CFA_advance_loc: 1 to 00000000000008b4
  DW_CFA_def_cfa_offset: 16
  DW_CFA_offset: r6 (rbp) at cfa-16
  DW_CFA_advance_loc: 3 to 00000000000008b7
  DW_CFA_def_cfa_register: r6 (rbp)
  DW_CFA_advance_loc1: 168 to 000000000000095f
  DW_CFA_def_cfa: r7 (rsp) ofs 8
  DW_CFA_nop
  DW_CFA_nop

000000d8 000000000000001c 000000dc FDE cie=00000000 pc=0000000000000960..0000000000000a3b
  DW_CFA_advance_loc: 1 to 0000000000000961
  DW_CFA_def_cfa_offset: 16
  DW_CFA_offset: r6 (rbp) at cfa-16
  DW_CFA_advance_loc: 3 to 0000000000000964
  DW_CFA_def_cfa_register: r6 (rbp)
  DW_CFA_advance_loc1: 214 to 0000000000000a3a
  DW_CFA_def_cfa: r7 (rsp) ofs 8
  DW_CFA_nop
  DW_CFA_nop

000000f8 000000000000001c 000000fc FDE cie=00000000 pc=0000000000000a3b..0000000000000d79
  DW_CFA_advance_loc: 1 to 0000000000000a3c
  DW_CFA_def_cfa_offset: 16
  DW_CFA_offset: r6 (rbp) at cfa-16
  DW_CFA_advance_loc: 3 to 0000000000000a3f
  DW_CFA_def_cfa_register: r6 (rbp)
  DW_CFA_advance_loc2: 825 to 0000000000000d78
  DW_CFA_def_cfa: r7 (rsp) ofs 8
  DW_CFA_nop

00000118 000000000000001c 0000011c FDE cie=00000000 pc=0000000000000d79..0000000000000e2b
  DW_CFA_advance_loc: 1 to 0000000000000d7a
  DW_CFA_def_cfa_offset: 16
  DW_CFA_offset: r6 (rbp) at cfa-16
  DW_CFA_advance_loc: 3 to 0000000000000d7d
  DW_CFA_def_cfa_register: r6 (rbp)
  DW_CFA_advance_loc1: 173 to 0000000000000e2a
  DW_CFA_def_cfa: r7 (rsp) ofs 8
  DW_CFA_nop
  DW_CFA_nop

00000138 000000000000001c 0000013c FDE cie=00000000 pc=0000000000000e2b..0000000000000e85
  DW_CFA_advance_loc: 1 to 0000000000000e2c
  DW_CFA_def_cfa_offset: 16
  DW_CFA_offset: r6 (rbp) at cfa-16
  DW_CFA_advance_loc: 3 to 0000000000000e2f
  DW_CFA_def_cfa_register: r6 (rbp)
  DW_CFA_advance_loc1: 85 to 0000000000000e84
  DW_CFA_def_cfa: r7 (rsp) ofs 8
  DW_CFA_nop
  DW_CFA_nop

00000158 000000000000001c 0000015c FDE cie=00000000 pc=0000000000000e85..0000000000000eb3
  DW_CFA_advance_loc: 1 to 0000000000000e86
  DW_CFA_def_cfa_offset: 16
  DW_CFA_offset: r6 (rbp) at cfa-16
  DW_CFA_advance_loc: 3 to 0000000000000e89
  DW_CFA_def_cfa_register: r6 (rbp)
  DW_CFA_advance_loc: 41 to 0000000000000eb2
  DW_CFA_def_cfa: r7 (rsp) ofs 8
  DW_CFA_nop
  DW_CFA_nop
  DW_CFA_nop

00000178 000000000000001c 0000017c FDE cie=00000000 pc=0000000000000eb3..0000000000000ee1
  DW_CFA_advance_loc: 1 to 0000000000000eb4
  DW_CFA_def_cfa_offset: 16
  DW_CFA_offset: r6 (rbp) at cfa-16
  DW_CFA_advance_loc: 3 to 0000000000000eb7
  DW_CFA_def_cfa_register: r6 (rbp)
  DW_CFA_advance_loc: 41 to 0000000000000ee0
  DW_CFA_def_cfa: r7 (rsp) ofs 8
  DW_CFA_nop
  DW_CFA_nop
  DW_CFA_nop

00000198 000000000000001c 0000019c FDE cie=00000000 pc=0000000000000ee1..0000000000000f33
  DW_CFA_advance_loc: 1 to 0000000000000ee2
  DW_CFA_def_cfa_offset: 16
  DW_CFA_offset: r6 (rbp) at cfa-16
  DW_CFA_advance_loc: 3 to 0000000000000ee5
  DW_CFA_def_cfa_register: r6 (rbp)
  DW_CFA_advance_loc1: 77 to 0000000000000f32
  DW_CFA_def_cfa: r7 (rsp) ofs 8
  DW_CFA_nop
  DW_CFA_nop

000001b8 000000000000001c 000001bc FDE cie=00000000 pc=0000000000000f33..0000000000000f6c
  DW_CFA_advance_loc: 1 to 0000000000000f34
  DW_CFA_def_cfa_offset: 16
  DW_CFA_offset: r6 (rbp) at cfa-16
  DW_CFA_advance_loc: 3 to 0000000000000f37
  DW_CFA_def_cfa_register: r6 (rbp)
  DW_CFA_advance_loc: 52 to 0000000000000f6b
  DW_CFA_def_cfa: r7 (rsp) ofs 8
  DW_CFA_nop
  DW_CFA_nop
  DW_CFA_nop

000001d8 000000000000001c 000001dc FDE cie=00000000 pc=0000000000000f6c..0000000000000fa5
  DW_CFA_advance_loc: 1 to 0000000000000f6d
  DW_CFA_def_cfa_offset: 16
  DW_CFA_offset: r6 (rbp) at cfa-16
  DW_CFA_advance_loc: 3 to 0000000000000f70
  DW_CFA_def_cfa_register: r6 (rbp)
  DW_CFA_advance_loc: 52 to 0000000000000fa4
  DW_CFA_def_cfa: r7 (rsp) ofs 8
  DW_CFA_nop
  DW_CFA_nop
  DW_CFA_nop

000001f8 000000000000001c 000001fc FDE cie=00000000 pc=0000000000000fa5..0000000000000fe3
  DW_CFA_advance_loc: 1 to 0000000000000fa6
  DW_CFA_def_cfa_offset: 16
  DW_CFA_offset: r6 (rbp) at cfa-16
  DW_CFA_advance_loc: 3 to 0000000000000fa9
  DW_CFA_def_cfa_register: r6 (rbp)
  DW_CFA_advance_loc: 57 to 0000000000000fe2
  DW_CFA_def_cfa: r7 (rsp) ofs 8
  DW_CFA_nop
  DW_CFA_nop
  DW_CFA_nop

00000218 000000000000001c 0000021c FDE cie=00000000 pc=0000000000000fe3..0000000000001221
  DW_CFA_advance_loc: 1 to 0000000000000fe4
  DW_CFA_def_cfa_offset: 16
  DW_CFA_offset: r6 (rbp) at cfa-16
  DW_CFA_advance_loc: 3 to 0000000000000fe7
  DW_CFA_def_cfa_register: r6 (rbp)
  DW_CFA_advance_loc2: 569 to 0000000000001220
  DW_CFA_def_cfa: r7 (rsp) ofs 8
  DW_CFA_nop

00000238 000000000000001c 0000023c FDE cie=00000000 pc=0000000000001221..00000000000015df
  DW_CFA_advance_loc: 1 to 0000000000001222
  DW_CFA_def_cfa_offset: 16
  DW_CFA_offset: r6 (rbp) at cfa-16
  DW_CFA_advance_loc: 3 to 0000000000001225
  DW_CFA_def_cfa_register: r6 (rbp)
  DW_CFA_advance_loc2: 953 to 00000000000015de
  DW_CFA_def_cfa: r7 (rsp) ofs 8
  DW_CFA_nop

00000258 000000000000001c 0000025c FDE cie=00000000 pc=00000000000015df..000000000000161d
  DW_CFA_advance_loc: 1 to 00000000000015e0
  DW_CFA_def_cfa_offset: 16
  DW_CFA_offset: r6 (rbp) at cfa-16
  DW_CFA_advance_loc: 3 to 00000000000015e3
  DW_CFA_def_cfa_register: r6 (rbp)
  DW_CFA_advance_loc: 57 to 000000000000161c
  DW_CFA_def_cfa: r7 (rsp) ofs 8
  DW_CFA_nop
  DW_CFA_nop
  DW_CFA_nop

00000278 0000000000000020 0000027c FDE cie=00000000 pc=000000000000161d..00000000000018f0
  DW_CFA_advance_loc: 1 to 000000000000161e
  DW_CFA_def_cfa_offset: 16
  DW_CFA_offset: r6 (rbp) at cfa-16
  DW_CFA_advance_loc: 3 to 0000000000001621
  DW_CFA_def_cfa_register: r6 (rbp)
  DW_CFA_advance_loc: 8 to 0000000000001629
  DW_CFA_offset: r3 (rbx) at cfa-24
  DW_CFA_advance_loc2: 710 to 00000000000018ef
  DW_CFA_def_cfa: r7 (rsp) ofs 8
  DW_CFA_nop
  DW_CFA_nop

0000029c 0000000000000020 000002a0 FDE cie=00000000 pc=00000000000018f0..0000000000001b48
  DW_CFA_advance_loc: 1 to 00000000000018f1
  DW_CFA_def_cfa_offset: 16
  DW_CFA_offset: r6 (rbp) at cfa-16
  DW_CFA_advance_loc: 3 to 00000000000018f4
  DW_CFA_def_cfa_register: r6 (rbp)
  DW_CFA_advance_loc: 5 to 00000000000018f9
  DW_CFA_offset: r3 (rbx) at cfa-24
  DW_CFA_advance_loc2: 590 to 0000000000001b47
  DW_CFA_def_cfa: r7 (rsp) ofs 8
  DW_CFA_nop
  DW_CFA_nop

000002c0 000000000000001c 000002c4 FDE cie=00000000 pc=0000000000001b48..0000000000001cd7
  DW_CFA_advance_loc: 1 to 0000000000001b49
  DW_CFA_def_cfa_offset: 16
  DW_CFA_offset: r6 (rbp) at cfa-16
  DW_CFA_advance_loc: 3 to 0000000000001b4c
  DW_CFA_def_cfa_register: r6 (rbp)
  DW_CFA_advance_loc2: 394 to 0000000000001cd6
  DW_CFA_def_cfa: r7 (rsp) ofs 8
  DW_CFA_nop

000002e0 000000000000001c 000002e4 FDE cie=00000000 pc=0000000000001cd7..0000000000001e76
  DW_CFA_advance_loc: 1 to 0000000000001cd8
  DW_CFA_def_cfa_offset: 16
  DW_CFA_offset: r6 (rbp) at cfa-16
  DW_CFA_advance_loc: 3 to 0000000000001cdb
  DW_CFA_def_cfa_register: r6 (rbp)
  DW_CFA_advance_loc2: 410 to 0000000000001e75
  DW_CFA_def_cfa: r7 (rsp) ofs 8
  DW_CFA_nop

00000300 000000000000001c 00000304 FDE cie=00000000 pc=0000000000001e76..0000000000002038
  DW_CFA_advance_loc: 1 to 0000000000001e77
  DW_CFA_def_cfa_offset: 16
  DW_CFA_offset: r6 (rbp) at cfa-16
  DW_CFA_advance_loc: 3 to 0000000000001e7a
  DW_CFA_def_cfa_register: r6 (rbp)
  DW_CFA_advance_loc2: 445 to 0000000000002037
  DW_CFA_def_cfa: r7 (rsp) ofs 8
  DW_CFA_nop

00000320 000000000000001c 00000324 FDE cie=00000000 pc=0000000000002038..0000000000002043
  DW_CFA_advance_loc: 1 to 0000000000002039
  DW_CFA_def_cfa_offset: 16
  DW_CFA_offset: r6 (rbp) at cfa-16
  DW_CFA_advance_loc: 3 to 000000000000203c
  DW_CFA_def_cfa_register: r6 (rbp)
  DW_CFA_advance_loc: 6 to 0000000000002042
  DW_CFA_def_cfa: r7 (rsp) ofs 8
  DW_CFA_nop
  DW_CFA_nop
  DW_CFA_nop

00000340 000000000000001c 00000344 FDE cie=00000000 pc=0000000000002043..000000000000209a
  DW_CFA_advance_loc: 1 to 0000000000002044
  DW_CFA_def_cfa_offset: 16
  DW_CFA_offset: r6 (rbp) at cfa-16
  DW_CFA_advance_loc: 3 to 0000000000002047
  DW_CFA_def_cfa_register: r6 (rbp)
  DW_CFA_advance_loc1: 82 to 0000000000002099
  DW_CFA_def_cfa: r7 (rsp) ofs 8
  DW_CFA_nop
  DW_CFA_nop

00000360 000000000000001c 00000364 FDE cie=00000000 pc=000000000000209a..00000000000021a2
  DW_CFA_advance_loc: 1 to 000000000000209b
  DW_CFA_def_cfa_offset: 16
  DW_CFA_offset: r6 (rbp) at cfa-16
  DW_CFA_advance_loc: 3 to 000000000000209e
  DW_CFA_def_cfa_register: r6 (rbp)
  DW_CFA_advance_loc2: 259 to 00000000000021a1
  DW_CFA_def_cfa: r7 (rsp) ofs 8
  DW_CFA_nop

00000380 000000000000001c 00000384 FDE cie=00000000 pc=00000000000021a2..0000000000002273
  DW_CFA_advance_loc: 1 to 00000000000021a3
  DW_CFA_def_cfa_offset: 16
  DW_CFA_offset: r6 (rbp) at cfa-16
  DW_CFA_advance_loc: 3 to 00000000000021a6
  DW_CFA_def_cfa_register: r6 (rbp)
  DW_CFA_advance_loc1: 204 to 0000000000002272
  DW_CFA_def_cfa: r7 (rsp) ofs 8
  DW_CFA_nop
  DW_CFA_nop

000003a0 000000000000001c 000003a4 FDE cie=00000000 pc=0000000000002273..000000000000262b
  DW_CFA_advance_loc: 1 to 0000000000002274
  DW_CFA_def_cfa_offset: 16
  DW_CFA_offset: r6 (rbp) at cfa-16
  DW_CFA_advance_loc: 3 to 0000000000002277
  DW_CFA_def_cfa_register: r6 (rbp)
  DW_CFA_advance_loc2: 947 to 000000000000262a
  DW_CFA_def_cfa: r7 (rsp) ofs 8
  DW_CFA_nop

000003c0 000000000000001c 000003c4 FDE cie=00000000 pc=000000000000262b..00000000000026d5
  DW_CFA_advance_loc: 1 to 000000000000262c
  DW_CFA_def_cfa_offset: 16
  DW_CFA_offset: r6 (rbp) at cfa-16
  DW_CFA_advance_loc: 3 to 000000000000262f
  DW_CFA_def_cfa_register: r6 (rbp)
  DW_CFA_advance_loc1: 165 to 00000000000026d4
  DW_CFA_def_cfa: r7 (rsp) ofs 8
  DW_CFA_nop
  DW_CFA_nop

000003e0 000000000000001c 000003e4 FDE cie=00000000 pc=00000000000026d5..00000000000027e3
  DW_CFA_advance_loc: 1 to 00000000000026d6
  DW_CFA_def_cfa_offset: 16
  DW_CFA_offset: r6 (rbp) at cfa-16
  DW_CFA_advance_loc: 3 to 00000000000026d9
  DW_CFA_def_cfa_register: r6 (rbp)
  DW_CFA_advance_loc2: 265 to 00000000000027e2
  DW_CFA_def_cfa: r7 (rsp) ofs 8
  DW_CFA_nop

